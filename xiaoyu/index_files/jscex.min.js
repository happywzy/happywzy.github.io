(function(){var b={DEBUG:1,INFO:2,WARN:3,ERROR:4},d=function(){this.level=b.WARN};d.prototype={log:function(a){try{console.log(a)}catch(b){}},debug:function(a){this.level&lt;=b.DEBUG&amp;&amp;this.log(a)},info:function(a){this.level&lt;=b.INFO&amp;&amp;this.log(a)},warn:function(a){this.level&lt;=b.WARN&amp;&amp;this.log(a)},error:function(a){this.level&lt;=b.ERROR&amp;&amp;this.log(a)}};var e=function(a){var b=[],c;for(c in a)b.push(c);return b},c=function(a){a._forInKeys=e;a.Logging={Logger:d,Level:b};a.logger=new d;a.modules={};a.binders=
{};a.builders={}},f=typeof define==="function"&amp;&amp;!define.amd,g=typeof require==="function"&amp;&amp;typeof define==="function"&amp;&amp;define.amd;typeof require==="function"&amp;&amp;typeof module!=="undefined"&amp;&amp;module.exports?c(module.exports):f?define("jscex",function(a,b,d){c(d.exports)}):g?define("jscex",function(){var a={};c(a);return a}):(typeof Jscex=="undefined"&amp;&amp;(Jscex={}),c(Jscex))})();
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>