<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CRD资源删不掉</title>
    <url>/crd-zi-yuan-shan-bu-diao/</url>
    <content><![CDATA[<pre class="line-numbers language-bash"><code class="language-bash">kubectl patch crd/此处写CRD的名字 -p <span class="token string">'{"metadata":{"finalizers":[]}}'</span> --type<span class="token operator">=</span>merge
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>B树、平衡二叉树、B+树</title>
    <url>/b-shu-ping-heng-er-cha-shu-b-shu/</url>
    <content><![CDATA[<h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><ul>
<li><a href="https://mp.weixin.qq.com/s/K_oGI2rl3epTirxkST5LVQ">3 分钟理解完全二叉树、平衡二叉树、二叉查找树</a></li>
</ul>
<h3 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h3><ul>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&amp;mid=2653190965&amp;idx=1&amp;sn=53f78fa037386f85531832cd5322d2a0&amp;chksm=8c9909efbbee80f90512f0c36356c31cc74c388c46388dc2317d43c8f8597298f233ca9c29e9&amp;scene=21#wechat_redirect">漫画：什么是B-树？</a></li>
</ul>
<h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3><ul>
<li><a href="https://mp.weixin.qq.com/s/jRZMMONW3QP43dsDKIV9VQ">漫画：什么是B+树？</a></li>
</ul>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ul>
<li><a href="https://juejin.im/entry/5b0cb64e518825157476b4a9">https://juejin.im/entry/5b0cb64e518825157476b4a9</a></li>
</ul>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>B树</tag>
        <tag>二叉树</tag>
        <tag>B+树</tag>
      </tags>
  </entry>
  <entry>
    <title>Dataway集成springboot在线开发restful接口</title>
    <url>/dataway-ji-cheng-springboot-zai-xian-kai-fa-restful-jie-kou/</url>
    <content><![CDATA[<h3 id="创建一个spring-boot-web基本项目"><a href="#创建一个spring-boot-web基本项目" class="headerlink" title="创建一个spring boot web基本项目"></a>创建一个spring boot web基本项目</h3><h3 id="引入dataway相关依赖"><a href="#引入dataway相关依赖" class="headerlink" title="引入dataway相关依赖"></a>引入dataway相关依赖</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- hasor-spring 负责 Spring 和 Hasor 框架之间的整合。 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.hasor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hasor-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- hasor-dataway 是工作在 Hasor 之上，利用 hasor-spring 我们就可以使用 dataway了。 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.hasor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hasor-dataway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.3-fix20200414<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 4.1.3 包存在UI资源缺失问题 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- 数据库相关依赖 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="mysql数据库中创建表"><a href="#mysql数据库中创建表" class="headerlink" title="mysql数据库中创建表"></a>mysql数据库中创建表</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>interface_info<span class="token punctuation">`</span> <span class="token punctuation">(</span>
    <span class="token punctuation">`</span>api_id<span class="token punctuation">`</span>          <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>      <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span>   <span class="token keyword">COMMENT</span> <span class="token string">'ID'</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>api_method<span class="token punctuation">`</span>      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span>                  <span class="token keyword">COMMENT</span> <span class="token string">'HttpMethod：GET、PUT、POST'</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>api_path<span class="token punctuation">`</span>        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>                  <span class="token keyword">COMMENT</span> <span class="token string">'拦截路径'</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>api_status<span class="token punctuation">`</span>      <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>       <span class="token operator">NOT</span> <span class="token boolean">NULL</span>                  <span class="token keyword">COMMENT</span> <span class="token string">'状态：0草稿，1发布，2有变更，3禁用'</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>api_comment<span class="token punctuation">`</span>     <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>     <span class="token boolean">NULL</span>                  <span class="token keyword">COMMENT</span> <span class="token string">'注释'</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>api_type<span class="token punctuation">`</span>        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span>                  <span class="token keyword">COMMENT</span> <span class="token string">'脚本类型：SQL、DataQL'</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>api_script<span class="token punctuation">`</span>      <span class="token keyword">mediumtext</span>   <span class="token operator">NOT</span> <span class="token boolean">NULL</span>                  <span class="token keyword">COMMENT</span> <span class="token string">'查询脚本：xxxxxxx'</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>api_schema<span class="token punctuation">`</span>      <span class="token keyword">mediumtext</span>       <span class="token boolean">NULL</span>                  <span class="token keyword">COMMENT</span> <span class="token string">'接口的请求/响应数据结构'</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>api_sample<span class="token punctuation">`</span>      <span class="token keyword">mediumtext</span>       <span class="token boolean">NULL</span>                  <span class="token keyword">COMMENT</span> <span class="token string">'请求/响应/请求头样本数据'</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>api_create_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span>     <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>api_gmt_time<span class="token punctuation">`</span>    <span class="token keyword">datetime</span>     <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'修改时间'</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>api_id<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'Dataway 中的API'</span><span class="token punctuation">;</span>

<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>interface_release<span class="token punctuation">`</span> <span class="token punctuation">(</span>
    <span class="token punctuation">`</span>pub_id<span class="token punctuation">`</span>          <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>      <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span>   <span class="token keyword">COMMENT</span> <span class="token string">'Publish ID'</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>pub_api_id<span class="token punctuation">`</span>      <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>      <span class="token operator">NOT</span> <span class="token boolean">NULL</span>                  <span class="token keyword">COMMENT</span> <span class="token string">'所属API ID'</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>pub_method<span class="token punctuation">`</span>      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span>                  <span class="token keyword">COMMENT</span> <span class="token string">'HttpMethod：GET、PUT、POST'</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>pub_path<span class="token punctuation">`</span>        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>                  <span class="token keyword">COMMENT</span> <span class="token string">'拦截路径'</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>pub_status<span class="token punctuation">`</span>      <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>       <span class="token operator">NOT</span> <span class="token boolean">NULL</span>                  <span class="token keyword">COMMENT</span> <span class="token string">'状态：0有效，1无效（可能被下线）'</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>pub_type<span class="token punctuation">`</span>        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span>                  <span class="token keyword">COMMENT</span> <span class="token string">'脚本类型：SQL、DataQL'</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>pub_script<span class="token punctuation">`</span>      <span class="token keyword">mediumtext</span>   <span class="token operator">NOT</span> <span class="token boolean">NULL</span>                  <span class="token keyword">COMMENT</span> <span class="token string">'查询脚本：xxxxxxx'</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>pub_script_ori<span class="token punctuation">`</span>  <span class="token keyword">mediumtext</span>   <span class="token operator">NOT</span> <span class="token boolean">NULL</span>                  <span class="token keyword">COMMENT</span> <span class="token string">'原始查询脚本，仅当类型为SQL时不同'</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>pub_schema<span class="token punctuation">`</span>      <span class="token keyword">mediumtext</span>       <span class="token boolean">NULL</span>                  <span class="token keyword">COMMENT</span> <span class="token string">'接口的请求/响应数据结构'</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>pub_sample<span class="token punctuation">`</span>      <span class="token keyword">mediumtext</span>       <span class="token boolean">NULL</span>                  <span class="token keyword">COMMENT</span> <span class="token string">'请求/响应/请求头样本数据'</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>pub_release_time<span class="token punctuation">`</span><span class="token keyword">datetime</span>     <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'发布时间（下线不更新）'</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>pub_id<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'Dataway API 发布历史。'</span><span class="token punctuation">;</span>

<span class="token keyword">create</span> <span class="token keyword">index</span> idx_interface_release <span class="token keyword">on</span> interface_release <span class="token punctuation">(</span>pub_api_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="在application-properties中配置hasor-dataway和数据源"><a href="#在application-properties中配置hasor-dataway和数据源" class="headerlink" title="在application.properties中配置hasor-dataway和数据源"></a>在<code>application.properties</code>中配置<code>hasor-dataway</code>和数据源</h3><pre class="line-numbers language-sh"><code class="language-sh"># 是否启用 Dataway 功能（必选：默认false）
HASOR_DATAQL_DATAWAY=true
# 是否开启 Dataway 后台管理界面（必选：默认false）
HASOR_DATAQL_DATAWAY_ADMIN=true
# dataway  API工作路径（可选，默认：/api/）
HASOR_DATAQL_DATAWAY_API_URL=/api/
# dataway-ui 的工作路径（可选，默认：/interface-ui/）
HASOR_DATAQL_DATAWAY_UI_URL=/ui/
# SQL执行器方言设置（可选，建议设置）
HASOR_DATAQL_FX_PAGE_DIALECT=mysql

# db
spring.datasource.url=jdbc:mysql://192.168.41.128:3306/compare?useUnicode=true&characterEncoding=utf8&useSSL=false
spring.datasource.username=root
spring.datasource.password=123456
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.type:com.alibaba.druid.pool.DruidDataSource
# druid
spring.datasource.druid.initial-size=3
spring.datasource.druid.min-idle=3
spring.datasource.druid.max-active=10
spring.datasource.druid.max-wait=60000
spring.datasource.druid.stat-view-servlet.login-username=admin
spring.datasource.druid.stat-view-servlet.login-password=admin
spring.datasource.druid.filter.stat.log-slow-sql=true
spring.datasource.druid.filter.stat.slow-sql-millis=1
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="把数据源设置到-Hasor-容器中"><a href="#把数据源设置到-Hasor-容器中" class="headerlink" title="把数据源设置到 Hasor 容器中"></a>把数据源设置到 Hasor 容器中</h3><p>首先新建一个 Hasor 的 模块，并且将其交给 Spring 管理。然后把数据源通过 Spring 注入进来。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@DimModule</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleModule</span>  <span class="token keyword">implements</span> <span class="token class-name">SpringModule</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> DataSource dataSource <span class="token operator">=</span> null<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadModule</span><span class="token punctuation">(</span>ApiBinder apiBinder<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// .DataSource form Spring boot into Hasor</span>
        apiBinder<span class="token punctuation">.</span><span class="token function">installModule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JdbcModule</span><span class="token punctuation">(</span>Level<span class="token punctuation">.</span>Full<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Hasor 启动的时候会调用 loadModule 方法，在这里再把 DataSource 设置到 Hasor 中。</p>
<h3 id="在SprintBoot-中启用-Hasor"><a href="#在SprintBoot-中启用-Hasor" class="headerlink" title="在SprintBoot 中启用 Hasor"></a>在SprintBoot 中启用 Hasor</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableHasor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EnableHasorWeb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>scanBasePackages <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"com.deri.dataway.component"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatawayApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>DatawayApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="启动应用"><a href="#启动应用" class="headerlink" title="启动应用"></a>启动应用</h3><p>相关日志</p>
<pre class="line-numbers language-log"><code class="language-log"> _    _                        ____              _
| |  | |                      |  _ \            | |
| |__| | __ _ ___  ___  _ __  | |_) | ___   ___ | |_
|  __  |/ _` / __|/ _ \| '__| |  _ < / _ \ / _ \| __|
| |  | | (_| \__ \ (_) | |    | |_) | (_) | (_) | |_
|_|  |_|\__,_|___/\___/|_|    |____/ \___/ \___/ \__|
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-log"><code class="language-log">2020-04-29 09:29:11.899  INFO 43336 --- [           main] net.hasor.dataway.config.DatawayModule   : dataway api workAt /api/
2020-04-29 09:29:11.899  INFO 43336 --- [           main] n.h.c.environment.AbstractEnvironment    : var -> HASOR_DATAQL_DATAWAY_API_URL = /api/.
2020-04-29 09:29:11.903  INFO 43336 --- [           main] net.hasor.dataway.config.DatawayModule   : dataway admin workAt /ui/
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="访问接口管理页面进行在线接口开发"><a href="#访问接口管理页面进行在线接口开发" class="headerlink" title="访问接口管理页面进行在线接口开发"></a>访问接口管理页面进行在线接口开发</h3><ul>
<li><code>http://localhost:8080/ui/</code><blockquote>
<p>注意：地址最后的<code>/</code>不能不写.</p>
</blockquote>
</li>
</ul>
<h3 id="DataQL"><a href="#DataQL" class="headerlink" title="DataQL"></a>DataQL</h3><p>新建一个restful接口，其中<code>var query = @@sql()&lt;% ... %&gt;</code>是用来定义<code>SQL</code>外部代码块，并将这个定义存入 <code>query</code>变量名中。<code>&lt;% %&gt;</code> 中间的就是<code>SQL</code>语句。</p>
<pre class="line-numbers language-sql"><code class="language-sql">var query <span class="token operator">=</span> @<span class="token variable">@sql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">%</span>
    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> interface_info
<span class="token operator">%</span><span class="token operator">></span>
<span class="token keyword">return</span> query<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行测试没有问题，就可以保存-发布了.</p>
<blockquote>
<p>方便测试，请求方式可以写<code>GET</code>，<code>/api/</code>后面写上接口的路径.如<code>/api/test</code></p>
</blockquote>
<p>发布成功后，就可以访问刚刚发布的接口了<br><code>http://localhost:8080/api/test</code>.</p>
<p>结果示例：</p>
<pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"success"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"OK"</span><span class="token punctuation">,</span>
  <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token property">"lifeCycleTime"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token property">"executionTime"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token property">"value"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    <span class="token property">"task_id"</span><span class="token operator">:</span> <span class="token string">"m-20200904-3"</span><span class="token punctuation">,</span>
    <span class="token property">"task_type"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token property">"task_data_type"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
    <span class="token property">"start_time"</span><span class="token operator">:</span> <span class="token number">1586491785000</span><span class="token punctuation">,</span>
    <span class="token property">"end_time"</span><span class="token operator">:</span> <span class="token number">1586491785000</span><span class="token punctuation">,</span>
    <span class="token property">"task_result"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">"remark"</span><span class="token operator">:</span> <span class="token string">"存在不一样"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzIwMTY0NDU3Nw==&amp;mid=2651942058&amp;idx=1&amp;sn=a92439d6bd966f4f0d7c35474789c033&amp;chksm=8d0f03e4ba788af200fdfaf759f0b0576828a6b93d1c49baf363d50848d0adba82e209e9ef4d&amp;scene=126&amp;sessionid=1588065339&amp;key=adf3334aef273b731f98a9ed5e4e29f2acaae3964a7a6a111ce90e47d0a63a9e5d9c61b510d7e947bb064a982eb2784fc777cecd75258a7515a3b4188b46ddfb3115ba6f05b7a1de42c4b56f0953949e&amp;ascene=1&amp;uin=MjI2NzI5NTQ4MQ==&amp;devicetype=Windows+10+x64&amp;version=62090070&amp;lang=zh_CN&amp;exportkey=Ae8OdkEZFh3ST3QYp1brGd8=&amp;pass_ticket=fYzu4Or+WtaHwY7xWJJCcIY0FS+/w/pjuohZY460VCqP32cvtxR3LUyWKVF50HCF">绝了！Dataway让SpringBoot不在需要Controller、Service、DAO、Mapper了</a></li>
<li><a href="https://www.hasor.net/web/dataway/for_boot.html#">hasor官方文档</a></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
        <tag>dataway</tag>
      </tags>
  </entry>
  <entry>
    <title>DevOps与CI/CD</title>
    <url>/devops-yu-cicd/</url>
    <content><![CDATA[<h2 id="了解-DevOps"><a href="#了解-DevOps" class="headerlink" title="了解 DevOps"></a>了解 DevOps</h2><p>DevOps 是指对企业文化、业务自动化和平台设计等方面进行全方位变革，从而实现迅捷、优质的服务交付，提升企业响应能力和价值。只有通过快速迭代的 IT 服务交付，这一切才能实现。<code>DevOps</code>可以将传统应用和最新的云原生应用与基础架构彼此相连。</p>
<h2 id="DevOps简介"><a href="#DevOps简介" class="headerlink" title="DevOps简介"></a>DevOps简介</h2><p>DevOps 就是开发（Development）、测试（QA）、运维（Operations）这三个领域的合并。<br><img data-src="/images/DevOps.jpg" alt="DevOps"></p>
<p>从字面上来看，”DevOps”一词是由英文 <code>Development</code>（开发）和 <code>Operations</code> （运维）组合而成，但它所代表的理念和实践要比这广阔的多。DevOps 涵盖了安全、协作方式、数据分析等许多方面。</p>
<p>DevOps 强调通过一系列手段来实现既快又稳的工作流程，使每个想法（比如一个新的软件功能，一个功能增强请求或者一个 bug 修复）在从开发到生产环境部署的整个流程中，都能不断地为用户带来价值。这种方式需要开发团队和运维团队密切交流、高效协作并且彼此体谅。此外，DevOps 还要能够方便扩展，灵活部署。有了 DevOps，需求最迫切的工作就能通过自助服务和自动化得到解决；通常在标准开发环境编写代码的开发人员也可与 IT 运维人员紧密合作，加速软件的构建、测试和发布，同时保障开发成果的稳定可靠。</p>
<h2 id="容器与-DevOps-有什么关系？"><a href="#容器与-DevOps-有什么关系？" class="headerlink" title="容器与 DevOps 有什么关系？"></a>容器与 DevOps 有什么关系？</h2><p>DevOps 可以加快一个想法从提出到部署的整个过程。DevOps 的核心在于，在应用的整个生命周期中，都要确保日常<strong>运维任务自动化和环境的标准化</strong>。容器可以提供标准化的环境，你需要一个平台来管理它们，同时提供内置的自动化功能并支持各种基础架构。</p>
<h2 id="DevOps-与-CI-x2F-CD"><a href="#DevOps-与-CI-x2F-CD" class="headerlink" title="DevOps 与 CI/CD"></a>DevOps 与 CI/CD</h2><p>选择支持流程的工具对于 DevOps 的成功至关重要。运维团队要跟上快速开发周期，就需要利用高度灵活的平台，并像开发团队对待代码一样，对待平台的基础架构。手动部署不仅速度慢，而且可能出错。因此，您也可通过自动化来简化平台调配和部署。</p>
<p>持续集成和持续部署管道（CI/CD）是实施 DevOps 的一大重要成果。CI/CD 可帮助您频繁地向客户交付应用并检验软件质量，而且只需极少的人工干预。</p>
<p>具体而言，CI/CD 在整个应用生命周期内（从集成和测试阶段，到交付和部署）都引入了持续自动化和持续监控，让您能够快速识别和改正问题与缺陷。这些彼此关联的实践通常被统称为“CI/CD 管道”，需要开发和运维团队以敏捷方式协同支持。</p>
<h2 id="CICD简介"><a href="#CICD简介" class="headerlink" title="CICD简介"></a>CICD简介</h2><ul>
<li>持续集成（Continuous Integration ，CI）</li>
<li>持续交付（Continuous Delivery）</li>
<li>持续部署（Continuous Deploy）</li>
</ul>
<p>参考<a href="https://www.jianshu.com/p/654505d42180">链接</a></p>
<h2 id="云原生CICD实现"><a href="#云原生CICD实现" class="headerlink" title="云原生CICD实现"></a>云原生CICD实现</h2><p><img data-src="/images/CICD.jpg" alt="CICD"><br>流程：</p>
<ol>
<li>用户本地完成开发；</li>
<li>代码提交到<code>GitLab</code>上；</li>
<li>Gitlab收到代码提交请求后通过webhook触发Jenkins;</li>
<li><code>Jenkins</code>被触发后，首先从代码仓库拉取源码，进行构建、静态分析和单元测试，然后创建镜像推送到镜像仓库<code>Harbor</code>，最后调用<code>Kubernetes API</code>更新应用；</li>
<li>Kubernetes从Harbor拉取最新镜像，更新应用。</li>
</ol>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>CI/CD</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch-kibana部署</title>
    <url>/elasticsearch-kibana-bu-shu/</url>
    <content><![CDATA[<pre class="line-numbers language-bash"><code class="language-bash">docker run -d --name kibana -p 5601:5601 \
-e ELASTICSEARCH_HOSTS<span class="token operator">=</span><span class="token string">'["http://192.168.3.17:9200","http://192.168.3.19:9200","http://192.168.3.20:9200"]'</span> \
kibana:7.5.2
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
        <tag>kibana</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch中文分词器</title>
    <url>/elasticsearch-zhong-wen-fen-ci-qi/</url>
    <content><![CDATA[<h3 id="在线安装"><a href="#在线安装" class="headerlink" title="在线安装"></a>在线安装</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># v6.3.0版本改成es对应的版本</span>
./bin/elasticsearch-plugin <span class="token function">install</span> https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.5.2/elasticsearch-analysis-ik-7.5.2.zip
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="离线安装"><a href="#离线安装" class="headerlink" title="离线安装"></a>离线安装</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> your-es-root/plugins/ <span class="token operator">&amp;&amp;</span> <span class="token function">mkdir</span> ik
<span class="token comment" spellcheck="true"># 解压到目录</span>
your-es-root/plugins/ik
<span class="token comment" spellcheck="true"># docker安装的可以本地解压后拷贝到容器</span>
docker <span class="token function">cp</span> ik/ es:/usr/share/elasticsearch/plugins/
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>所有ES节点都需要安装!</p>
</blockquote>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>Kibana打开Dev Tools:</p>
<ul>
<li>测试分词</li>
</ul>
<pre class="line-numbers language-json"><code class="language-json">// ik_max_word<span class="token operator">:</span> 会将文本做最细粒度的拆分
GET _analyze
<span class="token punctuation">{</span>
  <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"中国早日收复台湾"</span><span class="token punctuation">,</span><span class="token property">"tokenizer"</span><span class="token operator">:</span> <span class="token string">"ik_max_word"</span>
<span class="token punctuation">}</span>
// ik_smart<span class="token operator">:</span> 会做最粗粒度的拆分
GET _analyze
<span class="token punctuation">{</span>
  <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"中国早日收复台湾"</span><span class="token punctuation">,</span><span class="token property">"tokenizer"</span><span class="token operator">:</span> <span class="token string">"ik_smart"</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>读写数据</li>
</ul>
<pre class="line-numbers language-json"><code class="language-json">// 新建index
PUT /index
// 新建type<span class="token punctuation">,</span>如果ik分词器没有安装成功会报错
POST index/_mapping
<span class="token punctuation">{</span>
  <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"content"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>
          <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"ik_max_word"</span><span class="token punctuation">,</span>
          <span class="token property">"search_analyzer"</span><span class="token operator">:</span> <span class="token string">"ik_smart"</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
// 写入数据<span class="token number">1</span>
POST index/_create/<span class="token number">1</span>
<span class="token punctuation">{</span>
  <span class="token property">"content"</span><span class="token operator">:</span><span class="token string">"美国留给伊拉克的是个烂摊子吗"</span>
<span class="token punctuation">}</span>
// 写入数据<span class="token number">2</span>
POST index/_create/<span class="token number">2</span>
<span class="token punctuation">{</span>
  <span class="token property">"content"</span><span class="token operator">:</span><span class="token string">"中韩渔警冲突调查：韩警平均每天扣1艘中国渔船"</span>
<span class="token punctuation">}</span>
// 写入数据<span class="token number">3</span>
POST index/_create/<span class="token number">3</span>
<span class="token punctuation">{</span>
  <span class="token property">"content"</span><span class="token operator">:</span><span class="token string">"公安部：各地校车将享最高路权"</span>
<span class="token punctuation">}</span>
// 写入数据<span class="token number">4</span>
POST index/_create/<span class="token number">4</span>
<span class="token punctuation">{</span>
  <span class="token property">"content"</span><span class="token operator">:</span><span class="token string">"中国驻洛杉矶领事馆遭亚裔男子枪击 嫌犯已自首"</span>
<span class="token punctuation">}</span>
// 查询
POST index/_search
<span class="token punctuation">{</span>
  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"content"</span><span class="token operator">:</span> <span class="token string">"中国"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="elasticsearch-analysis-ik"><a href="#elasticsearch-analysis-ik" class="headerlink" title="elasticsearch-analysis-ik"></a><a href="https://github.com/medcl/elasticsearch-analysis-ik">elasticsearch-analysis-ik</a></h3>]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch单机版部署</title>
    <url>/elasticsearch-dan-ji-ban-bu-shu/</url>
    <content><![CDATA[<pre class="line-numbers language-bash"><code class="language-bash">docker run -p 9200:9200 -p 9300:9300 -e <span class="token string">"discovery.type=single-node"</span> docker.elastic.co/elasticsearch/elasticsearch:7.5.2
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch安全验证</title>
    <url>/elasticsearch-an-quan-yan-zheng/</url>
    <content><![CDATA[<h3 id="1-创建证书"><a href="#1-创建证书" class="headerlink" title="1.创建证书"></a>1.创建证书</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动一个单机的es</span>
<span class="token comment" spellcheck="true"># 进入容器执行下面命令</span>
bin/elasticsearch-certutil cert -out config/elastic-certificates.p12 -pass <span class="token string">""</span>
<span class="token comment" spellcheck="true"># 证书拷出容器</span>
docker <span class="token function">cp</span> es:/usr/share/elasticsearch/config/elastic-certificates.p12 <span class="token keyword">.</span>
<span class="token comment" spellcheck="true"># 将证书拷贝到各个节点</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-各个节点准备es配置文件"><a href="#2-各个节点准备es配置文件" class="headerlink" title="2.各个节点准备es配置文件"></a>2.各个节点准备es配置文件</h3><pre class="line-numbers language-yml"><code class="language-yml"># 集群名称保持一致
cluster.name: elasticsearch-cluster
# 集群内唯一
node.name: es-node1
network.bind_host: 0.0.0.0
# 本节点IP
network.publish_host: 192.168.3.17
http.port: 9200
transport.tcp.port: 9300
http.cors.enabled: true
http.cors.allow-origin: "*"
node.master: true
node.data: true
# 这些节点争抢master
cluster.initial_master_nodes: 192.168.3.17,192.168.3.19,192.168.3.20
discovery.seed_hosts: 192.168.3.19,192.168.3.20
# 安全验证相关的
xpack.security.enabled: true
xpack.security.transport.ssl.enabled: true
xpack.security.transport.ssl.verification_mode: certificate
xpack.security.transport.ssl.keystore.path: /usr/share/elasticsearch/config/elastic-certificates.p12
xpack.security.transport.ssl.truststore.path: /usr/share/elasticsearch/config/elastic-certificates.p12
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="3-准备data目录"><a href="#3-准备data目录" class="headerlink" title="3.准备data目录"></a>3.准备data目录</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 用于保存es数据,需要是777权限</span>
<span class="token function">mkdir</span> data
<span class="token function">chmod</span> 777 -R data/
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="4-启动"><a href="#4-启动" class="headerlink" title="4.启动"></a>4.启动</h3><pre class="line-numbers language-bash"><code class="language-bash">docker run -d --name es --net host \
-v /root/es/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \
-v /root/es/elastic-certificates.p12:/usr/share/elasticsearch/config/elastic-certificates.p12 \
-v /root/es/data:/usr/share/elasticsearch/data \
elasticsearch:7.5.2
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="5-创建用户"><a href="#5-创建用户" class="headerlink" title="5.创建用户"></a>5.创建用户</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 登录一台es容器内</span>
<span class="token comment" spellcheck="true"># 自动生成好默认用户和密码</span>
bin/elasticsearch-setup-passwords auto
<span class="token comment" spellcheck="true"># 手动输入密码</span>
<span class="token punctuation">[</span>root@data1 bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># elasticsearch-setup-passwords interactive</span>
Initiating the setup of passwords <span class="token keyword">for</span> reserved <span class="token function">users</span> elastic,apm_system,kibana,logstash_system,beats_system,remote_monitoring_user.
You will be prompted to enter passwords as the process progresses.
Please confirm that you would like to <span class="token keyword">continue</span> <span class="token punctuation">[</span>y/N<span class="token punctuation">]</span>y
Enter password <span class="token keyword">for</span> <span class="token punctuation">[</span>elastic<span class="token punctuation">]</span>: 
Reenter password <span class="token keyword">for</span> <span class="token punctuation">[</span>elastic<span class="token punctuation">]</span>: 
Enter password <span class="token keyword">for</span> <span class="token punctuation">[</span>apm_system<span class="token punctuation">]</span>: 
Reenter password <span class="token keyword">for</span> <span class="token punctuation">[</span>apm_system<span class="token punctuation">]</span>: 
Enter password <span class="token keyword">for</span> <span class="token punctuation">[</span>kibana<span class="token punctuation">]</span>: 
Reenter password <span class="token keyword">for</span> <span class="token punctuation">[</span>kibana<span class="token punctuation">]</span>: 
Enter password <span class="token keyword">for</span> <span class="token punctuation">[</span>logstash_system<span class="token punctuation">]</span>: 
Reenter password <span class="token keyword">for</span> <span class="token punctuation">[</span>logstash_system<span class="token punctuation">]</span>: 
Enter password <span class="token keyword">for</span> <span class="token punctuation">[</span>beats_system<span class="token punctuation">]</span>: 
Reenter password <span class="token keyword">for</span> <span class="token punctuation">[</span>beats_system<span class="token punctuation">]</span>: 
Enter password <span class="token keyword">for</span> <span class="token punctuation">[</span>remote_monitoring_user<span class="token punctuation">]</span>: 
Reenter password <span class="token keyword">for</span> <span class="token punctuation">[</span>remote_monitoring_user<span class="token punctuation">]</span>: 
Changed password <span class="token keyword">for</span> user <span class="token punctuation">[</span>apm_system<span class="token punctuation">]</span>
Changed password <span class="token keyword">for</span> user <span class="token punctuation">[</span>kibana<span class="token punctuation">]</span>
Changed password <span class="token keyword">for</span> user <span class="token punctuation">[</span>logstash_system<span class="token punctuation">]</span>
Changed password <span class="token keyword">for</span> user <span class="token punctuation">[</span>beats_system<span class="token punctuation">]</span>
Changed password <span class="token keyword">for</span> user <span class="token punctuation">[</span>remote_monitoring_user<span class="token punctuation">]</span>
Changed password <span class="token keyword">for</span> user <span class="token punctuation">[</span>elastic<span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="6-验证"><a href="#6-验证" class="headerlink" title="6.验证"></a>6.验证</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 用户密码都是elastic</span>
curl --user elastic:elastic <span class="token string">'localhost:9200/_cluster/health?pretty'</span>
curl -X GET --user elastic:elastic  <span class="token string">"localhost:9200/_cat/nodes?v&amp;pretty"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p><code>curl</code>中加入安全验证可以使用<code>--user elastic:elastic</code>,如果是postman、yapi等工具中想要加上验证需要先将<code>elastic:elastic</code>进行<code>base64</code>加密:<code>ZWxhc3RpYzplbGFzdGlj</code>,<br>构造一个字符串形如:<code>Basic ZWxhc3RpYzplbGFzdGlj</code>,然后添加到<code>header</code>中<code>Authorization</code>作为键,该字符串为值.</p>
</blockquote>
<h3 id="安装kibana"><a href="#安装kibana" class="headerlink" title="安装kibana"></a>安装kibana</h3><ul>
<li>kibana配置</li>
</ul>
<pre class="line-numbers language-yml"><code class="language-yml">server.name: kibana
server.host: "0"
elasticsearch.hosts: ["http://192.168.3.17:9200","http://192.168.3.19:9200","http://192.168.3.20:9200"]
xpack.monitoring.ui.container.elasticsearch.enabled: true
elasticsearch.username: "elastic"
elasticsearch.password: "elastic"
# 中文页面
i18n.locale: zh-CN
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>启动</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash">docker run -d --name kibana -p 5601:5601 -v /root/es/kibana.yml:/usr/share/kibana/config/kibana.yml kibana:7.5.2
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch查询</title>
    <url>/elasticsearch-cha-xun/</url>
    <content><![CDATA[<h3 id="空查询"><a href="#空查询" class="headerlink" title="空查询"></a>空查询</h3><pre class="line-numbers language-json"><code class="language-json">// 查询所有
GET /index/_search
<span class="token punctuation">{</span><span class="token punctuation">}</span>
// 分页查询
GET /index/_search
<span class="token punctuation">{</span>
  <span class="token property">"from"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">2</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="bool联合查询"><a href="#bool联合查询" class="headerlink" title="bool联合查询"></a>bool联合查询</h3><ul>
<li>must: 文档必须完全匹配条件</li>
<li>should: should下面会带一个以上的条件，至少满足一个条件</li>
<li>must_not: 文档必须不匹配条件</li>
</ul>
<pre class="line-numbers language-json"><code class="language-json">GET /index/_search
<span class="token punctuation">{</span>
  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"must_not"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span><span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">"content"</span><span class="token operator">:</span> <span class="token string">"中国"</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">"content"</span><span class="token operator">:</span> <span class="token string">"平均"</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="高级检索"><a href="#高级检索" class="headerlink" title="高级检索"></a>高级检索</h3><pre class="line-numbers language-json"><code class="language-json">// 正则检索
GET /index/_search
<span class="token punctuation">{</span>
  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"regexp"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"FIELD"</span><span class="token operator">:</span> <span class="token string">"REGEXP"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
// 前缀检索
GET /index/_search
<span class="token punctuation">{</span>
  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"prefix"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"content"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"美国"</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
// 不分词检索
GET /index/_search
<span class="token punctuation">{</span>
  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"content"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"美国"</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
// 通配符检索
GET /index/_search
<span class="token punctuation">{</span>
  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"wildcard"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"content"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"*天*"</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
// 过滤filter
// 模糊fuzzy
// 权重
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch集群部署</title>
    <url>/elasticsearch-ji-qun-bu-shu/</url>
    <content><![CDATA[<h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 检查vm.max_map_count设置,至少要求262144</span>
<span class="token function">grep</span> vm.max_map_count /etc/sysctl.conf
vm.max_map_count<span class="token operator">=</span>262144
<span class="token comment" spellcheck="true"># 在线设置</span>
sysctl -w vm.max_map_count<span class="token operator">=</span>262144
<span class="token comment" spellcheck="true"># ES的data目录需要设置rwx权限</span>
<span class="token function">chmod</span> g+rwx /root/es/data
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="三台机器搭建集群"><a href="#三台机器搭建集群" class="headerlink" title="三台机器搭建集群"></a>三台机器搭建集群</h3><ul>
<li>node1</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash">docker run -d --name es --net host \
  -e node.name<span class="token operator">=</span>es1 -e cluster.name<span class="token operator">=</span>es-docker-cluster \
  -e discovery.seed_hosts<span class="token operator">=</span>192.168.3.19,192.168.3.20 \
  -e cluster.initial_master_nodes<span class="token operator">=</span>192.168.3.17,192.168.3.19,192.168.3.20 \
  -e network.publish_host<span class="token operator">=</span>192.168.3.17 \
  -v /root/es/data:/usr/share/elasticsearch/data \
  elasticsearch:7.5.2
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>node2</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash">docker run -d --name es --net host \
  -e node.name<span class="token operator">=</span>es2 -e cluster.name<span class="token operator">=</span>es-docker-cluster \
  -e discovery.seed_hosts<span class="token operator">=</span>192.168.3.17,192.168.3.20 \
  -e cluster.initial_master_nodes<span class="token operator">=</span>192.168.3.17,192.168.3.19,192.168.3.20 \
  -e network.publish_host<span class="token operator">=</span>192.168.3.19 \
  -v /root/es/data:/usr/share/elasticsearch/data \
  elasticsearch:7.5.2 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>node3</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash">docker run -d --name es --net host \
  -e node.name<span class="token operator">=</span>es3 -e cluster.name<span class="token operator">=</span>es-docker-cluster \
  -e discovery.seed_hosts<span class="token operator">=</span>192.168.3.17,192.168.3.19 \
  -e cluster.initial_master_nodes<span class="token operator">=</span>192.168.3.17,192.168.3.19,192.168.3.20 \
  -e network.publish_host<span class="token operator">=</span>192.168.3.20 \
  -v /root/es/data:/usr/share/elasticsearch/data \
  elasticsearch:7.5.2 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@data2 es<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># curl -X GET "localhost:9200/_cat/nodes?v&amp;pretty"</span>
ip           heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name
192.168.3.17           20          98   1    0.07    0.07     0.05 dilm      *      es1
192.168.3.20           12          97   1    0.04    0.03     0.05 dilm      -      es3
192.168.3.19            9          93   1    0.01    0.04     0.05 dilm      -      es2
<span class="token punctuation">[</span>root@data1 es<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># curl 'localhost:9200/_cluster/health?pretty'</span>
<span class="token punctuation">{</span>
  <span class="token string">"cluster_name"</span> <span class="token keyword">:</span> <span class="token string">"es-docker-cluster"</span>,
  <span class="token string">"status"</span> <span class="token keyword">:</span> <span class="token string">"green"</span>,
  <span class="token string">"timed_out"</span> <span class="token keyword">:</span> false,
  <span class="token string">"number_of_nodes"</span> <span class="token keyword">:</span> 3,
  <span class="token string">"number_of_data_nodes"</span> <span class="token keyword">:</span> 3,
  <span class="token string">"active_primary_shards"</span> <span class="token keyword">:</span> 0,
  <span class="token string">"active_shards"</span> <span class="token keyword">:</span> 0,
  <span class="token string">"relocating_shards"</span> <span class="token keyword">:</span> 0,
  <span class="token string">"initializing_shards"</span> <span class="token keyword">:</span> 0,
  <span class="token string">"unassigned_shards"</span> <span class="token keyword">:</span> 0,
  <span class="token string">"delayed_unassigned_shards"</span> <span class="token keyword">:</span> 0,
  <span class="token string">"number_of_pending_tasks"</span> <span class="token keyword">:</span> 0,
  <span class="token string">"number_of_in_flight_fetch"</span> <span class="token keyword">:</span> 0,
  <span class="token string">"task_max_waiting_in_queue_millis"</span> <span class="token keyword">:</span> 0,
  <span class="token string">"active_shards_percent_as_number"</span> <span class="token keyword">:</span> 100.0
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>FlinkSQL中窗口函数</title>
    <url>/flinksql-zhong-chuang-kou-han-shu/</url>
    <content><![CDATA[<h3 id="滚动窗口（TUMBLE）"><a href="#滚动窗口（TUMBLE）" class="headerlink" title="滚动窗口（TUMBLE）"></a>滚动窗口（TUMBLE）</h3><p>滚动窗口（TUMBLE）将每个元素分配到一个指定大小的窗口中。通常滚动窗口有一个固定的大小，并且不会出现重叠。例如：如果指定了一个5分钟大小的滚动窗口，无限流的数据会根据时间划分成[0:00 - 0:05)、[0:05, 0:10)、 [0:10, 0:15)等窗口。</p>
<p><img data-src="/images/flink28.png" alt="tumble"></p>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>TUMBLE函数用在GROUP BY子句中，用来定义滚动窗口。</p>
<pre class="line-numbers language-sql"><code class="language-sql">TUMBLE<span class="token punctuation">(</span><span class="token operator">&lt;</span>time<span class="token operator">-</span>attr<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>size<span class="token operator">-</span>interval<span class="token operator">></span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>size<span class="token operator">-</span>interval<span class="token operator">></span>: INTERVAL <span class="token string">'string'</span> timeUnit
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>
TUMBLE_START<span class="token punctuation">(</span>ts<span class="token punctuation">,</span> INTERVAL <span class="token string">'1'</span> MINUTE<span class="token punctuation">)</span><span class="token punctuation">,</span>
TUMBLE_END<span class="token punctuation">(</span>ts<span class="token punctuation">,</span> INTERVAL <span class="token string">'1'</span> MINUTE<span class="token punctuation">)</span><span class="token punctuation">,</span>
username<span class="token punctuation">,</span>
<span class="token function">COUNT</span><span class="token punctuation">(</span>click_url<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> user_clicks
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> TUMBLE<span class="token punctuation">(</span>ts<span class="token punctuation">,</span> INTERVAL <span class="token string">'1'</span> MINUTE<span class="token punctuation">)</span><span class="token punctuation">,</span> username
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><a href="https://help.aliyun.com/document_detail/62511.html?spm=a2c4g.11186623.6.654.23083f50O8pvx8">具体参考阿里云</a></p>
<h3 id="滑动窗口（HOP）"><a href="#滑动窗口（HOP）" class="headerlink" title="滑动窗口（HOP）"></a>滑动窗口（HOP）</h3><p>滑动窗口（HOP），也被称作Sliding Window。不同于滚动窗口，滑动窗口的窗口可以重叠。</p>
<p>滑动窗口有两个参数：slide和size。slide为每次滑动的步长，size为窗口的大小。</p>
<ul>
<li>slide &lt; size，则窗口会重叠，每个元素会被分配到多个窗口。</li>
<li>slide = size，则等同于滚动窗口（TUMBLE）。</li>
<li>slide &gt; size，则为跳跃窗口，窗口之间不重叠且有间隙。</li>
</ul>
<p><img data-src="/images/flink29.png" alt="hop"></p>
<p>通常情况下大部分元素符合多个窗口情景，窗口是重叠的。因此，滑动窗口在计算移动平均数（moving averages）时很实用。例如，计算过去5分钟数据的平均值，每10秒钟更新一次，可以设置slide为10秒，size为5分钟。</p>
<h4 id="滑动窗口函数语法"><a href="#滑动窗口函数语法" class="headerlink" title="滑动窗口函数语法"></a>滑动窗口函数语法</h4><p>HOP函数用在group by子句中，用来定义滑动窗口。</p>
<pre class="line-numbers language-sql"><code class="language-sql">HOP<span class="token punctuation">(</span><span class="token operator">&lt;</span>time<span class="token operator">-</span>attr<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>slide<span class="token operator">-</span>interval<span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>size<span class="token operator">-</span>interval<span class="token operator">></span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>slide<span class="token operator">-</span>interval<span class="token operator">></span>: INTERVAL <span class="token string">'string'</span> timeUnit
<span class="token operator">&lt;</span>size<span class="token operator">-</span>interval<span class="token operator">></span>: INTERVAL <span class="token string">'string'</span> timeUnit  
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>
    HOP_START <span class="token punctuation">(</span>ts<span class="token punctuation">,</span> INTERVAL <span class="token string">'30'</span> SECOND<span class="token punctuation">,</span> INTERVAL <span class="token string">'1'</span> MINUTE<span class="token punctuation">)</span><span class="token punctuation">,</span>
    HOP_END <span class="token punctuation">(</span>ts<span class="token punctuation">,</span> INTERVAL <span class="token string">'30'</span> SECOND<span class="token punctuation">,</span> INTERVAL <span class="token string">'1'</span> MINUTE<span class="token punctuation">)</span><span class="token punctuation">,</span>
    username<span class="token punctuation">,</span>
    <span class="token function">COUNT</span> <span class="token punctuation">(</span>click_url<span class="token punctuation">)</span>
<span class="token keyword">FROM</span>
    user_clicks
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>
    HOP <span class="token punctuation">(</span>ts<span class="token punctuation">,</span> INTERVAL <span class="token string">'30'</span> SECOND<span class="token punctuation">,</span> INTERVAL <span class="token string">'1'</span> MINUTE<span class="token punctuation">)</span><span class="token punctuation">,</span>
    username  
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><a href="https://help.aliyun.com/document_detail/62512.html?spm=a2c4g.11186623.6.655.10d7ca8c6hnmCW">具体参考阿里云</a></p>
<h3 id="会话窗口（SESSION）"><a href="#会话窗口（SESSION）" class="headerlink" title="会话窗口（SESSION）"></a>会话窗口（SESSION）</h3><p>会话窗口（SESSION）通过Session活动来对元素进行分组。会话窗口与滚动窗口和滑动窗口相比，没有窗口重叠，没有固定窗口大小。相反，当它在一个固定的时间周期内不再收到元素，即会话断开时，这个窗口就会关闭。</p>
<p>会话窗口通过一个间隔时间（Gap）来配置，这个间隔定义了非活跃周期的长度。例如，一个表示鼠标点击活动的数据流可能具有长时间的空闲时间，并在两段空闲之间散布着高浓度的点击。 如果数据在指定的间隔（Gap）之后到达，则会开始一个新的窗口。</p>
<p>会话窗口示例如下图。每个Key由于不同的数据分布，形成了不同的Window。<br><img data-src="/images/flink30.png" alt="session"></p>
<h4 id="会话窗口函数语法"><a href="#会话窗口函数语法" class="headerlink" title="会话窗口函数语法"></a>会话窗口函数语法</h4><p>SESSION函数用于在GROUP BY子句中定义会话窗口。</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SESSION</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>time<span class="token operator">-</span>attr<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>gap<span class="token operator">-</span>interval<span class="token operator">></span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>gap<span class="token operator">-</span>interval<span class="token operator">></span>: INTERVAL <span class="token string">'string'</span> timeUnit
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>
SESSION_START<span class="token punctuation">(</span>ts<span class="token punctuation">,</span> INTERVAL <span class="token string">'30'</span> SECOND<span class="token punctuation">)</span><span class="token punctuation">,</span>
SESSION_END<span class="token punctuation">(</span>ts<span class="token punctuation">,</span> INTERVAL <span class="token string">'30'</span> SECOND<span class="token punctuation">)</span><span class="token punctuation">,</span>
username<span class="token punctuation">,</span>
<span class="token function">COUNT</span><span class="token punctuation">(</span>click_url<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> user_clicks
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">SESSION</span><span class="token punctuation">(</span>ts<span class="token punctuation">,</span> INTERVAL <span class="token string">'30'</span> SECOND<span class="token punctuation">)</span><span class="token punctuation">,</span> username
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><a href="https://help.aliyun.com/document_detail/62513.html?spm=a2c4g.11186623.6.656.781b3d4249MJZT">具体参考阿里云</a></p>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>GO语言学习【基础知识】</title>
    <url>/go-yu-yan-xue-xi-ji-chu-zhi-shi/</url>
    <content><![CDATA[<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><ul>
<li><code>GOROOT</code>设置<code>go</code>安装目录;</li>
<li><code>GOPATH</code>设置项目目录，目录默认包括<code>src</code> 、<code>bin</code> 、<code>pkg</code>，<code>src</code>下面是一个个创建的项目，<code>pkg</code>是项目引用的包，<code>bin</code>下面是可执行程序；</li>
<li><code>GO111MODULE=on</code></li>
<li><code>GOPROXY=https://goproxy.io,direct</code></li>
</ul>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><ul>
<li><code>go build</code>会在当前目录下生成可执行程序，<code>window</code>下是<code>exe</code></li>
<li><code>go install</code>会在<code>%GOPATH%/bin</code>目录下生成可执行程序</li>
</ul>
<h3 id="import使用"><a href="#import使用" class="headerlink" title="import使用"></a>import使用</h3><p>参考链接：<a href="https://studygolang.com/articles/5421">Go import使用</a></p>
<ul>
<li><code>import "fmt"</code>最常用的一种形式</li>
<li><code>import "./test"</code>导入同一目录下test包中的内容</li>
<li><code>import f "fmt"</code>导入fmt，并给他启<code>别名ｆ</code></li>
<li><code>import . "fmt"</code>，将fmt启用<code>别名"."</code>，这样就可以直接使用其内容，而不用再添加<code>fmt</code>，如<code>fmt.Println</code>可以直接写成<code>Println</code></li>
<li><code>import  _ "fmt"</code> 表示不使用该包，而是只是使用该包的<code>init</code>函数，并不显示的使用该包的其他内容。注意：这种形式的import，当import时就执行了fmt包中的init函数，而不能够使用该包的其他函数。</li>
</ul>
<h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><blockquote>
<p> Go是一门区分大小写的语言.</p>
</blockquote>
<p>参考链接：<a href="https://www.cnblogs.com/rickiyang/p/11074174.html">Go中的命名规范</a></p>
<p><strong>任何需要对外暴露的名字必须以大写字母开头，不需要对外暴露的则应该以小写字母开头</strong>;</p>
<ul>
<li>当命名（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Analysize，那么使用这种形式的标识符的对象就可以被外部包的代码所使用（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）；</li>
<li>命名如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的（像面向对象语言中的 private ）</li>
</ul>
<h3 id="init函数"><a href="#init函数" class="headerlink" title="init函数"></a>init函数</h3><ul>
<li>init函数会自动执行，用于初始化变量，不可被其他函数调用；</li>
<li>init函数可以有多个，执行顺序没有明确定义，不同包的init执行顺序由其依赖关系决定；</li>
</ul>
<h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><ul>
<li><code>&amp;</code> ：取地址</li>
<li><code>*</code> ：取值</li>
</ul>
<h3 id="空接口使用"><a href="#空接口使用" class="headerlink" title="空接口使用"></a>空接口使用</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 空接口类型的变量可以保存任何类型的值</span>
<span class="token keyword">var</span> emptyInterface <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"emptyInterface is of type %T\n"</span><span class="token punctuation">,</span> emptyInterface<span class="token punctuation">)</span>
emptyInterface <span class="token operator">=</span> <span class="token number">100</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"emptyInterface is of type %T\n"</span><span class="token punctuation">,</span> emptyInterface<span class="token punctuation">)</span>
emptyInterface <span class="token operator">=</span> <span class="token string">"Golang"</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"emptyInterface is of type %T\n"</span><span class="token punctuation">,</span> emptyInterface<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 创建一个map</span>
<span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// </span>
<span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="创建对象的几种方式"><a href="#创建对象的几种方式" class="headerlink" title="创建对象的几种方式"></a>创建对象的几种方式</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 对象</span>
<span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 1: 结果为指针类型</span>
p <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>People<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// 2: 结果为值类型</span>
p <span class="token operator">:=</span> People<span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 3: 结果为指针类型</span>
p <span class="token operator">:=</span> <span class="token operator">&amp;</span>People<span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 4: 创建并初始化</span>
p <span class="token operator">:=</span> People<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"userName"</span><span class="token punctuation">}</span>
p <span class="token operator">:=</span> People<span class="token punctuation">{</span><span class="token string">"userName"</span><span class="token punctuation">}</span>
p <span class="token operator">:=</span> <span class="token operator">&amp;</span>People<span class="token punctuation">{</span><span class="token string">"userName"</span><span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 5: 构造函数</span>
<span class="token keyword">func</span> <span class="token function">NewPeople</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">*</span>People  <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>People<span class="token punctuation">{</span>name<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="GO111MODULE"><a href="#GO111MODULE" class="headerlink" title="GO111MODULE"></a>GO111MODULE</h3><ul>
<li><code>Go Modules</code> 是 <code>Go</code> 语言的一种依赖管理方式,使用<code>go module</code>管理依赖后会在项目根目录下生成两个文件<code>go.mod</code>和<code>go.sum</code>.</li>
<li>要使用<code>go module</code>首先要设置<code>GO111MODULE=on</code>，<code>GO111MODULE</code>有三个值，<code>off</code>、<code>on</code>、<code>auto</code>，<code>auto</code>则会根据当前目录下是否有 <code>go.mod</code>文件来判断是否使用<code>modules</code>功能。</li>
<li><code>go module</code> 默认不在 <code>GOPATH</code> 目录下查找依赖文件，其首先会在<code>GOPATH/pkg/mod</code>中查找有没有所需要的依赖，没有的直接会进行下载。可以使用<code>go mod download</code>下载好所需要的依赖。</li>
<li><code>go build</code> 会将项目的依赖添加到 <code>go.mod</code> 中</li>
</ul>
<h3 id="go-mod-vendor"><a href="#go-mod-vendor" class="headerlink" title="go mod vendor"></a>go mod vendor</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 1. 使用 go mod vendor把依赖下载到本地调试</span>
<span class="token keyword">go</span> mod vendor
<span class="token comment" spellcheck="true">// 2. 使用本地依赖</span>
<span class="token keyword">go</span> build <span class="token operator">-</span>mod<span class="token operator">=</span>vendor main<span class="token punctuation">.</span><span class="token keyword">go</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="为对象创建方法"><a href="#为对象创建方法" class="headerlink" title="为对象创建方法"></a>为对象创建方法</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> People <span class="token keyword">struct</span><span class="token punctuation">{</span>
    name <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p People<span class="token punctuation">)</span> <span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> p<span class="token punctuation">.</span>name
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="go项目打包成docker镜像"><a href="#go项目打包成docker镜像" class="headerlink" title="go项目打包成docker镜像"></a>go项目打包成docker镜像</h3><blockquote>
<p>直接执行<code>go build</code>或者<code>go build -o xxx</code>打包成的二进制文件是在window中运行的,如果要打包成在<code>Linux</code>中运行的,<code>go build</code>之前需要增加环境变量：  </p>
<ul>
<li><code>set GOOS=linux</code>  </li>
<li><code>set GOARCH=amd64</code></li>
</ul>
</blockquote>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Dockerfile文件</span>
FROM alpine
MAINTAINER wuzhiyong wuzhiyong@deri.energy
WORKDIR /app
COPY restful /app

EXPOSE 8806
CMD <span class="token punctuation">[</span><span class="token string">"./restful"</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>go</category>
      </categories>
  </entry>
  <entry>
    <title>HBase默认配置</title>
    <url>/hbase-mo-ren-pei-zhi/</url>
    <content><![CDATA[<p><code>hbase-default.xml</code>默认配置中<strong>常用的</strong>的配置项：</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td><code>hbase.tmp.dir</code></td>
<td>本地文件系统上的临时目录。将此设置更改为指向比“/tmp”更持久的位置，因为在重新启动计算机时清除了“/tmp”目录。</td>
<td><code>${java.io.tmpdir}/hbase-${user.name}</code></td>
</tr>
<tr>
<td><code>hbase.rootdir</code></td>
<td>这个目录是region servers共享的目录。</td>
<td><code>${hbase.tmp.dir}/hbase</code></td>
</tr>
<tr>
<td><code>hbase.cluster.distributed</code></td>
<td>群集所处的模式。对于独立模式，可能的值为false，对于分布式模式，可能的值为true。</td>
<td><code>false</code></td>
</tr>
<tr>
<td><code>hbase.zookeeper.quorum</code></td>
<td>使用逗号分隔的ZooKeeper集合中的服务器列表</td>
<td><code>localhost</code></td>
</tr>
<tr>
<td><code>zookeeper.recovery.retry.maxsleeptime</code></td>
<td>在重试 zookeeper操作之前的最大睡眠时间（以毫秒为单位）</td>
<td><code>60000</code></td>
</tr>
<tr>
<td><code>hbase.local.dir</code></td>
<td>将本地文件系统上的目录用作本地存储。</td>
<td><code>${hbase.tmp.dir}/local/</code></td>
</tr>
<tr>
<td><code>hbase.master.port</code></td>
<td>HBase Master应该绑定的端口。</td>
<td><code>16000</code></td>
</tr>
<tr>
<td><code>hbase.master.info.port</code></td>
<td>HBase Master Web UI的端口。如果您不想运行UI实例，请将其设置为-1。</td>
<td><code>16010</code></td>
</tr>
<tr>
<td><code>hbase.master.info.bindAddress</code></td>
<td>HBase Master Web UI的绑定地址</td>
<td><code>0.0.0.0</code></td>
</tr>
<tr>
<td><code>hbase.master.logcleaner.ttl</code></td>
<td>WAL在归档（{hbase.rootdir} / oldWALs）目录中保留多久，之后将由主线程清除。该值以毫秒为单位。</td>
<td><code>600000</code></td>
</tr>
<tr>
<td><code>hbase.master.procedurewalcleaner.ttl</code></td>
<td>程序WAL将在归档目录中保留多久，之后将由主线程清除。该值以毫秒为单位。</td>
<td><code>604800000</code></td>
</tr>
<tr>
<td><code>hbase.master.fileSplitTimeout</code></td>
<td>分割一个区域，在放弃尝试之前等待文件分割步骤需要多长时间。</td>
<td><code>600000</code></td>
</tr>
<tr>
<td><code>hbase.regionserver.port</code></td>
<td>HBase RegionServer绑定的端口。</td>
<td><code>16020</code></td>
</tr>
<tr>
<td><code>hbase.regionserver.info.port</code></td>
<td>HBase RegionServer Web UI的端口如果您不希望RegionServer UI运行，请将其设置为-1。</td>
<td><code>16030</code></td>
</tr>
<tr>
<td><code>hbase.regionserver.info.bindAddress</code></td>
<td>HBase RegionServer Web UI的地址</td>
<td><code>0.0.0.0</code></td>
</tr>
<tr>
<td><code>hbase.regionserver.msginterval</code></td>
<td>从RegionServer到Master的消息间隔（以毫秒为单位）。</td>
<td><code>3000</code></td>
</tr>
<tr>
<td><code>hbase.regionserver.regionSplitLimit</code></td>
<td>限制区域数量，之后不再发生区域分割。这并不是硬性限制区域数量，而是作为区域服务商在一定限度之后停止分裂的指导方针。默认设置为1000。</td>
<td><code>1000</code></td>
</tr>
<tr>
<td><code>zookeeper.session.timeout</code></td>
<td>ZooKeeper会话超时（以毫秒为单位）。它使用两种不同的方式。首先，这个值用于HBase用来连接到集合的ZK客户端。当它启动一个ZK服务器时它也被HBase使用</td>
<td><code>90000</code></td>
</tr>
<tr>
<td><code>zookeeper.znode.parent</code></td>
<td>ZooKeeper中用于HBase的Root ZNode。所有配置了相对路径的HBase的ZooKeeper文件都会在这个节点下。</td>
<td><code>/hbase</code></td>
</tr>
<tr>
<td><code>zookeeper.znode.acl.parent</code></td>
<td>Root ZNode用于访问控制列表。</td>
<td><code>acl</code></td>
</tr>
<tr>
<td><code>hbase.zookeeper.dns.interface</code></td>
<td>ZooKeeper服务器应从中报告其IP地址的网络接口的名称。</td>
<td><code>default</code></td>
</tr>
<tr>
<td><code>hbase.zookeeper.peerport</code></td>
<td>ZooKeeper同伴使用的端口进行彼此会话。</td>
<td><code>2888</code></td>
</tr>
<tr>
<td><code>hbase.zookeeper.leaderport</code></td>
<td>ZooKeeper用于leader选举的端口。</td>
<td><code>3888</code></td>
</tr>
<tr>
<td><code>hbase.zookeeper.property.dataDir</code></td>
<td>来自ZooKeeper的配置zoo.cfg的属性。快照存储的目录。</td>
<td><code>${hbase.tmp.dir}/zookeeper</code></td>
</tr>
<tr>
<td><code>hbase.zookeeper.property.clientPort</code></td>
<td>来自ZooKeeper的配置zoo.cfg的属性。客户端将连接的端口。</td>
<td><code>2181</code></td>
</tr>
<tr>
<td><code>hbase.zookeeper.property.maxClientCnxns</code></td>
<td>来自ZooKeeper的配置zoo.cfg的属性。限制由IP地址标识的单个客户端的并发连接数量</td>
<td><code>300</code></td>
</tr>
<tr>
<td><code>hbase.column.max.version</code></td>
<td>新的列族描述符将使用此值作为要保留的默认版本数。</td>
<td><code>1</code></td>
</tr>
</tbody></table>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="http://hbase.apache.org/book.html#config.files">官网</a></li>
<li><a href="http://hbase.apache.org/book.html#example_config">官网示例</a></li>
<li><a href="https://wiki.imooc.com/hbase/defaultconfiguration.html">慕课网中文翻译</a></li>
<li><a href="https://wiki.imooc.com/hbase/configurationexample.html">慕课网中文翻译示例</a></li>
</ul>
]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
      <tags>
        <tag>hbase</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客安装步骤</title>
    <url>/hexo-bo-ke-an-zhuang-bu-zou/</url>
    <content><![CDATA[<h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><pre><code>git -v
</code></pre>
<h3 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h3><pre><code>node -v
npm -v
</code></pre>
<pre><code>npm config set registry https://registry.npm.taobao.org
</code></pre>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><pre><code>npm install -g hexo-cli
</code></pre>
<pre><code>hexo init MyBlog
</code></pre>
<pre><code>cd MyBlog      //进入这个MyBlog文件夹
npm install
</code></pre>
<h3 id="生成SSH添加到GitHub"><a href="#生成SSH添加到GitHub" class="headerlink" title="生成SSH添加到GitHub"></a>生成SSH添加到GitHub</h3><p>详细的百度~</p>
<pre><code>git config --global user.name "yourname"
git config --global user.email "youremail"
</code></pre>
<h3 id="安装一些插件"><a href="#安装一些插件" class="headerlink" title="安装一些插件"></a>安装一些插件</h3><p>上传到GitHub上需要的插件</p>
<pre><code>npm install hexo-deployer-git --save
</code></pre>
<p><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">matery主题需要的插件</a></p>
<pre><code>npm i -S hexo-prism-plugin
</code></pre>
<pre><code>npm install hexo-generator-search --save
</code></pre>
<pre><code>npm i hexo-permalink-pinyin --save
</code></pre>
<pre><code>npm i --save hexo-wordcount
</code></pre>
<pre><code>npm install hexo-filter-github-emojis --save
</code></pre>
<pre><code>npm install hexo-generator-feed --save
</code></pre>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Haproxy安装使用</title>
    <url>/haproxy-an-zhuang-shi-yong/</url>
    <content><![CDATA[<h3 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h3><pre class="line-numbers language-bash"><code class="language-bash">yum update
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> haproxy
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="修改haproxy配置文件"><a href="#修改haproxy配置文件" class="headerlink" title="修改haproxy配置文件"></a>修改haproxy配置文件</h3><p>默认目录：<code>/etc/haproxy/haproxy.cfg</code>，下面是一些参考配置</p>
<pre><code>#---------------------------------------------------------------------
# Global settings    
#---------------------------------------------------------------------
global    #全局配置文件
    log         127.0.0.1 local2        #日志配置，所有的日志都记录本地，通过local2输出
    maxconn         20000
    ulimit-n	16384
    #chroot      /var/lib/haproxy        #改变haproxy的工作目录
    #pidfile     /var/run/haproxy.pid    #指定pid文件的路径
    maxconn     4000                    #最大连接数的设定
    #user        haproxy                 #指定运行服务的用户
    #group       haproxy                 #指定运行服务的用户组
    daemon
 
#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
     
    mode                    http                  #默认使用协议,可以为{http|tcp|health} http:是七层协议 tcp:是四层 health：只返回OK
    log                     global                #全局日志记录
    option                  httplog               #详细记录http日志
    option                  dontlognull           #不记录空日志
    option http-server-close                      #启用http-server-close
    option forwardfor       except 127.0.0.0/8    #来自这些信息的都不forwardfor
    option                  redispatch            #重新分发，ServerID对应的服务器宕机后，强制定向到其他运行正常的服务器
    retries                 3                      #3次连接失败则认为服务不可用
    timeout http-request    10s                    #默认http请求超时时间
    timeout queue           1m                     #默认队列超时时间
    timeout connect         10s                    #默认连接超时时间
    timeout client          1m                     #默认客户端超时时间
    timeout server          1m                     #默认服务器超时时间
    timeout http-keep-alive 10s                    #默认持久连接超时时间
    timeout check           10s                    #默认检查时间间隔
    maxconn                 3000                   #最大连接数
 
######## 监控界面配置 #################
listen admin_status
        # 监控界面访问信息
        bind 0.0.0.0:8888
        mode http
        #自动刷新时间
        stats refresh 30s
        # URI相对地址
        stats uri /
        # 统计报告格式
        # stats realm Global\ statistics
        stats realm welcome login\ Haproxy
        # 登录账户信息
        stats auth admin:123456
        #用来隐藏统计页面上HAProxy 的版本信息
        stats hide-version
        #通过设置此选项，可以在监控页面上手工启用或禁用后端真实服务器
        stats admin if TRUE
        ########frontend配置##############
 
######## mysql负载均衡配置 ###############
listen mysql
        bind 0.0.0.0:3306
        mode tcp
        # 负载均衡算法
        # static-rr 权重, leastconn 最少连接, source 请求IP, 轮询 roundrobin
        balance roundrobin
        # 日志格式
        # option tcplog
        # 在 mysql 创建一个没有权限的haproxy用户，密码为空。 haproxy用户
        # create user 'haproxy'@'%' identified by ''; FLUSH PRIVILEGES;
        # option mysql-check user haproxy
         # 这里是容器中的IP地址，由于配置的是轮询roundrobin，weight 权重其实没有生效
        server mysql_1 192.168.41.129:3306 check weight 1 maxconn 2000
        server mysql_2 192.168.41.130:3306 check weight 1 maxconn 2000
        server mysql_3 192.168.41.131:3306 check weight 1 maxconn 2000
        # 使用keepalive检测死链
        # option tcpka
#########################################
 
 
########test1配置#################
# listen test1
#         bind 0.0.0.0:8008
#         mode tcp
#         balance roundrobin
#         server s1 127.0.0.1:8010 weight 1 maxconn 10000 check inter 10s
#         server s2 127.0.0.1:8011 weight 1 maxconn 10000 check inter 10s
#         server s3 127.0.0.1:8012 weight 1 maxconn 10000 check inter 10s
 
########test2配置#################
# listen test2
#         bind 0.0.0.0:8007
#         mode tcp
#         balance roundrobin
#         server s1 192.168.1.88:8010 weight 1 maxconn 10000 check inter 10s
</code></pre>
<h3 id="修改ulimit配置"><a href="#修改ulimit配置" class="headerlink" title="修改ulimit配置"></a>修改ulimit配置</h3><p><code>haproxy</code>要求<code>ulimit</code><font color="red">大于（<code>maxconn</code>*2 + 15 ）</font></p>
<pre><code>#临时修改
ulimit -n 65536
 
#永久修改，需要修改/etc/security/limits.conf配置文件，文末增加以下内容，然后重新登录就可以生效
* soft nofile 65536
* hard nofile 65536
* soft nproc 65565
* hard nproc 65565
</code></pre>
<h3 id="启动服务并配置自启动"><a href="#启动服务并配置自启动" class="headerlink" title="启动服务并配置自启动"></a>启动服务并配置自启动</h3><p>启动后访问<code>8888</code>端口，使用<code>admin/123456</code>登录就可以看到<code>UI</code>界面了。</p>
<pre class="line-numbers language-bash"><code class="language-bash">systemctl start haproxy
systemctl <span class="token function">enable</span> haproxy
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>haproxy</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA列操作（windows版-实测）</title>
    <url>/idea-lie-cao-zuo-windows-ban-shi-ce/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>CTRL +SHIFT + A</code></td>
<td>查找快捷键 –&gt;HELP–&gt;FIND ACTION move caret to,move caret to next world 快速到单词的末尾，ctrl+ →， 同时按住shift 就是选中这个单词</td>
</tr>
<tr>
<td><code>CTRL +SHIFT+ALT +J</code></td>
<td>选中一样的 –&gt;EDIT –&gt;FIND SELECT ALL OCCURRENCES</td>
</tr>
<tr>
<td><code>SHIFT + ALT + 鼠标左键</code></td>
<td>选中多行</td>
</tr>
<tr>
<td><code>END键</code></td>
<td>快速移到行尾</td>
</tr>
<tr>
<td><code>HOME键</code></td>
<td>快速移到行首</td>
</tr>
<tr>
<td><code>CTRL+ALT + L</code></td>
<td>格式化 –&gt;code –&gt;reformat code</td>
</tr>
<tr>
<td><code>Ctrl+alt+I</code></td>
<td>自动缩进</td>
</tr>
<tr>
<td><code>ctrl+ shift +U</code></td>
<td>字母大小写切换</td>
</tr>
<tr>
<td><code>ctrl+alt+t</code></td>
<td>surround with ,if else, try catch,…</td>
</tr>
<tr>
<td><code>ctrl +shift + t</code></td>
<td>创建新的测试</td>
</tr>
<tr>
<td><code>alt + insert</code></td>
<td>generate 生成getter and setter,constructor,toString…</td>
</tr>
<tr>
<td><code>ctrl+y / x</code></td>
<td>删除行</td>
</tr>
<tr>
<td><code>ctrl + D</code></td>
<td>复制行</td>
</tr>
<tr>
<td><code>ctrl + H</code></td>
<td>显示类结构图</td>
</tr>
<tr>
<td><code>ctrl+ shift + h</code></td>
<td>显示方法调用结构</td>
</tr>
<tr>
<td><code>Alt+7</code></td>
<td>显示类所有方法，快速定位</td>
</tr>
<tr>
<td><code>ctrl + E</code></td>
<td>显示最近打开的文件</td>
</tr>
<tr>
<td><code>ctrl +j</code></td>
<td>自动补全代码 fori psvm sout …</td>
</tr>
<tr>
<td><code>ctrl + w</code></td>
<td>选中代码，多次按，逐渐扩大选中范围</td>
</tr>
<tr>
<td><code>alt+f3 / ctrl+shift + f7</code></td>
<td>高亮显示文本</td>
</tr>
<tr>
<td><code>ctrl+/ / ctrl+shift+/</code></td>
<td>注释// 或者注释/*</td>
</tr>
<tr>
<td><code>ctrl + Alt + o</code></td>
<td>优化导入的包</td>
</tr>
<tr>
<td><code>ctrl + p</code></td>
<td>显示方法参数提醒</td>
</tr>
</tbody></table>
<blockquote>
<p>注意有时候快捷键不生效，是不是和<code>QQ</code>、<code>钉钉</code>等常用软件冲突导致。</p>
</blockquote>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>Istio使用【Bookinfo示例】</title>
    <url>/istio-shi-yong-bookinfo-shi-li/</url>
    <content><![CDATA[<h3 id="Bookinfo示例简介"><a href="#Bookinfo示例简介" class="headerlink" title="Bookinfo示例简介"></a>Bookinfo示例简介</h3><p><code>Bookinfo</code>是<code>istio</code>官网示例，应用程序分为四个单独的微服务：</p>
<ul>
<li><code>productpage</code>。该<code>productpage</code>微服务调用<code>details</code>和<code>reviews</code>微服务来填充页面。</li>
<li><code>details</code>。该<code>details</code>微服务包含图书信息。</li>
<li><code>reviews</code>。该<code>reviews</code>微服务包含了书评。它们调用<code>ratings</code>微服务。</li>
<li><code>ratings</code>。该<code>ratings</code>微服务包含预定伴随书评排名信息。</li>
</ul>
<p><code>reviews</code>微服务有3个版本：</p>
<ul>
<li>版本<code>v1</code>不会调用该<code>ratings</code>服务。</li>
<li>版本<code>v2</code>调用该<code>ratings</code>服务，并将每个等级显示为1到5个黑星<font color="black">★</font>。</li>
<li>版本<code>v3</code>调用该<code>ratings</code>服务，并将每个等级显示为1到5个红色星号<font color="red">★</font>。</li>
</ul>
<p><img data-src="/images/bookinfo1.jpg" alt="Bookinfo架构图"></p>
<h3 id="Bookinfo在Istio中架构"><a href="#Bookinfo在Istio中架构" class="headerlink" title="Bookinfo在Istio中架构"></a><code>Bookinfo</code>在<code>Istio</code>中架构</h3><p>如果想要在<code>Istio</code>中运行<code>Bookinfo</code>，<code>Bookinfo</code>本身不需要任何改动，只需要为<code>Bookinfo</code>的微服务注入<code>Istio</code>的<code>Sidecar</code>。最终架构图如下：</p>
<p><img data-src="/images/bookinfo2.jpg" alt="Bookinfo架构图"></p>
<p>所有的微服务都与<code>Envoy</code>边车打包在一起，该<code>Envoy</code>边车拦截对服务的出/入请求，并与<code>Istio</code>控制面交互，提供路由、采集、实施各种策略等。</p>
<h3 id="启动Bookinfo服务，参考官网"><a href="#启动Bookinfo服务，参考官网" class="headerlink" title="启动Bookinfo服务，参考官网"></a>启动<code>Bookinfo</code>服务，参考<a href="https://istio.io/docs/examples/bookinfo/">官网</a></h3><h4 id="进入istio目录"><a href="#进入istio目录" class="headerlink" title="进入istio目录"></a>进入istio目录</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master istio-1.4.2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># pwd</span>
/root/istio/istio-1.4.2
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="设置namespace自动注入sidecar"><a href="#设置namespace自动注入sidecar" class="headerlink" title="设置namespace自动注入sidecar"></a>设置namespace自动注入sidecar</h4><pre class="line-numbers language-bash"><code class="language-bash">kubectl label namespace default istio-injection<span class="token operator">=</span>enabled
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="部署bookinfo服务"><a href="#部署bookinfo服务" class="headerlink" title="部署bookinfo服务"></a>部署bookinfo服务</h4><pre class="line-numbers language-bash"><code class="language-bash">kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>你也可以手动为这个yaml注入sidecar再部署，参考<a href="">Istio使用【sidecar注入】</a></p>
<pre class="line-numbers language-bash"><code class="language-bash">kubectl apply -f <span class="token operator">&lt;</span><span class="token punctuation">(</span>istioctl kube-inject -f samples/bookinfo/platform/kube/bookinfo.yaml<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="确定启动完成"><a href="#确定启动完成" class="headerlink" title="确定启动完成"></a>确定启动完成</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master istio-1.4.2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get pod</span>
NAME                                                       READY   STATUS    RESTARTS   AGE
details-v1-74f858558f-7gx6r                                2/2     Running   0          31h
productpage-v1-8554d58bff-fwcj4                            2/2     Running   0          31h
ratings-v1-7855f5bcb9-r7z5l                                2/2     Running   0          31h
reviews-v1-59fd8b965b-jppqr                                2/2     Running   0          31h
reviews-v2-d6cfdb7d6-rx648                                 2/2     Running   0          31h
reviews-v3-75699b5cfb-qpdjm                                2/2     Running   0          31h
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master istio-1.4.2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get svc</span>
NAME          TYPE        CLUSTER-IP       EXTERNAL-IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>     AGE
details       ClusterIP   10.102.10.128    <span class="token operator">&lt;</span>none<span class="token operator">></span>        9080/TCP    31h
productpage   ClusterIP   10.110.251.239   <span class="token operator">&lt;</span>none<span class="token operator">></span>        9080/TCP    31h
ratings       ClusterIP   10.99.146.247    <span class="token operator">&lt;</span>none<span class="token operator">></span>        9080/TCP    31h
reviews       ClusterIP   10.102.77.22     <span class="token operator">&lt;</span>none<span class="token operator">></span>        9080/TCP    31h
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="确定程序运行正常"><a href="#确定程序运行正常" class="headerlink" title="确定程序运行正常"></a>确定程序运行正常</h4><pre class="line-numbers language-bash"><code class="language-bash">kubectl <span class="token function">exec</span> -it <span class="token punctuation">$(</span>kubectl get pod -l app<span class="token operator">=</span>ratings -o jsonpath<span class="token operator">=</span><span class="token string">'{.items[0].metadata.name}'</span><span class="token punctuation">)</span> -c ratings -- curl productpage:9080/productpage <span class="token operator">|</span> <span class="token function">grep</span> -o <span class="token string">"&lt;title>.*&lt;/title>"</span>
<span class="token operator">&lt;</span>title<span class="token operator">></span>Simple Bookstore App<span class="token operator">&lt;</span>/title<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="定义应用的入口网关"><a href="#定义应用的入口网关" class="headerlink" title="定义应用的入口网关"></a>定义应用的入口网关</h4><pre class="line-numbers language-bash"><code class="language-bash">kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="确认网关已创建"><a href="#确认网关已创建" class="headerlink" title="确认网关已创建"></a>确认网关已创建</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master istio-1.4.2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get gateway</span>
NAME               AGE
bookinfo-gateway   30h
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>下面可以通过<code>Isito</code>的入口网关来访问了，在访问前，需要确定<code>Isito网关IP和端口</code>。</p>
<h3 id="获取Istio入口网关IP和端口：参考官网"><a href="#获取Istio入口网关IP和端口：参考官网" class="headerlink" title="获取Istio入口网关IP和端口：参考官网"></a>获取Istio入口网关IP和端口：参考<a href="https://istio.io/docs/tasks/traffic-management/ingress/ingress-control/#determining-the-ingress-ip-and-ports">官网</a></h3><pre class="line-numbers language-bash"><code class="language-bash">kubectl get svc istio-ingressgateway -n istio-system
NAME                   TYPE           CLUSTER-IP      EXTERNAL-IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>                                                                                                                                      AGE
istio-ingressgateway   LoadBalancer   10.110.94.234   <span class="token operator">&lt;</span>pending<span class="token operator">></span>     15020:32344/TCP,80:31380/TCP,443:31390/TCP,31400:31400/TCP,15029:31933/TCP,15030:30470/TCP,15031:31361/TCP,15032:31151/TCP,15443:31081/TCP   2d2h
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>如果<code>EXTERNAL-IP</code>设置了该值，则您的环境具有可用于入口网关的外部负载平衡器。如果<code>EXTERNAL-IP</code>值是<code>&lt;none&gt;</code>（或永久<code>&lt;pending&gt;</code>），则您的环境不为入口网关提供外部负载平衡器。在这种情况下，您可以使用服务的节点端口来访问网关。</p>
<h4 id="确定端口"><a href="#确定端口" class="headerlink" title="确定端口"></a>确定端口</h4><ul>
<li><p>这里<code>80</code>对应的端口是<code>Http</code>服务的端口，映射的主机端口<code>31380</code>；</p>
</li>
<li><p>这里<code>443</code>对应的端口是<code>Https</code>服务的端口，映射的主机端口<code>31390</code>；</p>
</li>
</ul>
<h4 id="确定IP"><a href="#确定IP" class="headerlink" title="确定IP"></a>确定IP</h4><p>可以通过下面命令找个<code>hostIP</code></p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master istio-1.4.2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get po -l istio=ingressgateway -n istio-system -o yaml | grep hostIP: -C3</span>
---
      state:
        running:
          startedAt: <span class="token string">"2019-12-24T06:46:29Z"</span>
    hostIP: 192.168.1.212
    phase: Running
    podIP: 10.244.3.136
    qosClass: Burstable
---
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>也可以通过下面的命令找到Ingress部署的节点。</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master istio-1.4.2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get po -l istio=ingressgateway -n istio-system -o wide</span>
NAME                                    READY   STATUS    RESTARTS   AGE    IP             NODE     NOMINATED NODE   READINESS GATES
istio-ingressgateway-6b7bfd7459-wljhh   1/1     Running   0          2d2h   10.244.3.136   k8s-02   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="访问Bookinfo应用"><a href="#访问Bookinfo应用" class="headerlink" title="访问Bookinfo应用"></a>访问Bookinfo应用</h3><p>浏览器访问刚刚或者的<code>IP</code>+<code>端口</code>+<code>/productpage</code>，例如我的是<a href="">http://192.168.1.212:31380/productpage</a></p>
<p><img data-src="/images/bookinfo3.jpg" alt="Reviewer-v1"><br><img data-src="/images/bookinfo4.jpg" alt="Reviewer-v2"><br><img data-src="/images/bookinfo5.jpg" alt="Reviewer-v3"></p>
<p>不停的刷新页面，可以看到返回的<code>Reviewer</code>是不同的版本。</p>
<h3 id="简单分析下"><a href="#简单分析下" class="headerlink" title="简单分析下"></a>简单分析下</h3><p>针对<code>samples/bookinfo/networking/bookinfo-gateway.yaml</code>，我们可以看看默认配置做了啥。</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">[</span>root@k8s<span class="token punctuation">-</span>master istio<span class="token punctuation">-</span>1.4.2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat samples/bookinfo/networking/bookinfo-gateway.yaml</span>
<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Gateway
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> bookinfo<span class="token punctuation">-</span>gateway
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">selector</span><span class="token punctuation">:</span>
    <span class="token key atrule">istio</span><span class="token punctuation">:</span> ingressgateway <span class="token comment" spellcheck="true"># use istio default controller</span>
  <span class="token key atrule">servers</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span>
      <span class="token key atrule">number</span><span class="token punctuation">:</span> <span class="token number">80</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> http
      <span class="token key atrule">protocol</span><span class="token punctuation">:</span> HTTP
    <span class="token key atrule">hosts</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">"*"</span>
<span class="token punctuation">---</span>
<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3
<span class="token key atrule">kind</span><span class="token punctuation">:</span> VirtualService
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> bookinfo
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token string">"*"</span>
  <span class="token key atrule">gateways</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> bookinfo<span class="token punctuation">-</span>gateway
  <span class="token key atrule">http</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">match</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">uri</span><span class="token punctuation">:</span>
        <span class="token key atrule">exact</span><span class="token punctuation">:</span> /productpage
    <span class="token punctuation">-</span> <span class="token key atrule">uri</span><span class="token punctuation">:</span>
        <span class="token key atrule">prefix</span><span class="token punctuation">:</span> /static
    <span class="token punctuation">-</span> <span class="token key atrule">uri</span><span class="token punctuation">:</span>
        <span class="token key atrule">exact</span><span class="token punctuation">:</span> /login
    <span class="token punctuation">-</span> <span class="token key atrule">uri</span><span class="token punctuation">:</span>
        <span class="token key atrule">exact</span><span class="token punctuation">:</span> /logout
    <span class="token punctuation">-</span> <span class="token key atrule">uri</span><span class="token punctuation">:</span>
        <span class="token key atrule">prefix</span><span class="token punctuation">:</span> /api/v1/products
    <span class="token key atrule">route</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">destination</span><span class="token punctuation">:</span>
        <span class="token key atrule">host</span><span class="token punctuation">:</span> productpage
        <span class="token key atrule">port</span><span class="token punctuation">:</span>
          <span class="token key atrule">number</span><span class="token punctuation">:</span> <span class="token number">9080</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>首先创建一个<code>Gateway</code>，这是<code>Istio</code>的一个自定义资源类型(<code>CRD</code>)，它创建了这个<code>bookinfo</code>应用的网关<code>bookinfo-gateway</code>，使用了<code>istio</code>默认的<code>controller——ingressgateway</code>，如上文，<code>istio</code>的<code>ingress</code>网关定义了很多类型端口，这里<code>bookinfo-gateway</code>使用了<code>80</code>端口，域名使用的通配符 <code>*</code> 。</p>
</li>
<li><p>定义<code>VirtualService</code>，这里需要绑定刚刚创建的<code>bookinfo-gateway</code>，定义了匹配的<code>URI</code>和后台服务。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>istio</category>
      </categories>
      <tags>
        <tag>istio</tag>
        <tag>bookinfo</tag>
      </tags>
  </entry>
  <entry>
    <title>Istio使用【Bookinfo示例之简单路由管理】</title>
    <url>/istio-shi-yong-bookinfo-shi-li-zhi-jian-dan-lu-you-guan-li/</url>
    <content><![CDATA[<blockquote>
<p><strong>本文使用的istio版本：<code>1.4.2</code></strong></p>
</blockquote>
<blockquote>
<p>上章内容只是简单运行了<code>Bookinfo</code>示例（<a href="">Istio使用【Bookinfo示例】</a>），访问页面，<code>Reviews</code>虽然有三个版本，但是刷新浏览器，三个版本是随机返回。本章内容仍然使用官方样例配置，定义一些自定义路由规则。在这之前最好了解下<a href="https://haolin.club/2020/01/03/istio-shi-yong-crds/">Istio使用【CRDs】</a>。</p>
</blockquote>
<h3 id="创建所有服务的DestinationRule"><a href="#创建所有服务的DestinationRule" class="headerlink" title="创建所有服务的DestinationRule"></a>创建所有服务的<code>DestinationRule</code></h3><pre class="line-numbers language-bash"><code class="language-bash">kubectl apply -f samples/bookinfo/networking/destination-rule-all.yaml
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="定义V1和V2版本8-2比重，V3不返回"><a href="#定义V1和V2版本8-2比重，V3不返回" class="headerlink" title="定义V1和V2版本8:2比重，V3不返回"></a>定义<code>V1</code>和<code>V2</code>版本<code>8:2</code>比重，<code>V3</code>不返回</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3
<span class="token key atrule">kind</span><span class="token punctuation">:</span> VirtualService
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> reviews
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> reviews
  <span class="token key atrule">http</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">route</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">destination</span><span class="token punctuation">:</span>
        <span class="token key atrule">host</span><span class="token punctuation">:</span> reviews
        <span class="token key atrule">subset</span><span class="token punctuation">:</span> v1
      <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">80</span>
    <span class="token punctuation">-</span> <span class="token key atrule">destination</span><span class="token punctuation">:</span>
        <span class="token key atrule">host</span><span class="token punctuation">:</span> reviews
        <span class="token key atrule">subset</span><span class="token punctuation">:</span> v2
      <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">20</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="定义如果Header中包含jason用户返回V2版本，否则返回V3版本"><a href="#定义如果Header中包含jason用户返回V2版本，否则返回V3版本" class="headerlink" title="定义如果Header中包含jason用户返回V2版本，否则返回V3版本"></a>定义如果<code>Header</code>中包含<code>jason</code>用户返回<code>V2</code>版本，否则返回<code>V3</code>版本</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3
<span class="token key atrule">kind</span><span class="token punctuation">:</span> VirtualService
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> reviews
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> reviews
  <span class="token key atrule">http</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">match</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">headers</span><span class="token punctuation">:</span>
        <span class="token key atrule">end-user</span><span class="token punctuation">:</span>
          <span class="token key atrule">exact</span><span class="token punctuation">:</span> jason
    <span class="token key atrule">route</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">destination</span><span class="token punctuation">:</span>
        <span class="token key atrule">host</span><span class="token punctuation">:</span> reviews
        <span class="token key atrule">subset</span><span class="token punctuation">:</span> v2
  <span class="token punctuation">-</span> <span class="token key atrule">route</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">destination</span><span class="token punctuation">:</span>
        <span class="token key atrule">host</span><span class="token punctuation">:</span> reviews
        <span class="token key atrule">subset</span><span class="token punctuation">:</span> v3
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其它可以参考<code>samples/bookinfo/networking/</code>目录下配置。</p>
]]></content>
      <categories>
        <category>istio</category>
      </categories>
      <tags>
        <tag>istio</tag>
        <tag>bookinfo</tag>
      </tags>
  </entry>
  <entry>
    <title>Istio使用【dashboard—kiali】</title>
    <url>/istio-shi-yong-dashboard-kiali/</url>
    <content><![CDATA[<blockquote>
<p>本文使用的istio版本号：<code>1.4.2</code></p>
</blockquote>
<h3 id="配置安装kiali"><a href="#配置安装kiali" class="headerlink" title="配置安装kiali"></a>配置安装kiali</h3><p>默认配置，istio并未选择安装kiali，参考上一章<a href="">安装</a>，修改<code>values.yaml</code></p>
<pre class="line-numbers language-sh"><code class="language-sh">vim install/kubernetes/helm/istio/values.yaml
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-yml"><code class="language-yml"># ....
kiali:
  enabled: true
# ....
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>同时如果需要链路监控，需要开启安装<code>jaeger</code></p>
<pre class="line-numbers language-yml"><code class="language-yml">#....
tracing:
  enabled: true
#....
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果系统中没有安装<code>grafana</code>和<code>Prometheus</code>，也需要开启</p>
<pre class="line-numbers language-yml"><code class="language-yml">#.....
grafana:
  enabled: true
 
prometheus:
  enabled: true
#.....
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="配置kiali"><a href="#配置kiali" class="headerlink" title="配置kiali"></a>配置kiali</h3><p>可以在安装前配置好<code>kaili</code>，主要配置集中在</p>
<pre><code>vim install/kubernetes/helm/istio/charts/kiali/values.yaml
</code></pre>
<pre class="line-numbers language-yml"><code class="language-yml">#......
ingress:
  enabled: false
  hosts:
    - kiali.local
 
dashboard:
  auth:
    strategy: login
  secretName: kiali 
  viewOnlyMode: false 
  grafanaURL:  
  jaegerURL:  
prometheusAddr: http://prometheus:9090
#.....
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>配置访问：ingress是否开启，hosts地址，tls…</li>
<li><code>strategy</code>：认证策略，可以是anonymous, login, openshift，默认login</li>
<li><code>secretName</code>：登录用户名/密码，需要提前创建好secret</li>
</ul>
<pre class="line-numbers language-yml"><code class="language-yml">apiVersion: v1
kind: Secret
metadata:
  name: kiali
  labels:
    app: kiali
    version: v1.9
type: Opaque
data:
  username: YWRtaW4=    # admin
  passphrase: YWRtaW4=    # admin
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sh"><code class="language-sh">#base64 加密
echo -n "admin" | base64
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>grafanaURL：grafana地址，如果是在同一个namespace下，可以是</li>
</ul>
<pre><code>http://grafana:3000 或者 http://grafana.monitoring.svc.cluster.local:3000
</code></pre>
<ul>
<li>prometheusAddr：Prometheus地址，如果是在同一个namespace下，可以是</li>
</ul>
<pre><code>http://prometheus:9090 或者 http://prometheus.monitoring.svc.cluster.local:9090
</code></pre>
<ul>
<li>jaegerURL：jaeger地址，默认在同一个namespace istio-system下，可以是</li>
</ul>
<pre><code>http://jaeger-query:16686/jaeger
</code></pre>
<p>如果是在安装后，想要修改kiali配置，可以修改<code>istio-system</code>下<code>configmap</code> <code>kiali</code></p>
<pre><code>kubectl edit cm  kiali   -n istio-system
</code></pre>
<p>修改<code>configmap</code>里面的<code>config.yaml</code>文件，对应的</p>
<pre class="line-numbers language-yml"><code class="language-yml">istio_namespace: istio-system
deployment:
  accessible_namespaces: ['**']
auth:
  strategy: login
server:
  port: 20001
  web_root: /kiali
external_services:
  tracing:
    url: http://jaeger-query:16686/jaeger
  grafana:
    url: http://grafana:3000
  prometheus:
    url: http://prometheus:9090
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>修改完需要重启<code>kiali POD</code>。</p>
<h3 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h3><p><img data-src="/images/istio4.png" alt="istio"></p>
]]></content>
      <categories>
        <category>istio</category>
      </categories>
      <tags>
        <tag>istio</tag>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>Istio使用【sidecar注入】</title>
    <url>/istio-shi-yong-sidecar-zhu-ru/</url>
    <content><![CDATA[<blockquote>
<p><strong>本文使用的istio版本：<code>1.4.2</code></strong></p>
</blockquote>
<h3 id="查看默认sidecar配置"><a href="#查看默认sidecar配置" class="headerlink" title="查看默认sidecar配置"></a>查看默认sidecar配置</h3><pre class="line-numbers language-bash"><code class="language-bash">kubectl get mutatingwebhookconfiguration istio-sidecar-injector -o yaml <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"namespaceSelector:"</span> -A5
 
  namespaceSelector:
    matchLabels:
      istio-injection: enabled
  objectSelector: <span class="token punctuation">{</span><span class="token punctuation">}</span>
  reinvocationPolicy: Never
  rules:
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看出，<code>istio</code>默认<code>sidecar</code>注入规则是，<code>namespace</code>带有标签<code>istio-injection: enabled</code>才会注入sidecar。</p>
<p>查看哪些<code>namespace</code>已经配置注入：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master istio-1.4.2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get namespace -L istio-injection</span>
NAME              STATUS   AGE   ISTIO-INJECTION
default           Active   70d   
ingress-nginx     Active   69d   
istio-system      Active   19h   
kube-node-lease   Active   70d   
kube-public       Active   70d   
kube-system       Active   70d   
naftis            Active   19h   
test-deri         Active   47d 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>为<code>namespace</code>打上注入<code>sidecar</code>标签：</p>
<pre class="line-numbers language-bash"><code class="language-bash">kubectl label namespace default istio-injection<span class="token operator">=</span>enabled --overwrite
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>默认情况，是没有设置。</p>
<h3 id="为namespace设置不注入sidecar"><a href="#为namespace设置不注入sidecar" class="headerlink" title="为namespace设置不注入sidecar"></a>为namespace设置不注入sidecar</h3><p>有些k8s系统组件<code>namespace</code>不应该注入<code>sidecar</code>，如<code>kube-system</code>等，参考如下设置</p>
<pre class="line-numbers language-bash"><code class="language-bash">kubectl get mutatingwebhookconfiguration istio-sidecar-injector -o yaml <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"namespaceSelector:"</span> -A5
 
  namespaceSelector:
    matchExpressions:
    - key: istio-injection
      operator: NotIn
      values:
      - disabled
  rules:
  - apiGroups:
    - <span class="token string">""</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>为<code>namespace</code>打上不注入<code>sidecar</code>标签:</p>
<pre class="line-numbers language-bash"><code class="language-bash">kubectl label namespace istio-system istio-injection<span class="token operator">=</span>disabled --overwrite
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash">kubectl get namespace -L istio-injection
NAME           STATUS    AGE       ISTIO-INJECTION
default        Active    18d
istio-system   Active    3d        disabled
kube-public    Active    18d       disabled
kube-system    Active    18d       disabled
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="查看sidecar配置策略"><a href="#查看sidecar配置策略" class="headerlink" title="查看sidecar配置策略"></a>查看sidecar配置策略</h3><p><code>sidecar</code>配置保存在<code>configmap-istio-sidecar-injector</code>中，更多配置可以在<code>install/kubernetes/helm/istio/charts/sidecarInjectorWebhook/values.yaml</code>中查看。</p>
<p>主要配置，默认策略：</p>
<pre class="line-numbers language-bash"><code class="language-bash">kubectl -n istio-system get configmap istio-sidecar-injector -o jsonpath<span class="token operator">=</span><span class="token string">'{.data.config}'</span> <span class="token operator">|</span> <span class="token function">grep</span> policy:
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>允许的值为<code>disabled</code>和<code>enabled</code>。仅当<code>Webhook&nbsp;namespaceSelector</code>匹配目标名称空间时，才应用默认策略。无法识别的策略导致注入被完全禁用。</p>
<blockquote>
<p><font color="red">注意</font>：①策略为<code>disabled</code>，但是想要为POD注入<code>sidecar</code>，增加<code>annotation sidecar.istio.io/inject: "true"</code>即可<br>&nbsp; ②策略为<code>enabled</code>，但是不想要为POD注入<code>sidecar</code>，增加<code>annotation sidecar.istio.io/inject: "false"</code>即可</p>
</blockquote>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> ignored
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">template</span><span class="token punctuation">:</span>
    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>
      <span class="token key atrule">annotations</span><span class="token punctuation">:</span>
        <span class="token key atrule">sidecar.istio.io/inject</span><span class="token punctuation">:</span> <span class="token string">"false"</span>
    <span class="token key atrule">spec</span><span class="token punctuation">:</span>
      <span class="token key atrule">containers</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ignored
        <span class="token key atrule">image</span><span class="token punctuation">:</span> tutum/curl
        <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/sleep"</span><span class="token punctuation">,</span><span class="token string">"infinity"</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="手动注入sidecar"><a href="#手动注入sidecar" class="headerlink" title="手动注入sidecar"></a>手动注入<code>sidecar</code></h3><p>为一个写好的yaml文件手动注入sidecar，我们可以使用<code>istioctl kube-inject</code>:</p>
<pre class="line-numbers language-bash"><code class="language-bash">istioctl kube-inject -f samples/sleep/sleep.yaml <span class="token operator">|</span> kubectl apply -f -
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>默认情况下，这将使用集群内配置。或者，可以使用配置的本地副本来完成注入。下面命令可以将默认配置导出到文件：</p>
<pre class="line-numbers language-bash"><code class="language-bash">kubectl -n istio-system get configmap istio-sidecar-injector -o<span class="token operator">=</span>jsonpath<span class="token operator">=</span><span class="token string">'{.data.config}'</span> <span class="token operator">></span> inject-config.yaml
kubectl -n istio-system get configmap istio-sidecar-injector -o<span class="token operator">=</span>jsonpath<span class="token operator">=</span><span class="token string">'{.data.values}'</span> <span class="token operator">></span> inject-values.yaml
kubectl -n istio-system get configmap istio -o<span class="token operator">=</span>jsonpath<span class="token operator">=</span><span class="token string">'{.data.mesh}'</span> <span class="token operator">></span> mesh-config.yaml
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>然后再将文件中配置注入到已建好的<code>YAML</code>中并运行：</p>
<pre class="line-numbers language-bash"><code class="language-bash">istioctl kube-inject \
    --injectConfigFile inject-config.yaml \
    --meshConfigFile mesh-config.yaml \
    --valuesFile inject-values.yaml \
    --filename samples/sleep/sleep.yaml \
    <span class="token operator">|</span> kubectl apply -f -
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这和第一条命令效果一样。验证<code>sidecar</code>已经注入：</p>
<pre class="line-numbers language-bash"><code class="language-bash">kubectl get pod  -l app<span class="token operator">=</span>sleep
NAME                     READY   STATUS    RESTARTS   AGE
sleep-64c6f57bc8-f5n4x   2/2     Running   0          24s
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="其它配置：neverInjectSelector-alwaysInjectSelector"><a href="#其它配置：neverInjectSelector-alwaysInjectSelector" class="headerlink" title="其它配置：neverInjectSelector/alwaysInjectSelector"></a>其它配置：<code>neverInjectSelector/alwaysInjectSelector</code></h3><p>参考<a href="https://istio.io/docs/setup/additional-setup/sidecar-injection/#more-control-adding-exceptions">官网</a></p>
<p>示例：</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> istio<span class="token punctuation">-</span>sidecar<span class="token punctuation">-</span>injector
<span class="token key atrule">data</span><span class="token punctuation">:</span>
  <span class="token key atrule">config</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token punctuation">-</span>
    <span class="token key atrule">policy</span><span class="token punctuation">:</span> enabled
    <span class="token key atrule">neverInjectSelector</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">key</span><span class="token punctuation">:</span> openshift.io/build.name<span class="token punctuation">,</span> <span class="token key atrule">operator</span><span class="token punctuation">:</span> Exists<span class="token punctuation">}</span>
      <span class="token punctuation">-</span> <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">key</span><span class="token punctuation">:</span> openshift.io/deployer<span class="token punctuation">-</span>pod<span class="token punctuation">-</span>for.name<span class="token punctuation">,</span> <span class="token key atrule">operator</span><span class="token punctuation">:</span> Exists<span class="token punctuation">}</span>
    <span class="token key atrule">template</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token punctuation">-</span>
      <span class="token key atrule">initContainers</span><span class="token punctuation">:</span>
<span class="token punctuation">...</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="配置优先级"><a href="#配置优先级" class="headerlink" title="配置优先级"></a>配置优先级</h3><p>如果<code>POD</code>配置了<code>注解</code>、<code>neverInjectSelector/alwaysInjectSelector</code>也都配置了，默认策略也配置了，那么他们之间的优先级参考如下：</p>
<pre><code>Pod Annotations → NeverInjectSelector → AlwaysInjectSelector → Default Policy
</code></pre>
<h3 id="卸载自动注入sidecar"><a href="#卸载自动注入sidecar" class="headerlink" title="卸载自动注入sidecar"></a>卸载自动注入sidecar</h3><h4 id="卸载istio中sidecar组件"><a href="#卸载istio中sidecar组件" class="headerlink" title="卸载istio中sidecar组件"></a>卸载istio中sidecar组件</h4><pre class="line-numbers language-bash"><code class="language-bash">kubectl delete mutatingwebhookconfiguration istio-sidecar-injector
kubectl -n istio-system delete <span class="token function">service</span> istio-sidecar-injector
kubectl -n istio-system delete deployment istio-sidecar-injector
kubectl -n istio-system delete serviceaccount istio-sidecar-injector-service-account
kubectl delete clusterrole istio-sidecar-injector-istio-system
kubectl delete clusterrolebinding istio-sidecar-injector-admin-role-binding-istio-system
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="删除某个namespace自动注入"><a href="#删除某个namespace自动注入" class="headerlink" title="删除某个namespace自动注入"></a>删除某个namespace自动注入</h4><pre class="line-numbers language-bash"><code class="language-bash">kubectl label namespace default istio-injection-
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="sidecar注入问题"><a href="#sidecar注入问题" class="headerlink" title="sidecar注入问题"></a>sidecar注入问题</h3><p>更多可以参考<a href="https://istio.io/docs/ops/common-problems/injection/">官网</a>.</p>
]]></content>
      <categories>
        <category>istio</category>
      </categories>
      <tags>
        <tag>istio</tag>
        <tag>sidecar</tag>
      </tags>
  </entry>
  <entry>
    <title>JdbcTemplate中RowMapper用法</title>
    <url>/jdbctemplate-zhong-rowmapper-yong-fa/</url>
    <content><![CDATA[<blockquote>
<p><code>查询结果</code>和<code>java对象</code>之间的映射.</p>
</blockquote>
<h3 id="RowMapper映射Bean容器的用法"><a href="#RowMapper映射Bean容器的用法" class="headerlink" title="RowMapper映射Bean容器的用法"></a>RowMapper映射Bean容器的用法</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">UserRowMapper</span> <span class="token keyword">implements</span> <span class="token class-name">RowMapper</span><span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> User <span class="token function">mapRow</span><span class="token punctuation">(</span>ResultSet rs<span class="token punctuation">,</span> <span class="token keyword">int</span> rowNum<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>
        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setGender</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"gender"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> user<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如此，完成了一个对<code>User</code>类的<code>RowMapper</code>映射。直接<code>jdbcTemplate.query(sql,new UserRowMapper)</code>即可将查询的信息存入<code>java Bean</code>中，靠的是<code>bean</code>中的<code>get/set</code>方法。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://blog.csdn.net/chenyezhou1/article/details/71122570">https://blog.csdn.net/chenyezhou1/article/details/71122570</a></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>RowMapper</tag>
      </tags>
  </entry>
  <entry>
    <title>Istio使用【链路监控】</title>
    <url>/istio-shi-yong-lian-lu-jian-kong/</url>
    <content><![CDATA[<blockquote>
<p><strong>本文使用的istio版本：<code>1.4.2</code></strong></p>
</blockquote>
<h3 id="开启链路监控"><a href="#开启链路监控" class="headerlink" title="开启链路监控"></a>开启链路监控</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">...</span>.
<span class="token comment" spellcheck="true">#</span>
<span class="token comment" spellcheck="true"># addon jaeger tracing configuration</span>
<span class="token comment" spellcheck="true">#</span>
<span class="token key atrule">tracing</span><span class="token punctuation">:</span>
  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token punctuation">...</span>.
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看出。<code>istio</code>链路监控集成使用的是<code>Jaeger</code>，<code>Jaeger</code>是什么，参考<a href="https://blog.csdn.net/wzy_168/article/details/103628084">开发分布式追踪OpenTracing与Jaeger相关文档整理</a>。</p>
<h3 id="查看是否启动成功"><a href="#查看是否启动成功" class="headerlink" title="查看是否启动成功"></a>查看是否启动成功</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master istio-1.4.2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get po -n istio-system --show-labels | grep jaeger</span>
istio-tracing-795c9c64c4-224wm            1/1     Running     0          47h   app<span class="token operator">=</span>jaeger,chart<span class="token operator">=</span>tracing,heritage<span class="token operator">=</span>Tiller,pod-template-hash<span class="token operator">=</span>795c9c64c4,release<span class="token operator">=</span>istio
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="访问jaeger-UI"><a href="#访问jaeger-UI" class="headerlink" title="访问jaeger UI"></a>访问<code>jaeger UI</code></h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master istio-1.4.2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get svc -n istio-system | grep jaeger</span>
jaeger-agent             ClusterIP      None             <span class="token operator">&lt;</span>none<span class="token operator">></span>        5775/UDP,6831/UDP,6832/UDP                                                                                                                   47h
jaeger-collector         ClusterIP      10.110.206.207   <span class="token operator">&lt;</span>none<span class="token operator">></span>        14267/TCP,14268/TCP,14250/TCP                                                                                                                47h
jaeger-query             NodePort       10.101.53.38     <span class="token operator">&lt;</span>none<span class="token operator">></span>        16686:31944/TCP 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>如上所示，默认情况下，<code>jaeger-query</code>类型也是<code>ClusterIP</code>，为了便于访问，直接修改成<code>NodePort</code>类型:</p>
<pre class="line-numbers language-bash"><code class="language-bash">kubectl edit svc jaeger-query  -n istio-system
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后访问<code>IP:31944</code>即可。</p>
<h3 id="UI预览"><a href="#UI预览" class="headerlink" title="UI预览"></a>UI预览</h3><p><img data-src="/images/jaeger1.jpg" alt="Jaeger UI"><br><img data-src="/images/jaeger2.jpg" alt="Jaeger UI"><br><img data-src="/images/jaeger3.jpg" alt="Jaeger UI"></p>
<h3 id="采集频率控制"><a href="#采集频率控制" class="headerlink" title="采集频率控制"></a>采集频率控制</h3><p>如果所有的请求都采集监控，不管出于性能考虑还是资源考虑，都是不实际的。</p>
<p><code>pilot</code>组件中<code>PILOT_TRACE_SAMPLING</code>环境变量用于控制采集率，默认为<code>1</code>（<code>0~100</code>），测试的时候可以改大点便于分析:</p>
<pre class="line-numbers language-bash"><code class="language-bash"> kubectl -n istio-system get deploy istio-pilot -oyaml <span class="token operator">|</span> <span class="token function">grep</span> PILOT_TRACE_SAMPLING -A5
 
--
        - name: PILOT_TRACE_SAMPLING
          value: <span class="token string">"1"</span>
        - name: PILOT_ENABLE_PROTOCOL_SNIFFING_FOR_OUTBOUND
          value: <span class="token string">"true"</span>
        - name: PILOT_ENABLE_PROTOCOL_SNIFFING_FOR_INBOUND
          value: <span class="token string">"false"</span>
---
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="监控数据采集存储"><a href="#监控数据采集存储" class="headerlink" title="监控数据采集存储"></a>监控数据采集存储</h3><p>参考<a href="https://blog.csdn.net/wzy_168/article/details/103699618">控制台kiali配置</a>，其中配置了<code>Prometheus</code>和<code>grafana</code>。参考<a href="https://cloud.tencent.com/developer/article/1435739">Istio链路监控和监控可视化</a></p>
<ul>
<li><code>prometheus</code>作为基础数据采集和存储方式，可以通过<code>PromQL</code>查询指标。</li>
<li><code>grafana</code>可定制化报表展示。</li>
</ul>
<p><img data-src="/images/istio1.jpg" alt="grafana"></p>
]]></content>
      <categories>
        <category>istio</category>
      </categories>
      <tags>
        <tag>istio</tag>
        <tag>链路监控</tag>
      </tags>
  </entry>
  <entry>
    <title>K8s中时区问题【使用PodPreset方法】</title>
    <url>/k8s-zhong-shi-qu-wen-ti-shi-yong-podpreset-fang-fa/</url>
    <content><![CDATA[<blockquote>
<p>K8S启动的POD，默认时区与中国相差8小时，在排查问题或者查看日志时非常不方便。</p>
</blockquote>
<h3 id="增加容器环境变量，指定时区"><a href="#增加容器环境变量，指定时区" class="headerlink" title="增加容器环境变量，指定时区"></a>增加容器环境变量，指定时区</h3><pre class="line-numbers language-sh"><code class="language-sh">docker run -it --rm -e "TZ=Asia/Shanghai" centos
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>对应k8s中配置:</p>
<pre class="line-numbers language-yml"><code class="language-yml">apiVersion: v1
kind: Pod
metadata:
  name: pod-env-tz
spec:
  containers:
  - name: ngx
    image: nginx:latest
    imagePullPolicy: IfNotPresent
    env:
      - name: TZ
        value: Asia/Shanghai
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="容器启动时，挂载到宿主机时区文件"><a href="#容器启动时，挂载到宿主机时区文件" class="headerlink" title="容器启动时，挂载到宿主机时区文件"></a>容器启动时，挂载到宿主机时区文件</h3><pre><code>docker run -it --rm -v /etc/localtime:/etc/localtime  centos
</code></pre>
<p>对应k8s中配置</p>
<pre class="line-numbers language-yml"><code class="language-yml">apiVersion: v1
kind: Pod
metadata:
  name: pod-vol-tz
spec:
  containers:
  - name: ngx
    image: nginx:latest
    imagePullPolicy: IfNotPresent
    volumeMounts:
    - name: tz-config
      mountPath: /etc/localtime
      readOnly: true
  volumes:
  - name: tz-config
    hostPath:
      path: /etc/localtime
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以上两种方法都可以解决问题，但是<strong>缺点明显</strong>，每次新建<code>POD</code>都需要指定。</p>
<h3 id="推荐使用PodPreset方式"><a href="#推荐使用PodPreset方式" class="headerlink" title="推荐使用PodPreset方式"></a>推荐使用PodPreset方式</h3><h4 id="PodPreset（参考中文文档）"><a href="#PodPreset（参考中文文档）" class="headerlink" title="PodPreset（参考中文文档）"></a>PodPreset（<a href="https://www.kubernetes.org.cn/podpreset">参考中文文档</a>）</h4><p>PodPreset用来给指定标签的Pod注入额外的信息，如环境变量、存储卷等。这样，Pod模板就不需要为每个Pod都显式设置重复的信息。</p>
<h4 id="开启PodPreset"><a href="#开启PodPreset" class="headerlink" title="开启PodPreset"></a>开启PodPreset</h4><ul>
<li>开启<code>API</code> <code>settings.k8s.io/v1alpha1/podpreset</code></li>
<li>开启准入控制 <code>PodPreset</code></li>
</ul>
<h4 id="默认情况下PodPreset不可用"><a href="#默认情况下PodPreset不可用" class="headerlink" title="默认情况下PodPreset不可用"></a>默认情况下PodPreset不可用</h4><pre class="line-numbers language-sh"><code class="language-sh">[root@k8s-master ~]# kubectl get podpreset
error: the server doesn't have a resource type "podpreset"
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="开启之后应该是"><a href="#开启之后应该是" class="headerlink" title="开启之后应该是"></a>开启之后应该是</h4><pre class="line-numbers language-sh"><code class="language-sh">[root@k8s-master ~]# kubectl get podpreset
No resources found.
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="如何开启PodPreset？"><a href="#如何开启PodPreset？" class="headerlink" title="如何开启PodPreset？"></a>如何开启PodPreset？</h3><p>编辑<code>/etc/kubernetes/manifests/kube-apiserver.yaml</code></p>
<pre class="line-numbers language-yml"><code class="language-yml">spec:
  containers:
  - command:
    - kube-apiserver
    - --advertise-address=192.168.1.210
    - --allow-privileged=true
    - --authorization-mode=Node,RBAC
    - --client-ca-file=/etc/kubernetes/pki/ca.crt
    - --enable-admission-plugins=NodeRestriction,PodPreset
    - --enable-bootstrap-token-auth=true
    - --runtime-config=settings.k8s.io/v1alpha1=true
    - --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>添加一行配置<code>- --runtime-config=settings.k8s.io/v1alpha1=true，enable-admission-plugins后面增加PodPreset</code>。</p>
<p>等待<code>ApiServer</code><strong>自动重启</strong>完成。</p>
<h3 id="创建PodPreset"><a href="#创建PodPreset" class="headerlink" title="创建PodPreset"></a>创建PodPreset</h3><pre class="line-numbers language-yml"><code class="language-yml">apiVersion: settings.k8s.io/v1alpha1
kind: PodPreset
metadata:
  name: allow-tz-env
  namespace: default
spec:
  selector:
    matchLabels:
  env:
    - name: TZ
      value: Asia/Shanghai
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sh"><code class="language-sh">[root@k8s-master ~]# kubectl get podpresets
NAME           CREATED AT
allow-tz-env   2019-12-16T07:57:54Z
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>现在创建一个新的POD，查看其环境变量。</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>我这边简单测试，删除一个已有的<code>consul容器</code>，等它重启之后，查看它的环境变量<br><img data-src="/images/k8s8.png" alt="consul"></p>
<p>可以看到，容器最后环境变量确实增加的时区配置。</p>
<h3 id="busybox通过时区设置时间不生效问题"><a href="#busybox通过时区设置时间不生效问题" class="headerlink" title="busybox通过时区设置时间不生效问题"></a>busybox通过时区设置时间不生效问题</h3><p>原因参考<a href="https://blog.csdn.net/vc66vcc/article/details/78747815">这篇</a>。</p>
<p>解决办法，通过挂载磁盘<code>/etc/localtime</code>，也可以通过<code>PodPreset</code>方式，为每个创建的<code>POD自动添加挂载</code>。</p>
<pre class="line-numbers language-yml"><code class="language-yml">apiVersion: settings.k8s.io/v1alpha1
kind: PodPreset
metadata:
  name: allow-tz-env
spec:
  selector:
    matchLabels:
  volumeMounts:
    - mountPath: /etc/localtime
      name: tz-config
      readOnly: true
  volumes:
    - name: tz-config
      hostPath: 
        path: /etc/localtime
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样新增的<code>POD</code>会自动挂载宿主机上的时间文件。</p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>时区</tag>
      </tags>
  </entry>
  <entry>
    <title>K8s持久化存储【使用NFS】</title>
    <url>/k8s-chi-jiu-hua-cun-chu-shi-yong-nfs/</url>
    <content><![CDATA[<h3 id="k8s所有节点安装NFS"><a href="#k8s所有节点安装NFS" class="headerlink" title="k8s所有节点安装NFS"></a>k8s所有节点安装NFS</h3><pre><code>yum install nfs-utils
 
#所有节点，不论NFS服务端还是客户端
systemctl enable rpcbind
systemctl start rpcbind
 
#NFS服务端
systemctl enable nfs
systemctl start nfs
</code></pre>
<h3 id="在NFS服务端配置挂载磁盘"><a href="#在NFS服务端配置挂载磁盘" class="headerlink" title="在NFS服务端配置挂载磁盘"></a>在NFS服务端配置挂载磁盘</h3><ul>
<li>创建目录：<code>mkdir /data</code></li>
<li>修改权限：<code>chmod 755 /data</code></li>
<li>编辑NFS配置：<code>vi /etc/exports</code></li>
<li>添加：<code>/data/ 192.168.0.0/24(rw,sync,no_root_squash,no_all_squash)</code></li>
<li>重启：<code>systemctl restart nfs</code></li>
<li>或者执行<code>exportfs -r</code>生效</li>
<li>检查：<code>showmount -e localhost</code></li>
</ul>
<h3 id="K8s中创建PersistentVolume"><a href="#K8s中创建PersistentVolume" class="headerlink" title="K8s中创建PersistentVolume"></a>K8s中创建PersistentVolume</h3><pre class="line-numbers language-yml"><code class="language-yml">apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv0003
spec:
  capacity: #容量
     storage:5Gi
  volumeMode: Filesystem #存储卷模式
  accessModes: #访问模式
  - ReadWriteOnce
  persistentVolumeReclaimPolicy: Recycle #持久化卷回收策略
  storageClassName: slow #存储类
  mountOptions: #挂接选项
   - hard
   - nfsvers=4.1
  nfs:
     path: /data
     server: 172.17.0.2
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="访问模式（Access-Modes）"><a href="#访问模式（Access-Modes）" class="headerlink" title="访问模式（Access Modes）"></a>访问模式（Access Modes）</h4><p>只要资源提供者支持，持久卷能够通过任何方式加载到主机上。每种存储都会有不同的能力，每个PV的访问模式也会被设置成为该卷所支持的特定模式。例如NFS能够支持多个读写客户端，但某个NFS PV可能会在服务器上以只读方式使用。每个PV都有自己的一系列的访问模式，这些访问模式取决于PV的能力。</p>
<p>访问模式的可选范围如下：</p>
<ul>
<li>ReadWriteOnce：该卷能够以读写模式被加载到一个节点上。</li>
<li>ReadOnlyMany：该卷能够以只读模式加载到多个节点上。</li>
<li>ReadWriteMany：该卷能够以读写模式被多个节点同时加载。</li>
</ul>
<h4 id="类（Class）"><a href="#类（Class）" class="headerlink" title="类（Class）"></a>类（Class）</h4><p>在PV中可以指定存储类，通过设置<code>storageClassName</code>字段进行设置。如果设置了存储类，则此PV只能被绑定到也指定了此存储类的PVC。</p>
<h4 id="回收策略"><a href="#回收策略" class="headerlink" title="回收策略"></a>回收策略</h4><p>当前的回收策略可选值包括：</p>
<ul>
<li>Retain-持久化卷被释放后，需要手工进行回收操作。</li>
<li>Recycle-基础擦除（<code>rm-rf /thevolume/*</code>）</li>
<li>Delete-相关的存储资产，例如AWSEBS或GCE PD卷一并删除。<br>目前，只有<code>NFS</code>和<code>HostPath</code>支持<code>Recycle</code>策略，AWSEBS、GCE PD支持Delete策略。</li>
</ul>
<h3 id="K8s中创建PersistentVolumeClaim"><a href="#K8s中创建PersistentVolumeClaim" class="headerlink" title="K8s中创建PersistentVolumeClaim"></a>K8s中创建PersistentVolumeClaim</h3><pre class="line-numbers language-yml"><code class="language-yml">kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: myclaim
spec:
  accessModes: #访问模式
    - ReadWriteOnce
  volumeMode: Filesystem #存储卷模式
  resources: #资源
    requests:
      storage: 8Gi
  storageClassName: slow #存储类
  selector: #选择器
    matchLabels:
      release: "stable"
    matchExpressions: #匹配表达式
      - {key: environment, operator: In, values: [dev]}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h4><p>在PVC中，可以通过标签选择器来进一步的过滤PV。仅仅与选择器匹配的PV才会被绑定到PVC中。选择器的组成如下：</p>
<ul>
<li><code>matchLabels</code>： 只有存在与此处的标签一样的PV才会被PVC选中；</li>
<li><code>matchExpressions</code> ：匹配表达式由键、值和操作符组成，操作符包括<code>In</code>, <code>NotIn</code>, <code>Exists</code>和<code>DoesNotExist</code>，只有符合表达式的PV才能被选择。<br>如果同时设置了<code>matchLabels</code>和<code>matchExpressions</code>，则会进行求与，即只有同时满足上述匹配要求的PV才会被选择。</li>
</ul>
<h4 id="存储类"><a href="#存储类" class="headerlink" title="存储类"></a>存储类</h4><p>如果PVC使用storageClassName字段指定一个存储类，那么只有指定了同样的存储类的PV才能被绑定到PVC上。对于PVC来说，存储类并不是必须的。依赖于安装方法，可以在安装过程中使用add-on管理器将默认的StorageClass部署至Kubernetes集群中。当PVC指定了选择器，并且指定了StorageClass，则在匹配PV时，取两者之间的与：即仅仅同时满足存储类和带有要求标签值的PV才能被匹配上。</p>
<h3 id="Pod使用刚刚创建的持久化存储"><a href="#Pod使用刚刚创建的持久化存储" class="headerlink" title="Pod使用刚刚创建的持久化存储"></a>Pod使用刚刚创建的持久化存储</h3><pre class="line-numbers language-yml"><code class="language-yml">kind: Pod
apiVersion: v1
metadata:
  name: mypod
spec:
  containers:
  - name: myfrontend
    image: dockerfile/nginx
     volumeMounts: #挂接存储卷
     - mountPath: "/var/www/html" #POD内挂接的路径
       name: mypd #所要挂接的存储卷的名称
 volumes: #定义存储卷
 - name: mypd
   persistentVolumeClaim: #所使用的持久化存储卷声明
     claimName: myclaim
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>nfs</tag>
      </tags>
  </entry>
  <entry>
    <title>K8s问题【flannel一直重启问题-CrashLoopBackOff】</title>
    <url>/k8s-wen-ti-flannel-yi-zhi-chong-qi-wen-ti-crashloopbackoff/</url>
    <content><![CDATA[<h3 id="kubectl-describe-命令查看"><a href="#kubectl-describe-命令查看" class="headerlink" title="kubectl describe 命令查看"></a>kubectl describe 命令查看</h3><pre class="line-numbers language-log"><code class="language-log">Events:
  Type     Reason     Age                   From               Message
  ----     ------     ----                  ----               -------
  Normal   Scheduled  13m                   default-scheduler  Successfully assigned kube-system/kube-flannel-ds-amd64-vfhnj to node-d1
  Normal   Pulled     13m                   kubelet, node-d1   Container image "quay.io/coreos/flannel:v0.11.0-amd64" already present on machine
  Normal   Created    13m                   kubelet, node-d1   Created container install-cni
  Normal   Started    13m                   kubelet, node-d1   Started container install-cni
  Normal   Pulled     10m (x5 over 13m)     kubelet, node-d1   Container image "quay.io/coreos/flannel:v0.11.0-amd64" already present on machine
  Normal   Created    10m (x5 over 13m)     kubelet, node-d1   Created container kube-flannel
  Normal   Started    10m (x5 over 13m)     kubelet, node-d1   Started container kube-flannel
  Warning  BackOff    3m39s (x30 over 12m)  kubelet, node-d1   Back-off restarting failed container
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="kubectl-logs命令查看"><a href="#kubectl-logs命令查看" class="headerlink" title="kubectl logs命令查看"></a>kubectl logs命令查看</h3><pre class="line-numbers language-log"><code class="language-log">[root@master ~]# kubectl logs  kube-flannel-ds-amd64-9w5nq -n kube-system
I1216 05:59:40.055608       1 main.go:527] Using interface with name eth0 and address 192.168.1.82
I1216 05:59:40.055666       1 main.go:544] Defaulting external address to interface address (192.168.1.82)
E1216 06:00:10.056546       1 main.go:241] Failed to create SubnetManager: error retrieving pod spec for 'kube-system/kube-flannel-ds-amd64-9w5nq': Get https://10.96.0.1:443/api/v1/namespaces/kube-system/pods/kube-flannel-ds-amd64-9w5nq: dial tcp 10.96.0.1:443: i/o timeout
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>问题排查<br>网络问题？<br>通过curl命令测试，网络没有问题。</p>
</blockquote>
<h3 id="测试kube-proxy"><a href="#测试kube-proxy" class="headerlink" title="测试kube-proxy"></a>测试kube-proxy</h3><p>重启该节点上的<code>kube-proxy</code>容器，并查看日志</p>
<pre><code>kubectl delete pod kube-proxy-vtd27 -n kube-system
</code></pre>
<pre class="line-numbers language-log"><code class="language-log">[root@master ~]# kubectl logs kube-proxy-pljct -n kube-system
W1216 06:30:51.741835       1 proxier.go:513] Failed to load kernel module ip_vs_wrr with modprobe. You can ignore this message when kube-proxy is running inside container without mounting /lib/modules
W1216 06:30:51.742536       1 proxier.go:513] Failed to load kernel module ip_vs_sh with modprobe. You can ignore this message when kube-proxy is running inside container without mounting /lib/modules
W1216 06:30:51.748495       1 proxier.go:513] Failed to load kernel module ip_vs_wrr with modprobe. You can ignore this message when kube-proxy is running inside container without mounting /lib/modules
W1216 06:30:51.749223       1 proxier.go:513] Failed to load kernel module ip_vs_sh with modprobe. You can ignore this message when kube-proxy is running inside container without mounting /lib/modules
E1216 06:30:51.750805       1 server_others.go:259] can't determine whether to use ipvs proxy, error: IPVS proxier will not be used because the following required kernel modules are not loaded: [ip_vs_wrr ip_vs_sh]
I1216 06:30:51.757054       1 server_others.go:143] Using iptables Proxier.
W1216 06:30:51.757122       1 proxier.go:321] clusterCIDR not specified, unable to distinguish between internal and external traffic
I1216 06:30:51.757338       1 server.go:534] Version: v1.15.0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>这里明显有个问题。一些需要的内核模块加载失败，参考安装文档，已经配置过内核模块。重新尝试，问题依然存在。</p>
<pre class="line-numbers language-sh"><code class="language-sh">[root@master ~]# cat > /etc/sysconfig/modules/ipvs.modules <<EOF
> #!/bin/bash
> modprobe -- ip_vs
> modprobe -- ip_vs_rr
> modprobe -- ip_vs_wrr
> modprobe -- ip_vs_sh
> modprobe -- nf_conntrack_ipv4
> EOF
[root@master ~]# chmod 755 /etc/sysconfig/modules/ipvs.modules && bash /etc/sysconfig/modules/ipvs.modules && lsmod | grep -e ip_vs -e nf_conntrack_ipv4
ip_vs_sh               12688  0 
ip_vs_wrr              12697  0 
ip_vs_rr               12600  150 
ip_vs                 145497  156 ip_vs_rr,ip_vs_sh,ip_vs_wrr
nf_conntrack_ipv4      15053  6 
nf_defrag_ipv4         12729  1 nf_conntrack_ipv4
nf_conntrack          139224  9 ip_vs,nf_nat,nf_nat_ipv4,nf_nat_ipv6,xt_conntrack,nf_nat_masquerade_ipv4,nf_conntrack_netlink,nf_conntrack_ipv4,nf_conntrack_ipv6
libcrc32c              12644  3 ip_vs,nf_nat,nf_conntrack
[root@master ~]# lsmod | grep -e ip_vs -e nf_conntrack_ipv4
ip_vs_sh               12688  0 
ip_vs_wrr              12697  0 
ip_vs_rr               12600  150 
ip_vs                 145497  156 ip_vs_rr,ip_vs_sh,ip_vs_wrr
nf_conntrack_ipv4      15053  6 
nf_defrag_ipv4         12729  1 nf_conntrack_ipv4
nf_conntrack          139224  9 ip_vs,nf_nat,nf_nat_ipv4,nf_nat_ipv6,xt_conntrack,nf_nat_masquerade_ipv4,nf_conntrack_netlink,nf_conntrack_ipv4,nf_conntrack_ipv6
libcrc32c              12644  3 ip_vs,nf_nat,nf_conntrack
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h4><p>由于<code>ipvs</code>已经加入到内核主干，所以需要内核模块支持，请确保内核已经加载了相应模块；如不确定，执行以下脚本，以确保内核加载相应模块，否则会出现<code>failed to load kernel modules: [ip_vs_rr ip_vs_sh ip_vs_wrr]</code>错误</p>
<pre class="line-numbers language-sh"><code class="language-sh">cat > /etc/sysconfig/modules/ipvs.modules <<EOF
#!/bin/bash
ipvs_modules="ip_vs ip_vs_lc ip_vs_wlc ip_vs_rr ip_vs_wrr ip_vs_lblc ip_vs_lblcr ip_vs_dh ip_vs_sh ip_vs_fo ip_vs_nq ip_vs_sed ip_vs_ftp nf_conntrack_ipv4"
for kernel_module in \${ipvs_modules}; do
    /sbin/modinfo -F filename \${kernel_module} > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        /sbin/modprobe \${kernel_module}
    fi
done
EOF
chmod 755 /etc/sysconfig/modules/ipvs.modules && bash /etc/sysconfig/modules/ipvs.modules && lsmod | grep ip_vs
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行后应该如下图所示，如果<code>lsmod | grep ip_vs</code>并未出现 <code>ip_vs_rr</code> 等模块；</p>
<pre class="line-numbers language-sh"><code class="language-sh">[root@node-d1 ~]# lsmod | grep ip_vs
ip_vs_ftp              13079  0 
ip_vs_sed              12519  0 
ip_vs_nq               12516  0 
ip_vs_sh               12688  0 
ip_vs_dh               12688  0 
ip_vs_lblcr            12922  0 
ip_vs_lblc             12819  0 
ip_vs_wrr              12697  0 
ip_vs_wlc              12519  0 
ip_vs_lc               12516  0 
nf_nat                 26583  5 ip_vs_ftp,nf_nat_ipv4,nf_nat_ipv6,xt_nat,nf_nat_masquerade_ipv4
ip_vs_rr               12600  136 
ip_vs                 145497  162 ip_vs_dh,ip_vs_lc,ip_vs_nq,ip_vs_rr,ip_vs_sh,ip_vs_ftp,ip_vs_sed,ip_vs_wlc,ip_vs_wrr,ip_vs_lblcr,ip_vs_lblc
nf_conntrack          139224  9 ip_vs,nf_nat,nf_nat_ipv4,nf_nat_ipv6,xt_conntrack,nf_nat_masquerade_ipv4,nf_conntrack_netlink,nf_conntrack_ipv4,nf_conntrack_ipv6
libcrc32c              12644  3 ip_vs,nf_nat,nf_conntrack
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后重启<code>Kube-proxy</code>和<code>flannel</code>容器，问题解决。</p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>flannel</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes存储Longhorn</title>
    <url>/kubernetes-cun-chu-longhorn/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a><a href="https://www.rancher.cn/longhorn/">简介</a></h3><ul>
<li>Kubernetes的高可用持久化存储</li>
<li>简单的增量快照和备份</li>
<li>跨集群灾难恢复</li>
</ul>
<h3 id="安装环境要求"><a href="#安装环境要求" class="headerlink" title="安装环境要求"></a>安装环境要求</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 运行这个命令检查环境</span>
curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v1.2.3/scripts/environment_check.sh <span class="token operator">|</span> <span class="token function">bash</span>
<span class="token comment" spellcheck="true"># 所有节点安装必要依赖</span>
yum <span class="token function">install</span> iscsi-initiator-utils
yum <span class="token function">install</span> nfs-utils
yum <span class="token function">install</span> jq -y
<span class="token comment" spellcheck="true"># 使用helm安装Longhorn</span>
helm repo add longhorn https://charts.longhorn.io
helm repo update
helm <span class="token function">install</span> longhorn longhorn/longhorn --namespace longhorn-system --create-namespace
kubectl -n longhorn-system get pod
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>查看charts默认配置：helm inspect values longhorn/longhorn<br>修改默认值：helm install longhorn longhorn/longhorn –namespace longhorn-system –create-namespace –set persistence.defaultClassReplicaCount=1</p>
</blockquote>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>直接在Longhorn-UI上操作使用</p>
<h3 id="设置备份URL"><a href="#设置备份URL" class="headerlink" title="设置备份URL"></a>设置备份URL</h3><p><code>longhorn</code>备份<code>PV</code>目前支持<code>s3</code>和<code>nfs</code>，打开<code>UI</code>选择<code>Setting</code>，选择<code>General</code>，下拉选择<code>Backup Target</code>，填写<code>NFS</code>服务器地址，格式<code>nfs://172.16.100.13:/data/nfs</code>.</p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>Longhorn</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统磁盘使用情况相关命令</title>
    <url>/linux-xi-tong-ci-pan-shi-yong-qing-kuang-xiang-guan-ming-ling/</url>
    <content><![CDATA[<h3 id="df命令"><a href="#df命令" class="headerlink" title="df命令"></a>df命令</h3><p>Linux df命令用于显示目前在Linux系统上的文件系统的磁盘使用情况统计。</p>
<pre><code>df -h
</code></pre>
<pre><code>df -h /home
</code></pre>
<pre><code>df --total
</code></pre>
<h3 id="du命令"><a href="#du命令" class="headerlink" title="du命令"></a>du命令</h3><p>Linux du命令用于显示目录或文件的大小。<br>du会显示指定的目录或文件所占用的磁盘空间。</p>
<ul>
<li>查看当前目录下文件夹所占磁盘大小</li>
</ul>
<pre><code>du
</code></pre>
<ul>
<li>查看当前目录下文件夹所占磁盘大小，并格式单位</li>
</ul>
<pre><code>du -h
</code></pre>
<ul>
<li>查看当前目录下文件夹所占磁盘大小，并显示时间</li>
</ul>
<pre><code>du --time
</code></pre>
<ul>
<li>查看文件占用空间</li>
</ul>
<pre><code>du test.log
</code></pre>
<ul>
<li>查看文件占用空间</li>
</ul>
<pre><code>du test
</code></pre>
<ul>
<li>以M为单位</li>
</ul>
<pre><code>du -m
</code></pre>
<ul>
<li>以K为单位</li>
</ul>
<pre><code>du -k
</code></pre>
<ul>
<li>只显示总计，不显示子目录</li>
</ul>
<pre><code>du -s
</code></pre>
<ul>
<li>设置目录层数</li>
</ul>
<pre><code>du --max-depth=1
</code></pre>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>磁盘</tag>
      </tags>
  </entry>
  <entry>
    <title>Loki日志统计</title>
    <url>/loki-ri-zhi-tong-ji/</url>
    <content><![CDATA[<h3 id="Metrics-Queries"><a href="#Metrics-Queries" class="headerlink" title="Metrics Queries"></a>Metrics Queries</h3><p>Metrics Queries 可以用来计算日志错误率或最近一段时间日志最多的前 N 个日志源.</p>
<h3 id="LogQL-范围聚合查询函数"><a href="#LogQL-范围聚合查询函数" class="headerlink" title="LogQL 范围聚合查询函数"></a>LogQL 范围聚合查询函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>rate(log-range)</td>
<td>计​​算每秒的条目数</td>
</tr>
<tr>
<td>count_over_time(log-range)</td>
<td>计算给定范围内每个日志流的条目</td>
</tr>
<tr>
<td>bytes_rate(log-range)</td>
<td>计算每个流每秒的字节数</td>
</tr>
<tr>
<td>bytes_over_time(log-range)</td>
<td>计算给定范围内每个日志流使用的字节数</td>
</tr>
<tr>
<td>absent_over_time(log-range)</td>
<td>如果传递给它的范围向量有任何元素，则返回一个空向量；如果传递给它的范围向量没有元素，则返回一个值为 1 的 1 元素向量。（absent_over_time对于在一段时间内不存在标签组合的时间序列和日志流时发出警报很有用。）</td>
</tr>
</tbody></table>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 计算 MySQL 作业最后五分钟内的所有日志行。</span>
count_over_time<span class="token punctuation">(</span><span class="token punctuation">{</span>job<span class="token operator">=</span><span class="token string">"mysql"</span><span class="token punctuation">}</span><span class="token punctuation">[</span>5m<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># MySQL 作业在每台主机的最后几分钟内所有非超时错误的每秒速率，并且仅包括持续时间超过 10 秒的错误</span>
<span class="token function">sum</span> by <span class="token punctuation">(</span>host<span class="token punctuation">)</span> <span class="token punctuation">(</span>rate<span class="token punctuation">(</span><span class="token punctuation">{</span>job<span class="token operator">=</span><span class="token string">"mysql"</span><span class="token punctuation">}</span> <span class="token operator">|</span><span class="token operator">=</span> <span class="token string">"error"</span> <span class="token operator">!=</span> <span class="token string">"timeout"</span> <span class="token operator">|</span> json <span class="token operator">|</span> duration <span class="token operator">></span> 10s <span class="token punctuation">[</span>1m<span class="token punctuation">]</span><span class="token punctuation">))</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="内置聚合运算符"><a href="#内置聚合运算符" class="headerlink" title="内置聚合运算符"></a>内置聚合运算符</h3><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>sum</td>
<td>计​​算标签的总和</td>
</tr>
<tr>
<td>avg</td>
<td>计算标签的平均值</td>
</tr>
<tr>
<td>min</td>
<td>在标签上选择最小值</td>
</tr>
<tr>
<td>max</td>
<td>选择最大标签</td>
</tr>
<tr>
<td>stddev</td>
<td>计算标签的总体标准差</td>
</tr>
<tr>
<td>stdvar</td>
<td>计算标签的总体标准方差</td>
</tr>
<tr>
<td>count</td>
<td>计​​算向量中的元素个数</td>
</tr>
<tr>
<td>topk</td>
<td>通过样本值选择最大的 k 个元素</td>
</tr>
<tr>
<td>bottomk</td>
<td>通过样本值选择最小的 k 个元素</td>
</tr>
</tbody></table>
<h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 获取日志吞吐量最高的前 10 个应用程序</span>
topk<span class="token punctuation">(</span>10,sum<span class="token punctuation">(</span>rate<span class="token punctuation">(</span><span class="token punctuation">{</span>region<span class="token operator">=</span><span class="token string">"us-east1"</span><span class="token punctuation">}</span><span class="token punctuation">[</span>5m<span class="token punctuation">]</span><span class="token punctuation">))</span> by <span class="token punctuation">(</span>name<span class="token punctuation">))</span>

<span class="token comment" spellcheck="true"># 获取 k8s ns1 命名空间下日志输出量前 10 的 Pod</span>
topk<span class="token punctuation">(</span>10,sum<span class="token punctuation">(</span>rate<span class="token punctuation">(</span><span class="token punctuation">{</span>namespace<span class="token operator">=</span><span class="token string">"ns1"</span><span class="token punctuation">}</span><span class="token punctuation">[</span>5m<span class="token punctuation">]</span><span class="token punctuation">))</span> by <span class="token punctuation">(</span>pod<span class="token punctuation">))</span>

<span class="token comment" spellcheck="true"># 获取指定作业的最后五分钟的日志行数，按级别分组</span>
sum<span class="token punctuation">(</span>count_over_time<span class="token punctuation">(</span><span class="token punctuation">{</span>job<span class="token operator">=</span><span class="token string">"mysql"</span><span class="token punctuation">}</span><span class="token punctuation">[</span>5m<span class="token punctuation">]</span><span class="token punctuation">))</span> by <span class="token punctuation">(</span>level<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># /home按区域获取对 NGINX 日志端点的 HTTP GET 请求速率</span>
avg<span class="token punctuation">(</span>rate<span class="token punctuation">((</span><span class="token punctuation">{</span>job<span class="token operator">=</span><span class="token string">"nginx"</span><span class="token punctuation">}</span> <span class="token operator">|</span><span class="token operator">=</span> <span class="token string">"GET"</span> <span class="token operator">|</span> json <span class="token operator">|</span> path<span class="token operator">=</span><span class="token string">"/home"</span><span class="token punctuation">)</span><span class="token punctuation">[</span>10s<span class="token punctuation">]</span><span class="token punctuation">))</span> by <span class="token punctuation">(</span>region<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="">https://grafana.com/docs/loki/latest/logql/metric_queries/</a></li>
</ul>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>loki</tag>
        <tag>grafana</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis注解方式动态拼接SQL</title>
    <url>/mybatis-zhu-jie-fang-shi-dong-tai-pin-jie-sql/</url>
    <content><![CDATA[<p>在spring boot中，集成Mybatis可以使用完全注解的方式，完全不用新增任何配置文件。多条件判断，可以使用<code>&lt;script&gt;</code>和<code>&lt;set&gt;</code>搭配实现。</p>
<h3 id="Update"><a href="#Update" class="headerlink" title="@Update"></a>@Update</h3><pre><code>@Update("&lt;script&gt;update t_user " +
        "&lt;set&gt; " +
        "&lt;if test='userName != null'&gt; user_name = #{userName},&lt;/if&gt;" +
        "&lt;if test='userPwd != null'&gt; user_pwd = #{userPwd},&lt;/if&gt;" +
        "&lt;if test='userRemark != null'&gt; user_remark = #{userRemark},&lt;/if&gt;" +
        "&lt;if test='userPhone != null'&gt; user_phone = #{userPhone},&lt;/if&gt;" +
        "&lt;if test='userEmail != null'&gt; user_email = #{userEmail},&lt;/if&gt;" +
        "&lt;/set&gt; " +
        "where user_id = #{userId}&lt;/script&gt;")
</code></pre>
<h3 id="Select"><a href="#Select" class="headerlink" title="@Select"></a>@Select</h3><pre><code>@Select("select id,name,description,enabled,deleted,date_created as dateCreated,last_modified as lastModified from admin_role (#{roleParam})")
</code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//不使用 @Param 时，那么，此时 collection 需要定义为 list，否则会报错</span>
<span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token string">"&lt;script>"</span><span class="token punctuation">,</span>
        <span class="token string">"SELECT * "</span><span class="token punctuation">,</span>
        <span class="token string">"FROM users WHERE id IN"</span><span class="token punctuation">,</span>
        <span class="token string">"&lt;foreach item='id' index='index' collection='ids' open='(' separator=',' close=')'>"</span><span class="token punctuation">,</span>
        <span class="token string">"#{id}"</span><span class="token punctuation">,</span>
        <span class="token string">"&lt;/foreach>"</span><span class="token punctuation">,</span>
        <span class="token string">"&lt;/script>"</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
List<span class="token operator">&lt;</span>UserEntity<span class="token operator">></span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"ids"</span><span class="token punctuation">)</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Insert"><a href="#Insert" class="headerlink" title="@Insert"></a>@Insert</h3><pre><code>@Insert("insert into t_alert_log (alert_name,severity,message,start_at,end_at) " +
            "values(#{alertName},#{severity},#{message},#{startAt},#{endAt})")
@Options(useGeneratedKeys = true, keyProperty = "id", keyColumn = "id")
</code></pre>
<h3 id="Update-1"><a href="#Update-1" class="headerlink" title="@Update"></a>@Update</h3><pre><code>@Update("update t_alert_log set status=true,remark=#{remark} where token=#{token}")
</code></pre>
<h3 id="ResultType"><a href="#ResultType" class="headerlink" title="@ResultType"></a>@ResultType</h3><pre><code>@ResultType(String.class)
</code></pre>
<h3 id="注解方式传入表名和字段名"><a href="#注解方式传入表名和字段名" class="headerlink" title="注解方式传入表名和字段名"></a>注解方式传入表名和字段名</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 一般通过#{xxx}方式传入内容,但是表名和字段名不能通过这个方式.</span>
<span class="token comment" spellcheck="true">// 动态传入表名和字段名用到${xxx}</span>
<span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"delete from ${tableName} where DATE(${columnName}) &lt;= DATE(DATE_SUB(NOW(),INTERVAL #{interval} day));"</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>String tableName<span class="token punctuation">,</span> String columnName<span class="token punctuation">,</span> <span class="token keyword">int</span> interval<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>mybatis注解</tag>
        <tag>动态sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql外键关联【一张表两个字段分别与另一张表主键关联】</title>
    <url>/mysql-wai-jian-guan-lian-yi-zhang-biao-liang-ge-zi-duan-fen-bie-yu-ling-yi-zhang-biao-zhu-jian-guan-lian/</url>
    <content><![CDATA[<h3 id="用户表"><a href="#用户表" class="headerlink" title="用户表"></a>用户表</h3><table>
<thead>
<tr>
<th>user_id</th>
<th>user_name</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>zhangsan</td>
</tr>
<tr>
<td>2</td>
<td>lisi</td>
</tr>
<tr>
<td>3</td>
<td>wangwu</td>
</tr>
<tr>
<td>4</td>
<td>zhaoliu</td>
</tr>
</tbody></table>
<h3 id="另一张money表，表示了借钱的关系"><a href="#另一张money表，表示了借钱的关系" class="headerlink" title="另一张money表，表示了借钱的关系"></a>另一张money表，表示了借钱的关系</h3><table>
<thead>
<tr>
<th>id</th>
<th>from</th>
<th>to</th>
<th>how</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>1</td>
<td>2</td>
<td>100</td>
</tr>
<tr>
<td>2</td>
<td>3</td>
<td>4</td>
<td>100</td>
</tr>
</tbody></table>
<h3 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> m<span class="token punctuation">.</span>id<span class="token punctuation">,</span>u1<span class="token punctuation">.</span>user_name<span class="token punctuation">,</span>u2<span class="token punctuation">.</span>user_name<span class="token punctuation">,</span>m<span class="token punctuation">.</span>how
<span class="token keyword">from</span> money <span class="token keyword">as</span> m
<span class="token keyword">left</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> <span class="token keyword">user</span> u1 <span class="token keyword">on</span> u2<span class="token punctuation">.</span>user_id<span class="token operator">=</span>m<span class="token punctuation">.</span><span class="token keyword">from</span>
<span class="token keyword">left</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> <span class="token keyword">user</span> u3 <span class="token keyword">on</span> u3<span class="token punctuation">.</span>user_id<span class="token operator">=</span>m<span class="token punctuation">.</span><span class="token keyword">to</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="显示的结果"><a href="#显示的结果" class="headerlink" title="显示的结果"></a>显示的结果</h3><table>
<thead>
<tr>
<th>id</th>
<th>user_name</th>
<th>user_name</th>
<th>how</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>zhangsan</td>
<td>lisi</td>
<td>100</td>
</tr>
<tr>
<td>2</td>
<td>wangwu</td>
<td>zhaoliu</td>
<td>100</td>
</tr>
</tbody></table>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>这里有个小问题，中间两列显示的名称一样，都是<code>user_name</code>，这样就不好辨别了，在<code>Mybatis</code>中如果想用</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ResultType</span><span class="token punctuation">(</span>实体类名称<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>来定义返回的类型，因为两个字段名一样，定义的实体类肯定不能一样，就会导致返回没有结果，怎么处理呢？</p>
<p>关联查询时，指定结果字段别名</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> m<span class="token punctuation">.</span>id<span class="token punctuation">,</span>u1<span class="token punctuation">.</span>user_name <span class="token keyword">as</span> user_name1<span class="token punctuation">,</span>u2<span class="token punctuation">.</span>user_name <span class="token keyword">as</span> user_name2<span class="token punctuation">,</span>m<span class="token punctuation">.</span>how
<span class="token keyword">from</span> money <span class="token keyword">as</span> m
<span class="token keyword">left</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> <span class="token keyword">user</span> u1 <span class="token keyword">on</span> u2<span class="token punctuation">.</span>user_id<span class="token operator">=</span>m<span class="token punctuation">.</span><span class="token keyword">from</span>
<span class="token keyword">left</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> <span class="token keyword">user</span> u3 <span class="token keyword">on</span> u3<span class="token punctuation">.</span>user_id<span class="token operator">=</span>m<span class="token punctuation">.</span><span class="token keyword">to</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>NTP服务器搭建与客户端同步</title>
    <url>/ntp-fu-wu-qi-da-jian-yu-ke-hu-duan-tong-bu/</url>
    <content><![CDATA[<h3 id="NTP安装"><a href="#NTP安装" class="headerlink" title="NTP安装"></a>NTP安装</h3><blockquote>
<p>服务端和客户端都需要安装,需关闭防火墙或开通端口</p>
</blockquote>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 安装</span>
yum <span class="token function">install</span> ntp ntpdate -y

<span class="token comment" spellcheck="true"># 设置开机自启动</span>
systemctl <span class="token function">enable</span> ntpd
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="NTP服务端"><a href="#NTP服务端" class="headerlink" title="NTP服务端"></a>NTP服务端</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 修改配置</span>
vim /etc/ntp.conf

<span class="token comment" spellcheck="true"># 注释默认的,改成本地IP</span>
<span class="token comment" spellcheck="true">#server 0.centos.pool.ntp.org iburst</span>
<span class="token comment" spellcheck="true">#server 1.centos.pool.ntp.org iburst</span>
<span class="token comment" spellcheck="true">#server 2.centos.pool.ntp.org iburst</span>
<span class="token comment" spellcheck="true">#server 3.centos.pool.ntp.org iburst</span>
server 127.0.0.1 iburst

<span class="token comment" spellcheck="true"># 重启服务</span>
systemctl restart ntpd
systemctl status ntpd
<span class="token comment" spellcheck="true"># 查看同步情况</span>
ntpq -p
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="NTP客户端"><a href="#NTP客户端" class="headerlink" title="NTP客户端"></a>NTP客户端</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 修改配置</span>
vim /etc/ntp.conf

<span class="token comment" spellcheck="true"># 注释掉默认的</span>
<span class="token comment" spellcheck="true">#server 0.centos.pool.ntp.org iburst</span>
<span class="token comment" spellcheck="true">#server 1.centos.pool.ntp.org iburst</span>
<span class="token comment" spellcheck="true">#server 2.centos.pool.ntp.org iburst</span>
<span class="token comment" spellcheck="true">#server 3.centos.pool.ntp.org iburst</span>
<span class="token comment" spellcheck="true">#修改为本地的ntpd Server服务器</span>
server 192.168.3.13 iburst
<span class="token comment" spellcheck="true">#配置允许上游时间服务器主动修改本机的时间</span>
restrict 192.168.3.13 nomodify notrap noquery

<span class="token comment" spellcheck="true"># 重启服务</span>
systemctl restart ntpd
systemctl status ntpd
<span class="token comment" spellcheck="true"># 查看同步情况</span>
ntpq -p
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="timedatectl"><a href="#timedatectl" class="headerlink" title="timedatectl"></a>timedatectl</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># timedatectl显示synchronized一直处于no状态</span>
<span class="token punctuation">[</span>root@node2 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># timedatectl </span>
      Local time: Mon 2021-07-12 10:27:02 CST
  Universal time: Mon 2021-07-12 02:27:02 UTC
        RTC time: Mon 2021-07-12 02:27:02
       Time zone: Asia/Shanghai <span class="token punctuation">(</span>CST, +0800<span class="token punctuation">)</span>
     NTP enabled: <span class="token function">yes</span>
NTP synchronized: no
 RTC <span class="token keyword">in</span> local TZ: no
      DST active: n/a

<span class="token comment" spellcheck="true"># 解决办法,等一会儿就好了</span>
systemctl stop ntpd
ntpd -gq
systemctl start ntpd
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ntp</tag>
      </tags>
  </entry>
  <entry>
    <title>互联网上的时间-RFC3339</title>
    <url>/rfc3339/</url>
    <content><![CDATA[<h3 id="RFC3339"><a href="#RFC3339" class="headerlink" title="RFC3339"></a>RFC3339</h3><p>本地时间只包括当前的时间，不包含任何时区信息。同一时刻，东八区的本地时间比零时区的本地时间快了8个小时。在不同时区之间交换时间数据，除了用纯数字的时间戳，还有一种更方便人类阅读的表示方式：标准时间的偏移量表示方法。</p>
<p><code>RFC3339</code>详细定义了互联网上日期/时间的偏移量表示：</p>
<pre><code>2017-12-08T00:00:00.00Z
</code></pre>
<p>这个代表了UTC时间的2017年12月08日零时</p>
<pre><code>2017-12-08T00:08:00.00+08:00
</code></pre>
<p>这个代表了同一时刻的，东八区北京时间（<code>CST</code>）表示的方法</p>
<p>上面两个时间的时间戳是等价的。两个的区别，就是在本地时间后面增加了时区信息。Z表示零时区。+08:00表示UTC时间增加8小时。</p>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>目前很多软件都是采用<code>RFC3339</code>，如<code>Prometheus</code>、<code>Flink</code>、<code>InfluxDB</code>等，注意与北京时间相差8小时。</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>timestamp</tag>
        <tag>RFC3339</tag>
      </tags>
  </entry>
  <entry>
    <title>RestTemplate请求PUT/DELETE方法无返回值问题</title>
    <url>/resttemplate-qing-qiu-put-delete-fang-fa-wu-fan-hui-zhi-wen-ti/</url>
    <content><![CDATA[<h3 id="使用exchange"><a href="#使用exchange" class="headerlink" title="使用exchange"></a>使用exchange</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>crd<span class="token punctuation">.</span>service<span class="token punctuation">.</span>routing<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>AddrInfo<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>crd<span class="token punctuation">.</span>service<span class="token punctuation">.</span>routing<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Response<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JsonProcessingException<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>MimeType<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>MimeTypeUtils<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>MultiValueMap<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span>RestTemplate<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>Charset<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @Author: wzy
 * @Time: Created on 2018/4/27 16:04
 * @Project: sg-imq-console
 * @Modified By: 使用exchange发送put,delete，解决resttemplate无返回值问题
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestClientUtil</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * 发送/获取 服务端数据(主要用于解决发送put,delete方法无返回值问题).
     *
     * @param url    绝对地址
     * @param method 请求方式
     * @param &lt;T>    返回类型
     * @return 返回结果(响应体)
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">exchange</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span> HttpMethod method<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> response<span class="token punctuation">,</span> String request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 请求头</span>
        HttpHeaders headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        MimeType mimeType <span class="token operator">=</span> MimeTypeUtils<span class="token punctuation">.</span><span class="token function">parseMimeType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        MediaType mediaType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MediaType</span><span class="token punctuation">(</span>mimeType<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mimeType<span class="token punctuation">.</span><span class="token function">getSubtype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Charset<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        headers<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>mediaType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 发送请求</span>
        HttpEntity<span class="token operator">&lt;</span>String<span class="token operator">></span> entity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>
        RestTemplate restTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ResponseEntity<span class="token operator">&lt;</span>T<span class="token operator">></span> resultEntity <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> method<span class="token punctuation">,</span> entity<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> resultEntity<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:8088/route/addr/安徽"</span><span class="token punctuation">;</span>
        AddrInfo addrInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AddrInfo</span><span class="token punctuation">(</span><span class="token string">"安徽"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.1:9877"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//        Response response = RestClientUtil.exchange(url,HttpMethod.PUT,Response.class,</span>
<span class="token comment" spellcheck="true">//                JSON.toJSONString(addrInfo));</span>
        Response response <span class="token operator">=</span> RestClientUtil<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> HttpMethod<span class="token punctuation">.</span>DELETE<span class="token punctuation">,</span> Response<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
                null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//        RestTemplate restTemplate = new RestTemplate();</span>
<span class="token comment" spellcheck="true">//        restTemplate.put(url, addrInfo);</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
        <tag>RestTemplate</tag>
      </tags>
  </entry>
  <entry>
    <title>Serverless简介</title>
    <url>/serverless-jian-jie/</url>
    <content><![CDATA[<h1 id="什么是serverless？"><a href="#什么是serverless？" class="headerlink" title="什么是serverless？"></a>什么是serverless？</h1><h2 id="简单的定义"><a href="#简单的定义" class="headerlink" title="简单的定义"></a>简单的定义</h2><p>Serverless（无服务器架构）指的是服务端逻辑由开发者实现，运行在无状态的计算容器中，由事件触发，完全被第三方管理，而业务层面的状态则记录在数据库或存储资源中。</p>
<h2 id="进阶的定义"><a href="#进阶的定义" class="headerlink" title="进阶的定义"></a>进阶的定义</h2><p>Serverless是由事件（event）驱动（例如 HTTP、pub/sub）的全托管计算服务。用户无需管理服务器等基础设施，只需编写代码和选择触发器（trigger)，比如 RPC 请求、定时器等并上传，其余的工作（如实例选择、扩缩容、部署、容灾、监控、日志、安全补丁等）全部由 serverless 系统托管。用户只需要为代码实际运行消耗的资源付费——代码未运行则不产生费用。</p>
<h2 id="对比serverful"><a href="#对比serverful" class="headerlink" title="对比serverful"></a>对比serverful</h2><p>Serverless 相对于 serverful，对业务用户强调 noserver（serverless 并不是说没有服务器，只是业务人员无需关注服务器了，代码仍然是运行在真实存在的服务器上）的运维理念，业务人员只需要聚焦业务逻辑代码。</p>
<p>Serverless 相比 serverful，有以下 3 个改变（来自 Berkeley 的总结）：</p>
<ul>
<li>弱化了存储和计算之间的联系。服务的储存和计算被分开部署和收费，存储不再是服务本身的一部分，而是演变成了独立的云服务，这使得计算变得无状态化，更容易调度和扩缩容，同时也降低了数据丢失的风险。</li>
<li>代码的执行不再需要手动分配资源。不需要为服务的运行指定需要的资源（比如使用几台机器、多大的带宽、多大的磁盘等），只需要提供一份代码，剩下的交由 serverless 平台去处理就行了。当前阶段的实现平台分配资源时还需要用户方提供一些策略，例如单个实例的规格和最大并发数，单实例的最大 CPU 使用率。理想的情况是通过某些学习算法来进行完全自动的自适应分配。</li>
<li>按使用量计费。Serverless按照服务的使用量（调用次数、时长等）计费，而不是像传统的 serverful 服务那样，按照使用的资源（ECS 实例、VM 的规格等）计费。</li>
</ul>
<h1 id="serverless分类"><a href="#serverless分类" class="headerlink" title="serverless分类"></a>serverless分类</h1><p>Serverless 不如 IaaS 和 PaaS 那么好理解，因为它通常包含了两个领域 BaaS（Backend as a Service）和 FaaS（Function as a Service）。</p>
<h2 id="BaaS"><a href="#BaaS" class="headerlink" title="BaaS"></a>BaaS</h2><p>BaaS（Backend as a Service）后端即服务，一般是一个个的 API 调用后端或别人已经实现好的程序逻辑，比如身份验证服务 Auth0，这些 BaaS 通常会用来管理数据，还有很多公有云上提供的我们常用的开源软件的商用服务，比如亚马逊的 RDS 可以替代我们自己部署的 MySQL，还有各种其它数据库和存储服务。</p>
<h2 id="FaaS"><a href="#FaaS" class="headerlink" title="FaaS"></a>FaaS</h2><p>FaaS（Functions as a Service）函数即服务，FaaS 是无服务器计算的一种形式，当前使用最广泛的是 AWS 的 Lambada。</p>
<h1 id="Serverless-的使用场景"><a href="#Serverless-的使用场景" class="headerlink" title="Serverless 的使用场景"></a>Serverless 的使用场景</h1><p>虽然 Serverless 的应用很广泛，但是其也有局限性，Serverless 比较适合以下场景：</p>
<ul>
<li>异步的并发，组件可独立部署和扩展</li>
<li>应对突发或服务使用量不可预测（主要是为了节约成本，因为 Serverless 应用在不运行时不收费）</li>
<li>短暂、无状态的应用，对冷启动时间不敏感</li>
<li>需要快速开发迭代的业务（因为无需提前申请资源，因此可以加快业务上线速度）</li>
</ul>
<p>Serverless 的使用场景示例如：</p>
<ul>
<li>ETL</li>
<li>机器学习及 AI 模型处理</li>
<li>图片处理</li>
<li>IoT 传感器数据分析</li>
<li>流处理</li>
<li>聊天机器人</li>
</ul>
<h1 id="serverless与云原生"><a href="#serverless与云原生" class="headerlink" title="serverless与云原生"></a>serverless与云原生</h1><p>Serverless 是云原生技术发展的高级阶段，可以使开发者更聚焦在业务逻辑，而减少对基础设施的关注。<br><img data-src="/images/serverless1.jpg" alt="Serverless 在云原生技术中的地位"></p>
<h1 id="开源serverless框架"><a href="#开源serverless框架" class="headerlink" title="开源serverless框架"></a>开源serverless框架</h1><p>Kubernetes 的蓬勃发展由催生了一系列以它为基础的 Serverless 应用，目前开源的 Serverless 框架大多以 Kubernetes 为基础。</p>
<p><img data-src="/images/serverless2.png" alt="开源框架"></p>
<ul>
<li>Apache OpenWhisk，一种多功能、具有行业优势的 Serverless 解决方案</li>
<li>Fission，第一个真正的 Kubernetes Serverless 平台</li>
<li>Kubeless，在 Serverless 中使用 Kubernetes API 的早期先驱</li>
<li>OpenFaaS，Kubernetes 上的简单 serverless</li>
<li>Knative，又被戏称为：所有你的 OSS serverless（和 Ingress）均属于我们</li>
<li>其他开源 serverless 平台,仔细观察#serverless 空间，你还会注意到还有很多其他产品，比如 -来自Oracle 的Fn , Pivotal 的Riff, VMWare 的 Dispatch, Galatic Fog , Nuclio , Virtual Kubelet ，PipelineAI, Nuclio ，可能还有更多。对不起，乍一眼看的话，它们中的大多数都很快就会不敌 Knative。</li>
</ul>
<blockquote>
<p><a href="https://jimmysong.io/awesome-cloud-native/#serverless%E3%80%82">更多请点击…</a></p>
</blockquote>
<h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><p><a href="https://jimmysong.io/serverless-handbook/concepts/what-is-serverless.html">原文链接</a></p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>serverless</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot通过注解实现Restful接口权限控制</title>
    <url>/spring-boot-tong-guo-zhu-jie-shi-xian-restful-jie-kou-quan-xian-kong-zhi/</url>
    <content><![CDATA[<h3 id="创建一个注解AuthToken"><a href="#创建一个注解AuthToken" class="headerlink" title="创建一个注解AuthToken"></a>创建一个注解<code>AuthToken</code></h3><p>所有使用这个注解的方法，均要通过权限验证才能访问。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">AuthToken</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * 是否只能管理员权限才能访问,默认所有用户都可以访问
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="创建一个拦截器AuthInterceptor"><a href="#创建一个拦截器AuthInterceptor" class="headerlink" title="创建一个拦截器AuthInterceptor"></a>创建一个拦截器<code>AuthInterceptor</code></h3><p>所有请求都通过拦截器</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthInterceptor</span> <span class="token keyword">extends</span> <span class="token class-name">HandlerInterceptorAdapter</span> <span class="token punctuation">{</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">HandlerMethod</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        HandlerMethod handlerMethod <span class="token operator">=</span> <span class="token punctuation">(</span>HandlerMethod<span class="token punctuation">)</span> handler<span class="token punctuation">;</span>
        Method method <span class="token operator">=</span> handlerMethod<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        AuthToken authToken <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>AuthToken<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//需要验证的Method</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>authToken <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">boolean</span> isAdmin <span class="token operator">=</span> authToken<span class="token punctuation">.</span><span class="token function">admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//todo</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//无需验证</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="注册拦截器"><a href="#注册拦截器" class="headerlink" title="注册拦截器"></a>注册拦截器</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthConfigurer</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token function">AuthInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> AuthInterceptor <span class="token function">AuthInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AuthInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="在controller方法上添加注解"><a href="#在controller方法上添加注解" class="headerlink" title="在controller方法上添加注解"></a>在<code>controller</code>方法上添加注解</h3><pre class="line-numbers language-java"><code class="language-java">#需要管理员权限才能访问的
<span class="token annotation punctuation">@AuthToken</span><span class="token punctuation">(</span>admin <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
 
#普通用户和管理员都能访问的
<span class="token annotation punctuation">@AuthToken</span>
 
#不加注解是所有人都可以访问的，不安全
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
        <tag>注解</tag>
        <tag>接口权限</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud config 配置文件手动刷新遇到的坑，解决没有/refresh路径问题</title>
    <url>/spring-cloud-config-pei-zhi-wen-jian-shou-dong-shua-xin-yu-dao-de-keng/</url>
    <content><![CDATA[<p>在<code>SpringCloud 2.0.0</code>版本以前，只要加入下面依赖:</p>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<p>并且在类上,变量上打上<code>@RefreshScope</code>的注解,在启动的时候,都会看到</p>
<pre><code>RequestMappingHandlerMapping : Mapped "{/refresh,methods=[post]}" 
</code></pre>
<p>也就是<code>SpringCloud</code>暴露了一个接口 <code>/refresh</code> 来给我们去刷新配置,但是<code>SpringCloud 2.0.0</code>以后,有了改变.<br>我们需要在<code>bootstrap.yml</code>里面加上需要暴露出来的地址  </p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">management</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
    <span class="token key atrule">web</span><span class="token punctuation">:</span>
      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
        <span class="token key atrule">include</span><span class="token punctuation">:</span> refresh<span class="token punctuation">,</span>health
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>现在的地址也不是<code>/refresh</code>了,而是<code>/actuator/refresh</code></p>
]]></content>
      <categories>
        <category>spring cloud</category>
      </categories>
      <tags>
        <tag>spring cloud</tag>
        <tag>spring cloud config</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Spring cloud gateway全局filter中获取本次请求命中的路由id</title>
    <url>/spring-cloud-gateway-quan-ju-filter/</url>
    <content><![CDATA[<p>首先开启<code>gateway debug</code>日志，可以看到:</p>
<p><img data-src="/images/gateway1.png" alt="debug"></p>
<p><code>debug</code>日志中是可以打印请求所命中的路由id的，<code>Route matched: hello-route</code></p>
<p>然后我在想怎么在程序中获取到这个id呢？因为如果在程序中可以获取到这个id，我就可以按统计每个路由所被访问的次数。网上找了一些博客，都没有提到这个问题，所以只能自己想了。</p>
<p>首先我从打印日志的类开始搜，打开源码<code>RoutePredicateHandlerMapping</code>,找到打印日志的代码。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> Mono<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getHandlerInternal</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>managmentPort <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>managmentPort<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Mono<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ServerWebExchangeUtils<span class="token punctuation">.</span>GATEWAY_HANDLER_MAPPER_ATTR<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">lookupRoute</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
            exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>ServerWebExchangeUtils<span class="token punctuation">.</span>GATEWAY_PREDICATE_ROUTE_ATTR<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 可以看到这里对应的r就是我们要获取的路由。因为从打印的日志中可以看出</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Mapping ["</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getExchangeDesc</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] to "</span> <span class="token operator">+</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ServerWebExchangeUtils<span class="token punctuation">.</span>GATEWAY_ROUTE_ATTR<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>webHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">switchIfEmpty</span><span class="token punctuation">(</span>Mono<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>Mono<span class="token punctuation">.</span><span class="token function">fromRunnable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
            exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>ServerWebExchangeUtils<span class="token punctuation">.</span>GATEWAY_PREDICATE_ROUTE_ATTR<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"No RouteDefinition found for ["</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getExchangeDesc</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-log"><code class="language-log">Route{id='hello-route', uri=http://127.0.0.1:8763, order=0, predicate=org.springframework........
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>我们只要获取到这个<code>Route</code>对象就可以了。那么源码中这个对象放哪儿了呢？</p>
<pre class="line-numbers language-java"><code class="language-java">exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ServerWebExchangeUtils<span class="token punctuation">.</span>GATEWAY_ROUTE_ATTR<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>所以我们只需要在exchange中根据<code>ServerWebExchangeUtils.GATEWAY_ROUTE_ATTR</code>,这个<code>key</code>从<code>Attributes</code>获取就可以了。</p>
<p>下面编写一个Global Filter试试吧。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GatewayLogFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span> Ordered <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">filter</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">,</span> GatewayFilterChain chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Route route <span class="token operator">=</span> <span class="token punctuation">(</span>Route<span class="token punctuation">)</span> exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ServerWebExchangeUtils<span class="token punctuation">.</span>GATEWAY_ROUTE_ATTR<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>spring cloud</category>
      </categories>
      <tags>
        <tag>spring cloud gateway</tag>
        <tag>filter</tag>
      </tags>
  </entry>
  <entry>
    <title>TDengine单机体验</title>
    <url>/tdengine-dan-ji-ti-yan/</url>
    <content><![CDATA[<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># docker安装</span>
docker run -d --name tdengine tdengine/tdengine
<span class="token comment" spellcheck="true"># 进入容器</span>
docker <span class="token function">exec</span> -it tdengine /bin/bash
<span class="token comment" spellcheck="true"># 容器内执行命令</span>
taosdemo
<span class="token comment" spellcheck="true"># 上述命令运行结束,进入tdengine终端</span>
taos
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>taosdemo</code>命令将在数据库 <code>test</code> 下面自动创建一张超级表 <code>meters</code>，该超级表下有 <code>1 万</code>张表，表名为 “d0” 到 “d9999”，每张表有 1 万条记录，每条记录有 (ts, current, voltage, phase) 四个字段，时间戳从 “2017-07-14 10:40:00 000” 到 “2017-07-14 10:40:09 999”，每张表带有标签 location 和 groupId，groupId 被设置为 1 到 10， location 被设置为 “beijing” 或者 “shanghai”。</p>
<blockquote>
<p><code> taosdemo</code>命令本身带有很多选项，配置表的数目、记录条数等等，请执行 taosdemo –help详细列出</p>
</blockquote>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查看数据库。</span>
<span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 查看超级表</span>
<span class="token keyword">use</span> test<span class="token punctuation">;</span>
<span class="token keyword">show</span> stables<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 查看表，限制输出十条</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test<span class="token punctuation">.</span>t0 <span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 查看 d0 表的标签值</span>
<span class="token keyword">select</span> groupid<span class="token punctuation">,</span> location <span class="token keyword">from</span> test<span class="token number">.d0</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 查询超级表下记录总条数</span>
<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> test<span class="token punctuation">.</span>meters<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 查询1亿条记录的平均值、最大值、最小值等</span>
<span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span><span class="token keyword">current</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>voltage<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>phase<span class="token punctuation">)</span> <span class="token keyword">from</span> test<span class="token punctuation">.</span>meters<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 查询location="beijing"的记录总条数</span>
<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> test<span class="token punctuation">.</span>meters <span class="token keyword">where</span> location<span class="token operator">=</span><span class="token string">"beijing"</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 查询groupId=10的所有记录的平均值、最大值、最小值等</span>
<span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span><span class="token keyword">current</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>voltage<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>phase<span class="token punctuation">)</span> <span class="token keyword">from</span> test<span class="token punctuation">.</span>meters <span class="token keyword">where</span> groupId<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 对表d10按10s进行平均值、最大值和最小值聚合统计</span>
<span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span><span class="token keyword">current</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>voltage<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>phase<span class="token punctuation">)</span> <span class="token keyword">from</span> test<span class="token number">.d10</span> interval<span class="token punctuation">(</span>10s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>TDengine</category>
      </categories>
      <tags>
        <tag>TDengine</tag>
      </tags>
  </entry>
  <entry>
    <title>TDengine客户端安装</title>
    <url>/tdengine-ke-hu-duan-an-zhuang/</url>
    <content><![CDATA[<h3 id="下载服务端对应版本的客户端"><a href="#下载服务端对应版本的客户端" class="headerlink" title="下载服务端对应版本的客户端"></a>下载服务端对应版本的客户端</h3><ul>
<li><a href="https://www.taosdata.com/cn/getting-started/#%E9%80%9A%E8%BF%87%E5%AE%89%E8%A3%85%E5%8C%85%E5%AE%89%E8%A3%85">客户端下载</a></li>
</ul>
<h3 id="windows客户端使用"><a href="#windows客户端使用" class="headerlink" title="windows客户端使用"></a>windows客户端使用</h3><ol>
<li>安装<code>TDengine-client-2.2.1.1-Windows-x64.exe</code></li>
<li>默认安装目录<code>C:\TDengine</code></li>
<li>修改<code>C:\TDengine\cfg\taos.cfg</code>中<code>firstEp</code></li>
<li>window机器修改<code>C:\Windows\System32\drivers\etc\hosts</code>,添加集群节点的hostname.</li>
<li>桌面双击运行<code>Taos shell</code>,执行<code>taos.exe</code>进入终端.</li>
</ol>
]]></content>
      <categories>
        <category>TDengine</category>
      </categories>
      <tags>
        <tag>TDengine</tag>
      </tags>
  </entry>
  <entry>
    <title>TDengine数据建模</title>
    <url>/tdengine-shu-ju-jian-mo/</url>
    <content><![CDATA[<h3 id="创建库"><a href="#创建库" class="headerlink" title="创建库"></a>创建库</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建一个名为 power 的库，这个库的数据将保留 365 天（超过 365 天将被自动删除），副本数为3，每 10 天一个数据文件，内存块数为 6，允许更新数据</span>
<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> power KEEP <span class="token number">365</span> REPLICA <span class="token number">3</span>  DAYS <span class="token number">10</span> BLOCKS <span class="token number">6</span> <span class="token keyword">UPDATE</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> power<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="创建超级表"><a href="#创建超级表" class="headerlink" title="创建超级表"></a>创建超级表</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> STABLE meters <span class="token punctuation">(</span>ts <span class="token keyword">timestamp</span><span class="token punctuation">,</span> <span class="token keyword">current</span> <span class="token keyword">float</span><span class="token punctuation">,</span> voltage <span class="token keyword">int</span><span class="token punctuation">,</span> phase <span class="token keyword">float</span><span class="token punctuation">)</span> TAGS <span class="token punctuation">(</span>location <span class="token keyword">binary</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span> groupId <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="创建子表"><a href="#创建子表" class="headerlink" title="创建子表"></a>创建子表</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token number">d1001</span> <span class="token keyword">USING</span> meters TAGS <span class="token punctuation">(</span><span class="token string">"Beijing.Chaoyang"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 如果该子表没有创建会自动创建</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token number">d1001</span> <span class="token keyword">USING</span> meters TAGS <span class="token punctuation">(</span><span class="token string">"Beijng.Chaoyang"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>now<span class="token punctuation">,</span> <span class="token number">10.2</span><span class="token punctuation">,</span> <span class="token number">219</span><span class="token punctuation">,</span> <span class="token number">0.32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>TDengine</category>
      </categories>
      <tags>
        <tag>TDengine</tag>
      </tags>
  </entry>
  <entry>
    <title>TDengine数据更新</title>
    <url>/tdengine-shu-ju-geng-xin/</url>
    <content><![CDATA[<h3 id="开启数据库更新功能"><a href="#开启数据库更新功能" class="headerlink" title="开启数据库更新功能"></a>开启数据库更新功能</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建数据库时使用默认参数，数据库的update属性为0，即不允许数据的更新</span>
<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> power <span class="token keyword">UPDATE</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>向不支持数据更新的表中写入重复时间戳的数据，后写入的数据会被丢弃;</li>
<li>向支持数据更新功能的表中，写入重复时间戳的数据时，老的数据会被覆盖.</li>
</ul>
]]></content>
      <categories>
        <category>TDengine</category>
      </categories>
      <tags>
        <tag>TDengine</tag>
      </tags>
  </entry>
  <entry>
    <title>TDengine集群部署</title>
    <url>/tdengine-ji-qun-bu-shu/</url>
    <content><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul>
<li>准备3台服务器,搭建3节点集群</li>
<li>所有节点准备RPM安装包</li>
<li>建议关闭所有物理节点的防火墙，至少保证端口：6030 - 6042的TCP和UDP端口都是开放的</li>
<li>每台服务器执行<code>hostname -f</code>,获取机器名,在各个节点都配置好<code>/etc/hosts</code></li>
<li>节点保证时区一致,时间相差不大</li>
</ul>
<h3 id="所有节点安装服务端-注意不要启动taosd服务"><a href="#所有节点安装服务端-注意不要启动taosd服务" class="headerlink" title="所有节点安装服务端(注意不要启动taosd服务)"></a>所有节点安装服务端(注意不要启动taosd服务)</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 安装命令</span>
rpm -vi TDengine-server-2.2.1.1-Linux-x64.rpm
<span class="token comment" spellcheck="true"># 卸载命令</span>
rpm -e tdengine
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>注意关键步骤：<code>Enter FQDN:port (like h1.taosdata.com:6030) of an existing TDengine cluster node to join OR leave it blank to build one :</code>  </p>
<ol>
<li>第一台节点可以一路<code>回车</code>,也可以输入自己的<code>hostname:6030</code>  </li>
<li>之后的节点到这一步时输入第一台节点的<code>hostname:6030</code></li>
</ol>
</blockquote>
<ul>
<li><a href="https://www.taosdata.com/blog/2019/08/09/566.html">其它安装方式参考链接</a></li>
</ul>
<p>自动生成配置文件目录、数据库目录、日志目录。</p>
<ul>
<li>配置文件缺省目录：<code>/etc/taos/taos.cfg</code>， 软链接到<code>/usr/local/taos/cfg/taos.cfg</code>；</li>
<li>数据库缺省目录：<code>/var/lib/taos</code>， 软链接到<code>/usr/local/taos/data</code>；</li>
<li>日志缺省目录：<code>/var/log/taos</code>， 软链接到<code>/usr/local/taos/log</code>；</li>
<li><code>/usr/local/taos/bin</code>目录下的可执行文件，会软链接到<code>/usr/bin</code>目录下；</li>
<li><code>/usr/local/taos/driver</code>目录下的动态库文件，会软链接到<code>/usr/lib</code>目录下；</li>
<li><code>/usr/local/taos/include</code>目录下的头文件，会软链接到到<code>/usr/include</code>目录下；</li>
</ul>
<h3 id="修改TDengine的配置文件（所有节点的文件-etc-taos-taos-cfg都需要修改）"><a href="#修改TDengine的配置文件（所有节点的文件-etc-taos-taos-cfg都需要修改）" class="headerlink" title="修改TDengine的配置文件（所有节点的文件/etc/taos/taos.cfg都需要修改）"></a>修改TDengine的配置文件（所有节点的文件<code>/etc/taos/taos.cfg</code>都需要修改）</h3><pre class="line-numbers language-conf"><code class="language-conf">// firstEp 是每个数据节点首次启动后连接的第一个数据节点
firstEp               h1.taosdata.com:6030
// 必须配置为本数据节点的FQDN，如果本机只有一个hostname, 可注释掉本项
fqdn                  h1.taosdata.com  
// 配置本数据节点的端口号，缺省是6030
serverPort            6030
// 副本数为偶数的时候，需要配置，请参考《Arbitrator的使用》的部分
arbitrator            ha.taosdata.com:6042
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>注意：一定要修改的参数是<code>firstEp</code>和<code>fqdn</code>。在每个数据节点，<strong>firstEp需全部配置成一样</strong>，但<code>fqdn</code>一定要配置成其所在数据节点的值。</p>
</blockquote>
<h3 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动服务命令</span>
systemctl start taosd
systemctl status taosd
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ol>
<li>在第一台节点执行<code>taos</code>命令进入控制台:</li>
</ol>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token punctuation">[</span>root<span class="token variable">@data1</span> tdengine<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># taos</span>
Welcome <span class="token keyword">to</span> the TDengine shell <span class="token keyword">from</span> Linux<span class="token punctuation">,</span> Client Version:<span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">1.1</span>
Copyright <span class="token punctuation">(</span><span class="token number">c</span><span class="token punctuation">)</span> <span class="token number">2020</span> <span class="token keyword">by</span> TAOS <span class="token keyword">Data</span><span class="token punctuation">,</span> Inc<span class="token punctuation">.</span> <span class="token keyword">All</span> rights reserved<span class="token punctuation">.</span>
<span class="token comment" spellcheck="true">-- 查看节点列表</span>
taos<span class="token operator">></span> <span class="token keyword">show</span> dnodes<span class="token punctuation">;</span>
   id   <span class="token operator">|</span>           end_point            <span class="token operator">|</span> vnodes <span class="token operator">|</span> cores  <span class="token operator">|</span>   <span class="token keyword">status</span>   <span class="token operator">|</span> role  <span class="token operator">|</span>       create_time       <span class="token operator">|</span>      offline reason      <span class="token operator">|</span>
<span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span>
      <span class="token number">1</span> <span class="token operator">|</span> data1:<span class="token number">6030</span>                     <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>      <span class="token number">4</span> <span class="token operator">|</span> ready      <span class="token operator">|</span> <span class="token keyword">any</span>   <span class="token operator">|</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">29</span> <span class="token number">09</span>:<span class="token number">50</span>:<span class="token number">55.154</span> <span class="token operator">|</span>                          <span class="token operator">|</span>
Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">.</span>000985s<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li><p>启动第二、三台节点的服务</p>
</li>
<li><p>在第一台节点控制台执行加入节点的命令</p>
</li>
</ol>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 加入节点2</span>
taos<span class="token operator">></span> <span class="token keyword">create</span> dnode <span class="token string">"data2:6030"</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">of</span> <span class="token number">0</span> <span class="token keyword">row</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">in</span> <span class="token keyword">database</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">.</span>000578s<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">-- 加入节点3</span>
taos<span class="token operator">></span> <span class="token keyword">create</span> dnode <span class="token string">"data2:6030"</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">of</span> <span class="token number">0</span> <span class="token keyword">row</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">in</span> <span class="token keyword">database</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">.</span>000578s<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">-- 查看节点列表</span>
taos<span class="token operator">></span> <span class="token keyword">show</span> dnodes<span class="token punctuation">;</span>
   id   <span class="token operator">|</span>           end_point            <span class="token operator">|</span> vnodes <span class="token operator">|</span> cores  <span class="token operator">|</span>   <span class="token keyword">status</span>   <span class="token operator">|</span> role  <span class="token operator">|</span>       create_time       <span class="token operator">|</span>      offline reason      <span class="token operator">|</span>
<span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span>
      <span class="token number">1</span> <span class="token operator">|</span> data1:<span class="token number">6030</span>                     <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>      <span class="token number">4</span> <span class="token operator">|</span> ready      <span class="token operator">|</span> <span class="token keyword">any</span>   <span class="token operator">|</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">29</span> <span class="token number">09</span>:<span class="token number">50</span>:<span class="token number">55.154</span> <span class="token operator">|</span>                          <span class="token operator">|</span>
      <span class="token number">2</span> <span class="token operator">|</span> data2:<span class="token number">6030</span>                     <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>      <span class="token number">4</span> <span class="token operator">|</span> ready      <span class="token operator">|</span> <span class="token keyword">any</span>   <span class="token operator">|</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">29</span> <span class="token number">09</span>:<span class="token number">52</span>:<span class="token number">37.821</span> <span class="token operator">|</span>                          <span class="token operator">|</span>
      <span class="token number">3</span> <span class="token operator">|</span> data3:<span class="token number">6030</span>                     <span class="token operator">|</span>      <span class="token number">0</span> <span class="token operator">|</span>      <span class="token number">4</span> <span class="token operator">|</span> ready      <span class="token operator">|</span> <span class="token keyword">any</span>   <span class="token operator">|</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">29</span> <span class="token number">09</span>:<span class="token number">52</span>:<span class="token number">58.892</span> <span class="token operator">|</span>                          <span class="token operator">|</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><a href="https://www.taosdata.com/cn/documentation/cluster">TDengine集群安装与管理</a></li>
</ul>
]]></content>
      <categories>
        <category>TDengine</category>
      </categories>
      <tags>
        <tag>TDengine</tag>
      </tags>
  </entry>
  <entry>
    <title>ThreadLocal用法心得</title>
    <url>/threadlocal-yong-fa-xin-de/</url>
    <content><![CDATA[<h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><ul>
<li><code>ThreadLocal</code>类允许我们创建只能被同一个线程读写的变量,本质是一个<code>Hash</code>表,<code>key</code>为<code>Thread</code>自身.</li>
<li>主要方法: <code>set()</code> / <code>get()</code> / <code>remove()</code></li>
</ul>
<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 不带初始值</span>
ThreadLocal<span class="token operator">&lt;</span>String<span class="token operator">></span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 带初始值</span>
<span class="token keyword">static</span> ThreadLocal<span class="token operator">&lt;</span>String<span class="token operator">></span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> String <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"a"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// java8便捷写法</span>
ThreadLocal<span class="token operator">&lt;</span>String<span class="token operator">></span> str <span class="token operator">=</span> ThreadLocal<span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
<span class="token comment" spellcheck="true">//            str.set("aa");</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化a</span>
        str<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用完主动释放，防止内存泄漏</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
        str<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"bb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//赋值</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出bb</span>
        str<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 用完主动释放，防止内存泄漏</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>ThreadLocal</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Xpath元素定位</title>
    <url>/xpath-yuan-su-ding-wei/</url>
    <content><![CDATA[<h2 id="Xpath简介"><a href="#Xpath简介" class="headerlink" title="Xpath简介"></a>Xpath简介</h2><p><code>XPath</code>是<code>XML Path</code>的简称，它是一种用来确定<code>XML</code>（可扩展标记语言）文档中某部分位置的语言。<code>Xpath</code>也是一种表达式语言，它基于<code>XML</code>的树状结构，可以用来在整个树中来寻找指定的节点，因此它的返回值可能是节点，节点集合，原子值，以及节点和原子值的混合等。</p>
<h2 id="Xpath定位方法"><a href="#Xpath定位方法" class="headerlink" title="Xpath定位方法"></a>Xpath定位方法</h2><h3 id="Xpath选取节点"><a href="#Xpath选取节点" class="headerlink" title="Xpath选取节点"></a>Xpath选取节点</h3><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><code>/</code></td>
<td>表示从根节点开始选取</td>
</tr>
<tr>
<td><code>//</code></td>
<td>表示选择任意位置的某个节点，而不考虑它们的位置</td>
</tr>
<tr>
<td><code>nodename</code></td>
<td>选取此节点的所有子节点。</td>
</tr>
<tr>
<td><code>.</code></td>
<td>选取当前节点。</td>
</tr>
<tr>
<td><code>..</code></td>
<td>选取当前节点的父节点。</td>
</tr>
<tr>
<td><code>@</code></td>
<td>选取属性。</td>
</tr>
</tbody></table>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="ISO-8859-1"?></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bookstore</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eng<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Harry Potter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>price</span><span class="token punctuation">></span></span>29.99<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>price</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eng<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Learning XML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>price</span><span class="token punctuation">></span></span>39.95<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>price</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bookstore</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>路径表达式</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>bookstore</td>
<td>选取 bookstore 元素的所有子节点。</td>
</tr>
<tr>
<td>/bookstore</td>
<td>选取根元素 bookstore。注释：假如路径起始于正斜杠( / )，则此路径始终代表到某元素的绝对路径！</td>
</tr>
<tr>
<td>bookstore/book</td>
<td>选取属于 bookstore 的子元素的所有 book 元素。</td>
</tr>
<tr>
<td>//book</td>
<td>选取所有 book 子元素，而不管它们在文档中的位置。</td>
</tr>
<tr>
<td>bookstore//book</td>
<td>选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。</td>
</tr>
<tr>
<td>//@lang</td>
<td>选取名为 lang 的所有属性。</td>
</tr>
</tbody></table>
<h3 id="以html选择节点为例"><a href="#以html选择节点为例" class="headerlink" title="以html选择节点为例"></a>以html选择节点为例</h3><blockquote>
<p>由于<code>HTML</code>文档本身就是一个标准的XML页面，因此我们可以使用XPath的语法来定位页面元素。</p>
</blockquote>
<h4 id="定位节点"><a href="#定位节点" class="headerlink" title="定位节点"></a>定位节点</h4><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><code>/html/body/form/input</code></td>
<td>查找<code>form</code>下所有<code>input</code>节点元素</td>
</tr>
<tr>
<td><code>//input</code></td>
<td>查找<code>html</code>中所有<code>input</code>节点元素</td>
</tr>
</tbody></table>
<h4 id="使用通配符-选择未知的元素"><a href="#使用通配符-选择未知的元素" class="headerlink" title="使用通配符(*)选择未知的元素"></a>使用通配符(<code>*</code>)选择未知的元素</h4><blockquote>
<p>XPath 通配符可用来选取未知的 XML 元素。</p>
</blockquote>
<table>
<thead>
<tr>
<th>通配符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>*</code></td>
<td>匹配任何元素节点。</td>
</tr>
<tr>
<td><code>@*</code></td>
<td>匹配任何属性节点。</td>
</tr>
<tr>
<td><code>node()</code></td>
<td>匹配任何类型的节点。</td>
</tr>
</tbody></table>
<hr>
<hr>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><code>//form/*</code></td>
<td>查找<code>form</code>下所有节点元素</td>
</tr>
<tr>
<td><code>//*</code></td>
<td>查找<code>html</code>中所有节点元素</td>
</tr>
<tr>
<td><code>//*/input</code></td>
<td>查找所有<code>input</code>节点元素</td>
</tr>
<tr>
<td><code>//title[@*]</code></td>
<td>选取所有带有属性的 title 元素。</td>
</tr>
</tbody></table>
<h4 id="选择分支"><a href="#选择分支" class="headerlink" title="选择分支"></a>选择分支</h4><blockquote>
<p>对于存在多个元素时想唯一定位，可以使用<code>[]</code>中括号来选择分支，下标从<code>1</code>开始</p>
</blockquote>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><code>//*/td[7]/a[1]</code></td>
<td>定位到第<code>7</code>个<code>td</code>元素中第<code>1</code>个<code>a</code>元素</td>
</tr>
<tr>
<td><code>//*/td[7]/span[2]</code></td>
<td>定位到第<code>7</code>个<code>td</code>元素中第<code>2</code>个<code>span</code>元素</td>
</tr>
<tr>
<td><code>//*/td[last()]/a[last()]</code></td>
<td>定位到最后一个<code>td</code>元素中最后一个<code>a</code>元素</td>
</tr>
<tr>
<td><code>//*/td[a]</code></td>
<td>定位包含<code>a</code>元素的所有<code>td</code>元素</td>
</tr>
</tbody></table>
<blockquote>
<p>选择最后一个元素可以用<code>last()</code>函数，但是选择第一个元素没有<code>first()</code>函数。</p>
</blockquote>
<h4 id="选择属性"><a href="#选择属性" class="headerlink" title="选择属性"></a>选择属性</h4><blockquote>
<p>还可以利用标签内的属性来加以区分定位，在&lt;&gt;开始标记内除标签外，其他都可以看做是属性.</p>
</blockquote>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><code>//input[@name]</code></td>
<td>定位所有含<code>name</code>属性的<code>input</code>元素</td>
</tr>
<tr>
<td><code>//input[@*]</code></td>
<td>定位所有含属性的<code>input</code>元素</td>
</tr>
<tr>
<td><code>//input[@value='2']</code></td>
<td>定位出<code>value</code>属性值为<code>2</code>的<code>input</code>元素</td>
</tr>
<tr>
<td><code>//input[@type='vedio'][@value='1']</code>或<code>//input[@type='vedio' and @value='1']</code></td>
<td>多个属性定位</td>
</tr>
<tr>
<td><code>//input/@id</code></td>
<td>返回所有<code>input</code>元素的<code>id</code>属性</td>
</tr>
</tbody></table>
<h4 id="选取若干路径"><a href="#选取若干路径" class="headerlink" title="选取若干路径"></a>选取若干路径</h4><blockquote>
<p>过在路径表达式中使用<code>|</code>运算符，您可以选取若干个路径。</p>
</blockquote>
<table>
<thead>
<tr>
<th>路径表达式</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>`//book/title</td>
<td>//book/price`</td>
</tr>
<tr>
<td>`//title</td>
<td>//price`</td>
</tr>
<tr>
<td>`/bookstore/book/title</td>
<td>//price`</td>
</tr>
</tbody></table>
<h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><ul>
<li>字符串查找函数： <code>contains()</code><blockquote>
<p><code>contains(string1,string2)</code>，表示如果 <code>string1</code> 包含 <code>string2</code>，则返回 <code>true</code>，否则返回 <code>false</code>。</p>
</blockquote>
</li>
<li>获取元素的文本内容： <code>text()</code></li>
<li>从起始位置匹配字符串：<code>starts-with()</code></li>
</ul>
<blockquote>
<p>更多函数可参考：<code>http://www.w3school.com.cn/xpath/xpath_functions.asp</code></p>
</blockquote>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><code>//a[contains(@href,'baidu')]</code></td>
<td>定位<code>href</code>属性中包含<code>baidu</code>的所有<code>a</code>元素</td>
</tr>
<tr>
<td><code>//a[text()='推广']</code></td>
<td>链接文本信息是<code>推广</code>的所有<code>a</code>元素</td>
</tr>
<tr>
<td><code>//a[starts-with(@href,'/ads')]</code></td>
<td>链接<code>href</code>属性以<code>/ads</code>开始的所有<code>a</code>元素</td>
</tr>
<tr>
<td><code>//a[contains(text(),'推广')]</code></td>
<td>链接文本信息包含<code>推广</code>的所有<code>a</code>元素</td>
</tr>
</tbody></table>
<h4 id="Xpath轴"><a href="#Xpath轴" class="headerlink" title="Xpath轴"></a>Xpath轴</h4><p>上面这些方法都不能定位时，这时候就得考虑依据元素的父辈、兄弟或者子辈节点来定位了，这就需要用到Xpath轴，利用轴可定位某个相对于当前节点的节点集。</p>
<p>语法：</p>
<pre><code>轴名称::标签名
</code></pre>
<table>
<thead>
<tr>
<th>轴名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>ancestor</code></td>
<td>选取当前节点的所有先辈（父、祖父等）。</td>
</tr>
<tr>
<td><code>ancestor-or-self</code></td>
<td>选取当前节点的所有先辈（父、祖父等）以及当前节点本身。</td>
</tr>
<tr>
<td><code>attribute</code></td>
<td>选取当前节点的所有属性。</td>
</tr>
<tr>
<td><code>child</code></td>
<td>选取当前节点的所有子元素。</td>
</tr>
<tr>
<td><code>descendant</code></td>
<td>选取当前节点的所有后代元素（子、孙等）。</td>
</tr>
<tr>
<td><code>descendant-or-self</code></td>
<td>选取当前节点的所有后代元素（子、孙等）以及当前节点本身。</td>
</tr>
<tr>
<td><code>following</code></td>
<td>选取文档中当前节点的结束标签之后的所有节点。</td>
</tr>
<tr>
<td><code>namespace</code></td>
<td>选取当前节点的所有命名空间节点。</td>
</tr>
<tr>
<td><code>parent</code></td>
<td>选取当前节点的父节点。</td>
</tr>
<tr>
<td><code>preceding</code></td>
<td>选取文档中当前节点的开始标签之前的所有节点。</td>
</tr>
<tr>
<td><code>preceding-sibling</code></td>
<td>选取当前节点之前的所有同级节点。</td>
</tr>
<tr>
<td><code>self</code></td>
<td>选取当前节点。</td>
</tr>
</tbody></table>
<hr>
<hr>
<table>
<thead>
<tr>
<th>例子</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td><code>child::book</code></td>
<td>选取所有属于当前节点的子元素的 book 节点。</td>
</tr>
<tr>
<td><code>attribute::lang</code></td>
<td>选取当前节点的 lang 属性。</td>
</tr>
<tr>
<td><code>child::*</code></td>
<td>选取当前节点的所有子元素。</td>
</tr>
<tr>
<td><code>attribute::*</code></td>
<td>选取当前节点的所有属性。</td>
</tr>
<tr>
<td><code>child::text()</code></td>
<td>选取当前节点的所有文本子节点。</td>
</tr>
<tr>
<td><code>child::node()</code></td>
<td>选取当前节点的所有子节点。</td>
</tr>
<tr>
<td><code>descendant::book</code></td>
<td>选取当前节点的所有 book 后代。</td>
</tr>
<tr>
<td><code>ancestor::book</code></td>
<td>选择当前节点的所有 book 先辈。</td>
</tr>
<tr>
<td><code>ancestor-or-self::book</code></td>
<td>选取当前节点的所有 book 先辈以及当前节点（如果此节点是 book 节点）</td>
</tr>
<tr>
<td><code>child::*/child::price</code></td>
<td>选取当前节点的所有 price 孙节点。</td>
</tr>
</tbody></table>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h2 id="XPath教程"><a href="#XPath教程" class="headerlink" title="XPath教程"></a>XPath教程</h2><ul>
<li><a href="https://www.w3school.com.cn/xpath/index.asp">https://www.w3school.com.cn/xpath/index.asp</a></li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>xpath</tag>
      </tags>
  </entry>
  <entry>
    <title>a标签href不跳转禁止跳转</title>
    <url>/a-biao-qian-href-bu-tiao-zhuan-jin-zhi-tiao-zhuan/</url>
    <content><![CDATA[<h3 id="a标签href不跳转-禁止跳转"><a href="#a标签href不跳转-禁止跳转" class="headerlink" title="a标签href不跳转 禁止跳转"></a>a标签href不跳转 禁止跳转</h3><p>当页面中a标签不需要任何跳转时，从原理上来讲，可分如下两种方法：</p>
<h4 id="标签属性href，使其指向空或不返回任何内容。如："><a href="#标签属性href，使其指向空或不返回任何内容。如：" class="headerlink" title="标签属性href，使其指向空或不返回任何内容。如："></a>标签属性href，使其指向空或不返回任何内容。如：</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0);<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>点此无反应javascript:void(0)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>点此无反应javascript:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="标签事件onclick，阻止其默认行为。如："><a href="#标签事件onclick，阻止其默认行为。如：" class="headerlink" title="标签事件onclick，阻止其默认行为。如："></a>标签事件onclick，阻止其默认行为。如：</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">οnclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>return false;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>return false;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">οnclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>return false;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>return false;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>注意：只有一个<code>href="#"</code>是不可以的。</p>
</blockquote>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>a标签</tag>
        <tag>href</tag>
      </tags>
  </entry>
  <entry>
    <title>centos卸载openjdk，并安装jdk</title>
    <url>/centos-xie-zai-openjdk-bing-an-zhuang-jdk/</url>
    <content><![CDATA[<h1 id="查找本机安装的openjdk"><a href="#查找本机安装的openjdk" class="headerlink" title="查找本机安装的openjdk"></a>查找本机安装的openjdk</h1><pre class="line-numbers language-sh"><code class="language-sh">rpm -qa | grep java

python-javapackages-3.4.1-11.el7.noarch
java-1.8.0-openjdk-1.8.0.181-7.b13.el7.x86_64
java-1.8.0-openjdk-headless-1.8.0.181-7.b13.el7.x86_64
tzdata-java-2018e-3.el7.noarch
javapackages-tools-3.4.1-11.el7.noarch
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h1><p>依次使用命令<code>rpm -e --nodeps</code>卸载</p>
<pre><code>rpm -e --nodeps java-1.8.0-openjdk-1.8.0.181-7.b13.el7.x86_64
</code></pre>
<h1 id="安装jdk1-8"><a href="#安装jdk1-8" class="headerlink" title="安装jdk1.8"></a>安装jdk1.8</h1><pre><code>#进入到安装目录
cd /usr/local/

tar -zxvf jdk-8u112-linux-x64.tar.gz
</code></pre>
<pre><code>vim /etc/profile
</code></pre>
<p>文件末尾增加</p>
<pre><code>#java_home
export JAVA_HOME=/usr/local/bin/jdk1.8.0_112
export PATH=$PATH:$JAVA_HOME/bin
</code></pre>
<p>测试</p>
<pre class="line-numbers language-sh"><code class="language-sh">[root@node1 jdk1.8.0_112]# java -version
java version "1.8.0_112"
Java(TM) SE Runtime Environment (build 1.8.0_112-b15)
Java HotSpot(TM) 64-Bit Server VM (build 25.112-b15, mixed mode)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>openjdk</tag>
        <tag>jdk</tag>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title>centos磁盘分区与挂载</title>
    <url>/centos-ci-pan-fen-qu-yu-gua-zai/</url>
    <content><![CDATA[<h3 id="新增一块存储设备"><a href="#新增一块存储设备" class="headerlink" title="新增一块存储设备"></a>新增一块存储设备</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 新增完之后可以用以下命令确认</span>
<span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># fdisk -l</span>

磁盘 /dev/sda：53.7 GB, 53687091200 字节，104857600 个扇区
Units <span class="token operator">=</span> 扇区 of 1 * 512 <span class="token operator">=</span> 512 bytes
扇区大小<span class="token punctuation">(</span>逻辑/物理<span class="token punctuation">)</span>：512 字节 / 512 字节
I/O 大小<span class="token punctuation">(</span>最小/最佳<span class="token punctuation">)</span>：512 字节 / 512 字节
磁盘标签类型：dos
磁盘标识符：0x0009f53f

   设备 Boot      Start         End      Blocks   Id  System
/dev/sda1   *        2048     2099199     1048576   83  Linux
/dev/sda2         2099200   104857599    51379200   8e  Linux LVM

<span class="token comment" spellcheck="true"># /dev/sdb 磁盘下无分区</span>
磁盘 /dev/sdb：16.1 GB, 16106127360 字节，31457280 个扇区
Units <span class="token operator">=</span> 扇区 of 1 * 512 <span class="token operator">=</span> 512 bytes
扇区大小<span class="token punctuation">(</span>逻辑/物理<span class="token punctuation">)</span>：512 字节 / 512 字节
I/O 大小<span class="token punctuation">(</span>最小/最佳<span class="token punctuation">)</span>：512 字节 / 512 字节
磁盘标签类型：dos
磁盘标识符：0xefe51d7a
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 使用下面的命令 一样可以确认, sdb设备FSTYPE等信息为空</span>
<span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># lsblk -f</span>
NAME            FSTYPE      LABEL           UUID                                   MOUNTPOINT
sda                                                                                
├─sda1          xfs                         caa5e7a7-d9b3-4bcb-adc2-409153a686ad   /boot
└─sda2          LVM2_member                 VHdTmP-vi9x-LVfT-Tp2s-SAnp-CPlq-4ChakQ 
  ├─centos-root xfs                         e5b9a4e0-95a1-40f1-b7aa-1ce69e51c1d4   /
  └─centos-swap swap                        5d1b3899-2c21-4886-a187-31a644ef32a7   <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span>
sdb                                                                                
sr0             iso9660     CentOS 7 x86_64 2018-11-25-23-54-16-00  
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="为磁盘设置分区"><a href="#为磁盘设置分区" class="headerlink" title="为磁盘设置分区"></a>为磁盘设置分区</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 1. 进入分区设置</span>
<span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># fdisk /dev/sdb</span>
欢迎使用 <span class="token function">fdisk</span> <span class="token punctuation">(</span>util-linux 2.23.2<span class="token punctuation">)</span>。

更改将停留在内存中，直到您决定将更改写入磁盘。
使用写入命令前请三思。


命令<span class="token punctuation">(</span>输入 m 获取帮助<span class="token punctuation">)</span>：

<span class="token comment" spellcheck="true"># 2. 输入n创建一个新的分区</span>
命令<span class="token punctuation">(</span>输入 m 获取帮助<span class="token punctuation">)</span>：n
Partition type:
   p   primary <span class="token punctuation">(</span>0 primary, 0 extended, 4 free<span class="token punctuation">)</span>
   e   extended
Select <span class="token punctuation">(</span>default p<span class="token punctuation">)</span>: 

<span class="token comment" spellcheck="true"># 3. 输入p创建一个主分区, 注：硬盘主分区最多为4个，分区号从1到4，逻辑分区从5开始</span>
分区号 <span class="token punctuation">(</span>1-4，默认 1<span class="token punctuation">)</span>：

<span class="token comment" spellcheck="true"># 4. 输入分区起始扇区, 默认开始位置</span>
起始 扇区 <span class="token punctuation">(</span>2048-31457279，默认为 2048<span class="token punctuation">)</span>：

<span class="token comment" spellcheck="true"># 5. 输入分区结束扇区,默认结束位置, 可以指定大小, 如 +3G</span>
Last 扇区, +扇区 or +size<span class="token punctuation">{</span>K,M,G<span class="token punctuation">}</span> <span class="token punctuation">(</span>2048-31457279，默认为 31457279<span class="token punctuation">)</span>：

<span class="token comment" spellcheck="true"># 6. 输入p确认分区</span>
命令<span class="token punctuation">(</span>输入 m 获取帮助<span class="token punctuation">)</span>：p

磁盘 /dev/sdb：16.1 GB, 16106127360 字节，31457280 个扇区
Units <span class="token operator">=</span> 扇区 of 1 * 512 <span class="token operator">=</span> 512 bytes
扇区大小<span class="token punctuation">(</span>逻辑/物理<span class="token punctuation">)</span>：512 字节 / 512 字节
I/O 大小<span class="token punctuation">(</span>最小/最佳<span class="token punctuation">)</span>：512 字节 / 512 字节
磁盘标签类型：dos
磁盘标识符：0xefe51d7a

   设备 Boot      Start         End      Blocks   Id  System
/dev/sdb1            2048    31457279    15727616   83  Linux

<span class="token comment" spellcheck="true"># 7. 输入w保存退出</span>
命令<span class="token punctuation">(</span>输入 m 获取帮助<span class="token punctuation">)</span>：w
The partition table has been altered<span class="token operator">!</span>

Calling ioctl<span class="token punctuation">(</span><span class="token punctuation">)</span> to re-read partition table.
正在同步磁盘。
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>删除分区</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 1. 进入分区设置</span>
<span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># fdisk /dev/sdb</span>
欢迎使用 <span class="token function">fdisk</span> <span class="token punctuation">(</span>util-linux 2.23.2<span class="token punctuation">)</span>。

更改将停留在内存中，直到您决定将更改写入磁盘。
使用写入命令前请三思。


命令<span class="token punctuation">(</span>输入 m 获取帮助<span class="token punctuation">)</span>：

<span class="token comment" spellcheck="true"># 2. 输入d,选择分区号删除分区</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>取消挂载</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 取消挂载点</span>
<span class="token function">umount</span> /dev/sdb1
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="格式化分区"><a href="#格式化分区" class="headerlink" title="格式化分区"></a>格式化分区</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 1. 格式化：centos7.0开始默认文件系统是xfs, centos6是ext4，centos5是ext3</span>
<span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkfs -t xfs /dev/sdb1</span>
mkfs.xfs: /dev/sdb1 appears to contain an existing filesystem <span class="token punctuation">(</span>xfs<span class="token punctuation">)</span>.
mkfs.xfs: Use the -f option to force overwrite.
<span class="token comment" spellcheck="true"># 2. 确认格式化结果</span>
<span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># lsblk -f</span>
NAME            FSTYPE      LABEL           UUID                                   MOUNTPOINT
sda                                                                                
├─sda1          xfs                         caa5e7a7-d9b3-4bcb-adc2-409153a686ad   /boot
└─sda2          LVM2_member                 VHdTmP-vi9x-LVfT-Tp2s-SAnp-CPlq-4ChakQ 
  ├─centos-root xfs                         e5b9a4e0-95a1-40f1-b7aa-1ce69e51c1d4   /
  └─centos-swap swap                        5d1b3899-2c21-4886-a187-31a644ef32a7   <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span>
sdb                                                                                
└─sdb1          xfs                         9a382567-246a-4c52-9451-fe819a9ee297   
sr0             iso9660     CentOS 7 x86_64 2018-11-25-23-54-16-00                 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 1. 创建目录</span>
<span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir /newdisk</span>

<span class="token comment" spellcheck="true"># 2. 临时挂载分区,重启后失效</span>
<span class="token function">mount</span> /dev/sdb1 /newdisk

<span class="token comment" spellcheck="true"># 3. 永久挂载</span>
vim /etc/fstab

<span class="token comment" spellcheck="true"># 4. /etc/fstab增加下面一行内容</span>
/dev/sdb1 /newdisk xfs defaults 0 0

<span class="token comment" spellcheck="true"># 5. 生效</span>
<span class="token function">mount</span> -a

<span class="token comment" spellcheck="true"># 6. 确认</span>
<span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># df -h</span>
文件系统                 容量  已用  可用 已用% 挂载点
/dev/sdb1                 15G   33M   15G    1% /newdisk
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title>centos系统盘扩容</title>
    <url>/centos-xi-tong-pan-kuo-rong/</url>
    <content><![CDATA[<ol>
<li>查看当前系统盘信息</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># df -h</span>
Filesystem               Size  Used Avail Use% Mounted on
devtmpfs                 7.8G     0  7.8G   0% /dev
tmpfs                    7.8G     0  7.8G   0% /dev/shm
tmpfs                    7.8G  7.4M  7.8G   1% /run
tmpfs                    7.8G     0  7.8G   0% /sys/fs/cgroup
/dev/mapper/centos-root   44G   32G   13G  72% /    <span class="token comment" spellcheck="true"># 注意这里只有13G了</span>
/dev/sda1               1014M  168M  847M  17% /boot
tmpfs                    1.6G     0  1.6G   0% /run/user/0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>查看未分配的存储</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># lsblk -l</span>
NAME        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sda           8:0    0  200G  0 disk  <span class="token comment" spellcheck="true">#还有150G未分配</span>
sda1          8:1    0    1G  0 part /boot
sda2          8:2    0   49G  0 part 
centos-root 253:0    0   44G  0 lvm  /
centos-swap 253:1    0    5G  0 lvm  
sr0          11:0    1 1024M  0 rom  
<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># fdisk -l</span>
Disk /dev/sda: 214.7 GB, 214748364800 bytes, 419430400 sectors
Units <span class="token operator">=</span> sectors of 1 * 512 <span class="token operator">=</span> 512 bytes
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512 bytes / 512 bytes
I/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: 512 bytes / 512 bytes
Disk label type: dos
Disk identifier: 0x00039057
Device Boot      Start         End      Blocks   Id  System
/dev/sda1   *        2048     2099199     1048576   83  Linux
/dev/sda2         2099200   104857599    51379200   8e  Linux LVM
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="3">
<li>对新增加的磁盘进行分区</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># fdisk /dev/sda </span>
Welcome to <span class="token function">fdisk</span> <span class="token punctuation">(</span>util-linux 2.23.2<span class="token punctuation">)</span>.
Changes will remain <span class="token keyword">in</span> memory only, <span class="token keyword">until</span> you decide to <span class="token function">write</span> them.
Be careful before using the <span class="token function">write</span> command.
<span class="token comment" spellcheck="true"># 1</span>
Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> help<span class="token punctuation">)</span>: n
Partition type:
   p   primary <span class="token punctuation">(</span>2 primary, 0 extended, 2 free<span class="token punctuation">)</span>
   e   extended
<span class="token comment" spellcheck="true"># 2</span>
Select <span class="token punctuation">(</span>default p<span class="token punctuation">)</span>: p
Partition number <span class="token punctuation">(</span>3,4, default 3<span class="token punctuation">)</span>: 
First sector <span class="token punctuation">(</span>104857600-419430399, default 104857600<span class="token punctuation">)</span>: 
Using default value 104857600
Last sector, +sectors or +size<span class="token punctuation">{</span>K,M,G<span class="token punctuation">}</span> <span class="token punctuation">(</span>104857600-419430399, default 419430399<span class="token punctuation">)</span>: 
Using default value 419430399
Partition 3 of <span class="token function">type</span> Linux and of size 150 GiB is <span class="token keyword">set</span>
<span class="token comment" spellcheck="true"># 3</span>
Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> help<span class="token punctuation">)</span>: w
The partition table has been altered<span class="token operator">!</span>
Calling ioctl<span class="token punctuation">(</span><span class="token punctuation">)</span> to re-read partition table.
WARNING: Re-reading the partition table failed with error 16: Device or resource busy.
The kernel still uses the old table. The new table will be used at
the next <span class="token function">reboot</span> or after you run partprobe<span class="token punctuation">(</span>8<span class="token punctuation">)</span> or kpartx<span class="token punctuation">(</span>8<span class="token punctuation">)</span>
Syncing disks.
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="4">
<li>分区完后重启<br>分区完之后无法通过<code>lsbfk</code>等命令查看到,但是<code>fdisk -l</code>可以看到</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># fdisk -l</span>
Disk /dev/sda: 214.7 GB, 214748364800 bytes, 419430400 sectors
Units <span class="token operator">=</span> sectors of 1 * 512 <span class="token operator">=</span> 512 bytes
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512 bytes / 512 bytes
I/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: 512 bytes / 512 bytes
Disk label type: dos
Disk identifier: 0x00039057
Device Boot      Start         End      Blocks   Id  System
/dev/sda1   *        2048     2099199     1048576   83  Linux
/dev/sda2         2099200   104857599    51379200   8e  Linux LVM
/dev/sda3       104857600   419430399   157286400   83  Linux
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="5">
<li>创建物理卷</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># pvcreate /dev/sda3</span>
  Physical volume <span class="token string">"/dev/sda3"</span> successfully created.
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ol start="6">
<li>查看物理卷信息</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># pvdisplay</span>
  --- Physical volume ---
  PV Name               /dev/sda2
  VG Name               centos
  PV Size               <span class="token operator">&lt;</span>49.00 GiB / not usable 3.00 MiB
  Allocatable           <span class="token function">yes</span> <span class="token punctuation">(</span>but full<span class="token punctuation">)</span>
  PE Size               4.00 MiB
  Total PE              12543
  Free PE               0
  Allocated PE          12543
  PV UUID               1BfiJn-wrKX-mDQa-Z43E-l3XT-KEki-A9tgAj
  <span class="token string">"/dev/sda3"</span> is a new physical volume of <span class="token string">"150.00 GiB"</span>
  --- NEW Physical volume ---
  PV Name               /dev/sda3
  VG Name               <span class="token comment" spellcheck="true"># 这里是空的</span>
  PV Size               150.00 GiB
  Allocatable           NO
  PE Size               0   
  Total PE              0
  Free PE               0
  Allocated PE          0
  PV UUID               AKLFX6-6vhY-t38N-0FjV-r0WR-NXFG-3fafid
<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vgdisplay</span>
  --- Volume group ---
  VG Name               centos <span class="token comment" spellcheck="true">#这里是系统盘的VG名</span>
  System ID             
  Format                lvm2
  Metadata Areas        1
  Metadata Sequence No  3
  VG Access             read/write
  VG Status             resizable
  MAX LV                0
  Cur LV                2
  Open LV               1
  Max PV                0
  Cur PV                1
  Act PV                1
  VG Size               <span class="token operator">&lt;</span>49.00 GiB
  PE Size               4.00 MiB
  Total PE              12543
  Alloc PE / Size       12543 / <span class="token operator">&lt;</span>49.00 GiB
  Free  PE / Size       0 / 0   
  VG UUID               TWyVcI-YK3A-SAhs-DQWd-0C6n-1PAZ-KumTJW
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="7">
<li>将新增加的分区<code>/dev/sda3</code>加入到根目录分区<code>centos</code></li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vgextend centos /dev/sda3</span>
  Volume group <span class="token string">"centos"</span> successfully extended
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ol start="8">
<li>重新查看卷组信息</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vgdisplay</span>
  --- Volume group ---
  VG Name               centos
  System ID             
  Format                lvm2
  Metadata Areas        2
  Metadata Sequence No  4
  VG Access             read/write
  VG Status             resizable
  MAX LV                0
  Cur LV                2
  Open LV               1
  Max PV                0
  Cur PV                2
  Act PV                2
  VG Size               198.99 GiB
  PE Size               4.00 MiB
  Total PE              50942
  Alloc PE / Size       12543 / <span class="token operator">&lt;</span>49.00 GiB
  Free  PE / Size       38399 / <span class="token operator">&lt;</span>150.00 GiB <span class="token comment" spellcheck="true">#还有150G未分配</span>
  VG UUID               TWyVcI-YK3A-SAhs-DQWd-0C6n-1PAZ-KumTJW
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="9">
<li>进行卷扩容</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># lvextend -l +100%FREE /dev/mapper/centos-root</span>
  Size of logical volume centos/root changed from <span class="token operator">&lt;</span>44.00 GiB <span class="token punctuation">(</span>11263 extents<span class="token punctuation">)</span> to 193.99 GiB <span class="token punctuation">(</span>49662 extents<span class="token punctuation">)</span>.
  Logical volume centos/root successfully resized.
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ol start="10">
<li>调整卷分区大小</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># xfs_growfs /dev/mapper/centos-root</span>
meta-data<span class="token operator">=</span>/dev/mapper/centos-root isize<span class="token operator">=</span>512    agcount<span class="token operator">=</span>4, agsize<span class="token operator">=</span>2883328 blks
         <span class="token operator">=</span>                       sectsz<span class="token operator">=</span>512   attr<span class="token operator">=</span>2, projid32bit<span class="token operator">=</span>1
         <span class="token operator">=</span>                       crc<span class="token operator">=</span>1        finobt<span class="token operator">=</span>0 spinodes<span class="token operator">=</span>0
data     <span class="token operator">=</span>                       bsize<span class="token operator">=</span>4096   blocks<span class="token operator">=</span>11533312, imaxpct<span class="token operator">=</span>25
         <span class="token operator">=</span>                       sunit<span class="token operator">=</span>0      swidth<span class="token operator">=</span>0 blks
naming   <span class="token operator">=</span>version 2              bsize<span class="token operator">=</span>4096   ascii-ci<span class="token operator">=</span>0 ftype<span class="token operator">=</span>1
log      <span class="token operator">=</span>internal               bsize<span class="token operator">=</span>4096   blocks<span class="token operator">=</span>5631, version<span class="token operator">=</span>2
         <span class="token operator">=</span>                       sectsz<span class="token operator">=</span>512   sunit<span class="token operator">=</span>0 blks, lazy-count<span class="token operator">=</span>1
realtime <span class="token operator">=</span>none                   extsz<span class="token operator">=</span>4096   blocks<span class="token operator">=</span>0, rtextents<span class="token operator">=</span>0
data blocks changed from 11533312 to 50853888
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="11">
<li>最后再查看系统盘大小</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># df -h</span>
Filesystem               Size  Used Avail Use% Mounted on
devtmpfs                 7.8G     0  7.8G   0% /dev
tmpfs                    7.8G     0  7.8G   0% /dev/shm
tmpfs                    7.8G  5.0M  7.8G   1% /run
tmpfs                    7.8G     0  7.8G   0% /sys/fs/cgroup
/dev/mapper/centos-root  194G   26G  169G  13% / <span class="token comment" spellcheck="true">#已经完成扩容</span>
/dev/sda1               1014M  168M  847M  17% /boot
tmpfs                    1.6G     0  1.6G   0% /run/user/0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>centos</category>
      </categories>
  </entry>
  <entry>
    <title>centos配置免密</title>
    <url>/centos-pei-zhi-mian-mi/</url>
    <content><![CDATA[<h3 id="vim-x2F-etc-x2F-hosts"><a href="#vim-x2F-etc-x2F-hosts" class="headerlink" title="vim /etc/hosts"></a>vim /etc/hosts</h3><p>所有机器配置好hosts.</p>
<h3 id="ssh-keygen-t-rsa"><a href="#ssh-keygen-t-rsa" class="headerlink" title="ssh-keygen -t rsa"></a>ssh-keygen -t rsa</h3><p>每台机器都执行一遍,一路Enter即可。</p>
<h3 id="ssh-copy-id-i-nodeName"><a href="#ssh-copy-id-i-nodeName" class="headerlink" title="ssh-copy-id -i nodeName"></a>ssh-copy-id -i nodeName</h3><p>每台机器都执行一遍,输入对应机器的密码.</p>
<pre class="line-numbers language-bash"><code class="language-bash">ssh-copy-id -i node1
ssh-copy-id -i node2
ssh-copy-id -i node3
<span class="token punctuation">..</span>.
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>consul【ACL使用】</title>
    <url>/consul-acl-shi-yong/</url>
    <content><![CDATA[<h3 id="开启ACL"><a href="#开启ACL" class="headerlink" title="开启ACL"></a>开启ACL</h3><p>接前文，需要开启<code>consul ACL</code>配置，如下</p>
<pre class="line-numbers language-json"><code class="language-json">// enable_key_list_policy开启<span class="token boolean">true</span>，为kv配置acl控制
<span class="token property">"acl"</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token property">"enabled"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"default_policy"</span><span class="token operator">:</span><span class="token string">"deny"</span><span class="token punctuation">,</span>
    <span class="token property">"enable_token_persistence"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"enable_key_list_policy"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"tokens"</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">"master"</span><span class="token operator">:</span><span class="token string">"14d54c5e-24ca-41cc-8c9e-987ba7a96ffb"</span><span class="token punctuation">,</span>
        <span class="token property">"agent"</span><span class="token operator">:</span><span class="token string">"db98c304-4d38-8660-fafe-6a4be56a40d0"</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="策略级别"><a href="#策略级别" class="headerlink" title="策略级别"></a>策略级别</h3><p>策略可以具有多个控制级别：</p>
<ul>
<li>read：允许读取但不修改资源。</li>
<li>write：允许读取和修改资源。</li>
<li>deny：不允许读取或修改资源。</li>
<li>list：允许访问领事KV中某个网段下的所有键。注意，此策略只能与key_prefix资源一起使用，并且acl.enable_key_list_policy必须设置为true。</li>
</ul>
<h3 id="k-v创建token示例"><a href="#k-v创建token示例" class="headerlink" title="k-v创建token示例"></a>k-v创建token示例</h3><pre class="line-numbers language-json"><code class="language-json"># These control access to the key/value store.
key_prefix <span class="token string">""</span> <span class="token punctuation">{</span>
  policy = <span class="token string">"read"</span>
<span class="token punctuation">}</span>
key_prefix <span class="token string">"foo/"</span> <span class="token punctuation">{</span>
  policy = <span class="token string">"write"</span>
<span class="token punctuation">}</span>
key_prefix <span class="token string">"foo/private/"</span> <span class="token punctuation">{</span>
  policy = <span class="token string">"deny"</span>
<span class="token punctuation">}</span>
# Or for exact key matches
key <span class="token string">"foo/bar/secret"</span> <span class="token punctuation">{</span>
  policy = <span class="token string">"deny"</span>
<span class="token punctuation">}</span>
 
# This controls access to cluster-wide Consul operator information.
operator = <span class="token string">"read"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>等同于</p>
<pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"key_prefix"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">""</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"policy"</span><span class="token operator">:</span> <span class="token string">"read"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">"foo/"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"policy"</span><span class="token operator">:</span> <span class="token string">"write"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">"foo/private/"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"policy"</span><span class="token operator">:</span> <span class="token string">"deny"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">"key"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"foo/bar/secret"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"policy"</span> <span class="token operator">:</span> <span class="token string">"deny"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">"operator"</span><span class="token operator">:</span> <span class="token string">"read"</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-json"><code class="language-json">key_prefix <span class="token string">""</span> <span class="token punctuation">{</span>
  policy = <span class="token string">"read"</span>
<span class="token punctuation">}</span>
key <span class="token string">"foo"</span> <span class="token punctuation">{</span>
  policy = <span class="token string">"write"</span>
<span class="token punctuation">}</span>
key <span class="token string">"bar"</span> <span class="token punctuation">{</span>
  policy = <span class="token string">"deny"</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-json"><code class="language-json">key_prefix <span class="token string">""</span> <span class="token punctuation">{</span>
 policy = <span class="token string">"deny"</span>
<span class="token punctuation">}</span>
 
key_prefix <span class="token string">"bar"</span> <span class="token punctuation">{</span>
 policy = <span class="token string">"list"</span>
<span class="token punctuation">}</span>
 
key_prefix <span class="token string">"baz"</span> <span class="token punctuation">{</span>
 policy = <span class="token string">"read"</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-json"><code class="language-json">node_prefix <span class="token string">""</span> <span class="token punctuation">{</span>
  policy = <span class="token string">"read"</span>
<span class="token punctuation">}</span>
node <span class="token string">"app"</span> <span class="token punctuation">{</span>
  policy = <span class="token string">"write"</span>
<span class="token punctuation">}</span>
node <span class="token string">"admin"</span> <span class="token punctuation">{</span>
  policy = <span class="token string">"deny"</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-json"><code class="language-json">agent_prefix <span class="token string">""</span> <span class="token punctuation">{</span>
  policy = <span class="token string">"read"</span>
<span class="token punctuation">}</span>
agent <span class="token string">"foo"</span> <span class="token punctuation">{</span>
  policy = <span class="token string">"write"</span>
<span class="token punctuation">}</span>
agent_prefix <span class="token string">"bar"</span> <span class="token punctuation">{</span>
  policy = <span class="token string">"deny"</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-json"><code class="language-json">event_prefix <span class="token string">""</span> <span class="token punctuation">{</span>
  policy = <span class="token string">"read"</span>
<span class="token punctuation">}</span>
event <span class="token string">"deploy"</span> <span class="token punctuation">{</span>
  policy = <span class="token string">"write"</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-json"><code class="language-json">node_prefix <span class="token string">""</span> <span class="token punctuation">{</span>
  policy = <span class="token string">"read"</span>
<span class="token punctuation">}</span>
node <span class="token string">"app"</span> <span class="token punctuation">{</span>
  policy = <span class="token string">"write"</span>
<span class="token punctuation">}</span>
node <span class="token string">"admin"</span> <span class="token punctuation">{</span>
  policy = <span class="token string">"deny"</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-json"><code class="language-json">query_prefix <span class="token string">""</span> <span class="token punctuation">{</span>
  policy = <span class="token string">"read"</span>
<span class="token punctuation">}</span>
query <span class="token string">"foo"</span> <span class="token punctuation">{</span>
  policy = <span class="token string">"write"</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-json"><code class="language-json">service_prefix <span class="token string">""</span> <span class="token punctuation">{</span>
  policy = <span class="token string">"read"</span>
<span class="token punctuation">}</span>
service <span class="token string">"app"</span> <span class="token punctuation">{</span>
  policy = <span class="token string">"write"</span>
<span class="token punctuation">}</span>
service <span class="token string">"admin"</span> <span class="token punctuation">{</span>
  policy = <span class="token string">"deny"</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-json"><code class="language-json">session_prefix <span class="token string">""</span> <span class="token punctuation">{</span>
  policy = <span class="token string">"read"</span>
<span class="token punctuation">}</span>
session <span class="token string">"app"</span> <span class="token punctuation">{</span>
  policy = <span class="token string">"write"</span>
<span class="token punctuation">}</span>
session <span class="token string">"admin"</span> <span class="token punctuation">{</span>
  policy = <span class="token string">"deny"</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="遇到的坑！"><a href="#遇到的坑！" class="headerlink" title="遇到的坑！"></a>遇到的坑！</h3><p>当我创建一个<code>token</code>，分配了<code>policy</code>，如<code>service_prefix....</code>用这个<code>token</code>登录<code>ui</code>，在<code>Services</code>中可以看到权限内的<code>service</code>！同理<code>node</code>也是一样，但是针对<code>key/values</code>不行，会直接跳转到<code>ACL</code>登录页面!<br><img data-src="/images/consul18.png" alt="consul"><br><img data-src="/images/consul19.png" alt="consul"><br><img data-src="/images/consul20.png" alt="consul"><br><img data-src="/images/consul21.png" alt="consul"></p>
<p>这时候并不是<code>acl</code>没有权限，需要在浏览器中直接输入<code>http://ip:8500/ui/dc1/kv/foo/</code>，<code>dc1</code>是<code>datacenter</code>的名字，<code>foo</code>为<code>policy</code>赋予的<code>kv前缀</code>，这样就可以在<code>ui</code>中修改<code>key/values</code>了.</p>
]]></content>
      <categories>
        <category>consul</category>
      </categories>
      <tags>
        <tag>consul</tag>
      </tags>
  </entry>
  <entry>
    <title>configmap热加载插件stakater-reloader</title>
    <url>/configmap-re-jia-zai-cha-jian-stakater-reloader/</url>
    <content><![CDATA[<h3 id="插件说明"><a href="#插件说明" class="headerlink" title="插件说明"></a>插件说明</h3><p>当我们部署的<code>DeploymentConfig</code>, <code>Deployment</code>, <code>Daemonset</code>, <code>Statefulset</code>等服务所挂载的<code>ConfigMap</code>或<code>Secret</code>发生变化的时候,我们的服务可以自动更新.</p>
<ul>
<li><a href="https://github.com/stakater/Reloader">官网</a></li>
</ul>
<h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># kubernetes >= 1.9</span>
kubectl apply -f https://raw.githubusercontent.com/stakater/Reloader/master/deployments/kubernetes/reloader.yaml
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li>所有更新自动加载,包括ConfigMap和Secret</li>
</ul>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>
    <span class="token key atrule">reloader.stakater.com/auto</span><span class="token punctuation">:</span> <span class="token string">"true"</span>
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">template</span><span class="token punctuation">:</span> <span class="token key atrule">metadata</span><span class="token punctuation">:</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>匹配模式</li>
</ul>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 开启search</span>
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>
    <span class="token key atrule">reloader.stakater.com/search</span><span class="token punctuation">:</span> <span class="token string">"true"</span>
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">template</span><span class="token punctuation">:</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># ConfigMap or Secret 开启match</span>
<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>
    <span class="token key atrule">reloader.stakater.com/match</span><span class="token punctuation">:</span> <span class="token string">"true"</span>
<span class="token key atrule">data</span><span class="token punctuation">:</span>
  <span class="token key atrule">key</span><span class="token punctuation">:</span> value
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>特定Configmap</li>
</ul>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>
    <span class="token key atrule">configmap.reloader.stakater.com/reload</span><span class="token punctuation">:</span> <span class="token string">"foo-configmap"</span>
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">template</span><span class="token punctuation">:</span> <span class="token key atrule">metadata</span><span class="token punctuation">:</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>
    <span class="token key atrule">configmap.reloader.stakater.com/reload</span><span class="token punctuation">:</span> <span class="token string">"foo-configmap,bar-configmap,baz-configmap"</span>
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">template</span><span class="token punctuation">:</span> <span class="token key atrule">metadata</span><span class="token punctuation">:</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>特定secret</li>
</ul>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>
    <span class="token key atrule">secret.reloader.stakater.com/reload</span><span class="token punctuation">:</span> <span class="token string">"foo-secret"</span>
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">template</span><span class="token punctuation">:</span> <span class="token key atrule">metadata</span><span class="token punctuation">:</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>
    <span class="token key atrule">secret.reloader.stakater.com/reload</span><span class="token punctuation">:</span> <span class="token string">"foo-secret,bar-secret,baz-secret"</span>
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">template</span><span class="token punctuation">:</span> <span class="token key atrule">metadata</span><span class="token punctuation">:</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>configmap</tag>
      </tags>
  </entry>
  <entry>
    <title>consul【K/V-HTTP接口】</title>
    <url>/consul-k-v-http-jie-kou/</url>
    <content><![CDATA[<h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><blockquote>
<p>http头部加入<code>X-Consul-Token</code>，值为有权限的<code>token</code></p>
</blockquote>
<h3 id="查询一个key值"><a href="#查询一个key值" class="headerlink" title="查询一个key值"></a>查询一个key值</h3><pre><code>#key=/data
http://192.168.1.11:8500/v1/kv/data
 
#key=/test/data
http://192.168.1.11:8500/v1/kv/test/data
</code></pre>
<h3 id="查询一个folder下所有key值"><a href="#查询一个folder下所有key值" class="headerlink" title="查询一个folder下所有key值"></a>查询一个folder下所有key值</h3><pre><code>#folder是test，注意test后面有/不能少！
http://192.168.1.11:8500/v1/kv/test/?recurse=true
</code></pre>
<h3 id="查询folder下有哪些key"><a href="#查询folder下有哪些key" class="headerlink" title="查询folder下有哪些key"></a>查询folder下有哪些key</h3><pre><code>#test后面有/
http://192.168.1.11:8500/v1/kv/test/?keys
</code></pre>
<h3 id="修改key值"><a href="#修改key值" class="headerlink" title="修改key值"></a>修改key值</h3><blockquote>
<p>注意：KV存储中的值不能大于<font style="color:red"><strong>512kb</strong></font>。</p>
</blockquote>
<pre><code>#使用PUT请求，key为/test/data
http://192.168.1.11:8500/v1/kv/test/data
 
#body可以是
{
  "data":"sasasaasas1231313131"
}
 
#或者是
{
  "data-binary":"sasasaasas6666666"
}
 
#修改成功则回复true
</code></pre>
<h3 id="删除key"><a href="#删除key" class="headerlink" title="删除key"></a>删除key</h3><pre><code>#使用DELETE请求，key为/test/data
http://192.168.1.11:8500/v1/kv/test/data
 
#成功则返回true
</code></pre>
]]></content>
      <categories>
        <category>consul</category>
      </categories>
      <tags>
        <tag>consul</tag>
      </tags>
  </entry>
  <entry>
    <title>consul【docker-compose部署】</title>
    <url>/consul-docker-compose-bu-shu/</url>
    <content><![CDATA[<h3 id="前章回顾"><a href="#前章回顾" class="headerlink" title="前章回顾"></a>前章回顾</h3><p>上一章使用了<code>docker</code>命令部署<code>consul</code>集群，但是每次都敲命令太麻烦了，可以使用<code>docker-compose</code>简化。</p>
<h3 id="docker-compose简介"><a href="#docker-compose简介" class="headerlink" title="docker-compose简介"></a>docker-compose简介</h3><p>本章内容参考官网：<code>https://docs.docker.com/compose/</code></p>
<p>Compose是一个用于定义和运行多容器Docker应用程序的工具。使用Compose，您可以使用YAML文件来配置应用程序的服务。然后，使用单个命令，您可以从配置中创建并启动所有服务。</p>
<h3 id="docker-compose安装"><a href="#docker-compose安装" class="headerlink" title="docker-compose安装"></a>docker-compose安装</h3><p>进入官网，<code>https://docs.docker.com/compose/install/</code>，选择<code>linux</code>，可以找到安装命令</p>
<pre class="line-numbers language-sh"><code class="language-sh">#运行此命令以下载Docker Compose的当前稳定版本：
sudo curl -L "https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
 
#对二进制文件应用可执行权限：
sudo chmod +x /usr/local/bin/docker-compose
 
#可以移到到你需要的目录下，也可以不移动，如果移动，例如
mv /usr/local/bin/docker-compose /docker/docker-compose
 
#可以再创建一个链接就行
sudo ln -s /docker/docker-compose /usr/bin/docker-compose
 
#测试安装
$ docker-compose --version
docker-compose version 1.24.1, build 1110ad01
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="编写docker-compose-yml"><a href="#编写docker-compose-yml" class="headerlink" title="编写docker-compose.yml"></a>编写docker-compose.yml</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token comment" spellcheck="true">#服务名</span>
  <span class="token key atrule">consul_server_1</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true">#容器名</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> consul_server_1
    <span class="token comment" spellcheck="true">#使用的镜像</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> consul<span class="token punctuation">:</span>1.6.0
    <span class="token comment" spellcheck="true">#映射的端口</span>
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"8500:8500"</span>
    <span class="token comment" spellcheck="true">#使用的网络</span>
    <span class="token key atrule">networks</span><span class="token punctuation">:</span> 
      <span class="token punctuation">-</span> consul
    <span class="token comment" spellcheck="true">#映射的目录</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /docker/consul/server1/config<span class="token punctuation">:</span>/consul/config
      <span class="token punctuation">-</span> /docker/consul/server1/data<span class="token punctuation">:</span>/consul/data
    <span class="token comment" spellcheck="true">#需要导入的环境变量</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> CONSUL_BIND_INTERFACE=eth0
      <span class="token punctuation">-</span> TZ=Asia/Shanghai
    <span class="token comment" spellcheck="true">#是否伴随docker重启</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token comment" spellcheck="true">#执行的命令</span>
    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
      <span class="token string">'agent'</span>
    <span class="token punctuation">]</span>
 
<span class="token comment" spellcheck="true">#使用自定义网络，这样每次启动就不会创建新的网络了，ip相对固定</span>
<span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">consul</span><span class="token punctuation">:</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="docker-compose启动"><a href="#docker-compose启动" class="headerlink" title="docker-compose启动"></a>docker-compose启动</h3><pre class="line-numbers language-sh"><code class="language-sh">#启动/停止都需要进入到docker-compose.yml目录下
#启动命令-前台运行
docker-compose up
 
#启动命令-后台运行
docker-compose up -d
 
#停止命令
docker-compose stop
 
#更多命令进入官网学习：https://docs.docker.com/compose/
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="注意网络问题"><a href="#注意网络问题" class="headerlink" title="注意网络问题"></a>注意网络问题</h3><p><code>docker-compose</code>使用的是<code>docker网络</code></p>
<pre class="line-numbers language-sh"><code class="language-sh">#查看现有docker网络
docker network ls
 
#删除一个网络
docker network rm +name
 
#查看一个网络的详情
docker network inspect +name
 
#docker-compose网络设置
#自定义网络
networks:
  frontend:
  backend:  
 
#使用默认网络
networks:
  default:
    # Use a custom driver
    driver: custom-driver-1
 
#使用现有网络
networks:
  default:
    external:
      name: my-pre-existing-network
#更多参考官网：https://docs.docker.com/compose/networking/
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="修改consul另外节点的join-IP"><a href="#修改consul另外节点的join-IP" class="headerlink" title="修改consul另外节点的join IP"></a>修改consul另外节点的join IP</h3><p>获取<code>consul_server_1</code>的<code>ip</code>，可以根据启动日志，或者运行完之后执行<code>docker exec consul_server_1 consul members</code>查看<code>IP</code><br><img data-src="/images/consul9.png" alt="consul"><br>或<br><img data-src="/images/consul10.png" alt="consul"></p>
<p>修改其余<code>consul</code>配置的<code>join ip</code><br><img data-src="/images/consul11.png" alt="consul"></p>
<p>在<code>docker-compose.yml</code>中增加其他节点服务，完整配置如下：</p>
<pre class="line-numbers language-yml"><code class="language-yml">version: '3'
services:
  consul_server_1:
    container_name: consul_server_1
    image: consul:1.6.0
    ports:
      - "8500:8500"
    networks: 
      - consul
    volumes:
      - /docker/consul/server1/config:/consul/config
      - /docker/consul/server1/data:/consul/data
    environment:
      - CONSUL_BIND_INTERFACE=eth0
      - TZ=Asia/Shanghai
    restart: always
    command: [
      'agent'
    ]
 
  consul_server_2:
    container_name: consul_server_2
    image: consul:1.6.0
    networks: 
      - consul
    volumes:
      - /docker/consul/server2/config:/consul/config
      - /docker/consul/server2/data:/consul/data
    environment:
      - CONSUL_BIND_INTERFACE=eth0
      - TZ=Asia/Shanghai
    restart: always
    command: [
      'agent'
    ]
 
  consul_server_3:
    container_name: consul_server_3
    image: consul:1.6.0
    networks: 
      - consul
    volumes:
      - /docker/consul/server3/config:/consul/config
      - /docker/consul/server3/data:/consul/data
    environment:
      - CONSUL_BIND_INTERFACE=eth0
      - TZ=Asia/Shanghai
    restart: always
    command: [
      'agent'
    ]
 
  consul_client_1:
    container_name: consul_client_1
    image: consul:1.6.0
    networks: 
      - consul
    volumes:
      - /docker/consul/client1/config:/consul/config
      - /docker/consul/client1/data:/consul/data
    environment:
      - CONSUL_BIND_INTERFACE=eth0
      - TZ=Asia/Shanghai
    restart: always
    command: [
      'agent'
    ]
 
networks:
  consul:
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="启动，查看"><a href="#启动，查看" class="headerlink" title="启动，查看"></a>启动，查看</h3><p><img data-src="/images/consul12.png" alt="consul"><br><img data-src="/images/consul13.png" alt="consul"><br><img data-src="/images/consul14.png" alt="consul"></p>
<p>服务均正常，以后启动只需要<code>docker-compose up -d</code> 和 <code>docker-compose stop</code>即可，大大方便！</p>
<h3 id="增加固定IP部署配置"><a href="#增加固定IP部署配置" class="headerlink" title="增加固定IP部署配置"></a>增加固定IP部署配置</h3><pre class="line-numbers language-yml"><code class="language-yml">version: '3'
services:
  consul_server_1:
    container_name: consul_server_1
    image: consul:1.6.0
    ports:
      - "8500:8500"
    networks: 
      consul:
        ipv4_address: 172.20.0.2
    volumes:
      - /docker/consul/server1/config:/consul/config
      - /docker/consul/server1/data:/consul/data
    environment:
      - CONSUL_BIND_INTERFACE=eth0
      - TZ=Asia/Shanghai
    restart: always
    command: [
      'agent'
    ]
 
  consul_server_2:
    container_name: consul_server_2
    image: consul:1.6.0
    networks: 
      consul:
        ipv4_address: 172.20.0.3
    volumes:
      - /docker/consul/server2/config:/consul/config
      - /docker/consul/server2/data:/consul/data
    environment:
      - CONSUL_BIND_INTERFACE=eth0
      - TZ=Asia/Shanghai
    restart: always
    command: [
      'agent'
    ]
 
  consul_server_3:
    container_name: consul_server_3
    image: consul:1.6.0
    networks: 
      consul:
        ipv4_address: 172.20.0.4
    volumes:
      - /docker/consul/server3/config:/consul/config
      - /docker/consul/server3/data:/consul/data
    environment:
      - CONSUL_BIND_INTERFACE=eth0
      - TZ=Asia/Shanghai
    restart: always
    command: [
      'agent'
    ]
 
  consul_client_1:
    container_name: consul_client_1
    image: consul:1.6.0
    networks: 
      consul:
        ipv4_address: 172.20.0.5
    volumes:
      - /docker/consul/client1/config:/consul/config
      - /docker/consul/client1/data:/consul/data
    environment:
      - CONSUL_BIND_INTERFACE=eth0
      - TZ=Asia/Shanghai
    restart: always
    command: [
      'agent'
    ]
 
networks:
  consul:
    ipam:
      config:
        - subnet: 172.20.0.0/16
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>consul</category>
      </categories>
      <tags>
        <tag>consul</tag>
        <tag>docker-compose</tag>
      </tags>
  </entry>
  <entry>
    <title>consul【watcher handle使用】</title>
    <url>/consul-watcher-handle-shi-yong/</url>
    <content><![CDATA[<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>创建<code>watcher.json</code>文件，放在<code>consul</code>配置目录下，启动consul时指定<code>-config-dir</code>:</p>
<pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"watches"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"key"</span><span class="token punctuation">,</span>
      <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"foo/data"</span><span class="token punctuation">,</span>
      <span class="token property">"handler_type"</span><span class="token operator">:</span> <span class="token string">"http"</span><span class="token punctuation">,</span>
      <span class="token property">"http_handler_config"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
         <span class="token property">"path"</span><span class="token operator">:</span><span class="token string">"http://127.0.0.1:8763/watch"</span><span class="token punctuation">,</span>
         <span class="token property">"method"</span><span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>
         <span class="token property">"header"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"x-foo"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"bar"</span><span class="token punctuation">,</span> <span class="token string">"baz"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
         <span class="token property">"timeout"</span><span class="token operator">:</span> <span class="token string">"10s"</span><span class="token punctuation">,</span>
         <span class="token property">"tls_skip_verify"</span><span class="token operator">:</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="创建handle"><a href="#创建handle" class="headerlink" title="创建handle"></a>创建handle</h3><p>创建一个<code>http服务</code>用于接收变更的<code>key</code>，<code>http://127.0.0.1:8763/watch</code></p>
<pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/watch"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">watcher</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        BufferedReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
        String wholeStr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>str <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            wholeStr <span class="token operator">+=</span> str<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"body:"</span> <span class="token operator">+</span> wholeStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在<code>consul ui</code>中新增 或者修改<code>foo/data</code>这个key值，<code>watcher</code>就会收到这个更新后的值</p>
<pre class="line-numbers language-log"><code class="language-log">POST
body:{"Key":"foo/data","CreateIndex":12,"ModifyIndex":12,"LockIndex":0,"Flags":0,"Value":"YWFhYWFhYQ==","Session":""}
POST
body:{"Key":"foo/data","CreateIndex":12,"ModifyIndex":17,"LockIndex":0,"Flags":0,"Value":"YWFhYWFhYXNzc3NkZHNkZHNk","Session":""}
POST
body:{"Key":"foo/data","CreateIndex":12,"ModifyIndex":25,"LockIndex":0,"Flags":0,"Value":"ewogICJ0ZXN0IjoidGVzdCIsCiAgInRlc3QyIjoidDMzM2VzdCIKfQ==","Session":""}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>value为<code>base64编码</code>，解码后得到需要的值。</p>
<h3 id="sh脚本"><a href="#sh脚本" class="headerlink" title="sh脚本"></a>sh脚本</h3><p><code>handle</code>除了是<code>http</code>，还可以是<code>sh脚本</code>，如</p>
<pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"key"</span><span class="token punctuation">,</span>
  <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"foo/bar/baz"</span><span class="token punctuation">,</span>
  <span class="token property">"handler_type"</span><span class="token operator">:</span> <span class="token string">"script"</span><span class="token punctuation">,</span>
  <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"/usr/bin/my-service-handler.sh"</span><span class="token punctuation">,</span> <span class="token string">"-redis"</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="官网说明"><a href="#官网说明" class="headerlink" title="官网说明"></a>官网说明</h3><p>以下摘自官网：<code>https://www.consul.io/docs/agent/watches.html#key</code></p>
<p>Watch Types/支持的类型<br>The following types are supported. Detailed documentation on each is below:</p>
<ul>
<li>key&nbsp;- Watch a specific KV pair</li>
<li>keyprefix&nbsp;- Watch a prefix in the KV store</li>
<li>services&nbsp;- Watch the list of available services</li>
<li>nodes&nbsp;- Watch the list of nodes</li>
<li>service- Watch the instances of a service</li>
<li>checks&nbsp;- Watch the value of health checks</li>
<li>event&nbsp;- Watch for custom user events</li>
</ul>
<pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"key"</span><span class="token punctuation">,</span>
  <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"foo/bar/baz"</span><span class="token punctuation">,</span>
  <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"/usr/bin/my-service-handler.sh"</span><span class="token punctuation">,</span> <span class="token string">"-redis"</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyprefix"</span><span class="token punctuation">,</span>
  <span class="token property">"prefix"</span><span class="token operator">:</span> <span class="token string">"foo/"</span><span class="token punctuation">,</span>
  <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"/usr/bin/my-service-handler.sh"</span><span class="token punctuation">,</span> <span class="token string">"-redis"</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"service"</span><span class="token punctuation">,</span>
  <span class="token property">"service"</span><span class="token operator">:</span> <span class="token string">"redis"</span><span class="token punctuation">,</span>
  <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"/usr/bin/my-service-handler.sh"</span><span class="token punctuation">,</span> <span class="token string">"-redis"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"tag"</span><span class="token operator">:</span> <span class="token string">"bar"</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>consul</category>
      </categories>
      <tags>
        <tag>consul</tag>
      </tags>
  </entry>
  <entry>
    <title>consul【单机版windows部署及使用】</title>
    <url>/consul-dan-ji-ban-windows-bu-shu-ji-shi-yong/</url>
    <content><![CDATA[<h3 id="启动及常用配置项"><a href="#启动及常用配置项" class="headerlink" title="启动及常用配置项"></a>启动及常用配置项</h3><p>解压后，在目录下打开<code>cmd</code>窗口，运行</p>
<pre class="line-numbers language-sh"><code class="language-sh">consul agent -dev -ui -node=nodeName
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="data-dir"><a href="#data-dir" class="headerlink" title="-data-dir"></a>-data-dir</h4><ul>
<li>作用：指定agent储存状态的数据目录</li>
<li>这是所有agent都必须的</li>
<li>对于server尤其重要，因为他们必须持久化集群的状态</li>
</ul>
<h4 id="config-dir"><a href="#config-dir" class="headerlink" title="-config-dir"></a>-config-dir</h4><ul>
<li>作用：指定service的配置文件和检查定义所在的位置</li>
<li>通常会指定为”某一个路径/consul.d”（通常情况下，.d表示一系列配置文件存放的目录）</li>
</ul>
<h4 id="config-file"><a href="#config-file" class="headerlink" title="-config-file"></a>-config-file</h4><ul>
<li>作用：指定一个要装载的配置文件</li>
<li>该选项可以配置多次，进而配置多个配置文件（后边的会合并前边的，相同的值覆盖）</li>
</ul>
<h4 id="dev"><a href="#dev" class="headerlink" title="-dev"></a>-dev</h4><ul>
<li>作用：创建一个开发环境下的server节点</li>
<li>该参数配置下，不会有任何持久化操作，即不会有任何数据写入到磁盘</li>
<li>这种模式不能用于生产环境（因为第二条）</li>
</ul>
<h4 id="node"><a href="#node" class="headerlink" title="-node"></a>-node</h4><ul>
<li>作用：指定节点在集群中的名称</li>
<li>该名称在集群中必须是唯一的（默认采用机器的<code>host</code>）</li>
<li>推荐：直接采用机器的IP</li>
</ul>
<h4 id="bind"><a href="#bind" class="headerlink" title="-bind"></a>-bind</h4><ul>
<li>作用：指明节点的IP地址</li>
<li>有时候不指定绑定IP，会报<code>Failed to get advertise address: Multiple private IPs found. Please configure one.&nbsp;</code>的异常</li>
</ul>
<h4 id="server"><a href="#server" class="headerlink" title="-server"></a>-server</h4><ul>
<li>作用：指定节点为<code>server</code></li>
<li>每个数据中心（<code>DC</code>）的server数推荐至少为1，至多为5</li>
<li>所有的server都采用raft一致性算法来确保事务的一致性和线性化，事务修改了集群的状态，且集群的状态保存在每一台server上保证可用性</li>
<li>server也是与其他DC交互的门面（gateway）</li>
</ul>
<h4 id="bootstrap-expect"><a href="#bootstrap-expect" class="headerlink" title="-bootstrap-expect"></a>-bootstrap-expect</h4><ul>
<li>作用：该命令通知consul server我们现在准备加入的server节点个数，该参数是为了延迟日志复制的启动直到我们指定数量的server节点成功的加入后启动。</li>
</ul>
<h4 id="join"><a href="#join" class="headerlink" title="-join"></a>-join</h4><ul>
<li>作用：将节点加入到集群</li>
</ul>
<h4 id="datacenter（老版本叫-dc，-dc已经失效）"><a href="#datacenter（老版本叫-dc，-dc已经失效）" class="headerlink" title="-datacenter（老版本叫-dc，-dc已经失效）"></a>-datacenter（老版本叫-dc，-dc已经失效）</h4><ul>
<li>作用：指定机器加入到哪一个数据中心中</li>
</ul>
<h4 id="client"><a href="#client" class="headerlink" title="-client"></a>-client</h4><ul>
<li>作用：指定节点为<code>client</code>，指定客户端接口的绑定地址，包括：<code>HTTP、DNS、RPC</code></li>
<li>默认是<code>127.0.0.1</code>，只允许回环接口访问</li>
<li>若不指定为<code>-server</code>，其实就是<code>-client</code></li>
</ul>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>浏览器访问<a href="http://127.0.0.1:8500/">http://127.0.0.1:8500</a><br><img data-src="/images/consul1.png" alt="consul"></p>
]]></content>
      <categories>
        <category>consul</category>
      </categories>
      <tags>
        <tag>consul</tag>
      </tags>
  </entry>
  <entry>
    <title>consul【在kubernetes集群中部署】</title>
    <url>/consul-zai-kubernetes-ji-qun-zhong-bu-shu/</url>
    <content><![CDATA[<blockquote>
<p>consul具体配置、ACL配置可以参考Consul系列文章</p>
</blockquote>
<h3 id="首先创建k8s-consul-config-json文件"><a href="#首先创建k8s-consul-config-json文件" class="headerlink" title="首先创建k8s-consul-config.json文件"></a>首先创建k8s-consul-config.json文件</h3><p>注意token需要自己创建一个，这里加密处理了</p>
<pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>
    <span class="token property">"datacenter"</span><span class="token operator">:</span><span class="token string">"dc8"</span><span class="token punctuation">,</span>
    <span class="token property">"primary_datacenter"</span><span class="token operator">:</span><span class="token string">"dc8"</span><span class="token punctuation">,</span>
    <span class="token property">"acl"</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">"enabled"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token property">"default_policy"</span><span class="token operator">:</span><span class="token string">"deny"</span><span class="token punctuation">,</span>
        <span class="token property">"enable_token_persistence"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token property">"enable_key_list_policy"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token property">"tokens"</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token property">"master"</span><span class="token operator">:</span><span class="token string">"14d54c5e-24ca-****-*******-*********"</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="创建configmap"><a href="#创建configmap" class="headerlink" title="创建configmap"></a>创建configmap</h3><pre><code>kubectl  create configmap consul --from-file=k8s-consul-config.json
</code></pre>
<p>上述命令创建一个名称为consul，内容为一个文件，文件名为<code>k8s-consul-config.json</code>，<code>configmap</code>可以挂载在<code>volume</code>下.</p>
<h3 id="修改-k8s-consul-statefulset-yaml文件"><a href="#修改-k8s-consul-statefulset-yaml文件" class="headerlink" title="修改 k8s-consul-statefulset.yaml文件"></a>修改 k8s-consul-statefulset.yaml文件</h3><blockquote>
<p>注意内容：</p>
<ol>
<li>在配置最后挂载了volumes-configmap，就是我们刚刚创建的consul</li>
<li>-&nbsp;“-config-file=/etc/consul/config/k8s-consul-config.json” 配置了我们保存的consul ACL相关配置</li>
<li>requiredDuringSchedulingIgnoredDuringExecution，我们增加了这个配置，保证了consul的pod不会在同一台机器上运行【反亲和特性】，因为我们将consul/data挂载的是hostPath，如果一台机器启动多个会有冲突导致consul启动卡住。</li>
</ol>
</blockquote>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1beta1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> StatefulSet
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> consul
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> consul
  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>
  <span class="token key atrule">template</span><span class="token punctuation">:</span>
    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>
      <span class="token key atrule">labels</span><span class="token punctuation">:</span>
        <span class="token key atrule">app</span><span class="token punctuation">:</span> consul
        <span class="token key atrule">component</span><span class="token punctuation">:</span> server
    <span class="token key atrule">spec</span><span class="token punctuation">:</span>
      <span class="token key atrule">serviceAccountName</span><span class="token punctuation">:</span> consul
      <span class="token key atrule">affinity</span><span class="token punctuation">:</span>
        <span class="token key atrule">podAntiAffinity</span><span class="token punctuation">:</span>
          <span class="token key atrule">requiredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> <span class="token key atrule">labelSelector</span><span class="token punctuation">:</span>
                <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>
                  <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> app
                    <span class="token key atrule">operator</span><span class="token punctuation">:</span> In
                    <span class="token key atrule">values</span><span class="token punctuation">:</span>
                      <span class="token punctuation">-</span> consul
              <span class="token key atrule">topologyKey</span><span class="token punctuation">:</span> kubernetes.io/hostname
      <span class="token key atrule">terminationGracePeriodSeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>
      <span class="token key atrule">containers</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> consul
        <span class="token key atrule">image</span><span class="token punctuation">:</span> consul<span class="token punctuation">:</span>1.6.0
        <span class="token key atrule">args</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token string">"agent"</span>
          <span class="token punctuation">-</span> <span class="token string">"-server"</span>
          <span class="token punctuation">-</span> <span class="token string">"-bootstrap-expect=3"</span>
          <span class="token punctuation">-</span> <span class="token string">"-ui"</span>
          <span class="token punctuation">-</span> <span class="token string">"-data-dir=/consul/data"</span>
          <span class="token punctuation">-</span> <span class="token string">"-config-file=/etc/consul/config/k8s-consul-config.json"</span>
          <span class="token punctuation">-</span> <span class="token string">"-bind=0.0.0.0"</span>
          <span class="token punctuation">-</span> <span class="token string">"-client=0.0.0.0"</span>
          <span class="token punctuation">-</span> <span class="token string">"-advertise=$(PODIP)"</span>
          <span class="token punctuation">-</span> <span class="token string">"-retry-join=consul-0.consul.$(NAMESPACE).svc.cluster.local"</span>
          <span class="token punctuation">-</span> <span class="token string">"-retry-join=consul-1.consul.$(NAMESPACE).svc.cluster.local"</span>
          <span class="token punctuation">-</span> <span class="token string">"-retry-join=consul-2.consul.$(NAMESPACE).svc.cluster.local"</span>
          <span class="token punctuation">-</span> <span class="token string">"-domain=cluster.local"</span>
          <span class="token punctuation">-</span> <span class="token string">"-disable-host-node-id"</span>
        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> data
            <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /consul/data
          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> config
            <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /etc/consul/config
        <span class="token key atrule">env</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> PODIP
            <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>
              <span class="token key atrule">fieldRef</span><span class="token punctuation">:</span>
                <span class="token key atrule">fieldPath</span><span class="token punctuation">:</span> status.podIP
          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> NAMESPACE
            <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>
              <span class="token key atrule">fieldRef</span><span class="token punctuation">:</span>
                <span class="token key atrule">fieldPath</span><span class="token punctuation">:</span> metadata.namespace
        <span class="token key atrule">ports</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8500</span>
            <span class="token key atrule">name</span><span class="token punctuation">:</span> ui<span class="token punctuation">-</span>port
          <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8400</span>
            <span class="token key atrule">name</span><span class="token punctuation">:</span> alt<span class="token punctuation">-</span>port
          <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">53</span>
            <span class="token key atrule">name</span><span class="token punctuation">:</span> udp<span class="token punctuation">-</span>port
          <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8443</span>
            <span class="token key atrule">name</span><span class="token punctuation">:</span> https<span class="token punctuation">-</span>port
          <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080</span>
            <span class="token key atrule">name</span><span class="token punctuation">:</span> http<span class="token punctuation">-</span>port
          <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8301</span>
            <span class="token key atrule">name</span><span class="token punctuation">:</span> serflan
          <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8302</span>
            <span class="token key atrule">name</span><span class="token punctuation">:</span> serfwan
          <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8600</span>
            <span class="token key atrule">name</span><span class="token punctuation">:</span> consuldns
          <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8300</span>
            <span class="token key atrule">name</span><span class="token punctuation">:</span> server
      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> data
          <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>
            <span class="token key atrule">path</span><span class="token punctuation">:</span> /root/consul/data
        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> config
          <span class="token key atrule">configMap</span><span class="token punctuation">:</span>
            <span class="token key atrule">name</span><span class="token punctuation">:</span> consul
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后根据上面的配置重新创建consul的StatefulSet，启动完成后根据之前consul的知识，我们需要使用master token登录到ui，<strong>创建Agent token</strong>，然后修改configmap中acl配置，增加agent token，具体可以参考之前的文章。然后删除consul的pod，让k8s重新创建新的pod，使我们新的configmap生效即可。</p>
]]></content>
      <categories>
        <category>consul</category>
      </categories>
      <tags>
        <tag>consul</tag>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>consul【多台机器docker部署】</title>
    <url>/consul-duo-tai-ji-qi-docker-bu-shu/</url>
    <content><![CDATA[<h3 id="问题1：ip问题"><a href="#问题1：ip问题" class="headerlink" title="问题1：ip问题"></a>问题1：ip问题</h3><p><img data-src="/images/consul22.png" alt="consul"><br>使用容器方式在主机上部署后，consul节点的ip为容器IP，如上图所示，主机外不能访问到该服务，需要配置内网或公网IP。</p>
<h4 id="使用docker"><a href="#使用docker" class="headerlink" title="使用docker"></a>使用docker</h4><p>使用docker run命令启动consul只需要在run后增加 <code>--net = "host"</code> ，这相当于使用主机上的IP。</p>
<pre class="line-numbers language-sh"><code class="language-sh">#注意1是要指定net为host，2是网卡为主机上的网卡，该网卡主机外服务能访问到，可以使用ifconfig看看网卡具体的名字
docker run --net = "host" --name ** -e CONSUL_BIND_INTERFACE='eth0' ....(省略)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="使用docker-compose"><a href="#使用docker-compose" class="headerlink" title="使用docker-compose"></a>使用docker-compose</h4><p>使用<code>docker-compose</code>启动docker，需要指定<code>network_mode</code>为<code>host</code></p>
<pre class="line-numbers language-yml"><code class="language-yml">#原本配置，eth0为容器内网卡
  consul_server_2:
    container_name: consul_server_2
    image: consul:1.6.0
    networks: 
      consul:
        ipv4_address: 172.20.0.3
    volumes:
      - /docker/consul/server2/config:/consul/config
      - /docker/consul/server2/data:/consul/data
    environment:
      - CONSUL_BIND_INTERFACE=eth0
      - TZ=Asia/Shanghai
      - CONSUL_HTTP_TOKEN=db98c304-4d38-8660-fafe-6a4be56a40d0
    restart: always
    command: [
      'agent'
    ]
 
 
#优化后，映射端口不需要了，因为是直接使用主机ens33网卡了
  consul_server_1:
    container_name: consul_server_1
    image: consul:1.6.0
    network_mode: host
    volumes:
      - /docker/consul/server1/config:/consul/config
      - /docker/consul/server1/data:/consul/data
    environment:
      - CONSUL_BIND_INTERFACE=ens33
      - TZ=Asia/Shanghai
      - CONSUL_HTTP_TOKEN=db98c304-4d38-8660-fafe-6a4be56a40d0
    restart: always
    command: [
      'agent'
    ]
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样启动后consul服务的ip会变成主机的ip，外面的服务可以访问，跨机器部署consul集群通信也不会有问题了<br><img data-src="/images/consul23.png" alt="consul"></p>
<p>但是以上办法一台机器只能启动一个consul容器，多了会有端口占用的问题，如果想要单机部署多个consul节点，可以考虑修改consul端口。</p>
<pre class="line-numbers language-json"><code class="language-json">//新增ports.json放到consul的配置目录下即可。配置目录下所有.json配置都会加载
//默认端口参考官网：https<span class="token operator">:</span>//www.consul.io/docs/agent/options.html#ports
<span class="token punctuation">{</span>
  <span class="token property">"ports"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"dns"</span><span class="token operator">:</span><span class="token number">9600</span><span class="token punctuation">,</span>
    <span class="token property">"http"</span><span class="token operator">:</span><span class="token number">9500</span><span class="token punctuation">,</span>
    <span class="token property">"serf_lan"</span><span class="token operator">:</span><span class="token number">9301</span><span class="token punctuation">,</span>
    <span class="token property">"serf_wan"</span><span class="token operator">:</span><span class="token number">9302</span><span class="token punctuation">,</span>
    <span class="token property">"server"</span><span class="token operator">:</span><span class="token number">9300</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>启动后同一台机器上两个consul都启动了，占用不同端口，类似可以继续增加consul节点数量，他们的IP都是一样的</p>
<p><img data-src="/images/consul24.png" alt="consul"><br><img data-src="/images/consul25.png" alt="consul"></p>
<h3 id="问题2：跨机器加入集群报错"><a href="#问题2：跨机器加入集群报错" class="headerlink" title="问题2：跨机器加入集群报错"></a>问题2：跨机器加入集群报错</h3><pre class="line-numbers language-log"><code class="language-log">#client
2019/10/11 03:48:01 [INFO] agent: (LAN) joining: [192.168.41.128]
consul_client_2    | ==> 1 error occurred:
consul_client_2    | 	* Failed to join 192.168.41.128: No installed keys could decrypt the message
 
#server端
consul_server_1    |     2019/10/11 03:48:18 [ERR] memberlist: failed to receive: No installed keys could decrypt the message from=192.168.41.129:48362
consul_server_1    |     2019/10/11 03:48:18 [ERR] memberlist: failed to receive: No installed keys could decrypt the message from=192.168.41.129:48364
consul_server_1    |     2019/10/11 03:48:31 [ERR] memberlist: failed to receive: No installed keys could decrypt the message from=192.168.41.129:48438
consul_server_1    |     2019/10/11 03:48:31 [ERR] memberlist: failed to receive: No installed keys could decrypt the message from=192.168.41.129:48440
consul_server_1    |     2019/10/11 03:48:57 [ERR] memberlist: failed to receive: No installed keys could decrypt the message from=192.168.41.129:48598
consul_server_1    |     2019/10/11 03:48:57 [ERR] memberlist: failed to receive: No installed keys could decrypt the message from=192.168.41.129:48600
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre><code>所有consul节点加入配置
"encrypt":"Cwqvm4elg0SIaF6xanFxZ3OFYadEiQtZ71xY1mJTUbk="
 
此encrypt官方解释是用与集群通信加密的，生成方式 consul keygen
 
依然报错不能解决
</code></pre>
<pre class="line-numbers language-json"><code class="language-json">//所有节点加入以下配置，删除encrypt，下面的配置字面意思，出入的通信都不在验证，问题解决，不在报错
    <span class="token property">"encrypt_verify_incoming"</span><span class="token operator">:</span><span class="token boolean">false</span>
    <span class="token property">"encrypt_verify_outgoing"</span><span class="token operator">:</span><span class="token boolean">false</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>上面的配置是把验证功能关掉了，有安全隐患，官网还有另一个配置<code>disable_keyring_file</code>，（<code>https://github.com/hashicorp/consul/issues/4163</code>）有人可以解决，但是我尝试没有成功，后面继续研究有没有两全其美的办法。。</p>
<h3 id="start-join、retry-join的格式"><a href="#start-join、retry-join的格式" class="headerlink" title="start_join、retry_join的格式"></a>start_join、retry_join的格式</h3><pre class="line-numbers language-sh"><code class="language-sh">-join-启动时要加入的另一个代理的地址。可以多次指定，以指定要加入的多个代理。如果Consul无法加入任何指定地址，则代理启动将失败。默认情况下，代理在启动时不会加入任何节点。请注意，retry_join在Consul群集部署自动化时，使用 更为合适的方法有助于减轻节点启动竞争条件。
 
 
-retry-join-与类似，-join但如果第一次尝试失败，则允许重试连接。在您知道该地址最终可用的情况下，这很有用。该列表可以包含IPv4，IPv6或DNS地址。在Consul 1.1.0及更高版本中，可以将其设置为 go-sockaddr 模板。如果Consul在非默认的Serf LAN端口上运行，则也必须指定此端口。IPv6必须使用“括弧式”语法。如果给出了多个值，则按照列出的顺序尝试并重试它们，直到第一个成功。这里有些例子：
 
# Using a DNS entry
$ consul agent -retry-join "consul.domain.internal"
 
# Using IPv4，只有IP
$ consul agent -retry-join "10.0.4.67"
 
# Using IPv6,带端口
$ consul agent -retry-join "[::1]:8301"
 
#配置文件中格式
    "start_join":[
        "192.168.41.128:8301"
    ],
    "retry_join":[
        "192.168.41.128:8301"
    ],
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="问题：No-installed-keys-could-decrypt-the-message-报错解决"><a href="#问题：No-installed-keys-could-decrypt-the-message-报错解决" class="headerlink" title="问题：No installed keys could decrypt the message 报错解决"></a>问题：No installed keys could decrypt the message 报错解决</h3><p>新加入的consul节点需要配置<code>encrypt</code>，这个值是需要跟server端一样的，值保存在<code>/consul/data/serf/local.keyring</code>文件中，如果文件中已存在内容，是不是会更新的，需要删掉，或者手动填入，然后重启服务。如果文件中已经有了，那么启动配置中encrypt参数就可以删了，不会产生影响。<code>-disable-keyring-file</code>这个参数作用是是否持久化这个<code>encrypt</code>，默认持久化，可以选择不持久化，缺点是就要在启动配置里显式填写，优点是更好的排查所有节点是否一样。例如文件中和你启动参数中不一样，问题就出来了。</p>
<p>可以先在原有的集群中找到<code>local.keyring</code>文件中找到该<code>encrypt</code>，所有节点保持一致即可。</p>
]]></content>
      <categories>
        <category>consul</category>
      </categories>
      <tags>
        <tag>consul</tag>
      </tags>
  </entry>
  <entry>
    <title>consul【结合spring cloud使用consul配置中心并自动刷新】</title>
    <url>/consul-jie-he-spring-cloud-shi-yong-consul-pei-zhi-zhong-xin-bing-zi-dong-shua-xin/</url>
    <content><![CDATA[<h3 id="重点"><a href="#重点" class="headerlink" title="重点:"></a><strong>重点:</strong></h3><blockquote>
<p><code>consul</code>的配置需要全部写在<code>resource</code>目录下<code>bootstrap.yml</code>文件中，写在<code>application.yml</code>中不能生效！</p>
</blockquote>
<h3 id="consul-config配置"><a href="#consul-config配置" class="headerlink" title="consul config配置"></a>consul config配置</h3><pre class="line-numbers language-yml"><code class="language-yml">#bootstrap.yml配置
spring:
  cloud:
    consul:
      host: 192.168.1.11
      port: 8500
      config:
        enabled: true
        format: KEY_VALUE
        data-key: data
        watch:
          enabled: true
        prefix: deriii
        acl-token: bd63ce16-ccd0-22e1-d37d-fb948232cbf5
      discovery:
        healthCheckPath: /actuator/health
        healthCheckInterval: 15s
        acl-token: bd63ce16-ccd0-22e1-d37d-fb948232cbf5
        prefer-ip-address: true
        ip-address: 192.168.1.113
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="获取配置"><a href="#获取配置" class="headerlink" title="获取配置"></a>获取配置</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//data在consul中完整的目录是prefix + application name + data  </span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${data}"</span><span class="token punctuation">)</span>
    String test<span class="token punctuation">;</span>
 
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> test<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="实时刷新，需要在类上加注解"><a href="#实时刷新，需要在类上加注解" class="headerlink" title="实时刷新，需要在类上加注解"></a>实时刷新，需要在类上加注解</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RefreshScope</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="另一种实现配置刷新"><a href="#另一种实现配置刷新" class="headerlink" title="另一种实现配置刷新"></a>另一种实现配置刷新</h3><pre class="line-numbers language-yml"><code class="language-yml">#bootstrap.yml配置，主要是修改了format为YAML，配合spring boot Configuration使用
spring:
  cloud:
    consul:
      host: 192.168.1.11
      port: 8500
      config:
        enabled: true
        format: YAML
        data-key: data
        watch:
          enabled: true
        prefix: deriiiii
        acl-token: bd63ce16-ccd0-22e1-d37d-fb948232cbf5
      discovery:
        healthCheckPath: /actuator/health
        healthCheckInterval: 15s
        acl-token: bd63ce16-ccd0-22e1-d37d-fb948232cbf5
        prefer-ip-address: true
        ip-address: 192.168.1.113
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="spring-boot-配置类"><a href="#spring-boot-配置类" class="headerlink" title="spring boot 配置类"></a>spring boot 配置类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"ttt"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HiConfig</span> <span class="token punctuation">{</span>
 
    <span class="token keyword">private</span> String test<span class="token punctuation">;</span>
 
    <span class="token comment" spellcheck="true">//getter setter ...</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="consul中key为prefix-application-Name-data，value为yaml类型，且前缀是ttt，属性名为test"><a href="#consul中key为prefix-application-Name-data，value为yaml类型，且前缀是ttt，属性名为test" class="headerlink" title="consul中key为prefix + application Name + data，value为yaml类型，且前缀是ttt，属性名为test"></a>consul中key为prefix + application Name + data，value为yaml类型，且前缀是ttt，属性名为test</h3><pre class="line-numbers language-yml"><code class="language-yml">#key = deriiii/service-hello/data
ttt:
 test: asdas
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="启动类加上"><a href="#启动类加上" class="headerlink" title="启动类加上"></a>启动类加上</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span>HiConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>consul</category>
      </categories>
      <tags>
        <tag>spring cloud</tag>
        <tag>consul</tag>
      </tags>
  </entry>
  <entry>
    <title>consul【开启ACL】</title>
    <url>/consul-kai-qi-acl/</url>
    <content><![CDATA[<h3 id="开启acl"><a href="#开启acl" class="headerlink" title="开启acl"></a>开启acl</h3><pre class="line-numbers language-json"><code class="language-json">// 这里的master token是用UUID生成的，保证三个server的acl配置一样
<span class="token property">"acl"</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token property">"enabled"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"default_policy"</span><span class="token operator">:</span><span class="token string">"deny"</span><span class="token punctuation">,</span>
    <span class="token property">"enable_token_persistence"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"tokens"</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">"master"</span><span class="token operator">:</span><span class="token string">"14d54c5e-24ca-41cc-8c9e-987ba7a96ffb"</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="启动docker-compose-up"><a href="#启动docker-compose-up" class="headerlink" title="启动docker-compose up"></a>启动docker-compose up</h3><p>后台报大量错误</p>
<pre><code>agent: Coordinate update blocked by ACLs
</code></pre>
<p>解决办法:<code>创建一个token</code></p>
<pre><code>#使用POSTMAN，请求方法
PUT
#请求路径
http://192.168.41.128:8500/v1/acl/create
#请求JSON参数
{
  "Name": "Agent Token",
  "Type": "client",
  "Rules": "node \"\" { policy = \"write\" } service \"\" { policy = \"read\" }"
}
 
#Headers加上X-Consul-Token，值为master的值
14d54c5e-24ca-41cc-8c9e-987ba7a96ffb
 
#返回结果
{
    "ID": "db98c304-4d38-8660-fafe-6a4be56a40d0"
}
</code></pre>
<p>将返回的ID贴到consul节点配置中</p>
<pre class="line-numbers language-json"><code class="language-json"><span class="token property">"acl"</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token property">"enabled"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"default_policy"</span><span class="token operator">:</span><span class="token string">"deny"</span><span class="token punctuation">,</span>
    <span class="token property">"enable_token_persistence"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"tokens"</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">"master"</span><span class="token operator">:</span><span class="token string">"14d54c5e-24ca-41cc-8c9e-987ba7a96ffb"</span><span class="token punctuation">,</span>
        <span class="token property">"agent"</span><span class="token operator">:</span><span class="token string">"db98c304-4d38-8660-fafe-6a4be56a40d0"</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>重新启动，问题解决。</p>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><pre><code>docker exec consul_server_1 consul members
</code></pre>
<p>执行上面命令查看members的时候，发现返回为空<br><img data-src="/images/consul15.png" alt="consul"></p>
<p>配置<code>CONSUL_HTTP_TOKEN</code>环境变量，值为刚刚PUT请求获取的token即可。</p>
<p>修改<code>docker-compose.yml</code>配置，所有节点增加环境变量</p>
<pre class="line-numbers language-yaml"><code class="language-yaml">    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> CONSUL_BIND_INTERFACE=eth0
      <span class="token punctuation">-</span> TZ=Asia/Shanghai
      <span class="token punctuation">-</span> CONSUL_HTTP_TOKEN=db98c304<span class="token punctuation">-</span>4d38<span class="token punctuation">-</span>8660<span class="token punctuation">-</span>fafe<span class="token punctuation">-</span>6a4be56a40d0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>重新启动docker-compose up，再次查看members<br><img data-src="/images/consul16.png" alt="consul"></p>
<p>问题解决。</p>
<h3 id="登录web-ui"><a href="#登录web-ui" class="headerlink" title="登录web ui"></a>登录web ui</h3><p>打开后发现啥都没有，需要点击ACL，输入<code>master</code>中的值</p>
<p><img data-src="/images/consul17.png" alt="consul"></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://blog.csdn.net/YellowStar5/article/details/90728468">https://blog.csdn.net/YellowStar5/article/details/90728468</a></li>
</ul>
]]></content>
      <categories>
        <category>consul</category>
      </categories>
      <tags>
        <tag>consul</tag>
        <tag>acl</tag>
      </tags>
  </entry>
  <entry>
    <title>consul【集群容器化部署】</title>
    <url>/consul-ji-qun-rong-qi-hua-bu-shu/</url>
    <content><![CDATA[<h3 id="拉取consul镜像"><a href="#拉取consul镜像" class="headerlink" title="拉取consul镜像"></a>拉取consul镜像</h3><pre class="line-numbers language-sh"><code class="language-sh">docker pull consul:1.6.0
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="本地创建映射目录及配置文件"><a href="#本地创建映射目录及配置文件" class="headerlink" title="本地创建映射目录及配置文件"></a>本地创建映射目录及配置文件</h3><pre class="line-numbers language-sh"><code class="language-sh">#创建server1对应的目录
mkdir /docker/consul/server1
mkdir /docker/consul/server1/data
mkdir /docker/consul/server1/config
 
#创建server2对应的目录
mkdir /docker/consul/server2
mkdir /docker/consul/server2/data
mkdir /docker/consul/server2/config
 
#创建server3对应的目录
mkdir /docker/consul/server3
mkdir /docker/consul/server3/data
mkdir /docker/consul/server3/config
 
#consul容器默认config路径在/consul/config,data路径在/consul/data
#使用docker -v映射，启动可以使用本地config，data也可以持久化到本地
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-json"><code class="language-json">// 创建server1配置文件config.json
// 注意配置ui集群页面，client_addr对应-client，bootstrap
 
<span class="token punctuation">{</span>
    <span class="token property">"datacenter"</span><span class="token operator">:</span><span class="token string">"dc1"</span><span class="token punctuation">,</span>
    <span class="token property">"primary_datacenter"</span><span class="token operator">:</span><span class="token string">"dc1"</span><span class="token punctuation">,</span>
    <span class="token property">"server"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"ui"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"client_addr"</span><span class="token operator">:</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span>
    <span class="token property">"bootstrap"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"enable_script_checks"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token property">"node_name"</span><span class="token operator">:</span><span class="token string">"consul-server-1"</span><span class="token punctuation">,</span>
    <span class="token property">"enable_local_script_checks"</span><span class="token operator">:</span><span class="token boolean">true</span>
<span class="token punctuation">}</span>
 
// 拷贝同样的配置到/docker/consul/server2，/docker/consul/server3目录下，注意去掉ui和bootstrap属性，注意修改节点名node_name，不能冲突
// client_addr不写的话，外面服务访问不了容器里的consul服务
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><pre class="line-numbers language-sh"><code class="language-sh">#docker启动命令
 
docker run -d -e CONSUL_BIND_INTERFACE=eth0 -v /docker/consul/server1/config:/consul/config -v /docker/consul/server1/data:/consul/data  -p 8500:8500  --name=consul consul:1.6.0 agent
 
#前面的不解释了，-v是将本地目录映射到容器内，容器内的路径是刚刚config.json配置中指定的，启动consul时指定配置文件，实际这个配置文件在本地/docker/consul/server1/config/config.json
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="访问本地8500端口，可以看到页面"><a href="#访问本地8500端口，可以看到页面" class="headerlink" title="访问本地8500端口，可以看到页面"></a>访问本地8500端口，可以看到页面</h3><p><img data-src="/images/consul2.png" alt="consul"></p>
<h3 id="启动第二、第三个server加入到集群"><a href="#启动第二、第三个server加入到集群" class="headerlink" title="启动第二、第三个server加入到集群"></a>启动第二、第三个server加入到集群</h3><pre class="line-numbers language-sh"><code class="language-sh">#第一步：通过consul命令查看现有server信息
docker exec consul_server_1 consul members
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><img data-src="/images/consul3.png" alt="consul"></p>
<pre class="line-numbers language-json"><code class="language-json">//第二步：修改server2和server3的配置文件，增加以下内容
    <span class="token property">"start_join"</span><span class="token operator">:</span><span class="token punctuation">[</span>
        <span class="token string">"172.17.0.4"</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"retry_join"</span><span class="token operator">:</span><span class="token punctuation">[</span>
        <span class="token string">"172.17.0.4"</span>
    <span class="token punctuation">]</span>
//注意保持json格式正确
//也可以在docker启动命令后加 -join=<span class="token number">172.17</span>.<span class="token number">0.4</span> -retry-join=<span class="token number">172.17</span>.<span class="token number">0.4</span>，结果一样
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sh"><code class="language-sh">#第三步：使用docker命令启动server2和server3

#启动第2个server节点
docker run -d -e CONSUL_BIND_INTERFACE=eth0 -v /docker/consul/server2/config:/consul/config -v /docker/consul/server2/data:/consul/data --name=consul_server_2 consul:1.6.0 agent
 
 
#启动第3个server节点
docker run -d -e CONSUL_BIND_INTERFACE=eth0 -v /docker/consul/server3/config:/consul/config -v /docker/consul/server3/data:/consul/data --name=consul_server_3 consul:1.6.0 agent
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="查看ui"><a href="#查看ui" class="headerlink" title="查看ui"></a>查看ui</h3><p><img data-src="/images/consul4.png" alt="consul"></p>
<h3 id="增加client类型consul"><a href="#增加client类型consul" class="headerlink" title="增加client类型consul"></a>增加client类型consul</h3><pre class="line-numbers language-json"><code class="language-json">// 复制一个config.json到/docker/consul/client1目录下
// 修改client1的配置文件，具体如下
 
<span class="token punctuation">{</span>
    <span class="token property">"datacenter"</span><span class="token operator">:</span><span class="token string">"dc1"</span><span class="token punctuation">,</span>
    <span class="token property">"primary_datacenter"</span><span class="token operator">:</span><span class="token string">"dc1"</span><span class="token punctuation">,</span>
    <span class="token property">"server"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token property">"client_addr"</span><span class="token operator">:</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span>
    <span class="token property">"enable_script_checks"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token property">"node_name"</span><span class="token operator">:</span><span class="token string">"consul-client-1"</span><span class="token punctuation">,</span>
    <span class="token property">"enable_local_script_checks"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"start_join"</span><span class="token operator">:</span><span class="token punctuation">[</span>
        <span class="token string">"172.17.0.4"</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"retry_join"</span><span class="token operator">:</span><span class="token punctuation">[</span>
        <span class="token string">"172.17.0.4"</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
 
// 注意点：指明了server为<span class="token boolean">false</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sh"><code class="language-sh"># docker启动
docker run -d -e CONSUL_BIND_INTERFACE=eth0 -v /docker/consul/client1/config:/consul/config -v /docker/consul/client1/data:/consul/data --name=consul_client_1 consul:1.6.0 agent
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><code>client</code>加入之后可以通过命令<code>consul members</code>查看<br><img data-src="/images/consul5.png" alt="consul"></p>
<p>可以看到我们刚刚启动的<code>consul_client_1</code>这个节点。</p>
<p><code>UI</code>中在<code>service</code>中看不到<code>client</code><br><img data-src="/images/consul6.png" alt="consul"></p>
<p>但是可以在<code>node</code>中看到<br><img data-src="/images/consul7.png" alt="consul"></p>
<h3 id="查看容器中运行的数据是否保存在本地"><a href="#查看容器中运行的数据是否保存在本地" class="headerlink" title="查看容器中运行的数据是否保存在本地"></a>查看容器中运行的数据是否保存在本地</h3><p><img data-src="/images/consul8.png" alt="consul"><br>成功部署完成！</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://www.consul.io/docs/agent/options.html">https://www.consul.io/docs/agent/options.html</a></li>
<li><a href="https://docs.docker.com/samples/library/consul/">https://docs.docker.com/samples/library/consul/</a></li>
</ul>
]]></content>
      <categories>
        <category>consul</category>
      </categories>
      <tags>
        <tag>consul</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-compose常用命令</title>
    <url>/docker-compose-chang-yong-ming-ling/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>build</code></td>
<td>构建或重建服务</td>
</tr>
<tr>
<td><code>help</code></td>
<td>命令帮助</td>
</tr>
<tr>
<td><code>kill</code></td>
<td>杀掉容器</td>
</tr>
<tr>
<td><code>logs</code></td>
<td>显示容器的输出内容</td>
</tr>
<tr>
<td><code>port</code></td>
<td>打印绑定的开放端口</td>
</tr>
<tr>
<td><code>ps</code></td>
<td>显示容器</td>
</tr>
<tr>
<td><code>pull</code></td>
<td>拉取服务镜像</td>
</tr>
<tr>
<td><code>restart</code></td>
<td>重启服务,指定服务</td>
</tr>
<tr>
<td><code>rm</code></td>
<td>删除停止的容器,指定服务</td>
</tr>
<tr>
<td><code>run</code></td>
<td>运行一个一次性命令</td>
</tr>
<tr>
<td><code>scale</code></td>
<td>设置服务的容器数目</td>
</tr>
<tr>
<td><code>start</code></td>
<td>开启服务,指定服务</td>
</tr>
<tr>
<td><code>stop</code></td>
<td>停止服务,指定服务</td>
</tr>
<tr>
<td><code>up</code></td>
<td>创建并启动容器,<code>-d</code>放到后台运行</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker-compose</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>curl指定域名IP</title>
    <url>/curl-zhi-ding-yu-ming-ip/</url>
    <content><![CDATA[<p>两种都可以不用在 hosts 中添加域名解析即可完成测试.</p>
<h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><pre class="line-numbers language-bash"><code class="language-bash">curl -H <span class="token string">"Host: whoami.local.com"</span> http://192.168.1.32:31532/whoami
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><pre class="line-numbers language-bash"><code class="language-bash">curl --resolve whoami.local.com:31532:192.168.1.32 whoami.local.com:31532/whoami
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>curl</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-compose常用配置</title>
    <url>/docker-compose-chang-yong-pei-zhi/</url>
    <content><![CDATA[<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">nginx-route</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> hub.deri.org.cn/library/nginx
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>route
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">"8080:80"</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">"/etc/localtime:/etc/localtime"</span>
    <span class="token punctuation">-</span> <span class="token string">"/wuzhiyong/nginx.conf:/etc/nginx/nginx.conf"</span>
  <span class="token key atrule">authservice</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> wuzhiyong/authservice
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> authservice
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">"/etc/localtime:/etc/localtime"</span>
  <span class="token key atrule">dbcompare</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> wuzhiyong/dbcompare
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> dbcompare
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">"/etc/localtime:/etc/localtime"</span>
  <span class="token key atrule">graphcompare</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> wuzhiyong/graphcompare
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> graphcompare
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">"/etc/localtime:/etc/localtime"</span>
    <span class="token punctuation">-</span> <span class="token string">"/wuzhiyong/svg:/root/svg"</span>
  <span class="token key atrule">hbasecompare</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> wuzhiyong/hbasecompare
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> hbasecompare
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">"/etc/localtime:/etc/localtime"</span>
    <span class="token key atrule">extra_hosts</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">"hadoop1:172.16.0.7"</span>
    <span class="token punctuation">-</span> <span class="token string">"hadoop2:172.16.0.8"</span>
    <span class="token punctuation">-</span> <span class="token string">"hadoop3:172.16.0.9"</span>
  <span class="token key atrule">taskservice</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> wuzhiyong/taskservice
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> taskservice
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">"/etc/localtime:/etc/localtime"</span>
<span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">nwzb</span><span class="token punctuation">:</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-text"><code class="language-text">user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;

    upstream taskservice{
        server taskservice:28080;
    }

    upstream authservice{
        server authservice:25050;
    }

    upstream dbcompare{
        server dbcompare:28082;
    }

    upstream hbasecompare{
        server hbasecompare:26060;
    }

    upstream graphcompare{
        server graphcompare:29090;
    }

    server {
        listen    80 default_server;
        server_name _;
    location /ts {
        proxy_pass    http://taskservice;
    }
        location /auth {
            proxy_pass  http://authservice;
        }
        location /dbc {
            proxy_pass  http://dbcompare;
        }
        location /hbc {
            proxy_pass  http://hbasecompare;
        }
        location /graph {
            proxy_pass  http://graphcompare;
        }
    }
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker-compose</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-compose部署集群zookeeper</title>
    <url>/docker-compose-bu-shu-ji-qun-zookeeper/</url>
    <content><![CDATA[<h3 id="编写docker-compose-yml"><a href="#编写docker-compose-yml" class="headerlink" title="编写docker-compose.yml"></a>编写<code>docker-compose.yml</code></h3><pre class="line-numbers language-yml"><code class="language-yml">version: '3.1'

services:
  zoo1:
    image: zookeeper:3.5
    restart: always
    hostname: zoo1
    volumes:
      - /root/zookeeper/1/data:/data
      - /root/zookeeper/1/datalog:/datalog
    ports:
      - 2181:2181
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888;2181 server.2=zoo2:2888:3888;2181 server.3=zoo3:2888:3888;2181

  zoo2:
    image: zookeeper:3.5
    restart: always
    hostname: zoo2
    volumes:
      - /root/zookeeper/2/data:/data
      - /root/zookeeper/2/datalog:/datalog
    ports:
      - 2182:2181
    environment:
      ZOO_MY_ID: 2
      ZOO_SERVERS: server.1=zoo1:2888:3888;2181 server.2=0.0.0.0:2888:3888;2181 server.3=zoo3:2888:3888;2181

  zoo3:
    image: zookeeper:3.5
    restart: always
    hostname: zoo3
    volumes:
      - /root/zookeeper/3/data:/data
      - /root/zookeeper/3/datalog:/datalog
    ports:
      - 2183:2181
    environment:
      ZOO_MY_ID: 3
      ZOO_SERVERS: server.1=zoo1:2888:3888;2181 server.2=zoo2:2888:3888;2181 server.3=0.0.0.0:2888:3888;2181
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="启停"><a href="#启停" class="headerlink" title="启停"></a>启停</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动</span>
docker-compose up -d

<span class="token comment" spellcheck="true"># 停止</span>
docker-compose down
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://hub.docker.com/_/zookeeper">https://hub.docker.com/_/zookeeper</a></li>
</ul>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker-compose.zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-compose配置依赖和启动顺序</title>
    <url>/docker-compose-pei-zhi-yi-lai-he-qi-dong-shun-xu/</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p><code>docker-compose</code>配置容器启动顺序,有时依靠<code>depends_on</code>并不能完全解决,主要原因是:</p>
<ul>
<li><code>depends_on</code>只能保证容器进入了<code>running</code>状态,而不保证进入<code>ready</code>状态.</li>
<li><a href="https://docs.docker.com/compose/startup-order/">Control startup and shutdown order in Compose</a></li>
</ul>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>启动命令前增加<code>判断依赖服务状态的工具</code></p>
<ul>
<li><a href="https://github.com/vishnubob/wait-for-it">wait-for-it</a></li>
<li><a href="https://github.com/jwilder/dockerize">dockerize</a></li>
<li><a href="https://github.com/Eficode/wait-for">wait-for</a></li>
</ul>
<p>示例:</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"2"</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> .
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"80:8000"</span>
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"db"</span>
    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"./wait-for-it.sh"</span><span class="token punctuation">,</span> <span class="token string">"db:5432"</span><span class="token punctuation">,</span> <span class="token string">"--"</span><span class="token punctuation">,</span> <span class="token string">"python"</span><span class="token punctuation">,</span> <span class="token string">"app.py"</span><span class="token punctuation">]</span>
  <span class="token key atrule">db</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> postgres
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="自己编写script"><a href="#自己编写script" class="headerlink" title="自己编写script"></a>自己编写script</h3><pre class="line-numbers language-sh"><code class="language-sh">#!/bin/sh
# wait-for-postgres.sh

set -e
  
host="$1"
shift
cmd="$@"
  
until PGPASSWORD=$POSTGRES_PASSWORD psql -h "$host" -U "postgres" -c '\q'; do
  >&2 echo "Postgres is unavailable - sleeping"
  sleep 1
done
  
>&2 echo "Postgres is up - executing command"
exec $cmd
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>测试：</p>
<pre class="line-numbers language-sh"><code class="language-sh">command: ["./wait-for-postgres.sh", "db", "python", "app.py"]
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="wait-for命令测试"><a href="#wait-for命令测试" class="headerlink" title="wait-for命令测试"></a>wait-for命令测试</h3><ul>
<li>下载<a href="https://github.com/eficode/wait-for/blob/master/wait-for">wait-for</a></li>
</ul>
<pre class="line-numbers language-sh"><code class="language-sh">[root@node1 ~]# chmod a+x wait_for 
[root@node1 ~]# ./wait_for localhost:3306 -- echo "Mysql site is up"
Eficode site is up
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker-compose</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker【hosts新增记录】</title>
    <url>/docker-hosts-xin-zeng-ji-lu/</url>
    <content><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>使用<code>docker run</code>运行一个新的容器的时候，通过参数 <code>--add-host</code>来添加域名和<code>IP</code>信息到容器的<code>/etc/hosts</code>文件中。例如：</p>
<pre class="line-numbers language-bash"><code class="language-bash">docker run -d --name <span class="token function">test</span> --add-host<span class="token operator">=</span>addr.com:10.10.18.11 redis:latest 
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker垃圾收集</title>
    <url>/docker-la-ji-shou-ji/</url>
    <content><![CDATA[<h3 id="查看tag为none的镜像"><a href="#查看tag为none的镜像" class="headerlink" title="查看tag为none的镜像"></a>查看tag为none的镜像</h3><pre class="line-numbers language-bash"><code class="language-bash">docker images -f <span class="token string">"dangling=true"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="删除tag为none的镜像"><a href="#删除tag为none的镜像" class="headerlink" title="删除tag为none的镜像"></a>删除tag为none的镜像</h3><pre class="line-numbers language-bash"><code class="language-bash">docker rmi <span class="token punctuation">$(</span>docker images -f <span class="token string">"dangling=true"</span> -q<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="查看docker占用的磁盘空间"><a href="#查看docker占用的磁盘空间" class="headerlink" title="查看docker占用的磁盘空间"></a>查看docker占用的磁盘空间</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker system df</span>
TYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE
Images              35                  3                   5.039GB             4.603GB <span class="token punctuation">(</span>91%<span class="token punctuation">)</span>
Containers          3                   2                   19.69kB             19.5kB <span class="token punctuation">(</span>99%<span class="token punctuation">)</span>
Local Volumes       28                  0                   3.782MB             3.782MB <span class="token punctuation">(</span>100%<span class="token punctuation">)</span>
Build Cache         0                   0                   0B                  0B
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="查找所有无用的volume"><a href="#查找所有无用的volume" class="headerlink" title="查找所有无用的volume"></a>查找所有无用的volume</h3><pre class="line-numbers language-bash"><code class="language-bash">docker volume <span class="token function">ls</span> -qf dangling<span class="token operator">=</span>true
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="删除所有无用的volume"><a href="#删除所有无用的volume" class="headerlink" title="删除所有无用的volume"></a>删除所有无用的volume</h3><pre class="line-numbers language-bash"><code class="language-bash">docker volume <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span>docker volume <span class="token function">ls</span> -qf dangling<span class="token operator">=</span>true<span class="token variable">)</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="查看所有docker文件夹"><a href="#查看所有docker文件夹" class="headerlink" title="查看所有docker文件夹"></a>查看所有docker文件夹</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span> / -name docker
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>可以使用<code>df</code>或者<code>du</code>命令查看文件夹具体使用情况，参考<a href="https://haolin.club/2020/01/08/linux-xi-tong-ci-pan-shi-yong-qing-kuang-xiang-guan-ming-ling/">Linux系统磁盘使用情况相关命令</a>.<br>如:  </p>
<pre><code>du -hs /var/lib/docker/
</code></pre>
</blockquote>
<h3 id="查找所有未运行的容器"><a href="#查找所有未运行的容器" class="headerlink" title="查找所有未运行的容器"></a>查找所有未运行的容器</h3><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">ps</span> -a<span class="token operator">|</span><span class="token function">grep</span> Exited
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">ps</span> -qf status<span class="token operator">=</span>exited
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="删除所有未运行的容器"><a href="#删除所有未运行的容器" class="headerlink" title="删除所有未运行的容器"></a>删除所有未运行的容器</h3><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">rm</span> <span class="token punctuation">$(</span>docker <span class="token function">ps</span> -a<span class="token operator">|</span><span class="token function">grep</span> Exited <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="prune命令"><a href="#prune命令" class="headerlink" title="prune命令"></a><font color="red"><strong>prune命令</strong></font></h3><ul>
<li>删除所有无用的容器</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash">docker container prune
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>删除所有无用的镜像</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash">docker image prune
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>删除所有无用的volume</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash">docker volume prune
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>删除所有无用的network</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash">docker network prune
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>删除docker系统中所有无用的，包括容器、镜像、volume、网络等</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash">docker system prune
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p><strong>注意</strong><code>docker system prune</code>和<code>docker system prune -a</code>两者的区别：  </p>
<hr>
<p>[root@node1 ~]# <code>docker system prune</code><br>WARNING! This will remove:</p>
<ul>
<li>all stopped containers</li>
<li>all networks not used by at least one container</li>
<li>all dangling images</li>
<li>all dangling build cache<br>Are you sure you want to continue? [y/N]</li>
</ul>
<hr>
<p>[root@node1 ~]# <code>docker system prune -a</code><br>WARNING! This will remove:</p>
<ul>
<li>all stopped containers</li>
<li>all networks not used by at least one container</li>
<li>all images without at least one container associated to them</li>
<li>all build cache<br>Are you sure you want to continue? [y/N]</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>垃圾清理</tag>
        <tag>prune</tag>
      </tags>
  </entry>
  <entry>
    <title>docker拉取国外镜像失败【quay.io和gcr.io解决办法】</title>
    <url>/docker-la-qu-guo-wai-jing-xiang-shi-bai-quay-io-he-gcr-io-jie-jue-ban-fa/</url>
    <content><![CDATA[<blockquote>
<p>使用国内镜像源。</p>
</blockquote>
<h3 id="quay-io"><a href="#quay-io" class="headerlink" title="quay.io"></a>quay.io</h3><p>例如下面拉取比较慢</p>
<pre class="line-numbers language-bash"><code class="language-bash">docker pull quay.io/jetstack/cert-manager-cainjector:v0.12.0
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>可以换成</p>
<pre class="line-numbers language-bash"><code class="language-bash">docker pull quay-mirror.qiniu.com/jetstack/cert-manager-cainjector:v0.12.0
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="gcr-io"><a href="#gcr-io" class="headerlink" title="gcr.io"></a>gcr.io</h3><p>例如下面拉取比较慢</p>
<pre class="line-numbers language-bash"><code class="language-bash">docker pull gcr.io/google_containers/kube-proxy
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>可以换成阿里云的</p>
<pre class="line-numbers language-bash"><code class="language-bash">docker pull registry.aliyuncs.com/google_containers/kube-proxy
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="下载完成"><a href="#下载完成" class="headerlink" title="下载完成"></a>下载完成</h3><p>可以使用tag命令改回去</p>
<pre class="line-numbers language-bash"><code class="language-bash">docker tag 
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>quay.io</tag>
        <tag>gcr.io</tag>
      </tags>
  </entry>
  <entry>
    <title>docker常用命令</title>
    <url>/docker-chang-yong-ming-ling/</url>
    <content><![CDATA[<h3 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h3><pre class="line-numbers language-sh"><code class="language-sh">docker run "image"
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td><code>-it</code></td>
<td>交互式启动</td>
</tr>
<tr>
<td><code>-d</code></td>
<td>后台启动</td>
</tr>
<tr>
<td><code>-p80:80</code></td>
<td>端口映射</td>
</tr>
<tr>
<td><code>--name</code></td>
<td>容器名称</td>
</tr>
<tr>
<td><code>--cpus</code></td>
<td>限制cpu使用个数</td>
</tr>
<tr>
<td><code>--cpuset-cpus</code></td>
<td>限制cpu使用的核，例如0-3，限制使用0-3核CPU</td>
</tr>
<tr>
<td><code>-m</code></td>
<td>限制内存使用，例如2048M</td>
</tr>
<tr>
<td><code>--restart</code></td>
<td>自动重启策略</td>
</tr>
</tbody></table>
<h3 id="对指定容器执行bash"><a href="#对指定容器执行bash" class="headerlink" title="对指定容器执行bash"></a>对指定容器执行bash</h3><pre class="line-numbers language-sh"><code class="language-sh">docker exec -it 9df70f9a0714 /bin/bash
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><pre class="line-numbers language-sh"><code class="language-sh">docker rmi 镜像名/镜像ID
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><pre class="line-numbers language-Dockerfile"><code class="language-Dockerfile">FROM myjdk1.8
MAINTAINER author
 
ADD haolin.jar /root
ADD start.sh /root
RUN chmod +x /root/start.sh
 
EXPOSE 80
ENV LANG C.UTF-8
CMD /root/start.sh
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sh"><code class="language-sh">#! /bin/bash
echo "building docker image..."
docker build -f /docker/bbs/Dockerfile -t author/bbs .
 
echo "stop and remove old docker container"
if [ `docker ps -a|grep bbs|awk '{print $1}'` != '' ]; then
        docker stop bbs
        docker rm bbs
fi
 
echo "start..."
docker run -d -p 80:80 --name bbs --restart=always author/bbs:latest
 
echo "buid success"
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker查找占用主机磁盘最多的容器</title>
    <url>/docker-cha-zhao-zhan-yong-zhu-ji-ci-pan-zui-duo-de-rong-qi/</url>
    <content><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>有时候我们一台主机上部署了多个容器，而且对部分数据做了持久化，时间长了，数据会越来越多，相应的可能会造成磁盘空间不足？那么我们如何，找出占用磁盘空间最大的容器，并删除容器的部分不需要的日志或数据文件呢？</p>
<h3 id="overlay2简介"><a href="#overlay2简介" class="headerlink" title="overlay2简介"></a>overlay2简介</h3><p>OverlayFS是一种现代的联合文件系统，与AUFS类似，但速度更快且实现更简单。Docker为OverlayFS提供了两个存储驱动程序：原始的overlay，更新的和更稳定的overlay2。</p>
<h3 id="容器存储目录"><a href="#容器存储目录" class="headerlink" title="容器存储目录"></a>容器存储目录</h3><pre class="line-numbers language-sh"><code class="language-sh">[root@docker overlay2]# df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/vda1        40G  4.1G   34G  11% /
devtmpfs        911M     0  911M   0% /dev
tmpfs           920M     0  920M   0% /dev/shm
tmpfs           920M  1.3M  919M   1% /run
tmpfs           920M     0  920M   0% /sys/fs/cgroup
overlay          40G  4.1G   34G  11% /var/lib/docker/overlay2/6c21d550b2e37e23b777490d3f3b26c54ed5b98ad615ac833ff4248a288b9530/merged
overlay          40G  4.1G   34G  11% /var/lib/docker/overlay2/aa7a46d5a35c404e956fa35c88c5ecb8f117d03299f3818d5c66c33caf4ee6f4/merged
overlay          40G  4.1G   34G  11% /var/lib/docker/overlay2/507f4480d6ed67738d618080b0fcbf60ca22623ba9a87eade44fa403e421cf55/merged
overlay          40G  4.1G   34G  11% /var/lib/docker/overlay2/5cc8105791fd74756b0f7cc36ec93685f3ca90bcb72ac025edb7389e5156228b/merged
overlay          40G  4.1G   34G  11% 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在当前版本中，容器存储目录为<code>/var/lib/docker/overlay2</code>。且当前占用宿主机磁盘空间的目录也为容器存储目录。</p>
<h3 id="查找占用磁盘空间大小的容器目录"><a href="#查找占用磁盘空间大小的容器目录" class="headerlink" title="查找占用磁盘空间大小的容器目录"></a>查找占用磁盘空间大小的容器目录</h3><pre class="line-numbers language-sh"><code class="language-sh">[root@docker overlay2]# du -s * | sort -nr | head -5
334636	f6acb9573429712fe4d8b8b786e24d790fae8727f403693874b62a168b174870
159348	86444fb8a5127b41323bef731c14eb764135a7066bb5f904427f53816ff4fe2f
146556	6c21d550b2e37e23b777490d3f3b26c54ed5b98ad615ac833ff4248a288b9530
102080	1eb50142766d18f3927615f63f599d9de1885b2954397736b882bb89ab8ae265
88504	ef4e0ff8bf2cd2f8d2f147e30e89e2c7b6f6e02795ebbcd45a3bba1d77b3b132
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>注意：这里只列出了排名<code>前五</code>的容器目录。那么现在知道了容器目录，那么如何找出对应的容器呢？现在我们要找出<code>f6acb9573429</code>开头的目录对应时哪个容器？</p>
</blockquote>
<h3 id="查找容器目录对应的容器名"><a href="#查找容器目录对应的容器名" class="headerlink" title="查找容器目录对应的容器名"></a>查找容器目录对应的容器名</h3><ul>
<li>通过 <code>docker ps -a</code> 查看容器列表</li>
<li>通过 <code>docker inspect 容器ID</code> 查看容器配置信息</li>
</ul>
<pre class="line-numbers language-sh"><code class="language-sh">[root@docker overlay2]# for i in $(docker ps -q );do echo echo $i ; docker inspect $i|grep f6acb9573429  ; done
echo 4332fe39163b
                "LowerDir": "/var/lib/docker/overlay2/**f6acb9573429**712fe4d8b8b786e24d790fae8727f403693874b62a168b174870-init/diff:/var/lib/docker/overlay2/b76d30a66c8fef0123a2310bd861a0aa626b5a6e7bf83f9982a6344c8e466187/diff:/var/lib/docker/overlay2/c5b396df751ea053d81765d77f85a8dd44c1c847b6fbe95b38230509f372dfd2/diff:/var/lib/docker/overlay2/1efa8716d1f55fde7716deaacabe0e582aff78f7e460f18b9d5dc84db387533e/diff:/var/lib/docker/overlay2/3f78cbaa248e4f8b1e25599e5e1e2496a463b75e39adfaad2026f134a8ebf89f/diff:/var/lib/docker/overlay2/18ca1077ac90dff82d1085d19162d7b56c42effce18b416632c0e1627602fb17/diff:/var/lib/docker/overlay2/bcee6e758f7ac5769da672274262d61b38acc2cc6ade4b9b56cd0475ca886528/diff:/var/lib/docker/overlay2/e23e02b967bdf1aaaef8e002f0a9f1d778d7a7de7adb12cd925e84ef770b62c7/diff:/var/lib/docker/overlay2/916a116fc26d356a61a9e028c52a3a402349e87e1e9eea6f4d2039cf31391155/diff",
                "MergedDir": "/var/lib/docker/overlay2/f6acb9573429712fe4d8b8b786e24d790fae8727f403693874b62a168b174870/merged",
                "UpperDir": "/var/lib/docker/overlay2/f6acb9573429712fe4d8b8b786e24d790fae8727f403693874b62a168b174870/diff",
                "WorkDir": "/var/lib/docker/overlay2/f6acb9573429712fe4d8b8b786e24d790fae8727f403693874b62a168b174870/work"
echo 4172f0cf7985
echo a622665b0a81
echo 20fde2e0a903
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>注意：这里就已经找出了最占用磁盘空间大小的容器了。<code>4332fe39163b</code>为容器<code>ID</code>.</p>
</blockquote>
<h3 id="查看镜像占用磁盘"><a href="#查看镜像占用磁盘" class="headerlink" title="查看镜像占用磁盘"></a>查看镜像占用磁盘</h3><pre class="line-numbers language-sh"><code class="language-sh">docker system df 
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="查看docker日志-json-log"><a href="#查看docker日志-json-log" class="headerlink" title="查看docker日志.json.log"></a>查看docker日志.json.log</h3><p><code>docker</code>日志默认不作限制,可能产生非常大的日志文件,需要清理或者作出限制.</p>
<ul>
<li>限制docker容器日志大小</li>
</ul>
<pre class="line-numbers language-json"><code class="language-json">// vim /etc/docker/daemon.json
<span class="token punctuation">{</span>
  <span class="token property">"log-driver"</span><span class="token operator">:</span><span class="token string">"json-file"</span><span class="token punctuation">,</span>
  <span class="token property">"log-opts"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"max-size"</span><span class="token operator">:</span><span class="token string">"500m"</span><span class="token punctuation">,</span> <span class="token property">"max-file"</span><span class="token operator">:</span><span class="token string">"3"</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://blog.csdn.net/m0_37814112/article/details/103049589">docker查找占用主机磁盘空间最大的容器</a></li>
<li><a href="https://blog.csdn.net/hnmpf/article/details/90237465">定位那个docker容器占用overlay2的问题之容器磁盘定位</a></li>
</ul>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker查询容器使用内存</title>
    <url>/docker-cha-xun-rong-qi-shi-yong-nei-cun/</url>
    <content><![CDATA[<h3 id="docker-stats"><a href="#docker-stats" class="headerlink" title="docker stats"></a>docker stats</h3><blockquote>
<p><code>docker stats --no-stream</code></p>
</blockquote>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@data1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker stats</span>
CONTAINER ID   NAME             CPU %     MEM USAGE / LIMIT     MEM %     NET I/O           BLOCK I/O         PIDS
b4fb48ce6a23   magical_bell     147.29%   4.207GiB / 7.638GiB   55.08%    8.72GB / 7.79GB   2.46GB / 7.21GB   71
e189b149f025   kafka            3.94%     1.549GiB / 7.638GiB   20.27%    0B / 0B           637GB / 25GB      78
14cc0c468a14   zookeeper        0.24%     178.2MiB / 7.638GiB   2.28%     0B / 0B           381GB / 7.49MB    102
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>统计的结果和实际有出入.</p>
<h3 id="TOP"><a href="#TOP" class="headerlink" title="TOP"></a>TOP</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 获取容器的PID</span>
docker inspect -f <span class="token string">'{{.State.Pid}}'</span> container_name
<span class="token comment" spellcheck="true"># 根据pid查询</span>
<span class="token punctuation">[</span>root@data1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># top -p 2203</span>
PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+  COMMAND 
2203 1001      20   0 6470744   1.3g   6076 S   0.0 16.6   2717:49 java
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="VmRSS"><a href="#VmRSS" class="headerlink" title="VmRSS"></a>VmRSS</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@data1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /proc/2203/status</span>
VmPeak:	 6475388 kB
VmSize:	 6470744 kB
VmLck:	       0 kB
VmPin:	       0 kB
VmHWM:	 1336420 kB
VmRSS:	 1329516 kB <span class="token comment" spellcheck="true"># 此处是所要查询的内存大小</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 找出所有运行的容器</span>
idNames<span class="token operator">=</span>`docker <span class="token function">ps</span> --format <span class="token string">"{{.ID}}|{{.Names}},"</span>`

<span class="token comment" spellcheck="true"># 按,号分隔</span>
OLD_IFS<span class="token operator">=</span><span class="token string">"<span class="token variable">$IFS</span>"</span>
IFS<span class="token operator">=</span><span class="token string">","</span>
arr<span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable">$idNames</span><span class="token punctuation">)</span>
IFS<span class="token operator">=</span><span class="token string">"<span class="token variable">$OLD_IFS</span>"</span>

<span class="token comment" spellcheck="true"># 输出 Title</span>
<span class="token function">printf</span> <span class="token string">"%-15s %-30s %-15s\n"</span> Id Name Mem

<span class="token comment" spellcheck="true"># 遍历所有容器</span>
<span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token variable">${arr[@]}</span>
<span class="token keyword">do</span>
    <span class="token comment" spellcheck="true"># 容器ID和容器名字 按 | 分隔</span>
    OLD_IFS<span class="token operator">=</span><span class="token string">"<span class="token variable">$IFS</span>"</span>
    IFS<span class="token operator">=</span><span class="token string">"|"</span>
    array<span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">)</span>
    IFS<span class="token operator">=</span><span class="token string">"<span class="token variable">$OLD_IFS</span>"</span>
    
    <span class="token comment" spellcheck="true"># 当前容器的Pid</span>
    pid<span class="token operator">=</span>`docker inspect -f <span class="token string">'{{.State.Pid}}'</span> <span class="token variable">${array[0]}</span>`
    
    <span class="token comment" spellcheck="true"># 当前容器的内存</span>
    mem<span class="token operator">=</span><span class="token punctuation">$(</span>cat /proc/<span class="token variable">$pid</span>/status<span class="token operator">|</span><span class="token function">grep</span> -e VmRSS<span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$2</span>}'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 输出结果</span>
    <span class="token function">printf</span> <span class="token string">"%-15s %-30s %-15s\n"</span> <span class="token variable">${array[0]}</span> <span class="token variable">${array[1]}</span> $<span class="token punctuation">[</span><span class="token variable">$mem</span> / 1024<span class="token punctuation">]</span>M
<span class="token keyword">done</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
  </entry>
  <entry>
    <title>docker管理工具-dockerfly</title>
    <url>/docker-guan-li-gong-ju-dockerfly/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p><code>dockerfly</code>提供一个<code>web</code>页面，可以非常方便的管理主机上<code>镜像</code>、<code>容器</code>、<code>网络</code>等。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 采用docker部署即可</span>
docker pull helyho/dockerfly:latest
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><ul>
<li><code>28083</code>：web端口</li>
<li><code>2735</code>：管理端口</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash">docker run --name dockerfly -d -v /var/run/docker.sock:/var/run/docker.sock --restart always -p 2735:2735 -p 28083:28083 helyho/dockerfly
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><ul>
<li><a href="">http://ip:28083</a></li>
</ul>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>dockerfly</tag>
      </tags>
  </entry>
  <entry>
    <title>docker目录映射加z或Z标签</title>
    <url>/docker-mu-lu-ying-she-jia-z-huo-z-biao-qian/</url>
    <content><![CDATA[<h3 id="配置selinux标签"><a href="#配置selinux标签" class="headerlink" title="配置selinux标签"></a>配置selinux标签</h3><p>如果使用<code>selinux</code>，则可以添加<code>z</code>或<code>Z</code>选项来修改要装入容器的主机文件或目录的<code>selinux</code>标签。这会影响主机本身上的文件或目录，并可能导致超出Docker范围的后果。</p>
<ul>
<li>该z选项指示绑定安装内容在多个容器之间共享。</li>
<li>该Z选项指示绑定安装内容是私有的且未共享。</li>
</ul>
<p>这些选项请格外小心。绑定安装系统目录（例如<code>/home</code>或<code>/usr</code>带有该<code>Z</code>选项）会使主机无法操作，并且您可能需要手动重新标记主机文件。</p>
<blockquote>
<p>重要说明：将绑定安装与服务一起使用时，<code>selinux</code>标签（<code>:Z</code>和<code>:z</code>）以及将<code>:ro</code>被忽略。</p>
</blockquote>
<p>本示例设置<code>z</code>选项以指定多个容器可以共享绑定安装的内容：</p>
<p>无法使用该<code>--mount</code>标志修改<code>selinux</code>标签。</p>
<pre class="line-numbers language-sh"><code class="language-sh">docker run -d \
  -it \
  --name devtest \
  -v "$(pwd)"/target:/app:z \
  nginx:latest
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a><a href="https://docs.docker.com/storage/bind-mounts/#configure-the-selinux-label">原文地址</a></h3>]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker网络模式</title>
    <url>/docker-wang-luo-mo-shi/</url>
    <content><![CDATA[<h3 id="网络模式"><a href="#网络模式" class="headerlink" title="网络模式"></a>网络模式</h3><table>
<thead>
<tr>
<th>Docker网络模式</th>
<th>配置</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>host</code></td>
<td><code>–net=host</code></td>
<td>容器和宿主机共享Network namespace。</td>
</tr>
<tr>
<td><code>container</code></td>
<td><code>–net=container:NAME</code></td>
<td>容器和另外一个容器共享Network namespace。</td>
</tr>
<tr>
<td><code>none</code></td>
<td><code>–net=none</code></td>
<td>容器有独立的Network namespace，但并没有对其进行任何网络设置，如分配veth pair 和网桥连接，配置IP等。</td>
</tr>
<tr>
<td><code>bridge</code></td>
<td><code>–net=bridge</code></td>
<td>默认为该模式</td>
</tr>
</tbody></table>
<h3 id="默认创建3种模式"><a href="#默认创建3种模式" class="headerlink" title="默认创建3种模式"></a>默认创建3种模式</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker network ls</span>
NETWORK ID          NAME                DRIVER              SCOPE
fa18c3cc657d        bridge              bridge              local
c1196f6c46ca        host                host                local
c20416a61dd3        none                null                local

<span class="token comment" spellcheck="true"># 手动创建一个bridge网络</span>
<span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker network create test</span>
1ed592b9d91ae8c49f5de4b975e5adb104264bf3b03973fcf3040683a4dfcf0e
<span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker network ls</span>
NETWORK ID          NAME                DRIVER              SCOPE
fa18c3cc657d        bridge              bridge              local
c1196f6c46ca        host                host                local
c20416a61dd3        none                null                local
1ed592b9d91a        <span class="token function">test</span>                bridge              local
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>测试</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动两个容器</span>
docker run -itd --name<span class="token operator">=</span>c1 busybox
docker run -itd --name<span class="token operator">=</span>c2 --net<span class="token operator">=</span>test busybox

<span class="token comment" spellcheck="true"># 查看他们ip</span>
docker <span class="token function">exec</span> -it c1 ip ad
docker <span class="token function">exec</span> -it c2 ip ad

<span class="token comment" spellcheck="true"># 因为使用的不同的bridge,他们之间ping不通</span>
docker <span class="token function">exec</span> -it c2 <span class="token function">ping</span> 172.19.0.2
<span class="token comment" spellcheck="true"># 手动将c1加入到test网络</span>
docker network connect <span class="token function">test</span> c1
<span class="token comment" spellcheck="true"># 查看c1网卡,会增加一个</span>
docker <span class="token function">exec</span> -it c1 ip ad
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>与另一个容器共享一个网络IP</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 先启动一个</span>
docker run -itd --name c1 busybox
<span class="token comment" spellcheck="true"># 共享另一个容器网络</span>
docker run -itd --net<span class="token operator">=</span>container:c1 --name c2 busybox

<span class="token comment" spellcheck="true"># 网卡完全一致</span>
docker <span class="token function">exec</span> c1 ip ad
docker <span class="token function">exec</span> c2 ip ad
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker镜像分析工具dive</title>
    <url>/docker-jing-xiang-fen-xi-gong-ju-dive/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>docker 镜像分析工具有 docker 自带的 <code>docker inspect</code> 和 <code>docker history</code>,对于具体每一层（<code>layers</code>）组成可以使用 <code>dive</code> 工具. 地址：<a href="https://github.com/wagoodman/dive">https://github.com/wagoodman/dive</a>，该工具主要用于探索 docker 镜像层内容以及发现减小 docker 镜像大小的方法.</p>
<h3 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h3><pre class="line-numbers language-bash"><code class="language-bash">docker pull wagoodman/dive
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># windows 下 docker.sock 路径可以使用 -v //var/run/docker.sock:/var/run/docker.sock</span>
docker run --rm -it -v /var/run/docker.sock:/var/run/docker.sock wagoodman/dive:latest <span class="token operator">&lt;</span>dive arguments<span class="token punctuation">..</span>.<span class="token operator">></span>
<span class="token comment" spellcheck="true"># 示例</span>
docker run --rm -it -v //var/run/docker.sock:/var/run/docker.sock wagoodman/dive:latest test:v1.2
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="二进制安装"><a href="#二进制安装" class="headerlink" title="二进制安装"></a>二进制安装</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># centos</span>
curl -OL https://github.com/wagoodman/dive/releases/download/v0.9.2/dive_0.9.2_linux_amd64.rpm
rpm -i dive_0.9.2_linux_amd64.rpm
<span class="token comment" spellcheck="true"># windows</span>
go get github.com/wagoodman/dive
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-bash"><code class="language-bash">dive <span class="token operator">&lt;</span>your-image<span class="token operator">></span> --source <span class="token operator">&lt;</span>source<span class="token operator">></span>
<span class="token comment" spellcheck="true"># or </span>
dive <span class="token operator">&lt;</span>source<span class="token operator">></span>://<span class="token operator">&lt;</span>your-image<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>dive</tag>
      </tags>
  </entry>
  <entry>
    <title>docker镜像导入导出</title>
    <url>/docker-jing-xiang-dao-ru-dao-chu/</url>
    <content><![CDATA[<p>docker镜像导入导出有两种方式</p>
<ul>
<li>export/import</li>
<li>load/save</li>
</ul>
<h3 id="export-x2F-import"><a href="#export-x2F-import" class="headerlink" title="export/import"></a>export/import</h3><pre><code>docker export -o "导出的镜像文件名.tar" CONTATINER

docker import "导出的镜像文件名.tar" "镜像名:版本号"
</code></pre>
<h3 id="load-x2F-save"><a href="#load-x2F-save" class="headerlink" title="load/save"></a>load/save</h3><pre><code>docker load --input "导出的镜像文件名.tar"

docker save -o "导出的镜像文件名.tar" "要导出的镜像名"
</code></pre>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>docker镜像导入/导出</tag>
      </tags>
  </entry>
  <entry>
    <title>docker限制容器日志大小</title>
    <url>/docker-xian-zhi-rong-qi-ri-zhi-da-xiao/</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>容器日志一般存放在<code>/var/lib/docker/containers/container_id/</code>下面，以<code>json.log</code>结尾的文件(业务日志)很大.</p>
<h3 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h3><ul>
<li>临时清空日志</li>
</ul>
<pre class="line-numbers language-sh"><code class="language-sh"># 注意不能用rm命令
cat /dev/null > /var/lib/docker/containers/容器id/容器id-json.log
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>如果是docker-compose<br>通过配置容器<code>docker-compose.yml</code>的<code>max-size</code>选项来实现:</li>
</ul>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">nginx</span><span class="token punctuation">:</span> 
  <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.12.1 
  <span class="token key atrule">restart</span><span class="token punctuation">:</span> always 
  <span class="token key atrule">logging</span><span class="token punctuation">:</span> 
    <span class="token key atrule">driver</span><span class="token punctuation">:</span> <span class="token string">"json-file"</span>
    <span class="token key atrule">options</span><span class="token punctuation">:</span> 
      <span class="token key atrule">max-size</span><span class="token punctuation">:</span> <span class="token string">"5g"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>限制docker容器日志大小</li>
</ul>
<pre class="line-numbers language-json"><code class="language-json">// vim /etc/docker/daemon.json
<span class="token punctuation">{</span>
  <span class="token property">"log-driver"</span><span class="token operator">:</span><span class="token string">"json-file"</span><span class="token punctuation">,</span>
  <span class="token property">"log-opts"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"max-size"</span><span class="token operator">:</span><span class="token string">"500m"</span><span class="token punctuation">,</span> <span class="token property">"max-file"</span><span class="token operator">:</span><span class="token string">"3"</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>重启docker生效</p>
<pre class="line-numbers language-sh"><code class="language-sh">systemctl daemon-reload
systemctl restart docker
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://www.cnblogs.com/angel-devil/p/12558908.html">https://www.cnblogs.com/angel-devil/p/12558908.html</a></li>
</ul>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>dom4j使用ElementHandler解析xml</title>
    <url>/dom4j-shi-yong-elementhandler-jie-xi-xml/</url>
    <content><![CDATA[<h3 id="实现ElementHandler接口"><a href="#实现ElementHandler接口" class="headerlink" title="实现ElementHandler接口"></a>实现ElementHandler接口</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyHandler</span> <span class="token keyword">implements</span> <span class="token class-name">ElementHandler</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">// xml中每一个&lt;节点>开始执行的方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span>ElementPath elementPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// todo 解析xml要做的业务处理</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// xml中每一个&lt;节点>结束执行的方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEnd</span><span class="token punctuation">(</span>ElementPath elementPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// todo 解析xml要做的业务处理</span>
        elementPath<span class="token punctuation">.</span><span class="token function">getCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="ElementPath获取一些信息"><a href="#ElementPath获取一些信息" class="headerlink" title="ElementPath获取一些信息"></a>ElementPath获取一些信息</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取当前解析的&lt;节点>是第几级，根节点为第1级</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getLevel</span><span class="token punctuation">(</span>ElementPath path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取当前节点的节点名</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getElementName</span><span class="token punctuation">(</span>Element element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> element<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 获取当前节点属性</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getAttribute</span><span class="token punctuation">(</span>Element element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> element<span class="token punctuation">.</span><span class="token function">attribute</span><span class="token punctuation">(</span><span class="token string">"attribute-name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 获取当前节点文本</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getText</span><span class="token punctuation">(</span>Element element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> element<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="解析示例"><a href="#解析示例" class="headerlink" title="解析示例"></a>解析示例</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 要解析的xml格式 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>菜鸟编程<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>describe</span><span class="token punctuation">></span></span>针对菜鸟编程学习<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>describe</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>老鸟编程<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>describe</span><span class="token punctuation">></span></span>针对老鸟编程学习<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>describe</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// book映射对象</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String describe<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 解析book.xml伪代码</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookHandler</span> <span class="token keyword">implements</span> <span class="token class-name">ElementHandler</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 创建一个Book对象</span>
    <span class="token keyword">private</span> Book book<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// xml中每一个&lt;节点>开始执行的方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span>ElementPath elementPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 获取节点级数，&lt;root>为1,&lt;book>为2,&lt;name>&lt;describe>为3</span>
        level <span class="token operator">=</span> <span class="token function">getLevel</span><span class="token punctuation">(</span>elementPath<span class="token punctuation">)</span>
        <span class="token keyword">switch</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">// 不做处理</span>
        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">// 每次读取到&lt;book id="xx">这一行会执行</span>
                <span class="token comment" spellcheck="true">// 创建book对象，将读取的id属性写入</span>
                book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                book<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">// 每次读取到&lt;book>的子节点会执行</span>
                <span class="token comment" spellcheck="true">// 无需处理</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// xml中每一个&lt;节点>结束执行的方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEnd</span><span class="token punctuation">(</span>ElementPath elementPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 获取节点级数，&lt;root>为1,&lt;book>为2,&lt;name>&lt;describe>为3</span>
        level <span class="token operator">=</span> <span class="token function">getLevel</span><span class="token punctuation">(</span>elementPath<span class="token punctuation">)</span>
        <span class="token keyword">switch</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">// 不做处理</span>
        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">// 每次读取到&lt;/book>这一行会执行</span>
                <span class="token comment" spellcheck="true">// 说明这一本书所有信息已经读完，需要将book对象保存，或写入数据库，然后清空</span>
                <span class="token function">saveDB</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存数据方法</span>
                book <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">// 每次读完一个&lt;book>的子节点会执行</span>
                <span class="token comment" spellcheck="true">// 可以读取book的name、describe属性，并写入到book对象中</span>
                <span class="token comment" spellcheck="true">// 注意 一次只能获取到一个属性，要做一些处理</span>
                String name <span class="token operator">=</span> <span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                String describe <span class="token operator">=</span> <span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"describe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                book<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                book<span class="token punctuation">.</span><span class="token function">setDescribe</span><span class="token punctuation">(</span>describe<span class="token punctuation">)</span><span class="token punctuation">;</span>
        elementPath<span class="token punctuation">.</span><span class="token function">getCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 读取xml，使用BookHandler解析</span>
BookHandler bookHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
SAXReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
reader<span class="token punctuation">.</span><span class="token function">setDefaultHandler</span><span class="token punctuation">(</span>bookHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>xmlPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>dom4j</tag>
        <tag>xml</tag>
      </tags>
  </entry>
  <entry>
    <title>dom4j对象定义</title>
    <url>/dom4j-dui-xiang-ding-yi/</url>
    <content><![CDATA[<h3 id="dom4j"><a href="#dom4j" class="headerlink" title="dom4j"></a>dom4j</h3><blockquote>
<p><code>DOM4J</code>是一个开源<code>XML</code>解析包。<code>DOM4J</code>应用于<code>Java</code>平台，采用了<code>Java</code>集合框架并完全支持<code>DOM</code>、<code>SAX</code>、<code>xpath</code>、<code>JAXP</code>。</p>
</blockquote>
<h3 id="dom4j接口说明"><a href="#dom4j接口说明" class="headerlink" title="dom4j接口说明"></a>dom4j接口说明</h3><table>
<thead>
<tr>
<th>接口</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>Attribute</code></td>
<td>属性</td>
</tr>
<tr>
<td><code>Branch</code></td>
<td>分支,指能够包含子节点的节点。如<code>Element</code>,<code>(Docuemnts</code>)</td>
</tr>
<tr>
<td><code>CDATA</code></td>
<td><code>XML CDATA</code>区域</td>
</tr>
<tr>
<td><code>CharacterData</code></td>
<td>是一个标识接口，标识基于字符的节点。如<code>CDATA</code>，<code>Comment</code>,<code> Text</code></td>
</tr>
<tr>
<td><code>Comment</code></td>
<td>注释</td>
</tr>
<tr>
<td><code>Document</code></td>
<td>文档</td>
</tr>
<tr>
<td><code>DocumentType</code></td>
<td><code>XML DOCTYPE</code> 声明</td>
</tr>
<tr>
<td><code>Element</code></td>
<td>定义<code>XML</code>元素</td>
</tr>
<tr>
<td><code>ElementHandler</code></td>
<td><code>Element</code>对象的处理器</td>
</tr>
<tr>
<td><code>ElementPath</code></td>
<td>被<code>ElementHandler</code>使用，用于取得当前正在处理的路径层次信息</td>
</tr>
<tr>
<td><code>Entity</code></td>
<td>定义<code>XML entity</code></td>
</tr>
<tr>
<td><code>Node</code></td>
<td>节点</td>
</tr>
<tr>
<td><code>NodeFilter</code></td>
<td>节点过滤器</td>
</tr>
<tr>
<td><code>ProcessingInstruction</code></td>
<td>定义<code>XML</code>处理指令</td>
</tr>
<tr>
<td><code>Text</code></td>
<td>文本节点</td>
</tr>
<tr>
<td><code>Visitor</code></td>
<td>用于实现<code>Visitor</code>模式</td>
</tr>
<tr>
<td><code>XPath</code></td>
<td><code>XPath</code>表达式</td>
</tr>
</tbody></table>
<h3 id="dom4j依赖"><a href="#dom4j依赖" class="headerlink" title="dom4j依赖"></a>dom4j依赖</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/dom4j/dom4j --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>dom4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dom4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!--dom4j使用xpath依赖的包--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>jaxen<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jaxen<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h3><pre class="line-numbers language-java"><code class="language-java">SAXReader saxReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Document document <span class="token operator">=</span> saxReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//读取XML文件,获得document对象</span>
<span class="token comment" spellcheck="true">// Document document = saxReader.read(url);</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>dom4j</tag>
        <tag>xml</tag>
      </tags>
  </entry>
  <entry>
    <title>dom4j获取xml所有节点</title>
    <url>/dom4j-huo-qu-xml-suo-you-jie-dian/</url>
    <content><![CDATA[<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dom4jTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> DocumentException <span class="token punctuation">{</span>
        String svgURI <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/test.svg"</span><span class="token punctuation">;</span>
        SAXReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>svgURI<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Document document <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Element root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getRootElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>Element<span class="token operator">></span> childElements <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span>Element child <span class="token operator">:</span> childElements<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"g"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">getQName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                List<span class="token operator">&lt;</span>Element<span class="token operator">></span> gElements <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span>Element gEle <span class="token operator">:</span> gElements<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"g"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>gEle<span class="token punctuation">.</span><span class="token function">getQName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        List<span class="token operator">&lt;</span>Element<span class="token operator">></span> elements <span class="token operator">=</span> gEle<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">for</span> <span class="token punctuation">(</span>Element e <span class="token operator">:</span> elements<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"dfg:desc"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getQName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>dom4j</tag>
        <tag>xml</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticsearch-java客户端</title>
    <url>/elasticsearch-java-ke-hu-duan/</url>
    <content><![CDATA[<h3 id="连接客户端"><a href="#连接客户端" class="headerlink" title="连接客户端"></a>连接客户端</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 方法1</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> RestHighLevelClient <span class="token function">restHighLevelClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ClientConfiguration clientConfiguration <span class="token operator">=</span> ClientConfiguration<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">connectedTo</span><span class="token punctuation">(</span><span class="token string">"192.168.3.17:9200"</span><span class="token punctuation">,</span> <span class="token string">"192.168.3.19:9200"</span><span class="token punctuation">,</span> <span class="token string">"192.168.3.20:9200"</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">withBasicAuth</span><span class="token punctuation">(</span><span class="token string">"elastic"</span><span class="token punctuation">,</span> <span class="token string">"elastic"</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> RestClients<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>clientConfiguration<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 方法2</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> RestHighLevelClient <span class="token function">restHighLevelClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    RestHighLevelClient restHighLevelClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span>
            RestClient<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>
                    <span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">"192.168.3.17"</span><span class="token punctuation">,</span> <span class="token number">9200</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">"192.168.3.19"</span><span class="token punctuation">,</span> <span class="token number">9200</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">"192.168.3.20"</span><span class="token punctuation">,</span> <span class="token number">9200</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> restHighLevelClient<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 方法3</span>
<span class="token comment" spellcheck="true">// 无需密码的连接</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> RestHighLevelClient <span class="token function">restHighLevelClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span>RestClient<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9200</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="发送文档"><a href="#发送文档" class="headerlink" title="发送文档"></a>发送文档</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 单条发送</span>
IndexRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span>indexName<span class="token punctuation">)</span><span class="token punctuation">;</span>
User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>RandomStringUtils<span class="token punctuation">.</span><span class="token function">randomAlphanumeric</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">,</span> XContentType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    restHighLevelClient<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 批量发送</span>
BulkRequest requests <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BulkRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>RandomStringUtils<span class="token punctuation">.</span><span class="token function">randomAlphanumeric</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    IndexRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span>indexName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">,</span> XContentType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>
    requests<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    restHighLevelClient<span class="token punctuation">.</span><span class="token function">bulk</span><span class="token punctuation">(</span>requests<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
  </entry>
  <entry>
    <title>elasticsearch分片过滤</title>
    <url>/elasticsearch-fen-pian-guo-lu/</url>
    <content><![CDATA[<h3 id="分片过滤"><a href="#分片过滤" class="headerlink" title="分片过滤"></a>分片过滤</h3><ul>
<li>第一步</li>
</ul>
<p>在节点<code>elasticsearch.yml</code>配置中可以为节点增加自定义属性，如</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># small,big,...</span>
<span class="token key atrule">node.attr.size</span><span class="token punctuation">:</span> medium
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>或者在启动时增加自定义属性</p>
<pre class="line-numbers language-bash"><code class="language-bash">./bin/elasticsearch -Enode.attr.size<span class="token operator">=</span>medium
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>节点自带属性</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>_name</code></td>
<td>Match nodes by node name</td>
</tr>
<tr>
<td><code>_host_ip</code></td>
<td>Match nodes by host IP address (IP associated with hostname)</td>
</tr>
<tr>
<td><code>_publish_ip</code></td>
<td>Match nodes by publish IP address</td>
</tr>
<tr>
<td><code>_ip</code></td>
<td>Match either _host_ip or _publish_ip</td>
</tr>
<tr>
<td><code>_host</code></td>
<td>Match nodes by hostname</td>
</tr>
<tr>
<td><code>_id</code></td>
<td>Match nodes by node id</td>
</tr>
<tr>
<td><code>_tier</code></td>
<td>Match nodes by the node’s data tier role.</td>
</tr>
</tbody></table>
<ul>
<li>第二步</li>
</ul>
<p>创建或修改索引的分片过滤条件,支持<code>require</code>,<code>exclude</code>,<code>include</code></p>
<pre class="line-numbers language-yaml"><code class="language-yaml">PUT test/_settings
<span class="token comment" spellcheck="true"># 例1</span>
<span class="token punctuation">{</span>
  <span class="token key atrule">"index.routing.allocation.include.size"</span><span class="token punctuation">:</span> <span class="token string">"big,medium"</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true"># 例2</span>
<span class="token punctuation">{</span>
  <span class="token key atrule">"index.routing.allocation.require.size"</span><span class="token punctuation">:</span> <span class="token string">"big"</span><span class="token punctuation">,</span>
  <span class="token key atrule">"index.routing.allocation.require.rack"</span><span class="token punctuation">:</span> <span class="token string">"rack1"</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true"># 例3</span>
<span class="token punctuation">{</span>
  <span class="token key atrule">"index.routing.allocation.include._ip"</span><span class="token punctuation">:</span> <span class="token string">"192.168.2.*"</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/shard-allocation-filtering.html">官方文档分片过滤</a></li>
</ul>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
  </entry>
  <entry>
    <title>elasticsearch数据结构</title>
    <url>/elasticsearch-shu-ju-jie-gou/</url>
    <content><![CDATA[<h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><p>ES节点分master和data节点.为避免脑裂,应设置<code>discovery.zen.minimum_master_nodes</code>参数,值为<code>集群中master节点数量</code>/<code>2</code> + <code>1</code>,默认<code>1</code>.</p>
<h3 id="index"><a href="#index" class="headerlink" title="index"></a>index</h3><p>合理设置索引分片数量,单个分片的存储<code>doc</code>数为<code>2,147,483,519</code>，建议小于<code>30G</code>,索引分片的数量依据节点数量,单个节点上单个索引的分片数量小于<code>3</code>,小规模集群分片数量小于等于数据节点数量最佳.</p>
<p>ES每个查询在每个分片的单个线程中执行再聚合,如果指定<code>routing</code>会提升查询效率.</p>
<h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><ul>
<li><code>5.x</code>版本支持多个<code>type</code></li>
<li><code>6.x</code>版本仅支持一个<code>type</code>,可以自定义</li>
<li><code>7.x</code>版本所有<code>type</code>默认为<code>_doc</code>,也可以自定义但不推荐</li>
</ul>
<h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><ul>
<li>自动生成的是20位<code>GUID</code></li>
<li>支持手动生成</li>
</ul>
<h3 id="Mapping字段"><a href="#Mapping字段" class="headerlink" title="Mapping字段"></a>Mapping字段</h3><p>字段尽量少用<code>nested</code>或<code>parent/child</code>,非常影响查询效率.尽量采用宽表设计.如果一定要使用<code>nested fields</code>，保证<code>nested fields</code>字段不能过多，目前ES默认限制是50。<br><code>index.mapping.nested_fields.limit: 50</code></p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
  </entry>
  <entry>
    <title>elasticsearch索引优化参考</title>
    <url>/elasticsearch-suo-yin-you-hua-can-kao/</url>
    <content><![CDATA[<h3 id="节点离开延迟分配"><a href="#节点离开延迟分配" class="headerlink" title="节点离开延迟分配"></a>节点离开延迟分配</h3><p><code>index.unassigned.node_left.delayed_timeout</code>默认为<code>1m</code>. 当一个节点出于某种原因离开集群时，无论是有意的还是其他的，主节点的反应是：</p>
<ul>
<li>将副本分片提升为主分片以替换节点上的任何主分片。</li>
<li>分配副本分片以替换丢失的副本（假设有足够的节点）。</li>
<li>在剩余节点上均匀地重新平衡分片。</li>
</ul>
<p>如果一个节点被删除永远不会返回，希望 Elasticsearch 立即分配丢失的分片，只需将超时更新为<code>0</code></p>
<pre class="line-numbers language-yaml"><code class="language-yaml">PUT _all/_settings
<span class="token punctuation">{</span>
  <span class="token key atrule">"settings"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token key atrule">"index.unassigned.node_left.delayed_timeout"</span><span class="token punctuation">:</span> <span class="token string">"0"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="索引恢复优先级"><a href="#索引恢复优先级" class="headerlink" title="索引恢复优先级"></a>索引恢复优先级</h3><p>尽可能按优先级顺序恢复未分配的分片。指数按优先级排序如下：</p>
<ul>
<li>可选<code>index.priority</code>设置（先高后低）</li>
<li>索引创建日期（先高后低）</li>
<li>索引名称（先高后低）</li>
</ul>
<pre class="line-numbers language-yaml"><code class="language-yaml">PUT index_4/_settings
<span class="token punctuation">{</span>
  <span class="token key atrule">"index.priority"</span><span class="token punctuation">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="节点分片总数限制"><a href="#节点分片总数限制" class="headerlink" title="节点分片总数限制"></a>节点分片总数限制</h3><ul>
<li>为单个索引设置限制<code>index.routing.allocation.total_shards_per_node</code>默认为无限制;</li>
<li>为集群统一设置<code>cluster.routing.allocation.total_shards_per_node</code>默认为<code>-1</code>无限制.</li>
</ul>
<h3 id="数据冷热节点角色"><a href="#数据冷热节点角色" class="headerlink" title="数据冷热节点角色"></a>数据冷热节点角色</h3><ul>
<li>data_content</li>
<li>data_hot</li>
<li>data_warm</li>
<li>data_cold</li>
<li>data_frozen</li>
</ul>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># es 7.13之前用下面的语法,7.13之后过时</span>
<span class="token key atrule">index.routing.allocation.include._tier</span><span class="token punctuation">:</span> data_warm
<span class="token key atrule">index.routing.allocation.require._tier</span><span class="token punctuation">:</span> data_warm
<span class="token key atrule">index.routing.allocation.exclude._tier</span><span class="token punctuation">:</span> data_warm
<span class="token comment" spellcheck="true"># es 7.13版本之后使用</span>
<span class="token key atrule">index.routing.allocation.include._tier_preference</span><span class="token punctuation">:</span> data_warm<span class="token punctuation">,</span>data_hot
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="索引块"><a href="#索引块" class="headerlink" title="索引块"></a>索引块</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 设置索引和索引元数据只读</span>
<span class="token key atrule">index.blocks.read_only</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token comment" spellcheck="true"># 设置只读,不能删除索引内doc,但是允许删除索引</span>
<span class="token key atrule">index.blocks.read_only_allow_delete</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token comment" spellcheck="true"># </span>
<span class="token key atrule">index.blocks.read</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">index.blocks.write</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">index.blocks.metadata</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>操作</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># &lt;block>可以是metadata,read,read_only,write</span>
PUT /my-index-000001/_block/<span class="token operator">&lt;</span>block<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="慢日志"><a href="#慢日志" class="headerlink" title="慢日志"></a>慢日志</h3><ul>
<li>系统级别</li>
</ul>
<pre class="line-numbers language-json"><code class="language-json">// 可以动态设置<span class="token punctuation">,</span>threshold默认disabled<span class="token punctuation">,</span>为-<span class="token number">1</span>
PUT /my-index<span class="token number">-000001</span>/_settings
<span class="token punctuation">{</span>
  <span class="token property">"index.search.slowlog.threshold.query.warn"</span><span class="token operator">:</span> <span class="token string">"10s"</span><span class="token punctuation">,</span>
  <span class="token property">"index.search.slowlog.threshold.query.info"</span><span class="token operator">:</span> <span class="token string">"5s"</span><span class="token punctuation">,</span>
  <span class="token property">"index.search.slowlog.threshold.query.debug"</span><span class="token operator">:</span> <span class="token string">"2s"</span><span class="token punctuation">,</span>
  <span class="token property">"index.search.slowlog.threshold.query.trace"</span><span class="token operator">:</span> <span class="token string">"500ms"</span><span class="token punctuation">,</span>
  <span class="token property">"index.search.slowlog.threshold.fetch.warn"</span><span class="token operator">:</span> <span class="token string">"1s"</span><span class="token punctuation">,</span>
  <span class="token property">"index.search.slowlog.threshold.fetch.info"</span><span class="token operator">:</span> <span class="token string">"800ms"</span><span class="token punctuation">,</span>
  <span class="token property">"index.search.slowlog.threshold.fetch.debug"</span><span class="token operator">:</span> <span class="token string">"500ms"</span><span class="token punctuation">,</span>
  <span class="token property">"index.search.slowlog.threshold.fetch.trace"</span><span class="token operator">:</span> <span class="token string">"200ms"</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>索引级别,文件名以<code>_index_indexing_slowlog.log</code>结尾</li>
</ul>
<pre class="line-numbers language-json"><code class="language-json">PUT /my-index<span class="token number">-000001</span>/_settings
<span class="token punctuation">{</span>
  <span class="token property">"index.indexing.slowlog.threshold.index.warn"</span><span class="token operator">:</span> <span class="token string">"10s"</span><span class="token punctuation">,</span>
  <span class="token property">"index.indexing.slowlog.threshold.index.info"</span><span class="token operator">:</span> <span class="token string">"5s"</span><span class="token punctuation">,</span>
  <span class="token property">"index.indexing.slowlog.threshold.index.debug"</span><span class="token operator">:</span> <span class="token string">"2s"</span><span class="token punctuation">,</span>
  <span class="token property">"index.indexing.slowlog.threshold.index.trace"</span><span class="token operator">:</span> <span class="token string">"500ms"</span><span class="token punctuation">,</span>
  <span class="token property">"index.indexing.slowlog.source"</span><span class="token operator">:</span> <span class="token string">"1000"</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><p><code>store</code>模块允许控制索引数据在磁盘上的存储和访问方式，建议采用默认值.</p>
<ul>
<li>系统级别设置,<code>elasticsearch.yml</code></li>
</ul>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">index.store.type</span><span class="token punctuation">:</span> hybridfs
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>索引级别</li>
</ul>
<pre class="line-numbers language-json"><code class="language-json">PUT /my-index<span class="token number">-000001</span>
<span class="token punctuation">{</span>
  <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"index.store.type"</span><span class="token operator">:</span> <span class="token string">"hybridfs"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>可选的值：<code>fs</code>,<code>simplefs</code>,<code>niofs</code>,<code>mmapfs</code>,<code>hybridfs</code>.</p>
</blockquote>
<h3 id="事务日志"><a href="#事务日志" class="headerlink" title="事务日志"></a>事务日志</h3><p>ES提交到Lucene的索引、删除、分片拷贝、写等操作在未确认之前都会写入<code>translog</code>.</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 默认request意味所有操作(index, delete, update, bulk)只有同步到所有分片和副本后才会返回success</span>
<span class="token key atrule">index.translog.durability</span><span class="token punctuation">:</span> request
<span class="token comment" spellcheck="true"># 可以设置异步提交到磁盘</span>
<span class="token key atrule">index.translog.durability</span><span class="token punctuation">:</span> async
<span class="token comment" spellcheck="true"># 异步同步到磁盘的时间,最少100ms</span>
<span class="token key atrule">index.translog.sync_interval</span><span class="token punctuation">:</span> 5s
<span class="token comment" spellcheck="true"># 达到这个大小立即刷新磁盘</span>
<span class="token key atrule">index.translog.flush_threshold_size</span><span class="token punctuation">:</span> 512mb
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="历史保留-软删除"><a href="#历史保留-软删除" class="headerlink" title="历史保留-软删除"></a>历史保留-软删除</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Elasticsearch 6.5.0 之后可用,默认为true</span>
<span class="token key atrule">index.soft_deletes.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token comment" spellcheck="true"># 保留时间,默认12h</span>
<span class="token key atrule">index.soft_deletes.retention_lease.period</span><span class="token punctuation">:</span> 12h
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="索引排序"><a href="#索引排序" class="headerlink" title="索引排序"></a>索引排序</h3><p>默认不排序.</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 支持boolean, numeric, date and keyword</span>
<span class="token key atrule">index.sort.field</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true"># 支持asc,desc</span>
<span class="token key atrule">index.sort.order</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"asc"</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true"># 支持min,max</span>
<span class="token key atrule">index.sort.mode</span><span class="token punctuation">:</span> min
<span class="token comment" spellcheck="true"># 支持_last,_first</span>
<span class="token key atrule">index.sort.missing</span><span class="token punctuation">:</span> _last
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>示例</p>
<pre class="line-numbers language-json"><code class="language-json">PUT my-index<span class="token number">-000001</span>
<span class="token punctuation">{</span>
  <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"index"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"sort.field"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"date"</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> 
      <span class="token property">"sort.order"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"asc"</span><span class="token punctuation">,</span> <span class="token string">"desc"</span> <span class="token punctuation">]</span>       
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"username"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>
        <span class="token property">"doc_values"</span><span class="token operator">:</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">"date"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"date"</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="indexing-pressure"><a href="#indexing-pressure" class="headerlink" title="indexing pressure"></a>indexing pressure</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Defaults to 10% of the heap.</span>
<span class="token key atrule">indexing_pressure.memory.limit</span><span class="token punctuation">:</span> 10%
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
  </entry>
  <entry>
    <title>flinkSQL-client初体验</title>
    <url>/flinksql-client-chu-ti-yan/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>本章创建一个模拟数据源将模拟数据源源不断写到<code>kafka</code>中，然后使用<code>Flink SQL client</code>查询<code>kafka</code>中的数据。</p>
<p>模拟数据由java对象序列化而成的json格式字符串，包含book的id、type、price和时间。</p>
<h3 id="BookPojo-java"><a href="#BookPojo-java" class="headerlink" title="BookPojo.java"></a>BookPojo.java</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>deri<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>util<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>JSONField<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Timestamp<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @ClassName: BookPojo
 * @Description: TODO
 * @Author: wuzhiyong
 * @Time: 2020/3/20 9:48
 * @Version: v1.0
 **/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookPojo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String type<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> price<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//Currently, JSON format only allowed the timestamp data is in RFC-3339, i.e. "2019-07-09 02:02:00.040Z".</span>
    <span class="token comment" spellcheck="true">//注意引入的是java.util.Date;而不是java.sql.Date;</span>
    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>format <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd'T'HH:mm:ss'Z'"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> Date ts<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">BookPojo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> type<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setType</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> price<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">int</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> Date <span class="token function">getTs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ts<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTs</span><span class="token punctuation">(</span>Date ts<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>ts <span class="token operator">=</span> ts<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="模拟书籍Books-java"><a href="#模拟书籍Books-java" class="headerlink" title="模拟书籍Books.java"></a>模拟书籍Books.java</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>deri<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>util<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @ClassName: Books
 * @Description: TODO
 * @Author: wuzhiyong
 * @Time: 2020/3/20 10:52
 * @Version: v1.0
 **/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Books</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> BookPojo <span class="token function">getBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>BookPojo<span class="token operator">></span> bookPojos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">{</span>
            BookPojo book1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookPojo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"cs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            bookPojos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">{</span>
            BookPojo book1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookPojo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"math"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            bookPojos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">{</span>
            BookPojo book1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookPojo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"ph"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            bookPojos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">{</span>
            BookPojo book1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookPojo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"cs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            bookPojos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">{</span>
            BookPojo book1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookPojo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"math"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            bookPojos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token punctuation">{</span>
            BookPojo book1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookPojo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"ph"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            bookPojos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> bookPojos<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="创建flink-source"><a href="#创建flink-source" class="headerlink" title="创建flink source"></a>创建flink source</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>deri<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>util<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>source<span class="token punctuation">.</span>SourceFunction<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Timestamp<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @ClassName: MyNoParalleSource
 * @Description: TODO
 * @Author: wuzhiyong
 * @Time: 2020/3/4 10:15
 * @Version: v1.0
 **/</span>
<span class="token comment" spellcheck="true">//使用并行度为1的source</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPojoSource</span> <span class="token keyword">implements</span> <span class="token class-name">SourceFunction</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//1</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isRunning <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>SourceContext<span class="token operator">&lt;</span>String<span class="token operator">></span> ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>isRunning<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            BookPojo book <span class="token operator">=</span> Books<span class="token punctuation">.</span><span class="token function">getBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book<span class="token punctuation">.</span><span class="token function">setTs</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ctx<span class="token punctuation">.</span><span class="token function">collectWithTimestamp</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span><span class="token function">getTs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        isRunning <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="创建flink任务，此任务只是将模拟数据写到kafka中"><a href="#创建flink任务，此任务只是将模拟数据写到kafka中" class="headerlink" title="创建flink任务，此任务只是将模拟数据写到kafka中"></a>创建flink任务，此任务只是将模拟数据写到kafka中</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>deri<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>deri<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>util<span class="token punctuation">.</span>MyPojoSource<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>SimpleStringSchema<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStreamSource<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>connectors<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>FlinkKafkaProducer<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @ClassName: KafkaProducer
 * @Description: TODO
 * @Author: wuzhiyong
 * @Time: 2020/3/4 10:16
 * @Version: v1.0
 **/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaPojoProducer</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>

        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        DataStreamSource<span class="token operator">&lt;</span>String<span class="token operator">></span> text <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">addSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyPojoSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*设置并行度*/</span><span class="token punctuation">;</span>

        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"bootstrap.servers"</span><span class="token punctuation">,</span> <span class="token string">"192.168.41.128:9092"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//new FlinkKafkaProducer("topn",new KeyedSerializationSchemaWrapper(new SimpleStringSchema()),properties,FlinkKafkaProducer.Semantic.EXACTLY_ONCE);</span>
        FlinkKafkaProducer<span class="token operator">&lt;</span>String<span class="token operator">></span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlinkKafkaProducer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"pojo4"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SimpleStringSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//event-timestamp事件的发生时间</span>
        producer<span class="token punctuation">.</span><span class="token function">setWriteTimestampToKafka</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        text<span class="token punctuation">.</span><span class="token function">addSink</span><span class="token punctuation">(</span>producer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"POJO Kafka Source"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="配置sql-client-defaults-yaml"><a href="#配置sql-client-defaults-yaml" class="headerlink" title="配置sql-client-defaults.yaml"></a>配置sql-client-defaults.yaml</h3><p>配置文件位于<code>flink根目录/conf</code>下</p>
<p>配置table</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">tables</span><span class="token punctuation">:</span> 
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> book
    <span class="token key atrule">type</span><span class="token punctuation">:</span> source<span class="token punctuation">-</span>table
    <span class="token key atrule">update-mode</span><span class="token punctuation">:</span> append
    <span class="token key atrule">connector</span><span class="token punctuation">:</span> 
      <span class="token key atrule">property-version</span><span class="token punctuation">:</span> <span class="token number">1</span>
      <span class="token key atrule">type</span><span class="token punctuation">:</span> kafka
      <span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"universal"</span>
      <span class="token key atrule">topic</span><span class="token punctuation">:</span> pojo4
      <span class="token key atrule">startup-mode</span><span class="token punctuation">:</span> earliest<span class="token punctuation">-</span>offset
      <span class="token key atrule">properties</span><span class="token punctuation">:</span>
        <span class="token key atrule">zookeeper.connect</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">2181</span>
        <span class="token key atrule">bootstrap.servers</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">9092</span>
        <span class="token key atrule">group.id</span><span class="token punctuation">:</span> testGroup
    <span class="token key atrule">format</span><span class="token punctuation">:</span> 
      <span class="token key atrule">property-version</span><span class="token punctuation">:</span> <span class="token number">1</span>
      <span class="token key atrule">type</span><span class="token punctuation">:</span> json
      <span class="token comment" spellcheck="true"># derive-schema: true</span>
      <span class="token key atrule">schema</span><span class="token punctuation">:</span> <span class="token string">"ROW&lt;id INT, type STRING, price INT, ts TIMESTAMP>"</span>
    <span class="token key atrule">schema</span><span class="token punctuation">:</span> 
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> id
        <span class="token key atrule">data-type</span><span class="token punctuation">:</span> INT
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> type
        <span class="token key atrule">data-type</span><span class="token punctuation">:</span> STRING
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> price
        <span class="token key atrule">data-type</span><span class="token punctuation">:</span> INT
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> tss
        <span class="token key atrule">data-type</span><span class="token punctuation">:</span> TIMESTAMP
        <span class="token key atrule">rowtime</span><span class="token punctuation">:</span>
          <span class="token key atrule">timestamps</span><span class="token punctuation">:</span>
            <span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"from-field"</span>
            <span class="token key atrule">from</span><span class="token punctuation">:</span> <span class="token string">"ts"</span>
          <span class="token key atrule">watermarks</span><span class="token punctuation">:</span>
            <span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"periodic-bounded"</span>
            <span class="token key atrule">delay</span><span class="token punctuation">:</span> <span class="token string">"60000"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="启动SQL-client"><a href="#启动SQL-client" class="headerlink" title="启动SQL client"></a>启动SQL client</h3><p>进入到flink根目录下，执行</p>
<pre class="line-numbers language-sh"><code class="language-sh">./bin/sql-client.sh embedded
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果没有报错，可以看到一个小松鼠，并进入以下界面</p>
<pre><code>...
Flink SQL&gt; 
</code></pre>
<h3 id="一些测试SQL语句"><a href="#一些测试SQL语句" class="headerlink" title="一些测试SQL语句"></a>一些测试SQL语句</h3><ol>
<li>最简单的查询</li>
</ol>
<pre class="line-numbers language-SQL"><code class="language-SQL">SELECT * FROM book;
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="2">
<li>查询价格大于50的</li>
</ol>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> book <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>  id<span class="token punctuation">,</span>price<span class="token punctuation">,</span><span class="token keyword">type</span><span class="token punctuation">,</span>tss  <span class="token keyword">having</span> price <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="3">
<li>每五分钟book的总销售额</li>
</ol>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> 
id<span class="token punctuation">,</span>
<span class="token keyword">type</span><span class="token punctuation">,</span>
TUMBLE_END<span class="token punctuation">(</span>tss<span class="token punctuation">,</span> INTERVAL <span class="token string">'5'</span> MINUTE<span class="token punctuation">)</span> <span class="token keyword">AS</span> window_end<span class="token punctuation">,</span>
<span class="token function">SUM</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">AS</span> sumprice
<span class="token keyword">FROM</span> book
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>  
id<span class="token punctuation">,</span>
<span class="token keyword">type</span><span class="token punctuation">,</span>
TUMBLE<span class="token punctuation">(</span>tss<span class="token punctuation">,</span> INTERVAL <span class="token string">'5'</span> MINUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="4">
<li>创建一个新的view，用于存放SELECT结果</li>
</ol>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> book_view <span class="token keyword">AS</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> book <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>  id<span class="token punctuation">,</span>price<span class="token punctuation">,</span><span class="token keyword">type</span><span class="token punctuation">,</span>tss  <span class="token keyword">having</span> price <span class="token operator">></span> <span class="token number">60</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ol start="5">
<li>根据id查询卖出的总数量</li>
</ol>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span><span class="token keyword">type</span><span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">AS</span> cnt <span class="token keyword">FROM</span> book <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>  id<span class="token punctuation">,</span><span class="token keyword">type</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="6">
<li>根据type查询卖出的总数量</li>
</ol>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">type</span><span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> cnt <span class="token keyword">FROM</span> book <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">type</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="7">
<li>查询过去5分钟不同id的书卖出的总额，每1分钟刷新一次</li>
</ol>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> 
id<span class="token punctuation">,</span>
<span class="token keyword">type</span><span class="token punctuation">,</span>
HOP_START <span class="token punctuation">(</span>tss<span class="token punctuation">,</span> INTERVAL <span class="token string">'60'</span> SECOND<span class="token punctuation">,</span> INTERVAL <span class="token string">'5'</span> MINUTE<span class="token punctuation">)</span> <span class="token keyword">AS</span> window_end<span class="token punctuation">,</span>
<span class="token function">SUM</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">AS</span> sumprice
<span class="token keyword">FROM</span> book
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>  
id<span class="token punctuation">,</span>
<span class="token keyword">type</span><span class="token punctuation">,</span>
HOP <span class="token punctuation">(</span>tss<span class="token punctuation">,</span> INTERVAL <span class="token string">'60'</span> SECOND<span class="token punctuation">,</span> INTERVAL <span class="token string">'5'</span> MINUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="8">
<li>创建一个模拟列，存放系统处理的时间</li>
</ol>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> id<span class="token punctuation">,</span>price<span class="token punctuation">,</span>tss<span class="token punctuation">,</span> PROCTIME<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> ts <span class="token keyword">from</span> book<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink</tag>
        <tag>sql</tag>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>flinkSQL时间戳转换成日期格式</title>
    <url>/flinksql-shi-jian-chuo-zhuan-huan-cheng-ri-qi-ge-shi/</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token property">"price"</span><span class="token operator">:</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token property">"ts"</span><span class="token operator">:</span><span class="token number">1585125854697</span><span class="token punctuation">,</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"math"</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token property">"price"</span><span class="token operator">:</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token property">"ts"</span><span class="token operator">:</span><span class="token number">1585125861687</span><span class="token punctuation">,</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"ph"</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"price"</span><span class="token operator">:</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token property">"ts"</span><span class="token operator">:</span><span class="token number">1585125862380</span><span class="token punctuation">,</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"cs"</span><span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>模拟数据如上所示，时间字段是13位时间戳格式，在flink sql中直接转成TIMESTAMP格式会有问题。</p>
<p>参考<a href="https://helpcdn.aliyun.com/knowledge_list/62717.html?spm=a2c4g.11186623.6.662.3f6ba3c50vKfDl">阿里云日期函数</a><code>TO_TIMESTAMP</code>，文档中示例支持三种入参，</p>
<pre class="line-numbers language-SQL"><code class="language-SQL">TIMESTAMP TO_TIMESTAMP(BIGINT time)
TIMESTAMP TO_TIMESTAMP(VARCHAR date)
TIMESTAMP TO_TIMESTAMP(VARCHAR date, VARCHAR format)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>实际使用<code>flink 1.10</code>版本测试，<code>TO_TIMESTAMP</code>不能直接将<code>BIGINT</code>转成<code>TIMESTAMP</code>.</p>
<pre class="line-numbers language-s"><code class="language-s">[ERROR] Could not execute SQL statement. Reason:
org.apache.calcite.sql.validate.SqlValidatorException: Cannot apply 'TO_TIMESTAMP' to arguments of type 'TO_TIMESTAMP(<BIGINT>)'. Supported form(s): 'TO_TIMESTAMP(<CHARACTER>)' 'TO_TIMESTAMP(<CHARACTER>, <CHARACTER>)'
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="创建UDF，并用SQL-client测试"><a href="#创建UDF，并用SQL-client测试" class="headerlink" title="创建UDF，并用SQL client测试"></a>创建UDF，并用SQL client测试</h3><p>创建一个<code>UDF</code>,传入一个<code>Long</code>型时间戳，返回<code>Timestamp</code>格式</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeUdf</span> <span class="token keyword">extends</span> <span class="token class-name">ScalarFunction</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> Long timestamp<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">TimeUdf</span><span class="token punctuation">(</span>Long timestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>timestamp <span class="token operator">=</span> timestamp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> Timestamp <span class="token function">eval</span><span class="token punctuation">(</span>Long timestamp<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Timestamp</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>UDF需要的依赖</p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--Table Program Dependencies--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flink-table-api-java-bridge_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.10.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flink-table-planner-blink_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.10.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flink-streaming-scala_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.10.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flink-table-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.10.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用maven打包成jar，并拷贝到flink目录lib中，重启flink。</p>
<pre class="line-numbers language-sh"><code class="language-sh">mvn clean package
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>修改<code>sql-client-defaults.yaml</code>配置</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">...</span>
<span class="token comment" spellcheck="true">#创建表</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> bookpojo
    <span class="token key atrule">type</span><span class="token punctuation">:</span> source<span class="token punctuation">-</span>table
    <span class="token key atrule">connector</span><span class="token punctuation">:</span> 
      <span class="token key atrule">property-version</span><span class="token punctuation">:</span> <span class="token number">1</span>
      <span class="token key atrule">type</span><span class="token punctuation">:</span> kafka
      <span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"universal"</span>
      <span class="token key atrule">topic</span><span class="token punctuation">:</span> pojo
      <span class="token key atrule">startup-mode</span><span class="token punctuation">:</span> earliest<span class="token punctuation">-</span>offset
      <span class="token key atrule">properties</span><span class="token punctuation">:</span>
        <span class="token key atrule">zookeeper.connect</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">2181</span>
        <span class="token key atrule">bootstrap.servers</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">9092</span>
        <span class="token key atrule">group.id</span><span class="token punctuation">:</span> testGroup
    <span class="token key atrule">format</span><span class="token punctuation">:</span> 
      <span class="token key atrule">property-version</span><span class="token punctuation">:</span> <span class="token number">1</span>
      <span class="token key atrule">type</span><span class="token punctuation">:</span> json
      <span class="token comment" spellcheck="true"># derive-schema: true</span>
      <span class="token key atrule">schema</span><span class="token punctuation">:</span> <span class="token string">"ROW&lt;id INT, type STRING, price INT, ts BIGINT>"</span>
    <span class="token key atrule">schema</span><span class="token punctuation">:</span> 
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> id
        <span class="token key atrule">data-type</span><span class="token punctuation">:</span> INT
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> type
        <span class="token key atrule">data-type</span><span class="token punctuation">:</span> STRING
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> price
        <span class="token key atrule">data-type</span><span class="token punctuation">:</span> INT
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ts
        <span class="token key atrule">data-type</span><span class="token punctuation">:</span> BIGINT

<span class="token comment" spellcheck="true"># 创建UDF</span>
<span class="token key atrule">functions</span><span class="token punctuation">:</span> 
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> TimeUdf
    <span class="token key atrule">from</span><span class="token punctuation">:</span> class
    <span class="token key atrule">class</span><span class="token punctuation">:</span> com.deri.udx.TimeUdf
    <span class="token key atrule">constructor</span><span class="token punctuation">:</span> 
      <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> BIGINT
        <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token number">111111111</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>启动<code>SQL client</code></p>
<pre class="line-numbers language-sh"><code class="language-sh">./bin/sql-client.sh embedded
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>SQL查询</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 时间戳</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> bookpojo<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 转成日期</span>
<span class="token keyword">select</span> id<span class="token punctuation">,</span>price<span class="token punctuation">,</span><span class="token keyword">type</span><span class="token punctuation">,</span>TimeUdf<span class="token punctuation">(</span>ts<span class="token punctuation">)</span> <span class="token keyword">AS</span> ts <span class="token keyword">from</span> bookpojo<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="最新研究：LONG型时间戳可以直接转成TIMESTAMP格式"><a href="#最新研究：LONG型时间戳可以直接转成TIMESTAMP格式" class="headerlink" title="最新研究：LONG型时间戳可以直接转成TIMESTAMP格式"></a>最新研究：LONG型时间戳可以直接转成TIMESTAMP格式</h3><p>需要在ROW中定义为LONG，Schema中定义为TIMESTAMP</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>t<span class="token punctuation">`</span> <span class="token punctuation">(</span>
   ctm <span class="token keyword">TIMESTAMP</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token keyword">WITH</span> <span class="token punctuation">(</span>
  <span class="token string">'format.schema'</span> <span class="token operator">=</span> <span class="token string">'ROW&lt;ctm LONG>'</span>
<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>sql-client-defaults.yaml</code>中详细配置，测试成功</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">tables</span><span class="token punctuation">:</span> 
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> bookpojo
    <span class="token key atrule">type</span><span class="token punctuation">:</span> source<span class="token punctuation">-</span>table
    <span class="token key atrule">update-mode</span><span class="token punctuation">:</span> append
    <span class="token key atrule">connector</span><span class="token punctuation">:</span> 
      <span class="token key atrule">property-version</span><span class="token punctuation">:</span> <span class="token number">1</span>
      <span class="token key atrule">type</span><span class="token punctuation">:</span> kafka
      <span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"universal"</span>
      <span class="token key atrule">topic</span><span class="token punctuation">:</span> pojo
      <span class="token key atrule">startup-mode</span><span class="token punctuation">:</span> earliest<span class="token punctuation">-</span>offset
      <span class="token key atrule">properties</span><span class="token punctuation">:</span>
        <span class="token key atrule">zookeeper.connect</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">2181</span>
        <span class="token key atrule">bootstrap.servers</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">9092</span>
        <span class="token key atrule">group.id</span><span class="token punctuation">:</span> testGroup
    <span class="token key atrule">format</span><span class="token punctuation">:</span> 
      <span class="token key atrule">property-version</span><span class="token punctuation">:</span> <span class="token number">1</span>
      <span class="token key atrule">type</span><span class="token punctuation">:</span> json
      <span class="token key atrule">schema</span><span class="token punctuation">:</span> <span class="token string">"ROW&lt;id INT, type STRING, price INT, ts LONG>"</span>
    <span class="token key atrule">schema</span><span class="token punctuation">:</span> 
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> id
        <span class="token key atrule">data-type</span><span class="token punctuation">:</span> INT
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> type
        <span class="token key atrule">data-type</span><span class="token punctuation">:</span> STRING
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> price
        <span class="token key atrule">data-type</span><span class="token punctuation">:</span> INT
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> tss
        <span class="token key atrule">data-type</span><span class="token punctuation">:</span> TIMESTAMP
        <span class="token key atrule">rowtime</span><span class="token punctuation">:</span>
          <span class="token key atrule">timestamps</span><span class="token punctuation">:</span>
            <span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"from-field"</span>
            <span class="token key atrule">from</span><span class="token punctuation">:</span> <span class="token string">"ts"</span>
          <span class="token key atrule">watermarks</span><span class="token punctuation">:</span>
            <span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"periodic-bounded"</span>
            <span class="token key atrule">delay</span><span class="token punctuation">:</span> <span class="token string">"60000"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink</tag>
        <tag>udf</tag>
      </tags>
  </entry>
  <entry>
    <title>flinkSQL用户自定义函数(UDX)</title>
    <url>/flinksql-yong-hu-zi-ding-yi-han-shu/</url>
    <content><![CDATA[<h3 id="UDX分类"><a href="#UDX分类" class="headerlink" title="UDX分类"></a>UDX分类</h3><p><a href="https://help.aliyun.com/document_detail/69463.html">参考</a></p>
<table>
<thead>
<tr>
<th>UDX分类</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>UDF（User Defined Function）</td>
<td>用户自定义标量函数（User Defined Scalar Function）。其输入与输出是一对一的关系，即读入一行数据，写出一条输出值。</td>
</tr>
<tr>
<td>UDAF（User Defined Aggregation Function）</td>
<td>自定义聚合函数，其输入与输出是多对一的关系， 即将多条输入记录聚合成一条输出值。可以与SQL中的GROUP BY语句一起使用。</td>
</tr>
<tr>
<td>UDTF（User Defined Table-valued Function）</td>
<td>自定义表函数，调用一次函数输出多行或多列数据。</td>
</tr>
</tbody></table>
<h3 id="注册用户定义的函数"><a href="#注册用户定义的函数" class="headerlink" title="注册用户定义的函数"></a>注册用户定义的函数</h3><p>在大多数情况下，必须先注册用户定义的函数，然后才能在查询中使用它。没有必要为<code>Scala Table API</code>注册函数。</p>
<p><code>TableEnvironment</code>通过调用<code>registerFunction()</code>方法来注册函数。注册用户定义的函数时，会将其插入到函数目录中<code>TableEnvironment</code>，以便 <code>Table API</code>或<code>SQL</code>解析器可以识别并正确转换它。</p>
<p>请找到如何注册，如何调用每个类型的用户定义函数（详细的例子<code>ScalarFunction</code>，<code>TableFunction</code>和<code>AggregateFunction</code>下面的子会话）。</p>
<h3 id="自定义标量函数UDF"><a href="#自定义标量函数UDF" class="headerlink" title="自定义标量函数UDF"></a>自定义标量函数UDF</h3><h3 id="自定义聚合函数UDAF"><a href="#自定义聚合函数UDAF" class="headerlink" title="自定义聚合函数UDAF"></a>自定义聚合函数UDAF</h3><h3 id="自定义表值函数UDTF"><a href="#自定义表值函数UDTF" class="headerlink" title="自定义表值函数UDTF"></a>自定义表值函数UDTF</h3>]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink</tag>
        <tag>udf</tag>
        <tag>udaf</tag>
        <tag>udtf</tag>
      </tags>
  </entry>
  <entry>
    <title>flink中ProcessFunction</title>
    <url>/flink-zhong-processfunction/</url>
    <content><![CDATA[<h3 id="ProcessFunction简介"><a href="#ProcessFunction简介" class="headerlink" title="ProcessFunction简介"></a>ProcessFunction简介</h3><p><code>ProcessFunction</code>是flink中最底层的API。<br><img data-src="/images/flink26.png" alt="low-api"></p>
<p>Flink的一些算子和函数能够进行一些时间上的操作，但是不能获取算子当前的<code>Processing Time</code>或者是<code>Watermark时间戳</code>，调用起来简单但功能相对受限。如果想获取数据流中Watermark的时间戳，或者在时间上前后穿梭，需要使用<code>ProcessFunction</code>系列函数，它们是Flink体系中<strong>最底层的API</strong>，提供了对数据流<strong>更细粒度的操作权限</strong>。Flink SQL是基于这些函数实现的，一些需要高度个性化的业务场景也需要使用这些函数。</p>
<p>目前，这个系列函数主要包括<code>KeyedProcessFunction</code>、<code>ProcessFunction</code>、<code>CoProcessFunction</code>、<code>KeyedCoProcessFunction</code>、<code>ProcessJoinFunction</code>和<code>ProcessWindowFunction</code>等多种函数，这些函数各有侧重，但核心功能比较相似，主要包括两点：</p>
<ul>
<li>状态：我们可以在这些函数中访问和更新<code>Keyed State</code>。</li>
<li>定时器（Timer）：像定闹钟一样设置定时器，我们可以在时间维度上设计更复杂的业务逻辑。使用前先在Timer中注册一个未来的时间，当这个时间到达，闹钟会“响起”，程序会执行一个回调函数，回调函数中执行一定的业务逻辑。</li>
</ul>
<h3 id="ProcessFunction使用"><a href="#ProcessFunction使用" class="headerlink" title="ProcessFunction使用"></a>ProcessFunction使用</h3><p><code>ProcessFunction</code>有两个重要的接口<code>processElement</code>和<code>onTimer</code></p>
<p>其中processElement函数在源码中的Java签名如下：</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 处理数据流中的一条元素</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">processElement</span><span class="token punctuation">(</span>I value<span class="token punctuation">,</span> Context ctx<span class="token punctuation">,</span> Collector<span class="token operator">&lt;</span>O<span class="token operator">></span> out<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><code>processElement</code>方法处理数据流中的一条元素，并通过<code>Collector&lt;O&gt;</code>输出出来。<code>Context</code>是它的区别于<code>FlatMapFunction</code>等普通函数的特色，<strong>开发者可以通过Context来获取时间戳，访问<code>TimerService</code>，设置Timer</strong>。</p>
<p>另外一个接口是<code>onTimer</code>：</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 时间到达后的回调函数</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTimer</span><span class="token punctuation">(</span><span class="token keyword">long</span> timestamp<span class="token punctuation">,</span> OnTimerContext ctx<span class="token punctuation">,</span> Collector<span class="token operator">&lt;</span>O<span class="token operator">></span> out<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>这是一个回调函数，当到了“闹钟”时间，<code>Flink</code>会调用<code>onTimer</code>，并执行一些业务逻辑。这里也有一个参数<code>OnTimerContext</code>，它实际上是继承了前面的<code>Context</code>，与<code>Context</code>几乎相同。</p>
<p>使用Timer的方法主要逻辑为：</p>
<ol>
<li>在<code>processElement</code>方法中通过<code>Context</code>注册一个未来的时间戳<code>t</code>。这个时间戳的语义可以是<code>Processing Time</code>，也可以是<code>Event Time</code>，根据业务需求来选择。</li>
<li>在<code>onTimer</code>方法中实现一些逻辑，到达<code>t</code>时刻，<code>onTimer</code>方法被自动调用。</li>
</ol>
<p><strong>获取、注册和删除<code>Timer</code></strong></p>
<ul>
<li><p>从<code>Context</code>中，我们可以获取一个<code>TimerService</code>，这是一个访问时间戳和Timer的接口。</p>
</li>
<li><p>我们可以通过<code>Context.timerService.registerProcessingTimeTimer</code>或<code>Context.timerService.registerEventTimeTimer</code>这两个方法来注册<code>Timer</code>，只需要传入一个时间戳即可。</p>
</li>
<li><p>我们可以通过<code>Context.timerService.deleteProcessingTimeTimer</code>和<code>Context.timerService.deleteEventTimeTimer</code>来删除之前注册的Timer。</p>
</li>
<li><p>此外，还可以从中获取当前的时间戳：<code>Context.timerService.currentProcessingTime</code>和<code>Context.timerService.currentWatermark</code>。</p>
</li>
</ul>
<blockquote>
<p>注意，我们只能在KeyedStream上注册Timer。每个Key下可以使用不同的时间戳注册不同的Timer，但是每个Key的每个时间戳只能注册一个Timer。如果想在一个DataStream上应用Timer，可以将所有数据映射到一个伪造的Key上，但这样所有数据会流入一个算子子任务。</p>
</blockquote>
<blockquote>
<p>Flink 框架会自动忽略同一时间的重复注册Timer。</p>
</blockquote>
<h3 id="使用ProcessFunction实现Join"><a href="#使用ProcessFunction实现Join" class="headerlink" title="使用ProcessFunction实现Join"></a>使用ProcessFunction实现Join</h3><p>如果想从更细的粒度上实现两个数据流的<code>Join</code>，可以使用<code>CoProcessFunction</code>或<code>KeyedCoProcessFunction</code>。这两个函数都有<code>processElement1</code>和<code>processElement2</code>方法，分别对第一个数据流和第二个数据流的每个元素进行处理。两个数据流的数据类型以及输出类型可以互不相同。尽管数据来自两个不同的流，但是他们可以共享同样的状态，所以可以参考下面的逻辑来实现<code>Join</code>：</p>
<ul>
<li>创建一到多个状态，两个数据流都能访问到这些状态，这里以状态<code>a</code>为例。</li>
<li><code>processElement1</code>方法处理第一个数据流，更新状态<code>a</code>。</li>
<li><code>processElement2</code>方法处理第二个数据流，根据状态<code>a</code>中的数据，生成相应的输出。</li>
</ul>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://juejin.im/post/5e3a7ebfe51d4526e03f8f8f">ProcessFunction：Flink最底层API使用教程</a></li>
</ul>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>flink中状态管理</title>
    <url>/flink-zhong-zhuang-tai-guan-li/</url>
    <content><![CDATA[<h3 id="流处理状态管理"><a href="#流处理状态管理" class="headerlink" title="流处理状态管理"></a>流处理状态管理</h3><p>有状态的计算是流处理框架要实现的重要功能，因为稍复杂的流处理场景都需要记录状态，然后在新流入数据的基础上不断更新状态。下面的几个场景都需要使用流处理的状态功能：</p>
<ul>
<li>数据流中的数据有重复，我们想对重复数据去重，需要记录哪些数据已经流入过应用，当新数据流入时，根据已流入过的数据来判断去重。</li>
<li>检查输入流是否符合某个特定的模式，需要将之前流入的元素以状态的形式缓存下来。比如，判断一个温度传感器数据流中的温度是否在持续上升。</li>
<li>对一个时间窗口内的数据进行聚合分析，分析一个小时内某项指标的75分位或99分位的数值。</li>
<li>在线机器学习场景下，需要根据新流入数据不断更新机器学习的模型参数。</li>
</ul>
<h3 id="flink状态管理"><a href="#flink状态管理" class="headerlink" title="flink状态管理"></a>flink状态管理</h3><p>Flink的一个算子有多个子任务，每个子任务分布在不同实例上，我们可以把状态理解为某个算子子任务在其当前实例上的一个变量，变量记录了数据流的历史信息。当新数据流入时，我们可以结合历史信息来进行计算。实际上，Flink的状态是由算子的子任务来创建和管理的。一个状态更新和获取的流程如下图所示，一个算子子任务接收输入流，获取对应的状态，根据新的计算结果更新状态。一个简单的例子是对一个时间窗口内输入流的某个整数字段求和，那么当算子子任务接收到新元素时，会获取已经存储在状态中的数值，然后将当前输入加到状态上，并将状态数据更新。<br><img data-src="/images/flink20.png" alt="状态管理"></p>
<p>获取和更新状态的逻辑其实并不复杂，但流处理框架还需要解决以下几类问题：</p>
<ul>
<li>数据的产出要保证实时性，延迟不能太高。</li>
<li>需要保证数据不丢不重，恰好计算一次，尤其是当状态数据非常大或者应用出现故障需要恢复时，要保证状态的计算不出任何错误。</li>
<li>一般流处理任务都是7*24小时运行的，程序的可靠性非常高。</li>
</ul>
<p>基于上述要求，我们不能将状态直接交由内存管理，因为内存的容量是有限制的，当状态数据稍微大一些时，就会出现内存不够的问题。作为一个计算框架，Flink提供了有状态的计算，封装了一些底层的实现，比如状态的高效存储、Checkpoint和Savepoint持久化备份机制、计算资源扩缩容等问题。因为Flink接管了这些问题，开发者只需调用Flink API，这样可以更加专注于业务逻辑。</p>
<h3 id="Flink的几种状态类型"><a href="#Flink的几种状态类型" class="headerlink" title="Flink的几种状态类型"></a>Flink的几种状态类型</h3><h4 id="Managed-State和Raw-State"><a href="#Managed-State和Raw-State" class="headerlink" title="Managed State和Raw State"></a>Managed State和Raw State</h4><p>Flink有两种基本类型的状态：托管状态（Managed State）和原生状态（Raw State）。从名称中也能读出两者的区别：Managed State是由Flink管理的，Flink帮忙存储、恢复和优化，Raw State是开发者自己管理的，需要自己序列化。</p>
<table>
<thead>
<tr>
<th></th>
<th>Managed State</th>
<th>Raw State</th>
</tr>
</thead>
<tbody><tr>
<td>状态管理方式</td>
<td>Flink Runtime自动管理，自动存储，自动恢复，内存管理优化</td>
<td>用户自己管理；需要自己序列化</td>
</tr>
<tr>
<td>状态数据结构</td>
<td>已知的数据结构：value，list，map…</td>
<td>字节数组：byte[]</td>
</tr>
<tr>
<td>推荐使用场景</td>
<td>大多数场景</td>
<td>自定义Operator时可使用</td>
</tr>
</tbody></table>
<p>两者的具体区别有：</p>
<ul>
<li>从状态管理的方式上来说，Managed State由Flink Runtime托管，状态是自动存储、自动恢复的，Flink在存储管理和持久化上做了一些优化。当我们横向伸缩，或者说我们修改Flink应用的并行度时，状态也能自动重新分布到多个并行实例上。Raw State是用户自定义的状态。</li>
<li>从状态的数据结构上来说，Managed State支持了一系列常见的数据结构，如ValueState、ListState、MapState等。Raw State只支持字节，任何上层数据结构需要序列化为字节数组。使用时，需要用户自己序列化，以非常底层的字节数组形式存储，Flink并不知道存储的是什么样的数据结构。</li>
<li>从具体使用场景来说，绝大多数的算子都可以通过继承Rich函数类或其他提供好的接口类，在里面使用Managed State。Raw State是在已有算子和Managed State不够用时，用户自定义算子时使用。</li>
</ul>
<h4 id="Keyed-State和Operator-State"><a href="#Keyed-State和Operator-State" class="headerlink" title="Keyed State和Operator State"></a>Keyed State和Operator State</h4><p>对Managed State继续细分，它又有两种类型：Keyed State和Operator State。</p>
<h4 id="Keyed-State"><a href="#Keyed-State" class="headerlink" title="Keyed State"></a><strong>Keyed State</strong></h4><p>Keyed State是<code>KeyedStream</code>上的状态。假如输入流按照id为Key进行了keyBy分组，形成一个KeyedStream，数据流中所有id为1的数据共享一个状态，可以访问和更新这个状态，以此类推，每个Key对应一个自己的状态。下图展示了Keyed State，因为一个算子子任务可以处理一到多个Key，算子子任务1处理了两种Key，两种Key分别对应自己的状态。</p>
<p><img data-src="/images/flink21.png" alt="状态管理"></p>
<h4 id="Operator-State"><a href="#Operator-State" class="headerlink" title="Operator State"></a><strong>Operator State</strong></h4><p>Operator State可以用在所有算子上，每个算子子任务或者说每个算子实例共享一个状态，流入这个算子子任务的数据可以访问和更新这个状态。下图展示了Operator State，算子子任务1上的所有数据可以共享第一个Operator State，以此类推，每个算子子任务上的数据共享自己的状态。</p>
<p><img data-src="/images/flink22.png" alt="状态管理"></p>
<p>无论是Keyed State还是Operator State，Flink的状态都是基于本地的，即每个算子子任务维护着这个算子子任务对应的状态存储，算子子任务之间的状态不能相互访问。</p>
<p>在之前各算子的介绍中曾提到，为了自定义Flink的算子，我们可以重写Rich Function接口类，比如<code>RichFlatMapFunction</code>。使用Keyed State时，我们也可以通过重写<code>Rich Function</code>接口类，在里面创建和访问状态。对于Operator State，我们还需进一步实现<code>CheckpointedFunction</code>接口。</p>
<table>
<thead>
<tr>
<th></th>
<th>Keyed State</th>
<th>Operator State</th>
</tr>
</thead>
<tbody><tr>
<td>适用算子类型</td>
<td>只适用<code>keyedStream</code>上的算子</td>
<td>适用所有算子</td>
</tr>
<tr>
<td>状态分配</td>
<td>每一个key对应一个状态</td>
<td>一个算子上的子任务对应一个状态</td>
</tr>
<tr>
<td>创建和访问方式</td>
<td>重写<code>Rich Function</code>,通过里面的<code>RuntimeContext</code>访问</td>
<td>实现<code>CheckpointedFunction</code>或<code>ListCheckpointed</code>接口</td>
</tr>
<tr>
<td>横向扩展</td>
<td>状态随着key自动在多个算子子任务上迁移</td>
<td>有多种状态重新分配的方式:均匀分配、合并后每个得到全量</td>
</tr>
<tr>
<td>支持的数据结构</td>
<td><code>ValueState</code>、<code>ListState</code>、<code>MapState</code>、<code>ReducingState</code>等</td>
<td><code>ListState</code></td>
</tr>
</tbody></table>
<h4 id="几种KeyedState之间的关系"><a href="#几种KeyedState之间的关系" class="headerlink" title="几种KeyedState之间的关系"></a>几种KeyedState之间的关系</h4><p><img data-src="/images/flink23.png" alt="状态管理"></p>
<h4 id="几种KeyedState之间的差异"><a href="#几种KeyedState之间的差异" class="headerlink" title="几种KeyedState之间的差异"></a>几种KeyedState之间的差异</h4><p><img data-src="/images/flink24.png" alt="状态管理"></p>
<h3 id="状态的保存与恢复"><a href="#状态的保存与恢复" class="headerlink" title="状态的保存与恢复"></a>状态的保存与恢复</h3><p><img data-src="/images/flink25.png" alt="状态管理"></p>
<h3 id="可选的状态存储方式"><a href="#可选的状态存储方式" class="headerlink" title="可选的状态存储方式"></a>可选的状态存储方式</h3><h4 id="MemoryStateBackend"><a href="#MemoryStateBackend" class="headerlink" title="MemoryStateBackend"></a>MemoryStateBackend</h4><p>Checkpoint 的存储，第一种是内存存储，即 <code>MemoryStateBackend</code>，构造方法是设置最大的StateSize，选择是否做异步快照，这种存储状态本身存储在 TaskManager 节点也就是执行节点内存中的，因为内存有容量限制，所以单个 State maxStateSize 默认 5 M，且需要注意 maxStateSize &lt;= akka.framesize 默认 10 M。Checkpoint 存储在 JobManager 内存中，因此总大小不超过 JobManager 的内存。<strong>推荐使用的场景为：本地测试、几乎无状态的作业，比如 ETL、JobManager 不容易挂，或挂掉影响不大的情况。不推荐在生产场景使用</strong>。</p>
<h4 id="FsStateBackend"><a href="#FsStateBackend" class="headerlink" title="FsStateBackend"></a>FsStateBackend</h4><p>在文件系统上的 <code>FsStateBackend</code> ，构建方法是需要传一个文件路径和是否异步快照。State 依然在 TaskManager 内存中，但不会像 MemoryStateBackend 有 5 M 的设置上限，Checkpoint 存储在外部文件系统（本地或 HDFS），打破了总大小 Jobmanager 内存的限制。容量限制上，单 TaskManager 上 State 总量不超过它的内存，总大小不超过配置的文件系统容量。<strong>推荐使用的场景、常规使用状态的作业、例如分钟级窗口聚合或 join、需要开启HA的作业</strong>。</p>
<h4 id="RocksDBStateBacked"><a href="#RocksDBStateBacked" class="headerlink" title="RocksDBStateBacked"></a>RocksDBStateBacked</h4><p>还有一种存储为 <code>RocksDBStateBackend</code> ，RocksDB 是一个 key/value 的内存存储系统，和其他的 key/value 一样，先将状态放到内存中，如果内存快满时，则写入到磁盘中，但需要注意 <strong>RocksDB 不支持同步的 Checkpoint</strong>，构造方法中没有同步快照这个选项。不过 <strong>RocksDB 支持增量的 Checkpoint</strong>，也是目前唯一增量 Checkpoint 的 Backend，意味着并不需要把所有 sst 文件上传到 Checkpoint 目录，仅需要上传新生成的 sst 文件即可。它的 Checkpoint 存储在外部文件系统（本地或HDFS），其容量限制只要单个 TaskManager 上 State 总量不超过它的内存+磁盘，单 Key最大 2G，总大小不超过配置的文件系统容量即可。<strong>推荐使用的场景为：超大状态的作业，例如天级窗口聚合、需要开启 HA 的作业、最好是对状态读写性能要求不高的作业</strong>。</p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ul>
<li><p><a href="https://mp.weixin.qq.com/s/JLl-LMjcnVrIyHCCq7Yv7A">Flink状态管理详解：Keyed State和Operator List State深度解析</a></p>
</li>
<li><p><a href="https://ververica.cn/developers/state-management/">Apache Flink 零基础入门（七）：状态管理及容错机制</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink</tag>
        <tag>状态管理</tag>
      </tags>
  </entry>
  <entry>
    <title>flink代码学习笔记</title>
    <url>/flink-dai-ma-xue-xi-bi-ji/</url>
    <content><![CDATA[<h2 id="一些关键字的解释说明"><a href="#一些关键字的解释说明" class="headerlink" title="一些关键字的解释说明"></a>一些关键字的解释说明</h2><h3 id="split-“-s”"><a href="#split-“-s”" class="headerlink" title=".split(“\s”)"></a>.split(“\s”)</h3><p><code>\\s</code>表示空格、回车、换行等空白符<br><code>\\s+</code>表示一个或多个空格、回车、换行等空白符</p>
<h3 id="split-“-w-”"><a href="#split-“-w-”" class="headerlink" title=".split(“\w+”)"></a>.split(“\w+”)</h3><p>表示匹配数字和字母下划线的多个字符</p>
<h3 id="tuple元组"><a href="#tuple元组" class="headerlink" title="tuple元组"></a>tuple元组</h3><p><code>tuple</code>是flink中自定义的一种组合类型，类似java中Map&lt;String,String&gt;，只不过Map只有两个字段，相当于<code>Tuple2</code>。</p>
<p>flink中<code>tuple</code>最多支持25个字段，不支持空字段.</p>
<blockquote>
<p>复合类型有：</p>
<ul>
<li>Flink Java Tuples(Flink Java API的一部分)：最多25个字段，空字段不支持</li>
<li>Scala Case classes(包括Scala tuples):最多25个字段，空字段不支持</li>
<li>Row:具有任意数量字段的元组，并支持空字段</li>
<li>POJO:遵循某种Bean模式的类</li>
</ul>
</blockquote>
<h4 id="tuple使用"><a href="#tuple使用" class="headerlink" title="tuple使用"></a>tuple使用</h4><p>最简单的情况是在元组的一个或多个字段上对元组进行分组：</p>
<pre class="line-numbers language-java"><code class="language-java">DataStream<span class="token operator">&lt;</span>Tuple3<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>String<span class="token punctuation">,</span>Long<span class="token operator">>></span> input <span class="token operator">=</span> <span class="token comment" spellcheck="true">// [...]</span>
KeyedStream<span class="token operator">&lt;</span>Tuple3<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>String<span class="token punctuation">,</span>Long<span class="token operator">></span><span class="token punctuation">,</span>Tuple<span class="token operator">></span> keyed <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>元组在第一个字段（整数类型）上分组。</p>
<pre class="line-numbers language-java"><code class="language-java">DataStream<span class="token operator">&lt;</span>Tuple3<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>String<span class="token punctuation">,</span>Long<span class="token operator">>></span> input <span class="token operator">=</span> <span class="token comment" spellcheck="true">// [...]</span>
KeyedStream<span class="token operator">&lt;</span>Tuple3<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>String<span class="token punctuation">,</span>Long<span class="token operator">></span><span class="token punctuation">,</span>Tuple<span class="token operator">></span> keyed <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>在这里，我们将元组分组在由第一个和第二个字段组成的复合键上。</p>
<p>关于嵌套元组的注释：如果你有一个带有嵌套元组的DataStream，例如：</p>
<pre class="line-numbers language-java"><code class="language-java">DataStream<span class="token operator">&lt;</span>Tuple3<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Float<span class="token operator">></span><span class="token punctuation">,</span>String<span class="token punctuation">,</span>Long<span class="token operator">>></span> ds<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>指定keyBy(0)将导致系统使用full Tuple2作为键（以Integer和Float为键）。</p>
<p>更多参考<a href="https://flink.sojb.cn/dev/api_concepts.html">官网</a></p>
<h3 id="map和flatMap"><a href="#map和flatMap" class="headerlink" title="map和flatMap"></a>map和flatMap</h3><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>把数组流中的每一个值，使用所提供的函数执行一遍，一一对应。得到元素个数相同的数组流。<br><img data-src="/images/flink6.png" alt="map"></p>
<p>map算子对一个DataStream中的每个元素使用用户自定义的map函数进行处理，每个输入元素对应一个输出元素，最终整个数据流被转换成一个新的DataStream。输出的数据流DataStream[OUT]类型可能和输入的数据流DataStream[IN]不同。</p>
<h4 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h4><p>flat是扁平的意思。它把数组流中的每一个值，使用所提供的函数执行一遍，一一对应。得到元素相同的数组流。只不过，里面的元素也是一个子数组流。把这些子数组合并成一个数组以后，元素个数大概率会和原数组流的个数不同。<br><img data-src="/images/flink7.png" alt="flatMap"></p>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>filter算子对每个元素进行过滤，过滤的过程使用一个filter函数进行逻辑判断。对于输入的每个元素，如果filter函数返回True，则保留，如果返回False，则丢弃。<br><img data-src="/images/flink12.png" alt="filter"></p>
<h3 id="keyBy"><a href="#keyBy" class="headerlink" title="keyBy"></a><a href="https://zhuanlan.zhihu.com/p/98975650">keyBy</a></h3><p>绝大多数情况，我们要根据事件的某种属性或数据的某个字段进行分组，对一个分组内的数据进行处理。如下图所示，keyBy算子根据元素的形状对数据进行分组，相同形状的元素被分到了一起，可被后续算子统一处理。比如，多支股票数据流处理时，可以根据股票代号进行分组，然后对同一股票代号的数据统计其价格变动。又如，电商用户行为日志把所有用户的行为都记录了下来，如果要分析某一个用户行为，需要先按用户ID进行分组。<br><img data-src="/images/flink10.png" alt="keyby"></p>
<h3 id="aggregation"><a href="#aggregation" class="headerlink" title="aggregation"></a>aggregation</h3><p>常见的聚合操作有sum、max、min等，这些聚合操作统称为aggregation。aggregation需要一个参数来指定按照哪个字段进行聚合。跟keyBy相似，我们可以使用数字位置来指定对哪个字段进行聚合，也可以使用字段名。</p>
<p>与批处理不同，这些聚合函数是对流数据进行数据，流数据是依次进入Flink的，聚合操作是对之前流入的数据进行统计聚合。</p>
<ul>
<li>max算子对该字段求最大值，并将结果保存在该字段上。对于其他字段，该操作并不能保证其数值。</li>
<li>maxBy算子对该字段求最大值，maxBy与max的区别在于，maxBy同时保留其他字段的数值，即maxBy可以得到数据流中最大的元素。</li>
<li>同样，min和minBy的区别在于，min算子对某字段求最小值，minBy返回具有最小值的元素。</li>
</ul>
<blockquote>
<p>其实，这些aggregation操作里已经封装了状态数据，比如，sum算子内部记录了当前的和，max算子内部记录了当前的最大值。由于内部封装了状态数据，而且状态数据并不会被清理，因此一定要避免在一个无限数据流上使用aggregation。</p>
</blockquote>
<blockquote>
<p>注意，对于一个KeyedStream,一次只能使用一个aggregation操作，无法链式使用多个。</p>
</blockquote>
<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p>前面几个aggregation是几个较为特殊的操作，对分组数据进行处理更为通用的方法是使用reduce算子。<br><img data-src="/images/flink11.png" alt="reduce"></p>
<p>上图展示了reduce算子的原理：reduce在按照同一个Key分组的数据流上生效，它接受两个输入，生成一个输出，即两两合一地进行汇总操作，生成一个同类型的新元素。</p>
<pre class="line-numbers language-java"><code class="language-java">DataStream<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">>></span> counts <span class="token operator">=</span>
    <span class="token comment" spellcheck="true">// split up the lines in pairs (2-tuples) containing: (word,1)</span>
    text<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Tokenizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token comment" spellcheck="true">// group by the tuple field "0" and sum up tuple field "1"</span>
        <span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">//ReduceFunction定义了reduce方法，它主要是用来将两个同类型的值操作为一个同类型的值，第一个参数为前面reduce的结果，第二参数为当前的元素</span>
        <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReduceFunction</span><span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token function">reduce</span><span class="token punctuation">(</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> value1<span class="token punctuation">,</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> value2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"value1:"</span><span class="token operator">+</span>value1<span class="token punctuation">.</span>f1<span class="token operator">+</span><span class="token string">";value2:"</span><span class="token operator">+</span>value2<span class="token punctuation">.</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>value1<span class="token punctuation">.</span>f0<span class="token punctuation">,</span> value1<span class="token punctuation">.</span>f1 <span class="token operator">+</span> value2<span class="token punctuation">.</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zhuanlan.zhihu.com/c_1127896820252299264">皮皮鲁的AI星球</a></p>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>flink中returns函数使用</title>
    <url>/flink-zhong-returns-han-shu-shi-yong/</url>
    <content><![CDATA[<p>Java8出来之后，lambda表达式由于简单易读，在流式计算中的使用开始变得普遍。</p>
<p>同样,Flink也支持lambda表达式，例如我们改写一下wordcount样例</p>
<pre class="line-numbers language-java"><code class="language-java">DataSource<span class="token operator">&lt;</span>String<span class="token operator">></span> lines <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">fromElements</span><span class="token punctuation">(</span>
    <span class="token string">"Apache Flink is a community-driven open source framework for distributed big data analytics,"</span><span class="token punctuation">,</span>
    <span class="token string">"like Hadoop and Spark. The core of Apache Flink is a distributed streaming dataflow engine written"</span><span class="token punctuation">,</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
lines<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlatMapFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">flatMap</span><span class="token punctuation">(</span>String line<span class="token punctuation">,</span> Collector<span class="token operator">&lt;</span> Object<span class="token operator">></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>String word <span class="token operator">:</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\W+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这段代码很简单，先把每一行按空格拆分成若干单词，并将每个单词和数字1组成一个Tuple，然后把所有Tuple按照单词聚合，计算出每个单词的出现次数</p>
<p>尝试用lambda表达式来替换FlatMapFunction，代码如下</p>
<pre class="line-numbers language-java"><code class="language-java">lines<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> out<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>String word <span class="token operator">:</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\W+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>但当运行这段代码时，会抛出如下异常：</p>
<pre class="line-numbers language-java"><code class="language-java">Caused by<span class="token operator">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>InvalidTypesException<span class="token operator">:</span> The generic type parameters of <span class="token string">'Collector'</span> are missing<span class="token punctuation">.</span> 
It seems that your compiler has not stored them into the <span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">file<span class="token punctuation">.</span></span> 
Currently<span class="token punctuation">,</span> only the Eclipse JDT compiler preserves the type information necessary to use the lambdas feature type<span class="token operator">-</span>safely<span class="token punctuation">.</span> 
See the documentation <span class="token keyword">for</span> more information about how to compile jobs containing lambda expressions<span class="token punctuation">.</span>
    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>typeutils<span class="token punctuation">.</span>TypeExtractor<span class="token punctuation">.</span><span class="token function">validateLambdaGenericParameter</span><span class="token punctuation">(</span>TypeExtractor<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1653</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>typeutils<span class="token punctuation">.</span>TypeExtractor<span class="token punctuation">.</span><span class="token function">validateLambdaGenericParameters</span><span class="token punctuation">(</span>TypeExtractor<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1639</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>typeutils<span class="token punctuation">.</span>TypeExtractor<span class="token punctuation">.</span><span class="token function">getUnaryOperatorReturnType</span><span class="token punctuation">(</span>TypeExtractor<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">573</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>typeutils<span class="token punctuation">.</span>TypeExtractor<span class="token punctuation">.</span><span class="token function">getFlatMapReturnTypes</span><span class="token punctuation">(</span>TypeExtractor<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">188</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>DataSet<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>DataSet<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">266</span><span class="token punctuation">)</span>
    at TestFlink<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>TestFlink<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">21</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这是因为Flink在用户自定义的函数中会使用泛型来创建serializer，当我们使用匿名函数时，类型信息会被保留。但Lambda表达式并不是匿名函数，所以javac编译的时候并不会把泛型保存到class文件里。</p>
<p>解决办法有两种:</p>
<p>第一种办法在异常中已经提示，使用Eclipse JDT编译器会保留对lambda表达式来说必要的类型信息。在Maven中使用Eclipse JDT编译器，只需要在把下面的插件加入到pom.xml中</p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>compilerId</span><span class="token punctuation">></span></span>jdt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>compilerId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.eclipse.tycho<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tycho-compiler-jdt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.21.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>另一种办法是，使用Flink提供的returns方法来指定flatMap的返回类型，</p>
<pre class="line-numbers language-java"><code class="language-java">text<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> out<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>String word <span class="token operator">:</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\W+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">returns</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TypeInformation<span class="token punctuation">)</span> TupleTypeInfo<span class="token punctuation">.</span><span class="token function">getBasicTupleTypeInfo</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java">text<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> out<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>String word <span class="token operator">:</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\W+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">returns</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span><span class="token function">TUPLE</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span>STRING<span class="token punctuation">,</span> Types<span class="token punctuation">.</span>INT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>returns</code>函数接收TypeInformation类型的参数，这里我们创建TupleTypeInfo来指定Tuple的参数类型。</p>
<ul>
<li><p><a href="http://kane-xie.github.io/2017/07/12/2017-07-12_Flink%E4%BD%BF%E7%94%A8lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/">参考链接1</a></p>
</li>
<li><p><a href="https://blog.csdn.net/November_28/article/details/100020400">参考链接2</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>flink典型应用场景</title>
    <url>/flink-dian-xing-ying-yong-chang-jing/</url>
    <content><![CDATA[<h2 id="flink应用场景"><a href="#flink应用场景" class="headerlink" title="flink应用场景"></a><a href="https://flink.apache.org/zh/usecases.html">flink应用场景</a></h2><p>Apache Flink 功能强大，支持开发和运行多种不同种类的应用程序。它的主要特性包括：批流一体化、精密的状态管理、事件时间支持以及精确一次的状态一致性保障等。Flink 不仅可以运行在包括 YARN、 Mesos、Kubernetes 在内的多种资源管理框架上，还支持在裸机集群上独立部署。在启用高可用选项的情况下，它不存在单点失效问题。事实证明，Flink 已经可以扩展到数千核心，其状态可以达到 TB 级别，且仍能保持高吞吐、低延迟的特性。世界各地有很多要求严苛的流处理应用都运行在 Flink 之上。</p>
<h3 id="事件驱动型应用"><a href="#事件驱动型应用" class="headerlink" title="事件驱动型应用"></a>事件驱动型应用</h3><h4 id="什么是事件驱动型应用？"><a href="#什么是事件驱动型应用？" class="headerlink" title="什么是事件驱动型应用？"></a>什么是事件驱动型应用？</h4><p>事件驱动型应用是一类具有状态的应用，它从一个或多个事件流提取数据，并根据到来的事件触发计算、状态更新或其他外部动作。</p>
<p>事件驱动型应用是在计算存储分离的传统应用基础上进化而来。在传统架构中，应用需要读写远程事务型数据库。</p>
<p>相反，事件驱动型应用是基于状态化流处理来完成。在该设计中，数据和计算不会分离，应用只需访问本地（内存或磁盘）即可获取数据。系统容错性的实现依赖于定期向远程持久化存储写入 checkpoint。下图描述了传统应用和事件驱动型应用架构的区别。<br><img data-src="/images/flink1.png" alt="事件驱动型应用"></p>
<h4 id="事件驱动型应用的优势？"><a href="#事件驱动型应用的优势？" class="headerlink" title="事件驱动型应用的优势？"></a>事件驱动型应用的优势？</h4><p>事件驱动型应用无须查询远程数据库，本地数据访问使得它具有更高的吞吐和更低的延迟。而由于定期向远程持久化存储的 checkpoint 工作可以异步、增量式完成，因此对于正常事件处理的影响甚微。事件驱动型应用的优势不仅限于本地数据访问。传统分层架构下，通常多个应用会共享同一个数据库，因而任何对数据库自身的更改（例如：由应用更新或服务扩容导致数据布局发生改变）都需要谨慎协调。反观事件驱动型应用，由于只需考虑自身数据，因此在更改数据表示或服务扩容时所需的协调工作将大大减少。</p>
<h4 id="Flink-如何支持事件驱动型应用？"><a href="#Flink-如何支持事件驱动型应用？" class="headerlink" title="Flink 如何支持事件驱动型应用？"></a>Flink 如何支持事件驱动型应用？</h4><p>事件驱动型应用会受制于底层流处理系统对时间和状态的把控能力，Flink 诸多优秀特质都是围绕这些方面来设计的。它提供了一系列丰富的状态操作原语，允许以精确一次的一致性语义合并海量规模（TB 级别）的状态数据。此外，Flink 还支持事件时间和自由度极高的定制化窗口逻辑，而且它内置的 ProcessFunction 支持细粒度时间控制，方便实现一些高级业务逻辑。同时，Flink 还拥有一个复杂事件处理（CEP）类库，可以用来检测数据流中的模式。</p>
<p>Flink 中针对事件驱动应用的明星特性当属 savepoint。Savepoint 是一个一致性的状态映像，它可以用来初始化任意状态兼容的应用。在完成一次 savepoint 后，即可放心对应用升级或扩容，还可以启动多个版本的应用来完成 A/B 测试。</p>
<h4 id="典型的事件驱动型应用实例"><a href="#典型的事件驱动型应用实例" class="headerlink" title="典型的事件驱动型应用实例"></a>典型的事件驱动型应用实例</h4><ul>
<li>反欺诈</li>
<li>异常检测</li>
<li>基于规则的报警</li>
<li>业务流程监控</li>
<li>（社交网络）Web 应用</li>
</ul>
<h3 id="数据分析应用"><a href="#数据分析应用" class="headerlink" title="数据分析应用"></a>数据分析应用</h3><h4 id="什么是数据分析应用？"><a href="#什么是数据分析应用？" class="headerlink" title="什么是数据分析应用？"></a>什么是数据分析应用？</h4><p>数据分析任务需要从原始数据中提取有价值的信息和指标。传统的分析方式通常是利用批查询，或将事件记录下来并基于此有限数据集构建应用来完成。为了得到最新数据的分析结果，必须先将它们加入分析数据集并重新执行查询或运行应用，随后将结果写入存储系统或生成报告。</p>
<p>借助一些先进的流处理引擎，还可以实时地进行数据分析。和传统模式下读取有限数据集不同，流式查询或应用会接入实时事件流，并随着事件消费持续产生和更新结果。这些结果数据可能会写入外部数据库系统或以内部状态的形式维护。仪表展示应用可以相应地从外部数据库读取数据或直接查询应用的内部状态。</p>
<p>如下图所示，Apache Flink 同时支持流式及批量分析应用。<br><img data-src="/images/flink2.png" alt="数据分析应用"></p>
<h4 id="流式分析应用的优势？"><a href="#流式分析应用的优势？" class="headerlink" title="流式分析应用的优势？"></a>流式分析应用的优势？</h4><p>和批量分析相比，由于流式分析省掉了周期性的数据导入和查询过程，因此从事件中获取指标的延迟更低。不仅如此，批量查询必须处理那些由定期导入和输入有界性导致的人工数据边界，而流式查询则无须考虑该问题。</p>
<p>另一方面，流式分析会简化应用抽象。批量查询的流水线通常由多个独立部件组成，需要周期性地调度提取数据和执行查询。如此复杂的流水线操作起来并不容易，一旦某个组件出错将会影响流水线的后续步骤。而流式分析应用整体运行在 Flink 之类的高端流处理系统之上，涵盖了从数据接入到连续结果计算的所有步骤，因此可以依赖底层引擎提供的故障恢复机制。</p>
<h4 id="Flink-如何支持数据分析类应用？"><a href="#Flink-如何支持数据分析类应用？" class="headerlink" title="Flink 如何支持数据分析类应用？"></a>Flink 如何支持数据分析类应用？</h4><p>Flink 为持续流式分析和批量分析都提供了良好的支持。具体而言，它内置了一个符合 ANSI 标准的 SQL 接口，将批、流查询的语义统一起来。无论是在记录事件的静态数据集上还是实时事件流上，相同 SQL 查询都会得到一致的结果。同时 Flink 还支持丰富的用户自定义函数，允许在 SQL 中执行定制化代码。如果还需进一步定制逻辑，可以利用 Flink DataStream API 和 DataSet API 进行更低层次的控制。此外，Flink 的 Gelly 库为基于批量数据集的大规模高性能图分析提供了算法和构建模块支持。</p>
<h4 id="典型的数据分析应用实例"><a href="#典型的数据分析应用实例" class="headerlink" title="典型的数据分析应用实例"></a>典型的数据分析应用实例</h4><ul>
<li>电信网络质量监控</li>
<li>移动应用中的产品更新及实验评估分析</li>
<li>消费者技术中的实时数据即席分析</li>
<li>大规模图分析</li>
</ul>
<h3 id="数据管道应用"><a href="#数据管道应用" class="headerlink" title="数据管道应用"></a>数据管道应用</h3><h4 id="什么是数据管道？"><a href="#什么是数据管道？" class="headerlink" title="什么是数据管道？"></a>什么是数据管道？</h4><p>提取-转换-加载（ETL）是一种在存储系统之间进行数据转换和迁移的常用方法。ETL 作业通常会周期性地触发，将数据从事务型数据库拷贝到分析型数据库或数据仓库。</p>
<p>数据管道和 ETL 作业的用途相似，都可以转换、丰富数据，并将其从某个存储系统移动到另一个。但数据管道是以持续流模式运行，而非周期性触发。因此它支持从一个不断生成数据的源头读取记录，并将它们以低延迟移动到终点。例如：数据管道可以用来监控文件系统目录中的新文件，并将其数据写入事件日志；另一个应用可能会将事件流物化到数据库或增量构建和优化查询索引。</p>
<p>下图描述了周期性 ETL 作业和持续数据管道的差异。<br><img data-src="/images/flink3.png" alt="数据管道应用"></p>
<h4 id="数据管道的优势？"><a href="#数据管道的优势？" class="headerlink" title="数据管道的优势？"></a>数据管道的优势？</h4><p>和周期性 ETL 作业相比，持续数据管道可以明显降低将数据移动到目的端的延迟。此外，由于它能够持续消费和发送数据，因此用途更广，支持用例更多。</p>
<h4 id="Flink-如何支持数据管道应用？"><a href="#Flink-如何支持数据管道应用？" class="headerlink" title="Flink 如何支持数据管道应用？"></a>Flink 如何支持数据管道应用？</h4><p>很多常见的数据转换和增强操作可以利用 Flink 的 SQL 接口（或 Table API）及用户自定义函数解决。如果数据管道有更高级的需求，可以选择更通用的 DataStream API 来实现。Flink 为多种数据存储系统（如：Kafka、Kinesis、Elasticsearch、JDBC数据库系统等）内置了连接器。同时它还提供了文件系统的连续型数据源及数据汇，可用来监控目录变化和以时间分区的方式写入文件。</p>
<h4 id="典型的数据管道应用实例"><a href="#典型的数据管道应用实例" class="headerlink" title="典型的数据管道应用实例"></a>典型的数据管道应用实例</h4><ul>
<li>电子商务中的实时查询索引构建</li>
<li>电子商务中的持续 ETL</li>
</ul>
<h2 id="阿里蒋晓伟谈计算引擎Flink和Spark的对比"><a href="#阿里蒋晓伟谈计算引擎Flink和Spark的对比" class="headerlink" title="阿里蒋晓伟谈计算引擎Flink和Spark的对比"></a><a href="https://www.cnblogs.com/xiaodf/p/11751110.html">阿里蒋晓伟谈计算引擎Flink和Spark的对比</a></h2><h3 id="相比Spark、Hadoop、Storm等，是什么样的场景需求让阿里搜索团队选择了Flink？"><a href="#相比Spark、Hadoop、Storm等，是什么样的场景需求让阿里搜索团队选择了Flink？" class="headerlink" title="相比Spark、Hadoop、Storm等，是什么样的场景需求让阿里搜索团队选择了Flink？"></a>相比Spark、Hadoop、Storm等，是什么样的场景需求让阿里搜索团队选择了Flink？</h3><p>首先我们希望有个流计算和批处理的一体化处理方案。Spark和Flink都具有流和批处理能力，但是他们的做法是相反的。Spark Streaming是把流转化成一个个小的批来处理，这种方案的一个问题是我们需要的延迟越低，额外开销占的比例就会越大，这导致了Spark Streaming很难做到秒级甚至亚秒级的延迟。Flink是把批当作一种有限的流，这种做法的一个特点是在流和批共享大部分代码的同时还能够保留批处理特有的一系列的优化。因为这个原因，如果要用一套引擎来解决流和批处理，那就必须以流处理为基础，所以我们决定先选择一个优秀的流处理引擎。从功能上流处理可以分为无状态的和有状态两种。在流处理的框架里引入状态管理大大提升了系统的表达能力，让用户能够很方便地实现复杂的处理逻辑，是流处理在功能上的一个飞跃。流处理引擎对一致性的支持可以分为：best effort，at least once 和 exactly once。Exactly once的语义才能真正保证完全的一致性，Flink采用的架构比较优雅地实现了exactly once的有状态流处理。另外在保证了一致性的前提下Flink在性能上也是相当优秀的。</p>
<p>总结一下:</p>
<ul>
<li>我们觉得在流处理方面Flink在功能，延迟，一致性和性能上综合来看是目前社区最优秀的。</li>
<li>实现流和批的一体化方案。</li>
<li>Flink有一个比较活跃的社区。</li>
</ul>
<h3 id="您认为Flink未来的杀手级应用会是什么？"><a href="#您认为Flink未来的杀手级应用会是什么？" class="headerlink" title="您认为Flink未来的杀手级应用会是什么？"></a>您认为Flink未来的杀手级应用会是什么？</h3><p>…,我觉得Flink在流计算上的优势是非常大的，随着在线学习等流计算需求的增长，在这方面Flink一定会大放异彩。</p>
<h2 id="企业实践经典案例"><a href="#企业实践经典案例" class="headerlink" title="企业实践经典案例"></a><a href="https://ververica.cn/corporate-practice/">企业实践经典案例</a></h2><h3 id="日均处理万亿数据！Apache-Flink在快手的应用实践与技术演进之路"><a href="#日均处理万亿数据！Apache-Flink在快手的应用实践与技术演进之路" class="headerlink" title="日均处理万亿数据！Apache Flink在快手的应用实践与技术演进之路"></a><a href="https://ververica.cn/corporate_practice/kuaishou/">日均处理万亿数据！Apache Flink在快手的应用实践与技术演进之路</a></h3><p><img data-src="/images/flink4.png" alt="快手"></p>
<p>快手计算链路是从 DB/Binlog 以及 WebService Log 实时入到 Kafka 中，然后接入 Flink 做实时计算，其中包括实时 ETL、实时分析、Interval Join 以及实时训练，最后的结果存到 Druid、ES 或者 HBase 里面，后面接入一些数据应用产品；同时这一份 Kafka 数据实时 Dump 一份到 Hadoop 集群，然后接入离线计算。</p>
<h4 id="Flink-在快手应用的类别主要分为三大类："><a href="#Flink-在快手应用的类别主要分为三大类：" class="headerlink" title="Flink 在快手应用的类别主要分为三大类："></a>Flink 在快手应用的类别主要分为三大类：</h4><ul>
<li>80% 统计监控：实时统计，包括各项数据的指标，监控项报警，用于辅助业务进行实时分析和监控；</li>
<li>15% 数据处理：对数据的清洗、拆分、Join 等逻辑处理，例如大 Topic 的数据拆分、清洗；</li>
<li>5% 数据处理：实时业务处理，针对特定业务逻辑的实时处理，例如实时调度。</li>
</ul>
<h4 id="Flink-在快手应用的典型场景包括："><a href="#Flink-在快手应用的典型场景包括：" class="headerlink" title="Flink 在快手应用的典型场景包括："></a>Flink 在快手应用的典型场景包括：</h4><ul>
<li>快手是分享短视频跟直播的平台，快手短视频、直播的质量监控是通过 Flink 进行实时统计，比如直播观众端、主播端的播放量、卡顿率、开播失败率等跟直播质量相关的多种监控指标；</li>
<li>用户增长分析，实时统计各投放渠道拉新情况，根据效果实时调整各渠道的投放量；</li>
<li>实时数据处理，广告展现流、点击流实时 Join，客户端日志的拆分等；</li>
<li>直播 CDN 调度，实时监控各 CDN 厂商质量，通过 Flink 实时训练调整各个 CDN 厂商流量配比。</li>
</ul>
<h4 id="规模"><a href="#规模" class="headerlink" title="规模"></a>规模</h4><p>快手目前集群规模有 1500 台左右，作业数量大约是 500 左右，日处理条目数总共有 1.7 万亿，峰值处理条目数大约是 3.7 千万。集群部署都是 On Yarn 模式，分为离线集群和实时集群两类集群，其中离线集群混合部署，机器通过标签进行物理隔离，实时集群是 Flink 专用集群，针对隔离性、稳定性要求极高的业务部署。</p>
<h4 id="Interval-Join-应用场景"><a href="#Interval-Join-应用场景" class="headerlink" title="Interval Join 应用场景"></a>Interval Join 应用场景</h4><p><img data-src="/images/flink5.png" alt="快手"></p>
<p>Interval Join 在快手的一个应用场景是广告展现点击流实时 Join 场景：打开快手 App 可能会收到广告服务推荐的广告视频，用户有时会点击展现的广告视频。这样在后端形成两份数据流，一份是广告展现日志，一份是客户端点击日志。这两份数据需进行实时 Join，将 Join 结果作为样本数据用于模型训练，训练出的模型会被推送到线上的广告服务。</p>
<p>该场景下展现以后 20 分钟的点击被认为是有效点击，实时 Join 逻辑则是点击数据 Join 过去 20 分钟展现。其中，展现流的数据量相对比较大，20 分钟数据在 1 TB 以上。最初实时 Join 过程是业务自己实现，通过 Redis 缓存广告展现日志，Kafka 延迟消费客户端点击日志实现 Join 逻辑，该方式缺点是实时性不高，并且随着业务增长需要堆积更多机器，运维成本非常高。基于 Flink 使用 Interval Join 完美契合此场景，并且实时性高，能够实时输出 Join 后的结果数据，对业务来说维护成本非常低，只需要维护一个 Flink 作业即可。</p>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>flink数据类型转换</title>
    <url>/flink-shu-ju-lei-xing-zhuan-huan/</url>
    <content><![CDATA[<h3 id="转换关系总图"><a href="#转换关系总图" class="headerlink" title="转换关系总图"></a>转换关系总图</h3><p><img data-src="/images/flink8.png" alt="转换关系"></p>
<h3 id="DataStream"><a href="#DataStream" class="headerlink" title="DataStream"></a>DataStream</h3><p>DataStream 是 Flink 流处理 API 中最核心的数据结构。它代表了一个运行在多个分区上的并行流。一个 DataStream 可以从 StreamExecutionEnvironment 通过env.addSource(SourceFunction) 获得。</p>
<p>DataStream 上的转换操作都是逐条的，比如 map()，flatMap()，filter()。DataStream 也可以执行 rebalance（再平衡，用来减轻数据倾斜）和 broadcaseted（广播）等分区转换。</p>
<h3 id="KeyedStream"><a href="#KeyedStream" class="headerlink" title="KeyedStream"></a>KeyedStream</h3><p>KeyedStream用来表示根据指定的key进行分组的数据流。一个KeyedStream可以通过调用DataStream.keyBy()来获得。而在KeyedStream上进行任何transformation都将转变回DataStream。在实现中，KeyedStream是把key的信息写入到了transformation中。每条记录只能访问所属key的状态，其上的聚合函数可以方便地操作和保存对应key的状态。</p>
<h3 id="WindowedStream-amp-AllWindowedStream"><a href="#WindowedStream-amp-AllWindowedStream" class="headerlink" title="WindowedStream &amp; AllWindowedStream"></a>WindowedStream &amp; AllWindowedStream</h3><p>WindowedStream代表了根据key分组，并且基于WindowAssigner切分窗口的数据流。所以WindowedStream都是从KeyedStream衍生而来的。而在WindowedStream上进行任何transformation也都将转变回DataStream。</p>
<p>在key分组的流上进行窗口切分是比较常用的场景，也能够很好地并行化（不同的key上的窗口聚合可以分配到不同的task去处理）。不过有时候我们也需要在普通流上进行窗口的操作，这就是 AllWindowedStream。AllWindowedStream是直接在DataStream上进行windowAll(…)操作。</p>
<p>Flink 的窗口实现中会将到达的数据缓存在对应的窗口buffer中（一个数据可能会对应多个窗口）。当到达窗口发送的条件时（由Trigger控制），Flink 会对整个窗口中的数据进行处理。Flink 在聚合类窗口有一定的优化，即不会保存窗口中的所有值，而是每到一个元素执行一次聚合函数，最终只保存一份数据即可。</p>
<p><img data-src="/images/flink9.png" alt="window"></p>
<h3 id="JoinedStreams-amp-CoGroupedStreams"><a href="#JoinedStreams-amp-CoGroupedStreams" class="headerlink" title="JoinedStreams &amp; CoGroupedStreams"></a>JoinedStreams &amp; CoGroupedStreams</h3><h3 id="ConnectedStreams"><a href="#ConnectedStreams" class="headerlink" title="ConnectedStreams"></a>ConnectedStreams</h3><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://wuchong.me/blog/2016/05/20/flink-internals-streams-and-operations-on-streams/">http://wuchong.me/</a></p>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>flink多数据流转换操作：join、union、connect</title>
    <url>/flink-duo-shu-ju-liu-zhuan-huan-cao-zuo/</url>
    <content><![CDATA[<h3 id="操作概览"><a href="#操作概览" class="headerlink" title="操作概览"></a>操作概览</h3><p><img data-src="/images/flink13.png" alt="操作概览"></p>
<p>本文主要讲flink中多条数据流转换操作：join、union、connect</p>
<h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>批处理经常要解决的问题是将两个数据源做关联Join操作。比如，很多手机APP都有一个用户数据源User，同时APP会记录用户的行为，我们称之为Behavior，两个表按照userId来进行Join。在流处理场景下，Flink也支持了Join，只不过Flink是在一个时间窗口上来进行两个表的Join。<br><img data-src="/images/flink14.png" alt="操作概览"><br>目前，Flink支持了两种Join：<code>Window Join</code>（窗口连接）和<code>Interval Join</code>（时间间隔连接）。</p>
<h4 id="Window-Join"><a href="#Window-Join" class="headerlink" title="Window Join"></a>Window Join</h4><p>从名字中能猜到，Window Join主要在Flink的窗口上进行操作，它将两个流中落在相同窗口的元素按照某个Key进行Join。一个Window Join的大致骨架结构为：</p>
<pre class="line-numbers language-java"><code class="language-java">input1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>input2<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>KeySelector<span class="token operator">></span><span class="token punctuation">)</span>      <span class="token operator">&lt;</span><span class="token operator">-</span> input1使用哪个字段作为Key
    <span class="token punctuation">.</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>KeySelector<span class="token operator">></span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">-</span> input2使用哪个字段作为Key
    <span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>WindowAssigner<span class="token operator">></span><span class="token punctuation">)</span>  <span class="token operator">&lt;</span><span class="token operator">-</span> 指定WindowAssigner
    <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Trigger<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">]</span>      <span class="token operator">&lt;</span><span class="token operator">-</span> 指定Trigger（可选）
    <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token function">evictor</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Evictor<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">]</span>      <span class="token operator">&lt;</span><span class="token operator">-</span> 指定Evictor（可选）
    <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>JoinFunction<span class="token operator">></span><span class="token punctuation">)</span>     <span class="token operator">&lt;</span><span class="token operator">-</span> 指定JoinFunction
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下图展示了Join的大致过程。两个输入数据流先分别按Key进行分组，然后将元素划分到窗口中。窗口的划分需要使用WindowAssigner来定义，这里可以使用Flink提供的滚动窗口、滑动窗口或会话窗口等默认的WindowAssigner。随后两个数据流中的元素会被分配到各个窗口上，也就是说一个窗口会包含来自两个数据流的元素。相同窗口内的数据会以INNER JOIN的语义来相互关联，形成一个数据对。当窗口的时间结束，Flink会调用JoinFunction来对窗口内的数据对进行处理。当然，我们也可以使用Trigger或Evictor做一些自定义优化，他们的使用方法和普通窗口的使用方法一样。<br><img data-src="/images/flink15.png" alt="join"></p>
<p>接下来我们重点分析一下两个数据流是如何INNER JOIN的：<br><img data-src="/images/flink16.png" alt="join"><br>一般滴，INNER JOIN只对两个数据源都出现的元素做Join，形成一个数据对，即数据源input1中的某个元素与数据源input2中的所有元素逐个配对。当数据源某个窗口内没数据时，比如图中的第三个窗口，Join的结果也是空的。</p>
<p>如果INNER JOIN不能满足我们的需求，CoGroupFunction提供了更多可自定义的功能。需要注意的是，在调用时，要写成<code>input1.coGroup(input2).where(&lt;KeySelector&gt;).equalTo(&lt;KeySelecotr&gt;)</code>。</p>
<h4 id="Interval-Join"><a href="#Interval-Join" class="headerlink" title="Interval Join"></a>Interval Join</h4><p>与Window Join不同，Interval Join不依赖Flink的WindowAssigner，而是根据一个时间间隔（Interval）界定时间。Interval需要一个时间下界（<code>lower bound</code>）和上界（<code>upper bound</code>），如果我们将input1和input2进行Interval Join，input1中的某个元素为<code>input1.element1</code>，时间戳为<code>input1.element1.ts</code>，那么一个Interval就是<code>[input1.element1.ts + lower bound, input1.element1.ts + upper bound]</code>，input2中落在这个时间段内的元素将会和<code>input1.element1</code>组成一个数据对。</p>
<p>用数学公式表达为，凡是符合下面公式<code>input1.element1.ts + lower bound &lt;= input2.elementx.ts &lt;=input1.element1.ts + upper bound</code>的元素使用INNER JOIN语义，两两组合在一起。上下界可以是正数也可以是负数。</p>
<p>注意，目前Flink（1.9）的Interval Join只支持<code>Event Time</code>语义。</p>
<p><img data-src="/images/flink17.png" alt="join"></p>
<p>默认的时间间隔是包含上下界的，我们可以使用<code>.lowerBoundExclusive()</code> 和<code>.upperBoundExclusive</code>来确定是否需要包含上下界。</p>
<pre class="line-numbers language-java"><code class="language-java">val intervalJoinResult <span class="token operator">=</span> input1<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_1<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">intervalJoin</span><span class="token punctuation">(</span>input2<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_1<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>Time<span class="token punctuation">.</span><span class="token function">milliseconds</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Time<span class="token punctuation">.</span><span class="token function">milliseconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">upperBoundExclusive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">lowerBoundExclusive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyProcessFunction</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Interval Join内部是用缓存来存储所有数据的，因此需要注意缓存数据不能太大，以免对内存造成绝大压力。</p>
<h3 id="union"><a href="#union" class="headerlink" title="union"></a>union</h3><p>在<code>DataStream</code>上使用union算子可以合并多个同类型的数据流，并生成同类型的数据流，即可以将多个<code>DataStream[T]</code>合并为一个新的<code>DataStream[T]</code>。数据将按照先进先出（<code>First In First Out</code>）的模式合并，且<strong>不去重</strong>。下图<code>union</code>对白色和深色两个数据流进行合并，生成一个数据流。</p>
<p><img data-src="/images/flink18.png" alt="union"></p>
<h3 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h3><p><code>union</code>虽然可以合并多个数据流，但有一个限制，即多个数据流的数据类型必须相同。<code>connect</code>提供了和<code>union</code>类似的功能，用来连接两个数据流，它与<code>union</code>的区别在于：</p>
<ul>
<li><code>connect</code>只能连接<strong>两个数据流</strong>，<code>union</code>可以连接<strong>多个数据流</strong>。</li>
<li><code>connect</code>所连接的两个数据流的<strong>数据类型可以不一致</strong>，<code>union</code>所连接的两个数据流的<strong>数据类型必须一致</strong>。</li>
<li>两个<code>DataStream</code>经过<code>connect</code>之后被转化为<code>ConnectedStreams</code>，<code>ConnectedStreams</code>会对两个流的数据应用不同的处理方法，且双流之间可以<strong>共享状态</strong>。</li>
</ul>
<p><code>connect</code>经常被应用在对一个数据流使用另外一个流进行控制处理的场景上，如下图所示。控制流可以是阈值、规则、机器学习模型或其他参数。<br><img data-src="/images/flink19.png" alt="connect"></p>
<ul>
<li>对于ConnectedStreams，我们需要重写CoMapFunction或CoFlatMapFunction。这两个接口都提供了三个泛型，这三个泛型分别对应第一个输入流的数据类型、第二个输入流的数据类型和输出流的数据类型。</li>
<li>在重写函数时，对于CoMapFunction，map1处理第一个流的数据，map2处理第二个流的数据；对于CoFlatMapFunction，flatMap1处理第一个流的数据，flatMap2处理第二个流的数据。</li>
<li>Flink并不能保证两个函数调用顺序，两个函数的调用依赖于两个数据流数据的流入先后顺序，即第一个数据流有数据到达时，map1或flatMap1会被调用，第二个数据流有数据到达时，map2或flatMap2会被调用。</li>
<li>Flink允许我们将connect和keyBy或broadcast结合起来使用。</li>
</ul>
<h3 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h3><ul>
<li><a href="https://zhuanlan.zhihu.com/p/103342602">Flink时间系列：如何在两个DataStream上进行Join操作</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/99425612">Flink算子使用方法及实例演示：union和connect</a></li>
</ul>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>flink时间属性</title>
    <url>/flink-shi-jian-shu-xing/</url>
    <content><![CDATA[<h3 id="时间属性"><a href="#时间属性" class="headerlink" title="时间属性"></a>时间属性</h3><p>Flink支持三种与流数据处理相关的时间概念：<code>Processing Time</code>、<code>Event Time</code>和<code>Ingestion Time</code>。</p>
<p><img data-src="/images/flink27.png" alt="time"></p>
<p>Flink SQL仅支持其中的两种时间类型<code>Event Time</code>和<code>Processing Time</code>：</p>
<ul>
<li><code>Event Time</code>：您提供的事件时间（通常是数据的最原始的创建时间）.<code>Event Time</code>必须是您提供在数据储存里的数据。</li>
<li><code>Processing Time</code>：系统对事件进行处理的本地系统时间，单位为毫秒。</li>
</ul>
<h3 id="Event-Time"><a href="#Event-Time" class="headerlink" title="Event Time"></a>Event Time</h3><p><code>Event Time</code>也称为<code>Row Time</code>。EventTime时间属性必须在源表DDL中声明，可以将源表中的某一字段声明成Event Time。目前只支持将TIMESTAMP类型（将来会支持LONG类型）声明成Row Time字段。如果源表中需要声明为Event Time的列不是TIMESTAMP类型，需要借助<code>计算列</code>，基于现有列构造出一个TIMESTAMP类型的列。</p>
<p>由于数据本身的乱序、网络的抖动（网络堵塞导致的数据传输延迟的变化）或者其它原因，导致了数据到达的顺序和被处理的顺序，可能是不一致的（乱序）。因此定义一个Row Time字段，需要首先明文定义一个Watermark计算方法。</p>
<p>窗口函数基于Event Time聚合的示例如下:</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tt_stream <span class="token punctuation">(</span>
  <span class="token number">a</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">,</span>
  <span class="token number">b</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">,</span>
  ts <span class="token keyword">TIMESTAMP</span><span class="token punctuation">,</span>
  WATERMARK wk1 <span class="token keyword">FOR</span> ts <span class="token keyword">as</span> withOffset <span class="token punctuation">(</span>ts<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">--Watermark计算方法。</span>
<span class="token punctuation">)</span> <span class="token keyword">WITH</span> <span class="token punctuation">(</span>
  <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'sls'</span><span class="token punctuation">,</span>
  topic <span class="token operator">=</span> <span class="token string">'&lt;yourTopicName>'</span><span class="token punctuation">,</span>
  accessId <span class="token operator">=</span> <span class="token string">'&lt;yourAccessId>'</span><span class="token punctuation">,</span>
  accessKey <span class="token operator">=</span> <span class="token string">'&lt;yourAccessSecret>'</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>sql-client-default.yaml</code>中配置如下：</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">...</span>
<span class="token key atrule">format</span><span class="token punctuation">:</span> 
    <span class="token key atrule">property-version</span><span class="token punctuation">:</span> <span class="token number">1</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> json
    <span class="token comment" spellcheck="true"># derive-schema: true</span>
    <span class="token key atrule">schema</span><span class="token punctuation">:</span> <span class="token string">"ROW&lt;id INT, type STRING, price INT, ts LONG>"</span>
<span class="token key atrule">schema</span><span class="token punctuation">:</span> 
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> tss
    <span class="token key atrule">data-type</span><span class="token punctuation">:</span> TIMESTAMP
    <span class="token key atrule">rowtime</span><span class="token punctuation">:</span>
        <span class="token key atrule">timestamps</span><span class="token punctuation">:</span>
        <span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"from-field"</span>
        <span class="token key atrule">from</span><span class="token punctuation">:</span> <span class="token string">"ts"</span>
        <span class="token key atrule">watermarks</span><span class="token punctuation">:</span>
        <span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"periodic-bounded"</span>
        <span class="token key atrule">delay</span><span class="token punctuation">:</span> <span class="token string">"60000"</span>
<span class="token punctuation">...</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Processing-Time"><a href="#Processing-Time" class="headerlink" title="Processing Time"></a>Processing Time</h3><p><code>Processing Time</code>是系统产生的，不在您的原始数据中，您需要在数据源表的声明中明文定义一个<code>Processing Time</code>列。</p>
<pre class="line-numbers language-sql"><code class="language-sql">filedName <span class="token keyword">as</span> PROCTIME<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>窗口函数基于Processing Time聚合的示例如下。</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> mq_stream <span class="token punctuation">(</span>
    <span class="token number">a</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">,</span>
    <span class="token number">b</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">,</span>
    <span class="token number">c</span> <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>
    ts <span class="token keyword">AS</span> PROCTIME <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">--在数据源表的声明中明文定义一个Processing Time列。</span>
  <span class="token punctuation">)</span> <span class="token keyword">WITH</span> <span class="token punctuation">(</span>
    <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'mq'</span><span class="token punctuation">,</span>
    topic <span class="token operator">=</span> <span class="token string">'&lt;yourTopic>'</span><span class="token punctuation">,</span>
    accessId <span class="token operator">=</span> <span class="token string">'&lt;yourAccessId>'</span><span class="token punctuation">,</span>
    accessKey <span class="token operator">=</span> <span class="token string">'&lt;yourAccessSecret>'</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> id<span class="token punctuation">,</span>price<span class="token punctuation">,</span>tss<span class="token punctuation">,</span> PROCTIME<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> ts <span class="token keyword">from</span> book<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink</tag>
        <tag>time</tag>
      </tags>
  </entry>
  <entry>
    <title>flink常用算子及代码</title>
    <url>/flink-chang-yong-suan-zi-ji-dai-ma/</url>
    <content><![CDATA[<p>以下列举下常用的算子，用到的代码例子都是Flink监听9000端口做为数据源。以下方法可以启动一个9000的socket端口服务。</p>
<p>Linux平台上可以使用</p>
<pre class="line-numbers language-sh"><code class="language-sh">bash
nc -lk 9000
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>如果是 Windows 平台，可以通过 <code>https://nmap.org/ncat/</code> 安装 ncat 然后运行：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">bash</span>
ncat -lk 9000
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>map可以理解为映射，对每个元素进行一定的变换后，映射为另一个元素。</p>
<p>举例1：</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> operators<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//这个例子是监听9000 socket端口，对于发送来的数据，以\n为分隔符分割后进行处理，</span>
<span class="token comment" spellcheck="true">//将分割后的每个元素，添加上一个字符串后，打印出来。</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//1.获取执行环境配置信息</span>
        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//2.定义加载或创建数据源（source）,监听9000端口的socket消息</span>
        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> textStream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//3.map操作。</span>
        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> textStream<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".您输入的是："</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//4.打印输出sink</span>
        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//5.开始执行</span>
        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>举例2：</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>dataStreamMapOperator<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>UserAction<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>MapFunction<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStreamSource<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>SingleOutputStreamOperator<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Summary:
 *      Map: 一对一转换
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataStreamMapOperator</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>

        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 输入: 用户行为。某个用户在某个时刻点击或浏览了某个商品，以及商品的价格。</span>
        DataStreamSource<span class="token operator">&lt;</span>UserAction<span class="token operator">></span> source <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">fromCollection</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">,</span> <span class="token number">1293984000</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"productID1"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID2"</span><span class="token punctuation">,</span> <span class="token number">1293984001</span><span class="token punctuation">,</span> <span class="token string">"browse"</span><span class="token punctuation">,</span> <span class="token string">"productID2"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">,</span> <span class="token number">1293984002</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"productID1"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 转换: 商品的价格乘以8</span>
        SingleOutputStreamOperator<span class="token operator">&lt;</span>UserAction<span class="token operator">></span> result <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MapFunction</span><span class="token operator">&lt;</span>UserAction<span class="token punctuation">,</span> UserAction<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> UserAction <span class="token function">map</span><span class="token punctuation">(</span>UserAction value<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>

                <span class="token keyword">int</span> newPrice <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">getProductPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">getUserID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">getEventTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">getEventType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">getProductID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newPrice<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 输出: 输出到控制台</span>
        <span class="token comment" spellcheck="true">// UserAction(userID=userID1, eventTime=1293984002, eventType=click, productID=productID1, productPrice=80)</span>
        <span class="token comment" spellcheck="true">// UserAction(userID=userID1, eventTime=1293984000, eventType=click, productID=productID1, productPrice=80)</span>
        <span class="token comment" spellcheck="true">// UserAction(userID=userID2, eventTime=1293984001, eventType=browse, productID=productID2, productPrice=64)</span>
        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="flatmap"><a href="#flatmap" class="headerlink" title="flatmap"></a>flatmap</h3><p>flatmap可以理解为将元素摊平，每个元素可以变为0个、1个、或者多个元素。</p>
<p>举例1：</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> operators<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>typeinfo<span class="token punctuation">.</span>Types<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collector<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//这个例子是用Flink监听9000端口，将接受的字符串用\n分割为一个个的元素</span>
<span class="token comment" spellcheck="true">//然后将每个元素拆为一个个的字符，并打印出来</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlatMapDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> index1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> index2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//1.获取执行环境配置信息</span>
        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//2.定义加载或创建数据源（source）,监听9000端口的socket消息</span>
        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> textStream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//3.flatMap操作，对每一行字符串进行分割</span>
        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> textStream<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> Collector<span class="token operator">&lt;</span>String<span class="token operator">></span> collector<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>String str <span class="token operator">:</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                collector<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">//这个地方要注意，在flatMap这种参数里有泛型算子中。</span>
        <span class="token comment" spellcheck="true">//如果用lambda表达式，必须将参数的类型显式地定义出来。</span>
        <span class="token comment" spellcheck="true">//并且要有returns，指定返回的类型</span>
        <span class="token comment" spellcheck="true">//详情可以参考Flink官方文档：https://ci.apache.org/projects/flink/flink-docs-release-1.6/dev/java_lambdas.html</span>
        <span class="token punctuation">.</span><span class="token function">returns</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span>STRING<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//4.打印输出sink</span>
        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//5.开始执行</span>
        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>举例2：</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>dataStreamFlatMapOperator<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>FlatMapFunction<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStreamSource<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>SingleOutputStreamOperator<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collector<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Summary:
 *      FlatMap: 一行变任意行(0~多行)
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataStreamFlatMapOperator</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>
      StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment" spellcheck="true">// 输入: 英文电影台词</span>
      DataStreamSource<span class="token operator">&lt;</span>String<span class="token operator">></span> source <span class="token operator">=</span> env
              <span class="token punctuation">.</span><span class="token function">fromElements</span><span class="token punctuation">(</span>
                      <span class="token string">"You jump I jump"</span><span class="token punctuation">,</span>
                      <span class="token string">"Life was like a box of chocolates"</span>
              <span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment" spellcheck="true">// 转换: 将包含chocolates的句子转换为每行一个单词</span>
      SingleOutputStreamOperator<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlatMapFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token annotation punctuation">@Override</span>
          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">flatMap</span><span class="token punctuation">(</span>String value<span class="token punctuation">,</span> Collector<span class="token operator">&lt;</span>String<span class="token operator">></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
              <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"chocolates"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                  String<span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token keyword">for</span> <span class="token punctuation">(</span>String word <span class="token operator">:</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                      out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token punctuation">}</span>
              <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment" spellcheck="true">// 输出: 输出到控制台</span>
      <span class="token comment" spellcheck="true">// Life</span>
      <span class="token comment" spellcheck="true">// was</span>
      <span class="token comment" spellcheck="true">// like</span>
      <span class="token comment" spellcheck="true">// a</span>
      <span class="token comment" spellcheck="true">// box</span>
      <span class="token comment" spellcheck="true">// of</span>
      <span class="token comment" spellcheck="true">// chocolates</span>
      result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>filter是进行筛选。</p>
<p>举例：</p>
<pre><code>package operators;

import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;

public class FilterDemo {
    private static int index = 1;
    public static void main(String[] args) throws Exception {
        //1.获取执行环境配置信息
        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();
        //2.定义加载或创建数据源（source）,监听9000端口的socket消息
        DataStream&lt;String&gt; textStream = env.socketTextStream("localhost", 9000, "\n");
        //3.filter操作，筛选非空行。
        DataStream&lt;String&gt; result = textStream.filter(line-&gt;!line.trim().equals(""));
        //4.打印输出sink
        result.print();
        //5.开始执行
        env.execute();
    }
}
</code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>dataStreamFilterOperator<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>UserAction<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>FilterFunction<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStreamSource<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>SingleOutputStreamOperator<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Summary:
 *      Fliter: 过滤出需要的数据
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataStreamFilterOperator</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>

        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 输入: 用户行为。某个用户在某个时刻点击或浏览了某个商品，以及商品的价格。</span>
        DataStreamSource<span class="token operator">&lt;</span>UserAction<span class="token operator">></span> source <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">fromCollection</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">,</span> <span class="token number">1293984000</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"productID1"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID2"</span><span class="token punctuation">,</span> <span class="token number">1293984001</span><span class="token punctuation">,</span> <span class="token string">"browse"</span><span class="token punctuation">,</span> <span class="token string">"productID2"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">,</span> <span class="token number">1293984002</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"productID1"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 过滤: 过滤出用户ID为userID1的用户行为</span>
        SingleOutputStreamOperator<span class="token operator">&lt;</span>UserAction<span class="token operator">></span> result <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FilterFunction</span><span class="token operator">&lt;</span>UserAction<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">filter</span><span class="token punctuation">(</span>UserAction value<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
                <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">getUserID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 输出: 输出到控制台</span>
        <span class="token comment" spellcheck="true">// UserAction(userID=userID1, eventTime=1293984002, eventType=click, productID=productID1, productPrice=10)</span>
        <span class="token comment" spellcheck="true">// UserAction(userID=userID1, eventTime=1293984000, eventType=click, productID=productID1, productPrice=10)</span>
        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="keyBy"><a href="#keyBy" class="headerlink" title="keyBy"></a>keyBy</h3><p>KeyBy: 按指定的Key对数据重分区。将同一Key的数据放到同一个分区。</p>
<p>注意:</p>
<ul>
<li>分区结果和KeyBy下游算子的并行度强相关。如下游算子只有一个并行度,不管怎么分，都会分到一起。</li>
<li>对于POJO类型，KeyBy可以通过keyBy(fieldName)指定字段进行分区。</li>
<li>对于Tuple类型，KeyBy可以通过keyBy(fieldPosition)指定字段进行分区。</li>
<li>对于一般类型，如上, KeyBy可以通过keyBy(new KeySelector {…})指定字段进行分区。</li>
</ul>
<p>举例：</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> operators<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>typeinfo<span class="token punctuation">.</span>Types<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Tuple2<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Time<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//这个例子是每行输入一个单词，以单词为key进行计数</span>
<span class="token comment" spellcheck="true">//每10秒统计一次每个单词的个数</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KeyByDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//1.获取执行环境配置信息</span>
        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//2.定义加载或创建数据源（source）,监听9000端口的socket消息</span>
        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> textStream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//3.</span>
        DataStream<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">>></span> result <span class="token operator">=</span> textStream
                <span class="token comment" spellcheck="true">//map是将每一行单词变为一个tuple2</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line <span class="token operator">-</span><span class="token operator">></span> Tuple2<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment" spellcheck="true">//如果要用Lambda表示是，Tuple2是泛型，那就得用returns指定类型。</span>
                <span class="token punctuation">.</span><span class="token function">returns</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span><span class="token function">TUPLE</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span>STRING<span class="token punctuation">,</span> Types<span class="token punctuation">.</span>INT<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment" spellcheck="true">//keyBy进行分区，按照第一列，也就是按照单词进行分区</span>
                <span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token comment" spellcheck="true">//指定窗口，每10秒个计算一次</span>
                <span class="token punctuation">.</span><span class="token function">timeWindow</span><span class="token punctuation">(</span>Time<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment" spellcheck="true">//计算个数，计算第1列</span>
                <span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//4.打印输出sink</span>
        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//5.开始执行</span>
        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>dataStreamKeyByOperator<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>UserAction<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>KeySelector<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStreamSource<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>KeyedStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Summary:
 *      KeyBy: 按指定的Key对数据重分区。将同一Key的数据放到同一个分区。
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataStreamKeyByOperator</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>

        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        env<span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 输入: 用户行为。某个用户在某个时刻点击或浏览了某个商品，以及商品的价格。</span>
        DataStreamSource<span class="token operator">&lt;</span>UserAction<span class="token operator">></span> source <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">fromCollection</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">,</span> <span class="token number">1293984000</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"productID1"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID2"</span><span class="token punctuation">,</span> <span class="token number">1293984001</span><span class="token punctuation">,</span> <span class="token string">"browse"</span><span class="token punctuation">,</span> <span class="token string">"productID2"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">,</span> <span class="token number">1293984002</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"productID1"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 转换: 按指定的Key(这里,用户ID)对数据重分区，将相同Key(用户ID)的数据分到同一个分区</span>
        KeyedStream<span class="token operator">&lt;</span>UserAction<span class="token punctuation">,</span> String<span class="token operator">></span> result <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">KeySelector</span><span class="token operator">&lt;</span>UserAction<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> String <span class="token function">getKey</span><span class="token punctuation">(</span>UserAction value<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
                <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">getUserID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 输出: 输出到控制台</span>
        <span class="token comment" spellcheck="true">//3> UserAction(userID=userID1, eventTime=1293984000, eventType=click, productID=productID1, productPrice=10)</span>
        <span class="token comment" spellcheck="true">//3> UserAction(userID=userID1, eventTime=1293984002, eventType=click, productID=productID1, productPrice=10)</span>
        <span class="token comment" spellcheck="true">//2> UserAction(userID=userID2, eventTime=1293984001, eventType=browse, productID=productID2, productPrice=8)</span>
        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p>reduce是归并操作，它可以将KeyedStream 转变为 DataStream。</p>
<p>Reduce: 基于ReduceFunction进行滚动聚合，并向下游算子输出每次滚动聚合后的结果。<br>注意: Reduce会输出每一次滚动聚合的结果。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> operators<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>typeinfo<span class="token punctuation">.</span>Types<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Tuple2<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Time<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//这个例子是对流进行分组，分组后进归并操作。</span>
<span class="token comment" spellcheck="true">//是wordcount的另外一种实现方法</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReduceDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//1.获取执行环境配置信息</span>
        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//2.定义加载或创建数据源（source）,监听9000端口的socket消息</span>
        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> textStream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//3.</span>
        DataStream<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">>></span> result <span class="token operator">=</span> textStream
                <span class="token comment" spellcheck="true">//map是将每一行单词变为一个tuple2</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line <span class="token operator">-</span><span class="token operator">></span> Tuple2<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment" spellcheck="true">//如果要用Lambda表示是，Tuple2是泛型，那就得用returns指定类型。</span>
                <span class="token punctuation">.</span><span class="token function">returns</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span><span class="token function">TUPLE</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span>STRING<span class="token punctuation">,</span> Types<span class="token punctuation">.</span>INT<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment" spellcheck="true">//keyBy进行分区，按照第一列，也就是按照单词进行分区</span>
                <span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token comment" spellcheck="true">//指定窗口，每10秒个计算一次</span>
                <span class="token punctuation">.</span><span class="token function">timeWindow</span><span class="token punctuation">(</span>Time<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment" spellcheck="true">//对每一组内的元素进行归并操作，即第一个和第二个归并，结果再与第三个归并...</span>
                <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> t1<span class="token punctuation">,</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> t2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>f0<span class="token punctuation">,</span> t1<span class="token punctuation">.</span>f1 <span class="token operator">+</span> t2<span class="token punctuation">.</span>f1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//4.打印输出sink</span>
        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//5.开始执行</span>
        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>dataStreamReduceOperator<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>UserAction<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>ReduceFunction<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>KeySelector<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStreamSource<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>KeyedStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>SingleOutputStreamOperator<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Summary:
 *     Reduce: 基于ReduceFunction进行滚动聚合，并向下游算子输出每次滚动聚合后的结果。
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataStreamReduceOperator</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>

        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 输入: 用户行为。某个用户在某个时刻点击或浏览了某个商品，以及商品的价格。</span>
        DataStreamSource<span class="token operator">&lt;</span>UserAction<span class="token operator">></span> source <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">fromCollection</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">,</span> <span class="token number">1293984000</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"productID1"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID2"</span><span class="token punctuation">,</span> <span class="token number">1293984001</span><span class="token punctuation">,</span> <span class="token string">"browse"</span><span class="token punctuation">,</span> <span class="token string">"productID2"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID2"</span><span class="token punctuation">,</span> <span class="token number">1293984002</span><span class="token punctuation">,</span> <span class="token string">"browse"</span><span class="token punctuation">,</span> <span class="token string">"productID2"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID2"</span><span class="token punctuation">,</span> <span class="token number">1293984003</span><span class="token punctuation">,</span> <span class="token string">"browse"</span><span class="token punctuation">,</span> <span class="token string">"productID2"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">,</span> <span class="token number">1293984002</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"productID1"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">,</span> <span class="token number">1293984003</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"productID3"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">,</span> <span class="token number">1293984004</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"productID1"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 转换: KeyBy对数据重分区</span>
        KeyedStream<span class="token operator">&lt;</span>UserAction<span class="token punctuation">,</span> String<span class="token operator">></span> keyedStream <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">KeySelector</span><span class="token operator">&lt;</span>UserAction<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> String <span class="token function">getKey</span><span class="token punctuation">(</span>UserAction value<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
                <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">getUserID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 转换: Reduce滚动聚合。这里,滚动聚合每个用户对应的商品总价格。</span>
        SingleOutputStreamOperator<span class="token operator">&lt;</span>UserAction<span class="token operator">></span> result <span class="token operator">=</span> keyedStream<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReduceFunction</span><span class="token operator">&lt;</span>UserAction<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> UserAction <span class="token function">reduce</span><span class="token punctuation">(</span>UserAction value1<span class="token punctuation">,</span> UserAction value2<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
                <span class="token keyword">int</span> newProductPrice <span class="token operator">=</span> value1<span class="token punctuation">.</span><span class="token function">getProductPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> value2<span class="token punctuation">.</span><span class="token function">getProductPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span>value1<span class="token punctuation">.</span><span class="token function">getUserID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> newProductPrice<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 输出: 将每次滚动聚合后的结果输出到控制台。</span>
        <span class="token comment" spellcheck="true">//3> UserAction(userID=userID2, eventTime=1293984001, eventType=browse, productID=productID2, productPrice=8)</span>
        <span class="token comment" spellcheck="true">//3> UserAction(userID=userID2, eventTime=-1, eventType=, productID=, productPrice=16)</span>
        <span class="token comment" spellcheck="true">//3> UserAction(userID=userID2, eventTime=-1, eventType=, productID=, productPrice=24)</span>
        <span class="token comment" spellcheck="true">//4> UserAction(userID=userID1, eventTime=1293984000, eventType=click, productID=productID1, productPrice=10)</span>
        <span class="token comment" spellcheck="true">//4> UserAction(userID=userID1, eventTime=-1, eventType=, productID=, productPrice=20)</span>
        <span class="token comment" spellcheck="true">//4> UserAction(userID=userID1, eventTime=-1, eventType=, productID=, productPrice=30)</span>
        <span class="token comment" spellcheck="true">//4> UserAction(userID=userID1, eventTime=-1, eventType=, productID=, productPrice=40)</span>
        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="fold"><a href="#fold" class="headerlink" title="fold"></a>fold</h3><p>基于初始值和FoldFunction进行滚动折叠(Fold)，并向下游算子输出每次滚动折叠后的结果。<br>注意: Fold会输出每一次滚动折叠的结果。</p>
<p>举例1：</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> operators<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>typeinfo<span class="token punctuation">.</span>Types<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Tuple2<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Time<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FoldDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//1.获取执行环境配置信息</span>
        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//2.定义加载或创建数据源（source）,监听9000端口的socket消息</span>
        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> textStream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//3.</span>
        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> textStream
                <span class="token comment" spellcheck="true">//map是将每一行单词变为一个tuple2</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line <span class="token operator">-</span><span class="token operator">></span> Tuple2<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment" spellcheck="true">//如果要用Lambda表示是，Tuple2是泛型，那就得用returns指定类型。</span>
                <span class="token punctuation">.</span><span class="token function">returns</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span><span class="token function">TUPLE</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span>STRING<span class="token punctuation">,</span> Types<span class="token punctuation">.</span>INT<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment" spellcheck="true">//keyBy进行分区，按照第一列，也就是按照单词进行分区</span>
                <span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token comment" spellcheck="true">//指定窗口，每10秒个计算一次</span>
                <span class="token punctuation">.</span><span class="token function">timeWindow</span><span class="token punctuation">(</span>Time<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment" spellcheck="true">//指定一个开始的值，对每一组内的元素进行归并操作，即第一个和第二个归并，结果再与第三个归并...</span>
                <span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span><span class="token string">"结果："</span><span class="token punctuation">,</span><span class="token punctuation">(</span>String current<span class="token punctuation">,</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> t2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> current<span class="token operator">+</span>t2<span class="token punctuation">.</span>f0<span class="token operator">+</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//4.打印输出sink</span>
        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//5.开始执行</span>
        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>dataStreamFoldOperator<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>UserAction<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>FoldFunction<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>KeySelector<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStreamSource<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>KeyedStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>SingleOutputStreamOperator<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Summary:
 *      Fold: 基于初始值和自定义的FoldFunction滚动折叠后发出新值
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataStreamFoldOperator</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>

        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 输入: 用户行为。某个用户在某个时刻点击或浏览了某个商品，以及商品的价格。</span>
        DataStreamSource<span class="token operator">&lt;</span>UserAction<span class="token operator">></span> source <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">fromCollection</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">,</span> <span class="token number">1293984000</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"productID1"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID2"</span><span class="token punctuation">,</span> <span class="token number">1293984001</span><span class="token punctuation">,</span> <span class="token string">"browse"</span><span class="token punctuation">,</span> <span class="token string">"productID2"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID2"</span><span class="token punctuation">,</span> <span class="token number">1293984002</span><span class="token punctuation">,</span> <span class="token string">"browse"</span><span class="token punctuation">,</span> <span class="token string">"productID2"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID2"</span><span class="token punctuation">,</span> <span class="token number">1293984003</span><span class="token punctuation">,</span> <span class="token string">"browse"</span><span class="token punctuation">,</span> <span class="token string">"productID2"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">,</span> <span class="token number">1293984002</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"productID1"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">,</span> <span class="token number">1293984003</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"productID3"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">,</span> <span class="token number">1293984004</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"productID1"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 转换: KeyBy对数据重分区</span>
        KeyedStream<span class="token operator">&lt;</span>UserAction<span class="token punctuation">,</span> String<span class="token operator">></span> keyedStream <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">KeySelector</span><span class="token operator">&lt;</span>UserAction<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> String <span class="token function">getKey</span><span class="token punctuation">(</span>UserAction value<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
                <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">getUserID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 转换: Fold 基于初始值和FoldFunction滚动折叠</span>
        SingleOutputStreamOperator<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> keyedStream<span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span><span class="token string">"浏览的商品及价格:"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FoldFunction</span><span class="token operator">&lt;</span>UserAction<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> String <span class="token function">fold</span><span class="token punctuation">(</span>String accumulator<span class="token punctuation">,</span> UserAction value<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"userID"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">return</span> accumulator <span class="token operator">+</span> <span class="token string">" -> "</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">getProductID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>value<span class="token punctuation">.</span><span class="token function">getProductPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">getUserID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span> <span class="token operator">+</span>accumulator <span class="token operator">+</span> <span class="token string">" -> "</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">getProductID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>value<span class="token punctuation">.</span><span class="token function">getProductPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 输出: 输出到控制台</span>
        <span class="token comment" spellcheck="true">// 每一条数据都会触发计算并输出</span>
        <span class="token comment" spellcheck="true">// userID1 浏览的商品及价格: -> productID1:10</span>
        <span class="token comment" spellcheck="true">// userID1 浏览的商品及价格: -> productID1:10 -> productID1:10</span>
        <span class="token comment" spellcheck="true">// userID1 浏览的商品及价格: -> productID1:10 -> productID1:10 -> productID3:10</span>
        <span class="token comment" spellcheck="true">// userID1 浏览的商品及价格: -> productID1:10 -> productID1:10 -> productID3:10 -> productID1:10</span>
        <span class="token comment" spellcheck="true">// userID2 浏览的商品及价格: -> productID2:8</span>
        <span class="token comment" spellcheck="true">// userID2 浏览的商品及价格: -> productID2:8 -> productID2:8</span>
        <span class="token comment" spellcheck="true">// userID2 浏览的商品及价格: -> productID2:8 -> productID2:8 -> productID2:8</span>
        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Aggregate"><a href="#Aggregate" class="headerlink" title="Aggregate"></a>Aggregate</h3><p>Aggregate 对KeyedStream按指定字段滚动聚合并输出每一次滚动聚合后的结果。默认的聚合函数有:sum、min、minBy、max、mabBy。</p>
<p>注意:</p>
<ul>
<li>max(field)与maxBy(field)的区别: maxBy返回field最大的那条数据;而max则是将最大的field的值赋值给第一条数据并返回第一条数据。同理,min与minBy。</li>
<li>Aggregate聚合算子会滚动输出每一次聚合后的结果。</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>dataStreamAggregateOperator<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>UserActionLogPOJO<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>KeySelector<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStreamSource<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>KeyedStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Summary:
 *     Aggregate: min()、minBy()、max()、maxBy() 滚动聚合并输出每次滚动聚合后的结果
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataStreamAggregateOperator</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>

        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 输入: 用户行为。某个用户在某个时刻点击或浏览了某个商品，以及商品的价格。</span>
        ArrayList<span class="token operator">&lt;</span>UserActionLogPOJO<span class="token operator">></span> userActionLogs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        UserActionLogPOJO userActionLog1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserActionLogPOJO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userActionLog1<span class="token punctuation">.</span><span class="token function">setUserID</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userActionLog1<span class="token punctuation">.</span><span class="token function">setProductID</span><span class="token punctuation">(</span><span class="token string">"productID3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userActionLog1<span class="token punctuation">.</span><span class="token function">setProductPrice</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userActionLogs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userActionLog1<span class="token punctuation">)</span><span class="token punctuation">;</span>

        UserActionLogPOJO userActionLog2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserActionLogPOJO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userActionLog2<span class="token punctuation">.</span><span class="token function">setUserID</span><span class="token punctuation">(</span><span class="token string">"userID2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userActionLog2<span class="token punctuation">.</span><span class="token function">setProductPrice</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userActionLogs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userActionLog2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        UserActionLogPOJO userActionLog3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserActionLogPOJO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userActionLog3<span class="token punctuation">.</span><span class="token function">setUserID</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userActionLog3<span class="token punctuation">.</span><span class="token function">setProductID</span><span class="token punctuation">(</span><span class="token string">"productID5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userActionLog3<span class="token punctuation">.</span><span class="token function">setProductPrice</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userActionLogs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userActionLog3<span class="token punctuation">)</span><span class="token punctuation">;</span>

        DataStreamSource<span class="token operator">&lt;</span>UserActionLogPOJO<span class="token operator">></span> source <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">fromCollection</span><span class="token punctuation">(</span>userActionLogs<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 转换: KeyBy对数据重分区</span>
        <span class="token comment" spellcheck="true">// 这里, UserActionLog是POJO类型,也可通过keyBy("userID")进行分区</span>
        KeyedStream<span class="token operator">&lt;</span>UserActionLogPOJO<span class="token punctuation">,</span> String<span class="token operator">></span> keyedStream <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">KeySelector</span><span class="token operator">&lt;</span>UserActionLogPOJO<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> String <span class="token function">getKey</span><span class="token punctuation">(</span>UserActionLogPOJO value<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
                <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">getUserID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 转换: Aggregate并输出</span>
        <span class="token comment" spellcheck="true">// 滚动求和并输出</span>
        <span class="token comment" spellcheck="true">//keyedStream.sum("productPrice").print();</span>
        <span class="token comment" spellcheck="true">// 滚动求最大值并输出</span>
        keyedStream<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token string">"productPrice"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 滚动求最大值并输出</span>
        keyedStream<span class="token punctuation">.</span><span class="token function">maxBy</span><span class="token punctuation">(</span><span class="token string">"productPrice"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 滚动求最小值并输出</span>
        <span class="token comment" spellcheck="true">//keyedStream.min("productPrice").print();</span>
        <span class="token comment" spellcheck="true">// 滚动求最小值并输出</span>
        <span class="token comment" spellcheck="true">//keyedStream.minBy("productPrice").print();</span>

        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="union"><a href="#union" class="headerlink" title="union"></a>union</h3><p>union可以将多个流合并到一个流中，以便对合并的流进行统一处理。是对多个流的水平拼接。</p>
<p>参与合并的流必须是同一种类型。</p>
<p>举例：</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> operators<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//这个例子是将三个socket端口发送来的数据合并到一个流中</span>
<span class="token comment" spellcheck="true">//可以对这三个流发送来的数据，集中处理。</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnionDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//1.获取执行环境配置信息</span>
        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//2.定义加载或创建数据源（source）,监听9000端口的socket消息</span>
        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> textStream9000 <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> textStream9001 <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9001</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> textStream9002 <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9002</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> mapStream9000<span class="token operator">=</span>textStream9000<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span><span class="token string">"来自9000端口："</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> mapStream9001<span class="token operator">=</span>textStream9001<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span><span class="token string">"来自9001端口："</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> mapStream9002<span class="token operator">=</span>textStream9002<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span><span class="token string">"来自9002端口："</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//3.union用来合并两个或者多个流的数据，统一到一个流中</span>
        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span>  mapStream9000<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>mapStream9001<span class="token punctuation">,</span>mapStream9002<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//4.打印输出sink</span>
        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//5.开始执行</span>
        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>根据指定的Key将两个流进行关联。</p>
<p>举例：</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> operators<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>MapFunction<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Tuple2<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>assigners<span class="token punctuation">.</span>TumblingProcessingTimeWindows<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Time<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowJoinDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//1.获取执行环境配置信息</span>
        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//2.定义加载或创建数据源（source）,监听9000端口的socket消息</span>
        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> textStream9000 <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> textStream9001 <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9001</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//将输入处理一下，变为tuple2</span>
        DataStream<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">>></span> mapStream9000<span class="token operator">=</span>textStream9000
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MapFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">map</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> Tuple2<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">"来自9000端口："</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        DataStream<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">>></span> mapStream9001<span class="token operator">=</span>textStream9001
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MapFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">map</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> Tuple2<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">"来自9001端口："</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//3.两个流进行join操作，是inner join，关联上的才能保留下来</span>
        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span>  mapStream9000<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>mapStream9001<span class="token punctuation">)</span>
                <span class="token comment" spellcheck="true">//关联条件，以第0列关联（两个source输入的字符串）</span>
                <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>t1<span class="token operator">-</span><span class="token operator">></span>t1<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equalTo</span><span class="token punctuation">(</span>t2<span class="token operator">-</span><span class="token operator">></span>t2<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment" spellcheck="true">//以处理时间，每10秒一个滚动窗口</span>
                <span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span>TumblingProcessingTimeWindows<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>Time<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment" spellcheck="true">//关联后输出</span>
                <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span>t2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>t1<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"|"</span><span class="token operator">+</span>t2<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//4.打印输出sink</span>
        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//5.开始执行</span>
        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="coGroup"><a href="#coGroup" class="headerlink" title="coGroup"></a>coGroup</h3><p>关联两个流，关联不上的也保留下来。</p>
<p>举例：</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> operators<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>CoGroupFunction<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>MapFunction<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Tuple2<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>assigners<span class="token punctuation">.</span>TumblingProcessingTimeWindows<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Time<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collector<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoGroupDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//1.获取执行环境配置信息</span>
        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//2.定义加载或创建数据源（source）,监听9000端口的socket消息</span>
        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> textStream9000 <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> textStream9001 <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9001</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//将输入处理一下，变为tuple2</span>
        DataStream<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> mapStream9000 <span class="token operator">=</span> textStream9000
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MapFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">map</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> Tuple2<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"来自9000端口："</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        DataStream<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> mapStream9001 <span class="token operator">=</span> textStream9001
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MapFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">map</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> Tuple2<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"来自9001端口："</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//3.两个流进行coGroup操作,没有关联上的也保留下来，功能更强大</span>
        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> mapStream9000<span class="token punctuation">.</span><span class="token function">coGroup</span><span class="token punctuation">(</span>mapStream9001<span class="token punctuation">)</span>
                <span class="token comment" spellcheck="true">//关联条件，以第0列关联（两个source输入的字符串）</span>
                <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>t1 <span class="token operator">-</span><span class="token operator">></span> t1<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equalTo</span><span class="token punctuation">(</span>t2 <span class="token operator">-</span><span class="token operator">></span> t2<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment" spellcheck="true">//以处理时间，每10秒一个滚动窗口</span>
                <span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span>TumblingProcessingTimeWindows<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>Time<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment" spellcheck="true">//关联后输出</span>
                <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CoGroupFunction</span><span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">,</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">coGroup</span><span class="token punctuation">(</span>Iterable<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> iterable<span class="token punctuation">,</span> Iterable<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> iterable1<span class="token punctuation">,</span> Collector<span class="token operator">&lt;</span>String<span class="token operator">></span> collector<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
                        StringBuffer stringBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"来自9000的stream:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">for</span> <span class="token punctuation">(</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> item <span class="token operator">:</span> iterable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>f1 <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"来自9001的stream:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">for</span> <span class="token punctuation">(</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> item <span class="token operator">:</span> iterable1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>f1 <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        collector<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//4.打印输出sink</span>
        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//5.开始执行</span>
        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h3><p>参考：<a href="https://www.jianshu.com/p/5b0574d466f8">https://www.jianshu.com/p/5b0574d466f8</a></p>
<p>将两个流纵向地连接起来。DataStream的connect操作创建的是ConnectedStreams或BroadcastConnectedStream，它用了两个泛型，即不要求两个dataStream的element是同一类型。</p>
<p>举例：</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> operators<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Tuple2<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>SingleOutputStreamOperator<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>co<span class="token punctuation">.</span>CoMapFunction<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Matcher<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Pattern<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConnectDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//1.获取执行环境配置信息</span>
        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//2.定义加载或创建数据源（source）,监听9000端口的socket消息</span>
        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> textStream9000 <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> textStream9001 <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9001</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//转为Integer类型流</span>
        DataStream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> intStream <span class="token operator">=</span> textStream9000<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> <span class="token function">isNumeric</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//连接起来，分别处理，返回同样的一种类型。</span>
        SingleOutputStreamOperator result <span class="token operator">=</span> intStream<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>textStream9001<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CoMapFunction</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Tuple2<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">map1</span><span class="token punctuation">(</span>Integer value<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> Tuple2<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">map2</span><span class="token punctuation">(</span>String value<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> Tuple2<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//4.打印输出sink</span>
        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//5.开始执行</span>
        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isNumeric</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Pattern pattern <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"[0-9]*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Matcher isNum <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isNum<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><p>参考：<a href="https://cloud.tencent.com/developer/article/1382892">https://cloud.tencent.com/developer/article/1382892</a></p>
<p>将一个流拆分为多个流。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> operators<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>typeinfo<span class="token punctuation">.</span>Types<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Tuple2<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>SplitStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Matcher<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Pattern<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SplitDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//1.获取执行环境配置信息</span>
        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//2.定义加载或创建数据源（source）,监听9000端口的socket消息</span>
        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> textStream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//3.</span>
        SplitStream<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">>></span> result <span class="token operator">=</span> textStream
                <span class="token comment" spellcheck="true">//map是将每一行单词变为一个tuple2</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line <span class="token operator">-</span><span class="token operator">></span> Tuple2<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment" spellcheck="true">//如果要用Lambda表示是，Tuple2是泛型，那就得用returns指定类型。</span>
                <span class="token punctuation">.</span><span class="token function">returns</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span><span class="token function">TUPLE</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span>STRING<span class="token punctuation">,</span> Types<span class="token punctuation">.</span>INT<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>t <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
                    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">//根据逻辑拆分，并定义outputName</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNumeric</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>f0<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"str"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">return</span> list<span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//选择指定名称的流</span>
        DataStream<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">>></span> strSplitStream <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"str"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>t <span class="token operator">-</span><span class="token operator">></span> Tuple2<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"字符串："</span> <span class="token operator">+</span> t<span class="token punctuation">.</span>f0<span class="token punctuation">,</span> t<span class="token punctuation">.</span>f1<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">returns</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span><span class="token function">TUPLE</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span>STRING<span class="token punctuation">,</span>Types<span class="token punctuation">.</span>INT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//选择指定名称的流</span>
        DataStream<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">>></span> intSplitStream <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>t <span class="token operator">-</span><span class="token operator">></span> Tuple2<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"数字："</span> <span class="token operator">+</span> t<span class="token punctuation">.</span>f0<span class="token punctuation">,</span> t<span class="token punctuation">.</span>f1<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">returns</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span><span class="token function">TUPLE</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span>STRING<span class="token punctuation">,</span>Types<span class="token punctuation">.</span>INT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//4.打印输出sink</span>
        strSplitStream<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        intSplitStream<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//5.开始执行</span>
        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isNumeric</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Pattern pattern <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"[0-9]*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Matcher isNum <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isNum<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h3><ul>
<li><a href="https://blog.csdn.net/chybin500/article/details/87260869">原文链接1</a></li>
<li><a href="https://blog.csdn.net/wangpei1949/article/details/101625394">原文链接2</a></li>
</ul>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>flink结合kafka实时处理分析案例</title>
    <url>/flink-jie-he-kafka-shi-shi-chu-li-fen-xi-an-li/</url>
    <content><![CDATA[<h3 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h3><p>本案例主要结合kafka，实现：</p>
<ul>
<li>通过flink，向kafka中写入模拟数据book贩卖信息，包括书籍id、类型、价格、时间戳；</li>
<li>flink任务每五秒输出最近五分钟，根据id，不同书籍卖出的总价。</li>
</ul>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="BookPojo-java"><a href="#BookPojo-java" class="headerlink" title="BookPojo.java"></a>BookPojo.java</h4><p>书籍book基本类</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>deri<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>util<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @ClassName: BookPojo
 * @Description: TODO
 * @Author: wuzhiyong
 * @Time: 2020/3/20 9:48
 * @Version: v1.0
 **/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookPojo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String type<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> price<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> timestamp<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">BookPojo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> type<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setType</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> price<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">int</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> timestamp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTimestamp</span><span class="token punctuation">(</span><span class="token keyword">long</span> timestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>timestamp <span class="token operator">=</span> timestamp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="Books-java"><a href="#Books-java" class="headerlink" title="Books.java"></a>Books.java</h4><p>创建模拟数据，6本书，随机返回一本书。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>deri<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>util<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @ClassName: Books
 * @Description: TODO
 * @Author: wuzhiyong
 * @Time: 2020/3/20 10:52
 * @Version: v1.0
 **/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Books</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> BookPojo <span class="token function">getBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>BookPojo<span class="token operator">></span> bookPojos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">{</span>
            BookPojo book1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookPojo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"cs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            bookPojos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">{</span>
            BookPojo book1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookPojo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"math"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            bookPojos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">{</span>
            BookPojo book1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookPojo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"ph"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            bookPojos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">{</span>
            BookPojo book1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookPojo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"cs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            bookPojos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">{</span>
            BookPojo book1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookPojo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"math"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            bookPojos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token punctuation">{</span>
            BookPojo book1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookPojo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"ph"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book1<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            bookPojos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> bookPojos<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="MyPojoSource-java"><a href="#MyPojoSource-java" class="headerlink" title="MyPojoSource.java"></a>MyPojoSource.java</h4><p>flink数据源，随机返回一本书并设置当时时间戳当作流水，并随机暂停几秒钟。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>deri<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>util<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>source<span class="token punctuation">.</span>SourceFunction<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @ClassName: MyNoParalleSource
 * @Description: TODO
 * @Author: wuzhiyong
 * @Time: 2020/3/4 10:15
 * @Version: v1.0
 **/</span>
<span class="token comment" spellcheck="true">//使用并行度为1的source</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPojoSource</span> <span class="token keyword">implements</span> <span class="token class-name">SourceFunction</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//1</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isRunning <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>SourceContext<span class="token operator">&lt;</span>String<span class="token operator">></span> ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>isRunning<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            BookPojo book <span class="token operator">=</span> Books<span class="token punctuation">.</span><span class="token function">getBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book<span class="token punctuation">.</span><span class="token function">setTimestamp</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ctx<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        isRunning <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="KafkaPojoProducer-java"><a href="#KafkaPojoProducer-java" class="headerlink" title="KafkaPojoProducer.java"></a>KafkaPojoProducer.java</h4><p>flink将书籍贩卖流水转成json字符串，输入到kafka中。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>deri<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>deri<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>util<span class="token punctuation">.</span>MyPojoSource<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>SimpleStringSchema<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStreamSource<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>connectors<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>FlinkKafkaProducer<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @ClassName: KafkaProducer
 * @Description: TODO
 * @Author: wuzhiyong
 * @Time: 2020/3/4 10:16
 * @Version: v1.0
 **/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaPojoProducer</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>

        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        DataStreamSource<span class="token operator">&lt;</span>String<span class="token operator">></span> text <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">addSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyPojoSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*设置并行度*/</span><span class="token punctuation">;</span>

        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"bootstrap.servers"</span><span class="token punctuation">,</span> <span class="token string">"192.168.41.128:9092"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//new FlinkKafkaProducer("topn",new KeyedSerializationSchemaWrapper(new SimpleStringSchema()),properties,FlinkKafkaProducer.Semantic.EXACTLY_ONCE);</span>
        FlinkKafkaProducer<span class="token operator">&lt;</span>String<span class="token operator">></span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlinkKafkaProducer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"pojosource"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SimpleStringSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/*
        //event-timestamp事件的发生时间
        producer.setWriteTimestampToKafka(true);
*/</span>
        text<span class="token punctuation">.</span><span class="token function">addSink</span><span class="token punctuation">(</span>producer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"POJO Kafka Source"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="KafkaPojoStream-java"><a href="#KafkaPojoStream-java" class="headerlink" title="KafkaPojoStream.java"></a>KafkaPojoStream.java</h4><p>从上面pojosource主题中，获取书籍贩卖流水，每10秒打印出过去5分钟每种书贩卖的总价。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>deri<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>deri<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>util<span class="token punctuation">.</span>BookPojo<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>FlatMapFunction<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>ReduceFunction<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>SimpleStringSchema<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>typeinfo<span class="token punctuation">.</span>Types<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Tuple2<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>typeutils<span class="token punctuation">.</span>TupleTypeInfo<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>TimeCharacteristic<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>timestamps<span class="token punctuation">.</span>AscendingTimestampExtractor<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Time<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>connectors<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>FlinkKafkaConsumer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>connectors<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>FlinkKafkaProducer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collector<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @ClassName: KafkaWordCount
 * @Description: 从kafka主题中读取数据，进行word count
 * @Author: wuzhiyong
 * @Time: 2020/3/18 15:05
 * @Version: v1.0
 **/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaPojoStream</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 创建Flink执行环境</span>
        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"bootstrap.servers"</span><span class="token punctuation">,</span> <span class="token string">"192.168.41.128:9092"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"group.id"</span><span class="token punctuation">,</span> <span class="token string">"flink-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String inputTopic <span class="token operator">=</span> <span class="token string">"pojosource"</span><span class="token punctuation">;</span>
        String outputTopic <span class="token operator">=</span> <span class="token string">"pojosink"</span><span class="token punctuation">;</span>

        FlinkKafkaConsumer<span class="token operator">&lt;</span>String<span class="token operator">></span> consumer <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token class-name">FlinkKafkaConsumer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>inputTopic<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SimpleStringSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
        FlinkKafkaProducer<span class="token operator">&lt;</span>String<span class="token operator">></span> producer <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token class-name">FlinkKafkaProducer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>outputTopic<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SimpleStringSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//设置EventTime，结合assignTimestampsAndWatermarks一起使用</span>
        env<span class="token punctuation">.</span><span class="token function">setStreamTimeCharacteristic</span><span class="token punctuation">(</span>TimeCharacteristic<span class="token punctuation">.</span>EventTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">addSource</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>

        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> bookPojoDataStream <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> BookPojo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">assignTimestampsAndWatermarks</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AscendingTimestampExtractor</span><span class="token operator">&lt;</span>BookPojo<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">extractAscendingTimestamp</span><span class="token punctuation">(</span>BookPojo bookPojo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> bookPojo<span class="token punctuation">.</span><span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//                .filter(bookPojo -> bookPojo.getType().equalsIgnoreCase("cs"))</span>
                <span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//                .timeWindow(Time.seconds(10))</span>
                <span class="token comment" spellcheck="true">//设置一个5分钟滑动窗口，每10秒滑动一次</span>
                <span class="token punctuation">.</span><span class="token function">timeWindow</span><span class="token punctuation">(</span>Time<span class="token punctuation">.</span><span class="token function">minutes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Time<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment" spellcheck="true">//这边使用更加通用的reduce处理，累加书籍贩卖总流水</span>
                <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReduceFunction</span><span class="token operator">&lt;</span>BookPojo<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">public</span> BookPojo <span class="token function">reduce</span><span class="token punctuation">(</span>BookPojo bookPojo<span class="token punctuation">,</span> BookPojo t1<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
                        BookPojo book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookPojo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        book<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>bookPojo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        book<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>bookPojo<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> t1<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        book<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        book<span class="token punctuation">.</span><span class="token function">setTimestamp</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span><span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">return</span> book<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//        bookPojoDataStream.addSink(producer);</span>
        bookPojoDataStream<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// execute</span>
        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"kafka streaming pojo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Tokenizer</span> <span class="token keyword">implements</span> <span class="token class-name">FlatMapFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">>></span> <span class="token punctuation">{</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">flatMap</span><span class="token punctuation">(</span>String value<span class="token punctuation">,</span> Collector<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">>></span> out<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            String<span class="token punctuation">[</span><span class="token punctuation">]</span> tokens <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\W+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>String token <span class="token operator">:</span> tokens<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.deri<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flink_kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Flink Quickstart Job<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://www.myorganization.org<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>flink.version</span><span class="token punctuation">></span></span>1.10.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>flink.version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scala.binary.version</span><span class="token punctuation">></span></span>2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scala.binary.version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>${java.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>${java.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>apache.snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Apache Development Snapshot Repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://repository.apache.org/content/repositories/snapshots/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flink-connector-kafka_${scala.binary.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${flink.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- Apache Flink dependencies --></span>
        <span class="token comment" spellcheck="true">&lt;!-- These dependencies are provided, because they should not be packaged into the JAR file. --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flink-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${flink.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flink-streaming-java_${scala.binary.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${flink.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.54<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- Add connector dependencies here. They must be in the default scope (compile). --></span>

        <span class="token comment" spellcheck="true">&lt;!-- Example:

        &lt;dependency>
            &lt;groupId>org.apache.flink&lt;/groupId>
            &lt;artifactId>flink-connector-kafka-0.10_${scala.binary.version}&lt;/artifactId>
            &lt;version>${flink.version}&lt;/version>
        &lt;/dependency>
        --></span>

        <span class="token comment" spellcheck="true">&lt;!-- Add logging framework, to produce console output when running in the IDE. --></span>
        <span class="token comment" spellcheck="true">&lt;!-- These dependencies are excluded from the application JAR by default. --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>

            <span class="token comment" spellcheck="true">&lt;!-- Java Compiler --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>${java.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>${java.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>

            <span class="token comment" spellcheck="true">&lt;!-- We use the maven-shade plugin to create a fat jar that contains all necessary dependencies. --></span>
            <span class="token comment" spellcheck="true">&lt;!-- Change the value of &lt;mainClass>...&lt;/mainClass> if your program entry point changes. --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-shade-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>
                    <span class="token comment" spellcheck="true">&lt;!-- Run shade goal on package phase --></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>shade<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactSet</span><span class="token punctuation">></span></span>
                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">></span></span>
                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>org.apache.flink:force-shading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>
                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>com.google.code.findbugs:jsr305<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>
                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>org.slf4j:*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>
                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>log4j:*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>
                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactSet</span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filters</span><span class="token punctuation">></span></span>
                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>
                                    <span class="token comment" spellcheck="true">&lt;!-- Do not copy the signatures in the META-INF folder.
                                    Otherwise, this might cause SecurityExceptions when using the JAR. --></span>
                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifact</span><span class="token punctuation">></span></span>*:*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifact</span><span class="token punctuation">></span></span>
                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">></span></span>
                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>META-INF/*.SF<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>
                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>META-INF/*.DSA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>
                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>META-INF/*.RSA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>
                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">></span></span>
                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filters</span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformers</span><span class="token punctuation">></span></span>
                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformer</span> <span class="token attr-name">implementation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.maven.plugins.shade.resource.ManifestResourceTransformer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">></span></span>com.deri.kafka.KafkaProducer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">></span></span>
                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transformer</span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transformers</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginManagement</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>

                <span class="token comment" spellcheck="true">&lt;!-- This improves the out-of-the-box experience in Eclipse by resolving some warnings. --></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.eclipse.m2e<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lifecycle-mapping<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lifecycleMappingMetadata</span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginExecutions</span><span class="token punctuation">></span></span>
                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginExecution</span><span class="token punctuation">></span></span>
                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginExecutionFilter</span><span class="token punctuation">></span></span>
                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-shade-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>versionRange</span><span class="token punctuation">></span></span>[3.1.1,)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>versionRange</span><span class="token punctuation">></span></span>
                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>
                                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>shade<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>
                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>
                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginExecutionFilter</span><span class="token punctuation">></span></span>
                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span><span class="token punctuation">></span></span>
                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ignore</span><span class="token punctuation">/></span></span>
                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span>
                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginExecution</span><span class="token punctuation">></span></span>
                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginExecution</span><span class="token punctuation">></span></span>
                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginExecutionFilter</span><span class="token punctuation">></span></span>
                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>versionRange</span><span class="token punctuation">></span></span>[3.1,)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>versionRange</span><span class="token punctuation">></span></span>
                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>
                                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>testCompile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>
                                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>
                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>
                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginExecutionFilter</span><span class="token punctuation">></span></span>
                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span><span class="token punctuation">></span></span>
                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ignore</span><span class="token punctuation">/></span></span>
                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span>
                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginExecution</span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginExecutions</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lifecycleMappingMetadata</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginManagement</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink</tag>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>flink视频教程学习笔记</title>
    <url>/flink-shi-pin-jiao-cheng-xue-xi-bi-ji/</url>
    <content><![CDATA[<h1 id="视频地址"><a href="#视频地址" class="headerlink" title="视频地址"></a>视频地址</h1><p><a href="https://ververica.cn/developers/flink-training-course1/">视频地址</a></p>
<h2 id="基础定义"><a href="#基础定义" class="headerlink" title="基础定义"></a>基础定义</h2><h3 id="有界-x2F-无界数据流"><a href="#有界-x2F-无界数据流" class="headerlink" title="有界/无界数据流"></a>有界/无界数据流</h3><h3 id="有状态计算"><a href="#有状态计算" class="headerlink" title="有状态计算"></a>有状态计算</h3><blockquote>
<p>例如：过去一段时间的点击量<br><strong>状态可持久化</strong></p>
</blockquote>
<h3 id="时间官网"><a href="#时间官网" class="headerlink" title="时间官网"></a>时间<a href="https://flink.apache.org/zh/flink-applications.html">官网</a></h3><ul>
<li>事件发生时间</li>
<li>事件进入flink时间</li>
<li>flink处理事件时间</li>
</ul>
<h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>3层API</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul>
<li>Data Pipeline</li>
<li>Data Analytics</li>
<li>Data Driven</li>
</ul>
<h1 id="flink-maven构建项目命令"><a href="#flink-maven构建项目命令" class="headerlink" title="flink - maven构建项目命令"></a>flink - maven构建项目命令</h1><pre><code>mvn archetype:generate -DarchetypeGroupId=org.apache.flink -DarchetypeArtifactId=flink-quickstart-java -DarchetypeVersion=1.10.0
</code></pre>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>flink部署【使用k8s部署】</title>
    <url>/flink-bu-shu-shi-yong-k8s-bu-shu/</url>
    <content><![CDATA[<h3 id="准备k8s环境"><a href="#准备k8s环境" class="headerlink" title="准备k8s环境"></a>准备k8s环境</h3><h3 id="准备相关YAML"><a href="#准备相关YAML" class="headerlink" title="准备相关YAML"></a>准备相关YAML</h3><ul>
<li><code>flink-configuration-configmap.yaml</code></li>
</ul>
<pre class="line-numbers language-yml"><code class="language-yml">apiVersion: v1
kind: ConfigMap
metadata:
  name: flink-config
  labels:
    app: flink
data:
  flink-conf.yaml: |+
    jobmanager.rpc.address: flink-jobmanager
    taskmanager.numberOfTaskSlots: 2
    blob.server.port: 6124
    jobmanager.rpc.port: 6123
    taskmanager.rpc.port: 6122
    jobmanager.heap.size: 1024m
    taskmanager.memory.process.size: 1024m
  log4j.properties: |+
    log4j.rootLogger=INFO, file
    log4j.logger.akka=INFO
    log4j.logger.org.apache.kafka=INFO
    log4j.logger.org.apache.hadoop=INFO
    log4j.logger.org.apache.zookeeper=INFO
    log4j.appender.console=org.apache.log4j.ConsoleAppender
    log4j.appender.console.layout=org.apache.log4j.PatternLayout
    log4j.appender.console.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} %-5p %-60c %x - %m%n
    log4j.appender.file=org.apache.log4j.FileAppender
    log4j.appender.file.file=${log.file}
    log4j.appender.file.layout=org.apache.log4j.PatternLayout
    log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} %-5p %-60c %x - %m%n
    log4j.logger.org.apache.flink.shaded.akka.org.jboss.netty.channel.DefaultChannelPipeline=ERROR, file
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>jobmanager-deployment.yaml</code></li>
</ul>
<pre class="line-numbers language-yml"><code class="language-yml">apiVersion: apps/v1
kind: Deployment
metadata:
  name: flink-jobmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flink
      component: jobmanager
  template:
    metadata:
      labels:
        app: flink
        component: jobmanager
    spec:
      containers:
      - name: jobmanager
        image: hub.deri.org.cn/library/flink:latest
        workingDir: /opt/flink
        command: ["/bin/bash", "-c", "$FLINK_HOME/bin/jobmanager.sh start;\
          while :;
          do
            if [[ -f $(find log -name '*jobmanager*.log' -print -quit) ]];
              then tail -f -n +1 log/*jobmanager*.log;
            fi;
          done"]
        ports:
        - containerPort: 6123
          name: rpc
        - containerPort: 6124
          name: blob
        - containerPort: 8081
          name: ui
        livenessProbe:
          tcpSocket:
            port: 6123
          initialDelaySeconds: 30
          periodSeconds: 60
        volumeMounts:
        - name: flink-config-volume
          mountPath: /opt/flink/conf
        securityContext:
          runAsUser: 9999  # refers to user _flink_ from official flink image, change if necessary
      volumes:
      - name: flink-config-volume
        configMap:
          name: flink-config
          items:
          - key: flink-conf.yaml
            path: flink-conf.yaml
          - key: log4j.properties
            path: log4j.properties
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>jobmanager-rest-service.yaml</code></li>
</ul>
<pre class="line-numbers language-yml"><code class="language-yml">apiVersion: v1
kind: Service
metadata:
  name: flink-jobmanager-rest
spec:
  type: NodePort
  ports:
  - name: rest
    port: 8081
    targetPort: 8081
  selector:
    app: flink
    component: jobmanager
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>jobmanager-service.yaml</code></li>
</ul>
<pre class="line-numbers language-yml"><code class="language-yml">apiVersion: v1
kind: Service
metadata:
  name: flink-jobmanager
spec:
  type: ClusterIP
  ports:
  - name: rpc
    port: 6123
  - name: blob
    port: 6124
  - name: ui
    port: 8081
  selector:
    app: flink
    component: jobmanager
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>taskmanager-deployment.yaml</code></li>
</ul>
<pre class="line-numbers language-yml"><code class="language-yml">apiVersion: apps/v1
kind: Deployment
metadata:
  name: flink-taskmanager
spec:
  replicas: 2
  selector:
    matchLabels:
      app: flink
      component: taskmanager
  template:
    metadata:
      labels:
        app: flink
        component: taskmanager
    spec:
      containers:
      - name: taskmanager
        image: hub.deri.org.cn/library/flink:latest
        workingDir: /opt/flink
        command: ["/bin/bash", "-c", "$FLINK_HOME/bin/taskmanager.sh start; \
          while :;
          do
            if [[ -f $(find log -name '*taskmanager*.log' -print -quit) ]];
              then tail -f -n +1 log/*taskmanager*.log;
            fi;
          done"]
        ports:
        - containerPort: 6122
          name: rpc
        livenessProbe:
          tcpSocket:
            port: 6122
          initialDelaySeconds: 30
          periodSeconds: 60
        volumeMounts:
        - name: flink-config-volume
          mountPath: /opt/flink/conf/
        securityContext:
          runAsUser: 9999  # refers to user _flink_ from official flink image, change if necessary
      volumes:
      - name: flink-config-volume
        configMap:
          name: flink-config
          items:
          - key: flink-conf.yaml
            path: flink-conf.yaml
          - key: log4j.properties
            path: log4j.properties
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="在k8s中部署"><a href="#在k8s中部署" class="headerlink" title="在k8s中部署"></a>在k8s中部署</h3><ul>
<li>安装</li>
</ul>
<pre class="line-numbers language-sh"><code class="language-sh">kubectl apply -f .
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>卸载</li>
</ul>
<pre class="line-numbers language-sh"><code class="language-sh">kubectl delete -f .
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="查看flink-UI"><a href="#查看flink-UI" class="headerlink" title="查看flink UI"></a>查看flink UI</h3><pre class="line-numbers language-sh"><code class="language-sh">[root@master k8s-flink]# kubectl get svc
NAME                    TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE
flink-jobmanager        ClusterIP   10.100.206.17   <none>        6123/TCP,6124/TCP,8081/TCP   3h47m
flink-jobmanager-rest   NodePort    10.109.136.52   <none>        8081:30696/TCP               3h47m
kubernetes              ClusterIP   10.96.0.1       <none>        443/TCP                      4d21h
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中<code>flink-jobmanager-rest</code>对应的<code>30696</code>端口就是<code>UI</code>的访问端口,也可以使用<code>Ingress</code>来访问，这里测试使用<code>NodePort</code>方式.</p>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink</tag>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>flink部署【高可用】</title>
    <url>/flink-bu-shu-gao-ke-yong/</url>
    <content><![CDATA[<h2 id="多机部署Flink-standalone-集群"><a href="#多机部署Flink-standalone-集群" class="headerlink" title="多机部署Flink standalone 集群"></a>多机部署Flink standalone 集群</h2><h3 id="部署前要注意的要点"><a href="#部署前要注意的要点" class="headerlink" title="部署前要注意的要点"></a>部署前要注意的要点</h3><ul>
<li>每台机器上配置好java以及<code>JAVA_HOME</code>环境变量</li>
<li>最好挑选一台机器，和其他机器ssh 打通</li>
<li>每台机器上部署的Flink binary的目录要保证是同一个目录</li>
<li>如果需要用hdfs，需要配置<code>HADOOP_CONF_DIR</code>环境变量配置上</li>
</ul>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul>
<li>JobManager机器：master</li>
<li>TaskManager机器：node1,node2,node3</li>
</ul>
<p>修改<code>Flink binary</code>目录的<code>conf</code>子目录中的<code>masters</code>和<code>slaves</code>两个文件:</p>
<pre><code>$cat conf/masters
master:8081
$cat conf/slaves
node1
node2
node3
</code></pre>
<p>修改<code>conf/flink-conf.yaml</code>配置</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">jobmanager.rpc.address</span><span class="token punctuation">:</span> master
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后把修改后的这三个文件同步到其他机器的相同<code>conf</code>目录下.</p>
<p>然后启动flink集群:</p>
<pre><code>./bin/start-cluster.sh
</code></pre>
<p>提交<code>WordCount</code>作业</p>
<pre><code>./bin/flink run examples/streaming/WordCount.jar
</code></pre>
<p>上传<code>WordCount</code>的<code>input</code>文件：</p>
<pre><code>hdfs dfs -copyFromLocal story /test_dir/input_dir/story
</code></pre>
<p>提交读写hdfs的WordCount作业：</p>
<pre><code>./bin/flink run examples/streaming/WordCount.jar --input hdfs:///test_dir/input_dir/story --output
hdfs:///test_dir/output_dir/output
</code></pre>
<p>增加WordCount作业的并发度（注意输出文件重名会提交失败）：</p>
<pre><code>./bin/flink run examples/streaming/WordCount.jar --input hdfs:///test_dir/input_dir/story --output
hdfs:///test_dir/output_dir/output --parallelism 20
</code></pre>
<h2 id="standalone-模式的HighAvailability（HA）部署和配置"><a href="#standalone-模式的HighAvailability（HA）部署和配置" class="headerlink" title="standalone 模式的HighAvailability（HA）部署和配置"></a>standalone 模式的HighAvailability（HA）部署和配置</h2><blockquote>
<p>JobManager是整个系统中最可能导致系统不可用的角色。一个TaskManager挂了，如果资源足够（空闲TaskSlot足够）的话，则只需要把相关task调度到其他空闲TaskSlot上，然后job从checkpoint中恢复即可。而如果当前集群中只配置了一个JobManager，则一旦JobManager挂了，就必须等待这个JobManager重新恢复，如果恢复时间过长，就可能导致整个job失败。<br><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.10/zh/ops/jobmanager_high_availability.html">官方HA部署说明</a></p>
</blockquote>
<h3 id="所需环境"><a href="#所需环境" class="headerlink" title="所需环境"></a>所需环境</h3><ul>
<li><code>flink-1.10</code></li>
<li><code>zookeeper</code></li>
<li><code>hadoop</code></li>
</ul>
<blockquote>
<p><code>flink</code>内部也提供了<code>zookeeper</code>插件，通过修改<code>/conf/zoo.cfg</code>文件即可，启动命令在<code>/bin/start-zookeeper-quorum.sh</code></p>
</blockquote>
<h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><ol>
<li><code>conf/flink-conf.yaml</code></li>
</ol>
<pre class="line-numbers language-yml"><code class="language-yml"># 高可用相关重要配置
# 配置high-availability mode
high-availability: zookeeper
high-availability.zookeeper.quorum: localhost:2181
high-availability.zookeeper.path.root: /flink
high-availability.cluster-id: /cluster_one # important: customize per cluster /可以不配，自动生成
high-availability.storageDir: hdfs:///flink/recovery
state.checkpoints.dir:  hdfs:///flink/checkpoints
state.savepoints.dir: hdfs:///flink/savepoints
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li><code>conf/masters</code>和<code>slaves</code></li>
</ol>
<pre class="line-numbers language-yml"><code class="language-yml">master1:8081
master2:8081
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-yml"><code class="language-yml">slave001
slave002
slave003
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ol start="3">
<li><code>conf/zoo.cfg</code></li>
</ol>
<pre class="line-numbers language-conf"><code class="language-conf">server.1=slave001:2888:3888
server.2=slave002:2888:3888
server.3=slave003:2888:3888
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p><strong>修改完成后，再把这几个文件同步到不同机器到相同conf目录下。</strong></p>
</blockquote>
<ol start="4">
<li>启动zookeeper(如果已经有zookeeper集群可以不使用flink自带的)</li>
</ol>
<pre class="line-numbers language-sh"><code class="language-sh">$ bin/start-zookeeper-quorum.sh
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="5">
<li>启动<code>HA-cluster</code></li>
</ol>
<pre class="line-numbers language-sh"><code class="language-sh">$ bin/start-cluster.sh
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>分别打开：<br><a href="http://master1:8081/">http://master1:8081</a><br><a href="http://master2:8081/">http://master2:8081</a></p>
<p>可以看到两个页面最后都转到了同一个地址上，这个地址就是当前主JobManager所在机器，另一个就是standby JobManager。<br>当我们知道主JobManager后，我们可以把主JobManager进程kill掉，比如当前主JobManager在matser1这个机器上，就把这个进程杀掉.</p>
<ol start="6">
<li>关闭zookeeper和flink</li>
</ol>
<pre class="line-numbers language-sh"><code class="language-sh">$ bin/stop-cluster.sh
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-sh"><code class="language-sh">$ bin/stop-zookeeper-quorum.sh
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><h4 id="flink-1-10-0与hadoop集成"><a href="#flink-1-10-0与hadoop集成" class="headerlink" title="flink-1.10.0与hadoop集成"></a><code>flink-1.10.0</code>与<code>hadoop</code>集成</h4><ol>
<li>配置环境变量</li>
</ol>
<pre class="line-numbers language-sh"><code class="language-sh">vi /etc/profile
# 添加如下内容：
export HADOOP_CONF_DIR=/home/hadoop-2.6.5/etc/hadoop
# 使环境变量生效
source /etc/profile
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>添加hadoop依赖<br><a href="https://repo.maven.apache.org/maven2/org/apache/flink/flink-shaded-hadoop-2-uber/2.6.5-10.0/">flink-shaded-hadoop-2-uber-2.6.5-10.0.jar</a><br>下载<code>jar</code>包放到<code>/flink-1.10.0/lib</code>目录下.</li>
</ol>
<blockquote>
<p><a href="https://blog.csdn.net/cheersmate/article/details/105038479">参考链接-Flink 1.10.0基于高可用部署</a></p>
</blockquote>
<h2 id="使用yarn模式跑flink-job"><a href="#使用yarn模式跑flink-job" class="headerlink" title="使用yarn模式跑flink job"></a>使用yarn模式跑flink job</h2><p>什么情况下适合使用yarn模式跑flink job？<br>相对于standalone模式，yarn模式允许flink job的好处有：  </p>
<ul>
<li>资源按需使用，提高集群的资源利用率</li>
<li>任务有优先级，根据优先级运行作业</li>
<li>基于YARN调度系统，能够自动化地处理各个角色的failover<ul>
<li>JobManager进程和TaskManager进程都由Yarn NodeManager监控</li>
<li>如果JobManager进程异常退出，则Yarn ResourceManager会重新调度JobManager到其他机器</li>
<li>如果TaskManager进程异常退出，JobManager会收到消息并重新向Yarn ResourceManager申请资源，重新启动TaskManager</li>
</ul>
</li>
</ul>
<h3 id="在YARN上启动long-running的flink集群（yarn-session）"><a href="#在YARN上启动long-running的flink集群（yarn-session）" class="headerlink" title="在YARN上启动long running的flink集群（yarn session）"></a>在YARN上启动long running的flink集群（yarn session）</h3><ul>
<li><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.10/zh/ops/jobmanager_high_availability.html#yarn-cluster-high-availability">Highly Available YARN Session模式</a></li>
<li>yarn是一个集群资源管理框架。它运行在集群之上运行各种分布式应用程序。flink像其他程序一样，也可以在yarn上运行。用户不需要设置或者安装任何东西，如果已经有一个安装配置好的yarn。</li>
<li>一个session将会包含所有必须的flink 服务(jobmanager和taskmanager)，这样你就可以向这个集群提交程序了。注意：每个session会话你可以运行多个程序。</li>
<li><code>YARN Session</code>模式只会启动一个<code>JobManager</code>,如果启动失败会重启.</li>
<li>启动一个session命令：<code>./bin/yarn-session.sh</code></li>
</ul>
<p>命令参数用法：</p>
<pre class="line-numbers language-sh"><code class="language-sh"># 查看命令参数
./bin/yarn-session.sh -h
# 用法:
   必选
     -n,--container <arg>   分配多少个yarn容器 (=taskmanager的数量)
   可选
     -D <arg>                        动态属性
     -d,--detached                   独立运行
     -jm,--jobManagerMemory <arg>    JobManager的内存 [in MB]
     -nm,--name                     在YARN上为一个自定义的应用设置一个名字
     -q,--query                      显示yarn中可用的资源 (内存, cpu核数)
     -qu,--queue <arg>               指定YARN队列.
     -s,--slots <arg>                每个TaskManager使用的slots数量
     -tm,--taskManagerMemory <arg>   每个TaskManager的内存 [in MB]
     -z,--zookeeperNamespace <arg>   针对HA模式在zookeeper上创建NameSpace
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>client必须要设置<code>HADOOP_HOME</code>,<code>YARN_CONF_DIR</code>或者<code>HADOOP_CONF_DIR</code>环境变量，通过这个环境变量来读取<code>YARN</code>和<code>HDFS</code>的配置信息，否则启动会失败。</p>
</blockquote>
<p>创建一个YARN模式的flink集群:</p>
<pre class="line-numbers language-sh"><code class="language-sh">./bin/yarn-session.sh -n 4 -jm 1024m -tm 4096m
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>提交一个flink job到flink集群：</p>
<pre><code>./bin/flink run examples/streaming/WordCount.jar --input hdfs:///test_dir/input_dir/story --output hdfs:///test_dir/output_dir/output
</code></pre>
<blockquote>
<p>这次提交<code>flink job</code>，虽然没有指定对应<code>yarn application</code>的信息，确可以提交到对应的flink集群，原因在于<code>/tmp/.yarn-properties-${user}</code>文件中保存了上一次创建yarn session的集群信息。所以如果同一用户在同一机器上再次创建一个<code>yarn session</code>，则这个文件会被覆盖掉。</p>
</blockquote>
<blockquote>
<p>那如果删掉<code>/tmp/.yarn-properties-${user}</code>或者在另一个机器上提交作业能否提交到预期到<code>yarn session</code>中呢？这也是可以的，如果配置了<code>HighAvailability</code>，则可以根据<code>cluster-id</code>，从zookeeper上获取到JobManager的地址和端口，从而提交作业。</p>
</blockquote>
<pre><code>high-availability.cluster-id
</code></pre>
<blockquote>
<p>如果Yarn session没有配置HA，又该如何提交呢？这个时候就必须要在提交flink job的命令中指明YARN上的<code>application id</code>，通过“-yid”参数传入：</p>
</blockquote>
<pre><code>/bin/flink run -yid application_1548056325049_0048 examples/streaming/WordCount.jar --
input hdfs:///test_dir/input_dir/story --output hdfs:///test_dir/output_dir/output
</code></pre>
<blockquote>
<p>我们可以发现，每次跑完任务不久，<code>TaskManager</code>就没有了，下次在提交任务的时候，<code>TaskManager</code>又会重新拉起来。如果希望<code>TaskManager</code>启动后就持续运行，可以在<code>conf/flink-conf.yaml</code>文件中配置下面这个参数，单位是<code>milliseconds</code>，默认值是<code>30000L</code>，即<code>30秒</code>：</p>
</blockquote>
<pre><code>resourcemanager.taskmanager-timeout
</code></pre>
<h3 id="在YARN上运行单个flink-job"><a href="#在YARN上运行单个flink-job" class="headerlink" title="在YARN上运行单个flink job"></a>在YARN上运行单个flink job</h3><p>如果你只想运行单个flink job后就退出，那么可以用下面这个命令：</p>
<pre><code>./bin/flink run -m yarn-cluster -yn 2 examples/streaming/WordCount.jar --input hdfs:///test_dir/input_dir/story --output hdfs:///test_dir/output_dir/output
</code></pre>
<p>常用的配置有：</p>
<ul>
<li>-yn,–yarncontainer <arg> Number of Task Managers</arg></li>
<li>-yqu,–yarnqueue <arg> Specify YARN queue.</arg></li>
<li>-ys,–yarnslots <arg> Number of slots per TaskManager</arg></li>
<li>-yqu,–yarnqueue <arg> Specify YARN queue.<br>可以通过help命令查看run的可用参数：</arg></li>
</ul>
<pre><code>./bin/flink run -h
</code></pre>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://blog.csdn.net/xu470438000/article/details/79576989">https://blog.csdn.net/xu470438000/article/details/79576989</a></li>
</ul>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>gitee和github的API使用</title>
    <url>/gitee-he-github-de-api-shi-yong/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p><code>gitee</code>和<code>github</code>都提供了丰富的<code>restful API</code>，用于开发人员操作仓库.</p>
<ul>
<li><a href="https://gitee.com/api/v5/swagger">gitee Open API</a></li>
<li><a href="https://docs.github.com/en/rest">github restful API</a></li>
</ul>
<h3 id="token获取"><a href="#token获取" class="headerlink" title="token获取"></a>token获取</h3><p><code>gitee</code>和<code>github</code>私有仓库或者部分接口都需要用户权限认证,本文均使用<code>token</code>方式验证.</p>
<ul>
<li><p><code>gitee token</code> 获取<br>选择<code>【用户】</code> - <code>【设置】</code> - <code>【私人令牌】</code> - <code>【生成新令牌】</code>. 使用私人令牌，可以通过<a href="https://gitee.com/api/v5/swagger">Gitee Open API</a>访问你授权的数据.</p>
</li>
<li><p><code>github token</code> 获取<br>选择<code>【用户】</code> - <code>【Settings】</code> - <code>【Developer settings】</code> - <code>【Personal access tokens】</code> - <code>【Generate new token】</code>. Tokens you have generated that can be used to access the <a href="https://docs.github.com/">GitHub API</a>.</p>
</li>
</ul>
<h3 id="gitee-接口测试"><a href="#gitee-接口测试" class="headerlink" title="gitee 接口测试"></a>gitee 接口测试</h3><ul>
<li>示例: 添加新的<code>issue</code></li>
</ul>
<blockquote>
<p><a href="https://gitee.com/api/v5/swagger#/postV5ReposOwnerIssues">接口在线测试地址</a></p>
</blockquote>
<pre class="line-numbers language-sh"><code class="language-sh">curl -X POST --header 'Content-Type: application/json;charset=UTF-8' 'https://gitee.com/api/v5/repos/happywzy/issues' -d '{"access_token":"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx","repo":"test","title":"测试ISSUE","body":"测试内容","labels":"bug"}'
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="github-接口测试"><a href="#github-接口测试" class="headerlink" title="github 接口测试"></a>github 接口测试</h3><blockquote>
<p>接口格式：<a href="https://api.github.com/repos/%7B%E7%94%A8%E6%88%B7%E5%90%8D%7D/%7B%E4%BB%93%E5%BA%93%7D/xxx">https://api.github.com/repos/{用户名}/{仓库}/xxx</a></p>
</blockquote>
<ul>
<li>获取公开仓库的<code>issue</code>列表</li>
</ul>
<pre class="line-numbers language-sh"><code class="language-sh"># 添加Accept头,指定返回内容类型
curl \
  -H "Accept: application/vnd.github.v3+json" \
  https://api.github.com/repos/octocat/hello-world/issues
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>获取私有仓库的<code>issue</code>列表<blockquote>
<p>github API传入<code>token</code>的几种方式，<a href="https://docs.github.com/en/rest/overview/other-authentication-methods">官方文档</a>.</p>
</blockquote>
</li>
</ul>
<pre class="line-numbers language-sh"><code class="language-sh"># header添加Authorization字段,注意字段的值是[token xxxxxx]格式
curl -v -H "Authorization: token xxxxxxxxxxxxxx" https://api.github.com/repos/xxx/admin/issues
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sh"><code class="language-sh"># 请求URL后面增加access_token
https://api.github.com/repos/alfalfaw/vue-shop-admin?access_token=xxxxxxx
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>gitee</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用命令</title>
    <url>/git-chang-yong-ming-ling/</url>
    <content><![CDATA[<h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>git init</code></td>
<td>初始化</td>
</tr>
<tr>
<td><code>git config -l</code></td>
<td>查看当前config配置</td>
</tr>
<tr>
<td><code>git config --global user.name "username"</code></td>
<td>设置用户名</td>
</tr>
<tr>
<td><code>git config --global user.email "email@gmail.com"</code></td>
<td>设置邮箱</td>
</tr>
</tbody></table>
<h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>git clone [url]</code></td>
<td>检出仓库</td>
</tr>
<tr>
<td><code>git remote -v</code></td>
<td>查看远程仓库</td>
</tr>
<tr>
<td><code>git remote add [name] [url]</code></td>
<td>添加远程仓库</td>
</tr>
<tr>
<td><code>git remote rm [name]</code></td>
<td>删除远程仓库</td>
</tr>
<tr>
<td><code>git remote set-url origin [newUrl]</code></td>
<td>修改远程仓库</td>
</tr>
<tr>
<td><code>git push -u -f origin</code></td>
<td>仓库迁移</td>
</tr>
<tr>
<td><code>git push -u -f origin --all</code></td>
<td>把所有分支迁移过去</td>
</tr>
<tr>
<td><code>git push -u -f origin --tags</code></td>
<td>把所有tag迁移过去</td>
</tr>
<tr>
<td><code>git fetch</code></td>
<td>下载远程仓库最新的commit到本地</td>
</tr>
<tr>
<td><code>git fetch --all</code></td>
<td>下载远程仓库最新的commit到本地</td>
</tr>
<tr>
<td><code>git fetch origin --prune</code></td>
<td>更新远程分支,<code>--prune</code>同<code>-p</code></td>
</tr>
<tr>
<td><code>git remote update origin --prune</code></td>
<td>更新远程分支</td>
</tr>
</tbody></table>
<h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>git branch</code></td>
<td>查看本地分支</td>
</tr>
<tr>
<td><code>git branch -r</code></td>
<td>查看远程分支</td>
</tr>
<tr>
<td><code>git ls-remote --heads origin</code></td>
<td>查看远程分支</td>
</tr>
<tr>
<td><code>git branch -a</code></td>
<td>查看所有分支</td>
</tr>
<tr>
<td><code>git branch [name]</code></td>
<td>创建本地分支,创建后不会自动切换</td>
</tr>
<tr>
<td><code>git checkout [name]</code></td>
<td>切换分支</td>
</tr>
<tr>
<td><code>git checkout -b [name]</code></td>
<td>创建分支并切换</td>
</tr>
<tr>
<td><code>git checkout [name] -f</code></td>
<td><code>--force</code>或者<code>-f</code>,强制切换分支,未提交的会被丢弃</td>
</tr>
<tr>
<td><code>git branch -d [name]</code></td>
<td>删除分支,如果分支没有合并是不能被删除的</td>
</tr>
<tr>
<td><code>git branch -D [name]</code></td>
<td>删除分支,没有合并也能被强制删除</td>
</tr>
<tr>
<td><code>git push origin [name]</code></td>
<td>本地分支push到远程,远程没有该分支则自动创建</td>
</tr>
<tr>
<td><code>git push origin [local]:[name]</code></td>
<td>本地分支push到远程</td>
</tr>
<tr>
<td><code>git push origin --delete [name]</code></td>
<td>删除远程分支,<code>-d</code>也行</td>
</tr>
<tr>
<td><code>git push origin :heads/[name]</code></td>
<td>删除远程分支</td>
</tr>
<tr>
<td><code>git push origin :[name]</code></td>
<td>删除远程分支</td>
</tr>
</tbody></table>
<h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>git merge [name]</code></td>
<td>将名称为[name]的分支与当前分支合并</td>
</tr>
<tr>
<td><code>git merge --no-ff [name]</code></td>
<td>将名称为[name]的分支与当前分支合并,并保存之前的分支历史</td>
</tr>
<tr>
<td><code>git merge --abort</code></td>
<td>合并产生冲突后,抛弃合并过程并且尝试重建合并前的状态</td>
</tr>
<tr>
<td><code>git rebase [name]</code></td>
<td>将<code>name</code>分支合并到当前分支</td>
</tr>
<tr>
<td><code>git rebase [name1] [name2]</code></td>
<td>将<code>name1</code>分支合并到<code>name2</code>分支,等同于先<code>git checkout name2</code>在执行<code>git rebase name1</code></td>
</tr>
<tr>
<td><code>git rebase [start] [end] --onto [name]</code></td>
<td>从开始到结束复制到name分支,注意:<code>前开后闭</code></td>
</tr>
</tbody></table>
<h3 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>git tag</code></td>
<td>查看本地tag</td>
</tr>
<tr>
<td><code>git tag [name]</code></td>
<td>创建轻量tag</td>
</tr>
<tr>
<td><code>git tag -a [name] -m [message]</code></td>
<td>创建附注tag,不带-m会提示你输入message</td>
</tr>
<tr>
<td><code>git tag [name] [commitId]</code></td>
<td>对历史commit创建tag</td>
</tr>
<tr>
<td><code>git tag -l "[tag规则]"</code></td>
<td>按规则查询tag,注意规则在双引号内,如<code>git tag -l "v2.*"</code></td>
</tr>
<tr>
<td><code>git push origin [name]</code></td>
<td>推送tag到服务器</td>
</tr>
<tr>
<td><code>git push origin --tags</code></td>
<td>推送所有tag到服务器</td>
</tr>
<tr>
<td><code>git tag -d [name]</code></td>
<td>删除tag</td>
</tr>
<tr>
<td><code>git push origin :refs/tags/[name]</code></td>
<td>删除远程tag</td>
</tr>
<tr>
<td><code>git show [name]</code></td>
<td>查询tag具体信息</td>
</tr>
<tr>
<td><code>git pull --tags</code></td>
<td>拉取远程仓库的标签</td>
</tr>
<tr>
<td><code>git push --tags</code></td>
<td>推送标签到远程仓库</td>
</tr>
<tr>
<td><code>git ls-remote --tags origin</code></td>
<td>查看远程仓库tag</td>
</tr>
<tr>
<td><code>git checkout [tag]</code></td>
<td>切换到tag的位置,默认不会创建新的分支</td>
</tr>
<tr>
<td><code>git checkout -b [name] [tag]</code></td>
<td>创建新的分支并切换到tag的位置,<code>[name]</code>非必须</td>
</tr>
</tbody></table>
<blockquote>
<p>如果创建的不是轻量tag,推送到远程后用<code>git ls-remote --tags origin</code>命令查看会产生一个后缀为<code>^{}</code>的同名tag.</p>
</blockquote>
<h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>git switch [name]</code></td>
<td>切换分支,如果没有则报错,如果本地没有远程有则拉取</td>
</tr>
<tr>
<td><code>git switch -</code></td>
<td>切换到上一个分支</td>
</tr>
<tr>
<td><code>git switch -c [name]</code></td>
<td>创建并切换分支,如果有则报错</td>
</tr>
<tr>
<td><code>git switch -c [name] [commit]</code></td>
<td>以一个提交来创建分支</td>
</tr>
<tr>
<td><code>git switch --detach [commit]</code></td>
<td>切换到一个提交,不创建分支</td>
</tr>
<tr>
<td><code>git switch --orphan [name]</code></td>
<td>创建一个没有任何提交记录的分支,内容为空</td>
</tr>
<tr>
<td><code>git switch -c [name] [tagName]</code></td>
<td>以一个tag创建分支</td>
</tr>
</tbody></table>
<h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>git status</code></td>
<td>查看当前分支状态</td>
</tr>
<tr>
<td><code>git status -sb</code></td>
<td>简洁输出当前分支状态,<code>short branch</code></td>
</tr>
<tr>
<td><code>git show --stat</code></td>
<td>查看当前状态</td>
</tr>
<tr>
<td><code>git commit [filename] -m [message]</code></td>
<td>提交一个文件</td>
</tr>
<tr>
<td><code>git commit -am [message]</code></td>
<td>提交所有文件</td>
</tr>
<tr>
<td><code>git add [filename]</code></td>
<td>新增文件</td>
</tr>
<tr>
<td><code>git add .</code></td>
<td>新增所有文件</td>
</tr>
<tr>
<td><code>git rm [filename]</code></td>
<td>删除文件</td>
</tr>
</tbody></table>
<h3 id="暂存区"><a href="#暂存区" class="headerlink" title="暂存区"></a>暂存区</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>git stash</code></td>
<td>存到暂存区,如果有修改没有提交无法切换分支,可以先暂存</td>
</tr>
<tr>
<td><code>git stash list</code></td>
<td>查看暂存区</td>
</tr>
<tr>
<td><code>git stash pop</code></td>
<td>从暂存区取出,暂存区删除</td>
</tr>
<tr>
<td><code>git stash apply</code></td>
<td>从暂存区取出,暂存区不删除</td>
</tr>
<tr>
<td><code>git stash clear</code></td>
<td>删除所有缓存</td>
</tr>
</tbody></table>
<h3 id="回退"><a href="#回退" class="headerlink" title="回退"></a>回退</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>git diff</code></td>
<td>查看尚未暂存的更新</td>
</tr>
<tr>
<td><code>git clean [-n]</code></td>
<td>显示当前目录下没有被add的文件</td>
</tr>
<tr>
<td><code>git clean [-f]</code></td>
<td>删除当前目录下没有被add的文件</td>
</tr>
<tr>
<td><code>git reset --hard [commitid]</code></td>
<td>回退到上一个commit,所有提交都被删除</td>
</tr>
<tr>
<td><code>git reset --hard origin/master</code></td>
<td>强制更新本地内容,一般搭配<code>git fetch</code>命令一起使用</td>
</tr>
<tr>
<td><code>git reset --soft [commitid]</code></td>
<td>回退到上一个commit,所有提交都保留</td>
</tr>
<tr>
<td><code>git reset --mixed [commitid]</code></td>
<td>回退到上一个commit,所有提交都保留</td>
</tr>
</tbody></table>
<blockquote>
<p><code>git reset --soft</code>和<code>--mixed</code>区别在于如果当前commit和上一个commit之间有新增的文件,<code>--soft</code>回退之后该文件处于已add的状态,<code>--mixed</code>回退之后该文件处于未add的状态,需要在执行<code>git add</code>.</p>
</blockquote>
<h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>git reflog</code></td>
<td>查看所有分支所有日志,log的其它参数同样使用reflog</td>
</tr>
<tr>
<td><code>git log</code></td>
<td>查看当前分支所有日志</td>
</tr>
<tr>
<td><code>git log --pretty=oneline</code></td>
<td>单行模式查看当前分支所有日志</td>
</tr>
<tr>
<td><code>git log -n 5</code></td>
<td>查看前5条日志</td>
</tr>
<tr>
<td><code>git log --stat -n 5</code></td>
<td>查看前5条日志,并简要显示增改行数</td>
</tr>
<tr>
<td><code>git log --since=2.days</code></td>
<td>查看最近2天的日志</td>
</tr>
<tr>
<td><code>git log --grep=test</code></td>
<td>查看关键字包含为<code>test</code>的日志</td>
</tr>
<tr>
<td><code>git log --author=Wuzhiyong</code></td>
<td>查看指定作者的日志</td>
</tr>
<tr>
<td><code>git log --committer=Wuzhiyong</code></td>
<td>查看指定作者的日志</td>
</tr>
<tr>
<td><code>git show [commitid]</code></td>
<td>查看某次commit的修改</td>
</tr>
<tr>
<td><code>git log --graph --oneline --decorate --simplify-by-decoration --all</code></td>
<td>查看分支图</td>
</tr>
<tr>
<td><code>git show-ref</code></td>
<td>查看本地refs,添加<code>--tags</code>查看本地tag,<code>--heads</code>查看本地分支</td>
</tr>
</tbody></table>
<h3 id="版本回退-x2F-复原"><a href="#版本回退-x2F-复原" class="headerlink" title="版本回退/复原"></a>版本回退/复原</h3><p><code>HEAD</code>表示当前版本,<code>HEAD^</code>表示上一个版本,<code>HEAD^^</code>表示上上个版本,<code>HEAD~5</code>表示上 5 个版本.</p>
<blockquote>
<p>Windows <code>cmd</code> 窗口下执行 <code>git reset --hard HEAD^</code> 会报错, 需要为 <code>HEAD^</code> 添加双引号 <code>git reset --hard "HEAD^"</code></p>
</blockquote>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 回退</span>
<span class="token function">git</span> reset --hard HEAD^
<span class="token function">git</span> reset --hard HEAD^^
<span class="token comment" spellcheck="true"># 查看提交历史,根据commit_id回退</span>
<span class="token function">git</span> log
<span class="token function">git</span> reset --hard commit_id
<span class="token comment" spellcheck="true"># 查看未来提交日志恢复提交</span>
<span class="token function">git</span> reflog
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul>
<li>配置公钥</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 生成公钥,过程中按3次回车</span>
ssh-keygen -t ed25519 -C <span class="token string">"xxxxx@xxxxx.com"</span> 
<span class="token comment" spellcheck="true"># 进入gitee添加公钥</span>
<span class="token comment" spellcheck="true"># 测试公钥是否能用</span>
<span class="token function">ssh</span> -T git@gitee.com
<span class="token comment" spellcheck="true"># 返回以下内容证明配置正确</span>
Hi XXX<span class="token operator">!</span> You've successfully authenticated, but Gitee.com does not provide shell access.
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>如果配置正确还是让输入用户密码,首先<code>git remote -v</code>检查远程地址是<code>https</code>还是<code>ssh</code>.使用<code>git remote set-url origin git@gitee.com:happywzy/xxxx.git</code>修改.</p>
</blockquote>
<ul>
<li>rebase操作</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 目标希望将fd75768和e87d4921两个连续的提交rebase到master分支</span>
<span class="token comment" spellcheck="true"># 因为是前开后闭,这里start通过^向前指定了一个区间</span>
<span class="token comment" spellcheck="true"># 也可以start设置为fd75768前一个commitid</span>
$ <span class="token function">git</span> rebase fd75768^ e87d4921 --onto master
fatal: It seems that there is already a rebase-merge directory, and
I wonder <span class="token keyword">if</span> you are <span class="token keyword">in</span> the middle of another rebase.  If that is the
case, please try
        <span class="token function">git</span> rebase <span class="token punctuation">(</span>--continue <span class="token operator">|</span> --abort <span class="token operator">|</span> --skip<span class="token punctuation">)</span>
If that is not the case, please
        <span class="token function">rm</span> -fr <span class="token string">".git/rebase-merge"</span>
and run me again.  I am stopping <span class="token keyword">in</span> <span class="token keyword">case</span> you still have something
valuable there.
<span class="token comment" spellcheck="true"># 上面提示已经存在一个rebase-merge目录,先删除了</span>
$ <span class="token function">rm</span> -fr <span class="token string">".git/rebase-merge"</span>
<span class="token comment" spellcheck="true"># 再次执行</span>
$ <span class="token function">git</span> rebase fd75768^ e87d4921 --onto master
Successfully rebased and updated detached HEAD.
<span class="token comment" spellcheck="true"># 切换到master分支,提示刚刚复制了两个提交,即HEAD后面还有两个提交</span>
$ <span class="token function">git</span> checkout master
Warning: you are leaving 2 commits behind, not connected to
any of your branches:
  b9bb17a step 5
  f2d9256 step 4
If you want to keep them by creating a new branch, this may be a good <span class="token function">time</span>
to <span class="token keyword">do</span> so with:
 <span class="token function">git</span> branch <span class="token operator">&lt;</span>new-branch-name<span class="token operator">></span> b9bb17a
Switched to branch <span class="token string">'master'</span>
<span class="token comment" spellcheck="true"># 现在切回master看不到复制过来的提交</span>
<span class="token comment" spellcheck="true"># 通过下面的命令可以将HEAD重置到最新提交,即可看到rebase过来的2个提交</span>
$ <span class="token function">git</span> reset --hard b9bb17a
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>git拉取github项目比较慢解决办法</title>
    <url>/git-la-qu-github-xiang-mu-bi-jiao-man-jie-jue-ban-fa/</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>国内git clone github项目由于网络原因比较慢</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>如</p>
<pre><code>git clone https://github.com/apache/flink.git
</code></pre>
<p>改成</p>
<pre><code>git clone https://github.com.cnpmjs.org/apache/flink.git
</code></pre>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 全局配置, 不用每次都去修改地址了</span>
<span class="token function">git</span> config --global url.<span class="token string">"https://github.com/"</span>.insteadOf https://github.com.cnpmjs.org/

<span class="token comment" spellcheck="true"># 删除全局配置</span>
gti config --global --unset url.<span class="token string">"https://github.com/"</span>.insteadOf
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>go template使用</title>
    <url>/go-template-shi-yong/</url>
    <content><![CDATA[<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token operator">-</span> 格式<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> 模板表达式 <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token operator">-</span> 注释格式<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 注释语法 */</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token operator">-</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">.</span>字段名<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token operator">-</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">.</span>字段名<span class="token number">1</span><span class="token punctuation">.</span>字段名<span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="减号"><a href="#减号" class="headerlink" title="减号"></a>减号</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token operator">-</span> 在左边增加减号和空格，表示删除左边空格： <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">-</span> 模板表达式 <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token operator">-</span> 在右边增加空格和减号，表示删除右边空格： <span class="token punctuation">{</span><span class="token punctuation">{</span> 模板表达式 <span class="token operator">-</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token operator">-</span> 删除表达式左右两边空格的写法： <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">-</span> 模板表达式 <span class="token operator">-</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><pre class="line-numbers language-go"><code class="language-go">定义变量
$title <span class="token operator">:=</span> <span class="token string">"标题"</span>

为变量赋值<span class="token punctuation">,</span> 第二次为变量赋值，不需要冒号<span class="token punctuation">:</span>
$title <span class="token operator">=</span> <span class="token string">"新标题"</span>

引用变量
<span class="token punctuation">{</span><span class="token punctuation">{</span>$title<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 语法格式1：表达式为真，则执输出T1</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">if</span> 表达式<span class="token punctuation">}</span><span class="token punctuation">}</span> T1 <span class="token punctuation">{</span><span class="token punctuation">{</span>end<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 语法格式2：表达式为真，则执输出T1, 否则输出T0</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">if</span> 表达式<span class="token punctuation">}</span><span class="token punctuation">}</span> T1 <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">else</span><span class="token punctuation">}</span><span class="token punctuation">}</span> T0 <span class="token punctuation">{</span><span class="token punctuation">{</span>end<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 语法格式3：表达式1为真，则执输出T1, 否则如果表达式2为真，则输出T0</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">if</span> 表达式<span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span> T1 <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">else</span> <span class="token keyword">if</span> 表达式<span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span> T0 <span class="token punctuation">{</span><span class="token punctuation">{</span>end<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="range"><a href="#range" class="headerlink" title="range"></a>range</h4><pre class="line-numbers language-go"><code class="language-go">titles <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"标题1"</span><span class="token punctuation">,</span> <span class="token string">"标题2"</span><span class="token punctuation">,</span> <span class="token string">"标题3"</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">range</span> <span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span>end<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go"><code class="language-go"><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">range</span> $index<span class="token punctuation">,</span> $element <span class="token operator">:=</span> 数组或者<span class="token keyword">map</span>的引用<span class="token punctuation">}</span><span class="token punctuation">}</span>
索引<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>$index<span class="token punctuation">}</span><span class="token punctuation">}</span>
元素值<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>$element<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span>end<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="with"><a href="#with" class="headerlink" title="with"></a>with</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// with语句主要用于struct类型数据的访问</span>
user <span class="token operator">:=</span> User<span class="token punctuation">{</span>Id<span class="token punctuation">:</span><span class="token number">1001</span><span class="token punctuation">,</span> UserName<span class="token punctuation">:</span><span class="token string">"李大成"</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span>with <span class="token punctuation">.</span>User<span class="token punctuation">}</span><span class="token punctuation">}</span>
Id<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">.</span>Id<span class="token punctuation">}</span><span class="token punctuation">}</span>
Username<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">.</span>UserName<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span>end<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 定义</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span>define <span class="token string">"子模板名字"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
模板内容
<span class="token punctuation">{</span><span class="token punctuation">{</span>end<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 引用</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span>template <span class="token string">"子模板名字"</span> 参数<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="关系运算函数"><a href="#关系运算函数" class="headerlink" title="关系运算函数"></a>关系运算函数</h4><table>
<thead>
<tr>
<th>函数名</th>
<th>函数调用格式</th>
<th>对应关系运算</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>eq</td>
<td>eq arg1 arg2</td>
<td>arg1 == arg2</td>
<td>arg1等于arg2则返回true</td>
</tr>
<tr>
<td>ne</td>
<td>ne arg1 arg2</td>
<td>arg1 != arg2</td>
<td>arg1不等于arg2则返回true</td>
</tr>
<tr>
<td>lt</td>
<td>lt arg1 arg2</td>
<td>arg1 &lt; arg2</td>
<td>arg1小于arg2则返回true</td>
</tr>
<tr>
<td>le</td>
<td>le arg1 arg2</td>
<td>arg1 &lt;= arg2</td>
<td>arg1小于等于arg2则返回true</td>
</tr>
<tr>
<td>gt</td>
<td>gt arg1 arg2</td>
<td>arg1 &gt; arg2</td>
<td>arg1大于arg2则返回true</td>
</tr>
<tr>
<td>ge</td>
<td>ge arg1 arg2</td>
<td>arg1 &gt;= arg2</td>
<td>arg1大于等于arg2则返回true</td>
</tr>
</tbody></table>
<h4 id="逻辑运算函数"><a href="#逻辑运算函数" class="headerlink" title="逻辑运算函数"></a>逻辑运算函数</h4><table>
<thead>
<tr>
<th>函数名</th>
<th>函数调用格式</th>
<th>对应逻辑运算</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>and</td>
<td>and 表达式1 表达式2</td>
<td>表达式1 &amp;&amp; 表达式2</td>
<td>表达式1和表达式2都为真的时候返回true</td>
</tr>
<tr>
<td>or</td>
<td>or 表达式1 表达式2</td>
<td>表达式1 或者 表达式2</td>
<td>表达式1和表达式2其中一个为真的时候返回true</td>
</tr>
<tr>
<td>not</td>
<td>not 表达式</td>
<td>!表达式</td>
<td>表达式为false则返回true, 反之返回false</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go template</tag>
      </tags>
  </entry>
  <entry>
    <title>grafana集成ldap</title>
    <url>/grafana-ji-cheng-ldap/</url>
    <content><![CDATA[<h3 id="grafana"><a href="#grafana" class="headerlink" title="grafana"></a>grafana</h3><p>grafana 支持集成 ldap ，grafana 镜像默认在 /etc/grafana/ 目录下有个 ldap.toml 文件用于配置 ldap .</p>
<h3 id="grafana-ini"><a href="#grafana-ini" class="headerlink" title="grafana.ini"></a>grafana.ini</h3><p>首先需要在 grafana.ini 主配置中开启 ldap</p>
<pre class="line-numbers language-toml"><code class="language-toml">[auth.ldap]
enabled = true
config_file = /etc/grafana/ldap.toml
allow_sign_up = true	
# LDAP backround sync (Enterprise only)
# At 1 am every day
sync_cron = "0 0 1 * * *"
active_sync_enabled = true
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>更改配置后重启生效.</p>
</blockquote>
<h3 id="ldap-toml"><a href="#ldap-toml" class="headerlink" title="ldap.toml"></a>ldap.toml</h3><pre class="line-numbers language-toml"><code class="language-toml"># To troubleshoot and get more log info enable ldap debug logging in grafana.ini
# [log]
# filters = ldap:debug

[[servers]]
# Ldap server host (specify multiple hosts space separated)
host = "172.168.0.2"
# Default port is 389 or 636 if use_ssl = true
port = 389
# Set to true if ldap server supports TLS
use_ssl = false
# Set to true if connect ldap server with STARTTLS pattern (create connection in insecure, then upgrade to secure connection with TLS)
start_tls = false
# set to true if you want to skip ssl cert validation
ssl_skip_verify = false
# set to the path to your root CA certificate or leave unset to use system defaults
# root_ca_cert = "/path/to/certificate.crt"
# Authentication against LDAP servers requiring client certificates
# client_cert = "/path/to/client.crt"
# client_key = "/path/to/client.key"

# Search user bind dn
bind_dn = "cn=admin,dc=xxxx,dc=xxxxx"
# Search user bind password
# If the password contains # or ; you have to wrap it with triple quotes. Ex """#password;"""
bind_password = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxx'

# User search filter, for example "(cn=%s)" or "(sAMAccountName=%s)" or "(uid=%s)"
search_filter = "(cn=%s)"

# An array of base dns to search through
search_base_dns = ["ou=xxxx,dc=xxxxx,dc=xxxxx"]

## For Posix or LDAP setups that does not support member_of attribute you can define the below settings
## Please check grafana LDAP docs for examples
# group_search_filter = "(&(objectClass=posixGroup)(memberUid=%s))"
# group_search_base_dns = ["ou=groups,dc=grafana,dc=org"]
# group_search_filter_user_attribute = "uid"

# Specify names of the ldap attributes your ldap uses
[servers.attributes]
name = "displayName"
# surname = "sn"
username = "cn"
member_of = "memberOf"
email =  "email"

# Map ldap groups to grafana org roles
# [[servers.group_mappings]]
# group_dn = "*"
# org_role = "Admin"
# To make user an instance admin  (Grafana Admin) uncomment line below
# grafana_admin = true
# The Grafana organization database id, optional, if left out the default org (id 1) will be used
# org_id = 1

# [[servers.group_mappings]]
# group_dn = "ou=xxxxx,dc=xxxxxx,dc=xxxxxx"
# org_role = "Editor"

# [[servers.group_mappings]]
# If you want to match all (or no ldap groups) then you can use wildcard
# group_dn = "*"
# org_role = "Viewer"
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>k8s</category>
        <category>grafana</category>
      </categories>
      <tags>
        <tag>grafana</tag>
        <tag>ldap</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop与hbase支持矩阵</title>
    <url>/hadoop-yu-hbase-zhi-chi-ju-zhen/</url>
    <content><![CDATA[<p>Hadoop版本支持矩阵：</p>
<ul>
<li><code>S</code>=支持</li>
<li><code>X</code>=不支持</li>
<li><code>NT</code>=未测试</li>
</ul>
<table>
<thead>
<tr>
<th>HBase的-1.1.x中</th>
<th>HBase的-1.2.x的</th>
<th>HBase的-1.3.x的</th>
<th>HBase的-2.0.x版本</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>Hadoop-2.0.x-alpha</td>
<td>X</td>
<td>X</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>Hadoop-2.1.0-beta</td>
<td>X</td>
<td>X</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>Hadoop-2.2.0</td>
<td>NT</td>
<td>X</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>Hadoop-2.3.x</td>
<td>NT</td>
<td>X</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>Hadoop-2.4.x</td>
<td>S</td>
<td>S</td>
<td>S</td>
<td>X</td>
</tr>
<tr>
<td>Hadoop-2.5.x</td>
<td>S</td>
<td>S</td>
<td>S</td>
<td>X</td>
</tr>
<tr>
<td>Hadoop-2.6.0</td>
<td>X</td>
<td>X</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>Hadoop-2.6.1+</td>
<td>NT</td>
<td>S</td>
<td>S</td>
<td>S</td>
</tr>
<tr>
<td>Hadoop-2.7.0</td>
<td>X</td>
<td>X</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>Hadoop-2.7.1+</td>
<td>NT</td>
<td>S</td>
<td>S</td>
<td>S</td>
</tr>
<tr>
<td>Hadoop-2.8.0</td>
<td>X</td>
<td>X</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>Hadoop-2.8.1</td>
<td>X</td>
<td>X</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>Hadoop-3.0.0</td>
<td>NT</td>
<td>NT</td>
<td>NT</td>
<td>NT</td>
</tr>
</tbody></table>
<blockquote>
<p>建议使用 Hadoop 2.x：Hadoop 2.x 速度更快，包括短路读取功能，这将有助于提高您的 HBase 随机读取配置文件；Hadoop 2.x 还包括重要的 bug 修复，可以改善您的整体 HBase 体验；HBase 不支持使用早期版本的 Hadoop 运行；有关特定于不同 HBase 版本的要求，请参见下表；Hadoop 3.x 仍处于早期访问版本中，尚未被 HBase 社区对生产用例进行充分测试。</p>
</blockquote>
]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
      <tags>
        <tag>hbase</tag>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop伪分布式搭建</title>
    <url>/hadoop-wei-fen-bu-shi-da-jian/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>一个master，2个slave，只有一个nameNode.</p>
<blockquote>
<p>注意：3台机器的安装目录及配置要求完全一致.可以先配置一台再拷贝到其它机器上.</p>
</blockquote>
<h3 id="主备3台机器"><a href="#主备3台机器" class="headerlink" title="主备3台机器"></a>主备3台机器</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 安装java环境</span>
yum <span class="token function">install</span> -y java-1.8.0-openjdk java-1.8.0-openjdk-devel

vim /etc/profile

<span class="token function">export</span> JAVA_HOME<span class="token operator">=</span>/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-0.el7_7.x86_64
<span class="token comment" spellcheck="true"># hadoop 解压目录</span>
<span class="token function">export</span> HADOOP_HOME<span class="token operator">=</span>/root/hbase/hadoop-2.6.0
<span class="token function">export</span> CLASSPATH<span class="token operator">=</span>.:<span class="token variable">$JAVA_HOME</span>/jre/lib/rt.jar:<span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jar
<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$HADOOP_HOME</span>/bin:<span class="token variable">$HADOOP_HOME</span>/sbin
<span class="token comment" spellcheck="true"># 生效</span>
<span class="token function">source</span> /etc/profile
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="下载二进制包"><a href="#下载二进制包" class="headerlink" title="下载二进制包"></a>下载二进制包</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># zookeeper集群安装省略.参考用docker安装</span>
<span class="token function">wget</span> http://archive.apache.org/dist/zookeeper/zookeeper-3.4.5/zookeeper-3.4.5.tar.gz
 
<span class="token function">wget</span> http://archive.apache.org/dist/hadoop/common/hadoop-2.6.0/hadoop-2.6.0.tar.gz
 
<span class="token function">wget</span> http://archive.apache.org/dist/hbase/1.2.0/hbase-1.2.0-bin.tar.gz
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="添加hadoop用户"><a href="#添加hadoop用户" class="headerlink" title="添加hadoop用户"></a>添加hadoop用户</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">usermod</span> -a -G hadoop hadoop
<span class="token function">passwd</span> hadoop

vim /etc/sudoers

root	ALL<span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> 	ALL
hadoop	ALL<span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> 	ALL
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>配置免密省略.</p>
</blockquote>
<h3 id="创建name-data-tmp目录"><a href="#创建name-data-tmp目录" class="headerlink" title="创建name,data,tmp目录"></a>创建name,data,tmp目录</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p dfs/name
<span class="token function">mkdir</span> -p dfs/data
<span class="token function">mkdir</span> tmp
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="关键配置"><a href="#关键配置" class="headerlink" title="关键配置"></a>关键配置</h3><p>所有配置文件在hadoop-2.6.0/etc/hadoop/下:</p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- hadoop-env.sh   yarn-env.sh 配置JAVA_HOME --></span>

<span class="token comment" spellcheck="true">&lt;!-- core-site.xml  --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://data1:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/root/hbase/tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- hdfs-site.xml --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.name.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/root/hbase/dfs/name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.datanode.data.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/root/hbase/dfs/data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- mapred-site.xml --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapred.job.tracker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>data1:9001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- yarn-site.xml --></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.aux-services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>mapreduce_shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>data1:8032<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.scheduler.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>data1:8030<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.resource-tracker.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>data1:8031<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.admin.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>data1:8033<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.webapp.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>data1:8088<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- slaves, 删除localhost --></span>
[root@data1 hadoop]# cat slaves 
data2
data3
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># master节点进行格式化</span>
hadoop namenode -format
<span class="token comment" spellcheck="true"># 启动</span>
<span class="token punctuation">[</span>root@data1 hbase<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># start-all.sh </span>
This script is Deprecated. Instead use start-dfs.sh and start-yarn.sh
Starting namenodes on <span class="token punctuation">[</span>data1<span class="token punctuation">]</span>
data1: starting namenode, logging to /root/hbase/hadoop-2.6.0/logs/hadoop-root-namenode-data1.out
data3: starting datanode, logging to /root/hbase/hadoop-2.6.0/logs/hadoop-root-datanode-data3.out
data2: starting datanode, logging to /root/hbase/hadoop-2.6.0/logs/hadoop-root-datanode-data2.out
Starting secondary namenodes <span class="token punctuation">[</span>0.0.0.0<span class="token punctuation">]</span>
0.0.0.0: starting secondarynamenode, logging to /root/hbase/hadoop-2.6.0/logs/hadoop-root-secondarynamenode-data1.out
starting yarn daemons
starting resourcemanager, logging to /root/hbase/hadoop-2.6.0/logs/yarn-root-resourcemanager-data1.out
data3: starting nodemanager, logging to /root/hbase/hadoop-2.6.0/logs/yarn-root-nodemanager-data3.out
data2: starting nodemanager, logging to /root/hbase/hadoop-2.6.0/logs/yarn-root-nodemanager-data2.out

<span class="token comment" spellcheck="true"># 检查各个节点的状态</span>
<span class="token punctuation">[</span>root@data1 hbase<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># jps</span>
24048 ResourceManager
24307 Jps
23893 SecondaryNameNode
23711 NameNode

<span class="token punctuation">[</span>root@data2 tmp<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># jps</span>
12341 DataNode
12442 NodeManager
12570 Jps

<span class="token punctuation">[</span>root@data3 tmp<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># jps</span>
5187 DataNode
5288 NodeManager
5416 Jps
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="错误1"><a href="#错误1" class="headerlink" title="错误1"></a>错误1</h3><p>启动的时候报了以下错误,主要原因是<code>底层文件version的配置信息clusterID不一样</code>.删除name，data，tmp文件，重新格式化.</p>
<pre class="line-numbers language-log"><code class="language-log">Starting secondary namenodes [0.0.0.0]
The authenticity of host '0.0.0.0 (0.0.0.0)' can't be established.
ECDSA key fingerprint is SHA256:/bqliO4L8XYMMr/5wVDufH9IjldwXwLWEol3eAEjuzc.
ECDSA key fingerprint is MD5:92:8e:24:a9:a1:e8:a9:55:8d:20:0f:4e:3d:34:dd:f0.
Are you sure you want to continue connecting (yes/no)? yes
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre class="line-numbers language-bash"><code class="language-bash">hadoop fs -mkdir -p /test
hadoop fs -ls /test
hadoop fs -put test.txt /test/
hadoop fs -cat /test/test.txt
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
  </entry>
  <entry>
    <title>hadoop单机版部署测试</title>
    <url>/hadoop-dan-ji-ban-bu-shu-ce-shi/</url>
    <content><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ul>
<li><a href="https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/">hadoop-2.7.7.tar.gz</a></li>
</ul>
<h3 id="配置ssh无密码登录"><a href="#配置ssh无密码登录" class="headerlink" title="配置ssh无密码登录"></a>配置ssh无密码登录</h3><pre class="line-numbers language-sh"><code class="language-sh"># 测试ssh localhost, 默认需要密码
[root@node1 hadoop]# ssh localhost
The authenticity of host 'localhost (::1)' can't be established.
ECDSA key fingerprint is SHA256:Ii9RadytomW4X2LEvMQwRxoOTeGgxfNbOgwXrc/wwZI.
ECDSA key fingerprint is MD5:bc:b5:ef:93:e6:fd:7c:cd:a3:4f:a7:f6:4c:24:c7:a7.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'localhost' (ECDSA) to the list of known hosts.
root@localhost's password: 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sh"><code class="language-sh">ssh-keygen -t dsa -P '' -f ~/.ssh/id_dsa
cat ~/.ssh/id_dsa.pub >> ~/.ssh/authorized_keys
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sh"><code class="language-sh"># 测试免密登录,无需密码即可登录成功
[root@node1 hadoop]# ssh localhost
Last failed login: Thu May  7 11:44:07 CST 2020 from localhost on ssh:notty
There was 1 failed login attempt since the last successful login.
Last login: Thu May  7 11:43:04 2020 from 192.168.41.1
[root@node1 ~]# 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="配置java环境"><a href="#配置java环境" class="headerlink" title="配置java环境"></a>配置java环境</h3><pre class="line-numbers language-sh"><code class="language-sh">#已经部署过了
[root@node1 hadoop]# echo $JAVA_HOME
/usr/local/bin/jdk1.8.0_112
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="安装hadoop"><a href="#安装hadoop" class="headerlink" title="安装hadoop"></a>安装hadoop</h3><p>将<code>hadoop-2.7.7.tar.gz</code>拷贝到<code>/root/hadoop</code>目录下并解压.</p>
<pre class="line-numbers language-sh"><code class="language-sh">[root@node1 hadoop]# pwd
/root/hadoop
[root@node1 hadoop]# tar -zxvf hadoop-2.7.7.tar.gz 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>在<code>/etc/profile</code>或者<code>~/.bash_profile</code>配置环境变量<code>HADOOP_HOME</code>.</p>
<pre class="line-numbers language-sh"><code class="language-sh">export HADOOP_HOME=/root/hadoop/hadoop-2.7.7
export PATH=$PATH:$HADOOP_HOME/bin
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>使配置生效</p>
<pre class="line-numbers language-sh"><code class="language-sh">source /etc/profile
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="配置hadoop"><a href="#配置hadoop" class="headerlink" title="配置hadoop"></a>配置hadoop</h3><p>进入<code>$HADOOP_HOME/etc/hadoop</code>目录，配置<code>hadoop-env.sh</code>等。涉及的配置文件如下：</p>
<pre><code>hadoop-2.9.2/etc/hadoop/hadoop-env.sh
hadoop-2.9.2/etc/hadoop/yarn-env.sh
hadoop-2.9.2/etc/hadoop/core-site.xml
hadoop-2.9.2/etc/hadoop/hdfs-site.xml
hadoop-2.9.2/etc/hadoop/mapred-site.xml
hadoop-2.9.2/etc/hadoop/yarn-site.xml
</code></pre>
<ol>
<li>配置<code>hadoop-env.sh</code></li>
</ol>
<pre class="line-numbers language-sh"><code class="language-sh"># The java implementation to use.
export JAVA_HOME=${JAVA_HOME}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ol start="2">
<li>配置<code>yarn-env.sh</code></li>
</ol>
<pre class="line-numbers language-sh"><code class="language-sh">#export JAVA_HOME=/home/y/libexec/jdk1.6.0/
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="3">
<li>配置<code>core-site.xml</code></li>
</ol>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.default.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://192.168.41.128:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>HDFS的URI，文件系统://namenode标识:端口号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/root/hadoop/tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>namenode上本地的hadoop临时文件夹<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="4">
<li>配置<code>hdfs-site.xml</code></li>
</ol>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.name.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/root/hadoop/name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>namenode上存储hdfs名字空间元数据 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.data.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/root/hadoop/data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>datanode上数据块的物理存储位置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>副本个数，配置默认是3,应小于datanode机器数量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="5">
<li>配置<code>mapred-site.xml</code></li>
</ol>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.framework.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>yarn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="6">
<li>配置<code>yarn-site.xml</code></li>
</ol>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.aux-services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>mapreduce_shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.webapp.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>${yarn.resourcemanager.hostname}:8099<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="启动hadoop"><a href="#启动hadoop" class="headerlink" title="启动hadoop"></a>启动hadoop</h3><ol>
<li>格式化hdfs文件系统</li>
</ol>
<pre class="line-numbers language-sh"><code class="language-sh">bin/hadoop namenode -format
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="2">
<li>启动namenode</li>
</ol>
<pre><code>sbin/hadoop-daemon.sh start namenode
</code></pre>
<ol start="3">
<li>启动datanode</li>
</ol>
<pre><code>sbin/hadoop-daemon.sh start datanode
</code></pre>
<ol start="4">
<li>启动yarn</li>
</ol>
<pre><code>sbin/start-yarn.sh
</code></pre>
<ol start="5">
<li>验证<br>查看<code>logs/</code>目录下是否有错误日志,通过<code>jps</code>命令查看后台进程.</li>
</ol>
<pre class="line-numbers language-sh"><code class="language-sh">[root@node1 hadoop-2.7.7]# jps
17152 NodeManager
17920 Jps
16721 DataNode #数据节点
16866 ResourceManager
62190 HMaster # Hbase
16623 NameNode #名称节点
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="6">
<li>查看<code>UI</code></li>
</ol>
<ul>
<li>Nodes of the cluster: <a href="http://192.168.41.128:8099/cluster/nodes">http://192.168.41.128:8099/cluster/nodes</a></li>
<li>Applications running on this node: <a href="http://192.168.41.128:8042/node/allApplications">http://192.168.41.128:8042/node/allApplications</a></li>
<li>Browse Hdfs: <a href="http://192.168.41.128:50070/">http://192.168.41.128:50070/</a></li>
<li>DataNode overview: <a href="http://192.168.41.128:50075/">http://192.168.41.128:50075/</a></li>
</ul>
<h3 id="提交MapReduce作业"><a href="#提交MapReduce作业" class="headerlink" title="提交MapReduce作业"></a>提交<code>MapReduce</code>作业</h3><pre class="line-numbers language-sh"><code class="language-sh">bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.7.jar pi 2 100
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="hdfs使用"><a href="#hdfs使用" class="headerlink" title="hdfs使用"></a>hdfs使用</h3><ol>
<li>创建一个目录</li>
</ol>
<pre><code>hadoop fs -mkdir /test
</code></pre>
<ol start="2">
<li>上传一个文件到指定目录</li>
</ol>
<pre><code>hadoop fs -put README.txt /test
</code></pre>
<p>或者</p>
<pre><code>hadoop fs -moveFromLocal README.txt /test
</code></pre>
<ol start="3">
<li>查看目录下文件</li>
</ol>
<pre class="line-numbers language-sh"><code class="language-sh">[root@node1 hadoop-2.7.7]# hadoop fs -ls /test
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>更多命令<a href="/2020/05/06/hdfs-chang-yong-ming-ling/">参考</a></p>
</blockquote>
]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
      <tags>
        <tag>hdfs</tag>
      </tags>
  </entry>
  <entry>
    <title>harbor更新ssl证书</title>
    <url>/harbor-geng-xin-ssl-zheng-shu/</url>
    <content><![CDATA[<h3 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h3><ul>
<li><a href="https://freessl.cn/">FreeSSL.cn,一个提供免费HTTPS证书申请的网站</a></li>
</ul>
<blockquote>
<p>下载下来的证书<code>.pem</code>格式可以直接修改成<code>.crt</code>格式.<br>私钥<code>.key</code>格式的文件.</p>
</blockquote>
<h3 id="更新harbor证书"><a href="#更新harbor证书" class="headerlink" title="更新harbor证书"></a>更新harbor证书</h3><blockquote>
<p>服务器<code>harbor</code>由<code>docker-compose</code>启动.</p>
</blockquote>
<ol>
<li>更新这个目录下证书文件</li>
</ol>
<pre class="line-numbers language-sh"><code class="language-sh">cat harbor.yml
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-yml"><code class="language-yml"># https related config
https:
#   # https port for harbor, default is 443
  port: 443
#   # The path of cert and key files for nginx
  certificate: /usr/local/bin/harbor/certs/harbor.crt
  private_key: /usr/local/bin/harbor/certs/harbor.key
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>找到<code>harbor</code>的<code>nginx</code>映射的<code>cert</code>目录,更新其中的证书.</li>
</ol>
<pre class="line-numbers language-sh"><code class="language-sh">cat docker-compose.yml 
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">proxy</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> goharbor/nginx<span class="token punctuation">-</span>photon<span class="token punctuation">:</span>v1.9.1
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nginx
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ./common/config/nginx<span class="token punctuation">:</span>/etc/nginx<span class="token punctuation">:</span>z
      <span class="token punctuation">-</span> /data/harbor/secret/cert<span class="token punctuation">:</span>/etc/cert<span class="token punctuation">:</span>z
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> harbor
    <span class="token key atrule">dns_search</span><span class="token punctuation">:</span> .
<span class="token comment" spellcheck="true"># ...</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="3">
<li>重启<code>nginx</code></li>
</ol>
<pre class="line-numbers language-sh"><code class="language-sh">docker-compose restart proxy
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>ssl</tag>
        <tag>harbor</tag>
      </tags>
  </entry>
  <entry>
    <title>hbase-client java API 操作</title>
    <url>/hbase-client-cao-zuo/</url>
    <content><![CDATA[<h3 id="spring-boot集成hbase-client"><a href="#spring-boot集成hbase-client" class="headerlink" title="spring boot集成hbase-client"></a>spring boot集成hbase-client</h3><blockquote>
<p>参考上文使用<code>spring-boot-starter-hbase</code>和<code>RowMapper</code>.</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> HbaseTemplate hbaseTemplate<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
* 创建表
* @return
* @throws IOException
*/</span>
<span class="token keyword">public</span> String <span class="token function">createTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
    Admin admin <span class="token operator">=</span> hbaseTemplate<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAdmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    HTableDescriptor hTableDescriptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HTableDescriptor</span><span class="token punctuation">(</span>TableName<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    hTableDescriptor<span class="token punctuation">.</span><span class="token function">addFamily</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HColumnDescriptor</span><span class="token punctuation">(</span>column_family<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>admin<span class="token punctuation">.</span><span class="token function">tableExists</span><span class="token punctuation">(</span>TableName<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"tableExists"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        admin<span class="token punctuation">.</span><span class="token function">createTable</span><span class="token punctuation">(</span>hTableDescriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="批量插入数据"><a href="#批量插入数据" class="headerlink" title="批量插入数据"></a>批量插入数据</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
* 批量插入数据
* @param i
*/</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    List<span class="token operator">&lt;</span>Mutation<span class="token operator">></span> puts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 设值</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Put put <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Put</span><span class="token punctuation">(</span>Bytes<span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>18752038428L <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        put<span class="token punctuation">.</span><span class="token function">addColumn</span><span class="token punctuation">(</span>Bytes<span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span>column_family<span class="token punctuation">)</span><span class="token punctuation">,</span> Bytes<span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Bytes<span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"JThink"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        put<span class="token punctuation">.</span><span class="token function">addColumn</span><span class="token punctuation">(</span>Bytes<span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span>column_family<span class="token punctuation">)</span><span class="token punctuation">,</span> Bytes<span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Bytes<span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        puts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>put<span class="token punctuation">)</span><span class="token punctuation">;</span>
        i<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>hbaseTemplate<span class="token punctuation">.</span><span class="token function">saveOrUpdates</span><span class="token punctuation">(</span>table_name<span class="token punctuation">,</span> puts<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="根据rowkey查询数据"><a href="#根据rowkey查询数据" class="headerlink" title="根据rowkey查询数据"></a>根据rowkey查询数据</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
* 根据rowkey查询数据
* @param row
* @return
*/</span>
<span class="token keyword">public</span> PeopleDto <span class="token function">get</span><span class="token punctuation">(</span>String row<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    PeopleDto dto <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hbaseTemplate<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>table_name<span class="token punctuation">,</span> row<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PeopleRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> dto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="根据rowkey删除数据"><a href="#根据rowkey删除数据" class="headerlink" title="根据rowkey删除数据"></a>根据rowkey删除数据</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
* 根据rowkey删除数据
*/</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>String rk<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Mutation delete <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Delete</span><span class="token punctuation">(</span>Bytes<span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span>rk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>hbaseTemplate<span class="token punctuation">.</span><span class="token function">saveOrUpdate</span><span class="token punctuation">(</span>table_name<span class="token punctuation">,</span> delete<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="批量查询数据"><a href="#批量查询数据" class="headerlink" title="批量查询数据"></a>批量查询数据</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
* 区间查找 [startRow, stopRow)
* @param startRow
* @param stopRow
* @return
*/</span>
<span class="token keyword">public</span> List<span class="token operator">&lt;</span>PeopleDto<span class="token operator">></span> <span class="token function">query</span><span class="token punctuation">(</span>String startRow<span class="token punctuation">,</span> String stopRow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Scan scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scan</span><span class="token punctuation">(</span>Bytes<span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span>startRow<span class="token punctuation">)</span><span class="token punctuation">,</span> Bytes<span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span>stopRow<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    scan<span class="token punctuation">.</span><span class="token function">setCaching</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    List<span class="token operator">&lt;</span>PeopleDto<span class="token operator">></span> dtos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hbaseTemplate<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>table_name<span class="token punctuation">,</span> scan<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PeopleRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> dtos<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>注意查找的结果遵循<code>左闭右开</code>原则.</p>
</blockquote>
<h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 要查询的表</span>
HTable table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HTable</span><span class="token punctuation">(</span>conf<span class="token punctuation">,</span> <span class="token string">"table1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 要查询的字段</span>
Scan scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
scan<span class="token punctuation">.</span><span class="token function">addColumn</span><span class="token punctuation">(</span>Bytes<span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"cf"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Bytes<span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
scan<span class="token punctuation">.</span><span class="token function">addColumn</span><span class="token punctuation">(</span>Bytes<span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"cf"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Bytes<span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// where条件</span>
<span class="token comment" spellcheck="true">// a = 1</span>
SingleColumnValueFilter a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleColumnValueFilter</span><span class="token punctuation">(</span>Bytes<span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"cf"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        Bytes<span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CompareOp<span class="token punctuation">.</span>EQUAL<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BinaryComparator</span><span class="token punctuation">(</span>Bytes<span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
filterList<span class="token punctuation">.</span><span class="token function">addFilter</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// b = 2</span>
SingleColumnValueFilter b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleColumnValueFilter</span><span class="token punctuation">(</span>Bytes<span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"cf"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        Bytes<span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CompareOp<span class="token punctuation">.</span>EQUAL<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BinaryComparator</span><span class="token punctuation">(</span>Bytes<span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// and</span>
FilterList filterList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterList</span><span class="token punctuation">(</span>Operator<span class="token punctuation">.</span>MUST_PASS_ALL<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
scan<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span>filterList<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://github.com/SpringForAll/spring-boot-starter-hbase">https://github.com/SpringForAll/spring-boot-starter-hbase</a></li>
<li><a href="https://www.yiibai.com/hbase/hbase_client_api.html">https://www.yiibai.com/hbase/hbase_client_api.html</a></li>
</ul>
]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
      <tags>
        <tag>hbase</tag>
        <tag>hbase-client</tag>
      </tags>
  </entry>
  <entry>
    <title>hbase之namespace</title>
    <url>/hbase-zhi-namespace/</url>
    <content><![CDATA[<h3 id="查看namespace"><a href="#查看namespace" class="headerlink" title="查看namespace"></a>查看namespace</h3><pre class="line-numbers language-sh"><code class="language-sh">hbase(main):008:0> list_namespace
NAMESPACE            
default                
hbase                 
test
3 row(s)
Took 0.0327 seconds 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p><code>default</code>：创建表时未指定命名空间的话默认挂在<code>default</code>下。</p>
</blockquote>
<h3 id="查看namespace所有表"><a href="#查看namespace所有表" class="headerlink" title="查看namespace所有表"></a>查看namespace所有表</h3><pre class="line-numbers language-sh"><code class="language-sh">hbase(main):009:0> list_namespace_tables "test"
TABLE
test
user_table
2 row(s)
Took 0.0300 seconds
=> ["test", "user_table"]
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="创建namespace"><a href="#创建namespace" class="headerlink" title="创建namespace"></a>创建namespace</h3><pre class="line-numbers language-sh"><code class="language-sh">hbase(main):010:0> create_namespace "test"
Took 0.2781 seconds
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sh"><code class="language-sh">hbase(main):018:0> create_namespace "test", {"author"=>"test", "create_time"=>"2020-01-4 17:51:53"}
Took 0.2262 seconds
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="查看namespace信息"><a href="#查看namespace信息" class="headerlink" title="查看namespace信息"></a>查看namespace信息</h3><pre class="line-numbers language-sh"><code class="language-sh">describe_namespace "test"
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="修改namespace"><a href="#修改namespace" class="headerlink" title="修改namespace"></a>修改namespace</h3><pre class="line-numbers language-sh"><code class="language-sh">alter_namespace "test", {METHOD=>"set", "author"=>"wuzhiyong"}
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-sh"><code class="language-sh">alter_namespace "test", {METHOD=>"set", "email"=>"1154365135@qq.com"}
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-sh"><code class="language-sh">alter_namespace "test", {METHOD=>"unset", NAME=>"email"}
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="删除namespace"><a href="#删除namespace" class="headerlink" title="删除namespace"></a>删除namespace</h3><pre class="line-numbers language-sh"><code class="language-sh">drop_namespace "test"
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>注意要删除的<code>namespace</code>必须是<strong>空</strong>的，其下没有表，否则会删除失败.</p>
</blockquote>
<h3 id="创建表时指定namespace"><a href="#创建表时指定namespace" class="headerlink" title="创建表时指定namespace"></a>创建表时指定namespace</h3><pre class="line-numbers language-sh"><code class="language-sh">create "test:user", "f"
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://www.cnblogs.com/cc11001100/p/9911730.html">https://www.cnblogs.com/cc11001100/p/9911730.html</a></li>
</ul>
]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
      <tags>
        <tag>hbase</tag>
        <tag>namespace</tag>
      </tags>
  </entry>
  <entry>
    <title>hbase单机版部署及简单测试</title>
    <url>/hbase-dan-ji-ban-bu-shu-ji-jian-dan-ce-shi/</url>
    <content><![CDATA[<p>在<code>Centos7</code>上部署单机版<code>hbase</code></p>
<h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p><a href="https://www.apache.org/dyn/closer.lua/hbase/">hbase</a></p>
<p><a href="http://hbase.apache.org/book.html#quickstart">hbase官网</a></p>
<h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><pre><code>tar -zxvf hbase-2.2.4.bin.tar.gz
</code></pre>
<h3 id="配置hbase-env-sh"><a href="#配置hbase-env-sh" class="headerlink" title="配置hbase-env.sh"></a>配置<code>hbase-env.sh</code></h3><p>部署<code>JDK</code>，查看<code>JAVA_HOME</code>路径。</p>
<pre class="line-numbers language-sh"><code class="language-sh">[root@node1 hbase]# echo $JAVA_HOME
/usr/local/bin/jdk1.8.0_112
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>配置<code>conf/hbase-env.sh</code></p>
<pre class="line-numbers language-sh"><code class="language-sh">...
# 配置java路径
export JAVA_HOME=/usr/local/bin/jdk1.8.0_112
# 配置是否使用自身Zookeeper
export HBASE_MANAGES_ZK=true
...
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>编辑<code>conf/hbase-site.xml</code></p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.rootdir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>file:///root/hbase/rootdir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>The directory shared byregion servers.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
<span class="token entity" title="&nbsp;">&amp;nbsp;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>file:///root/hbase/dfs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- hbase的端口 --></span>
    <span class="token comment" spellcheck="true">&lt;!-- &lt;property>
        &lt;name>hbase.zookeeper.property.clientPort&lt;/name>
        &lt;value>2181&lt;/value>
        &lt;description>Property from ZooKeeper'sconfig zoo.cfg. The port at which the clients will connect.
        &lt;/description>
    &lt;/property> --></span>
    <span class="token comment" spellcheck="true">&lt;!--&amp;nbsp; 超时时间 --></span>
    <span class="token comment" spellcheck="true">&lt;!-- &lt;property>
        &lt;name>zookeeper.session.timeout&lt;/name>
        &lt;value>120000&lt;/value>
    &lt;/property> --></span>
    <span class="token comment" spellcheck="true">&lt;!--&amp;nbsp; zookeeper 集群配置。如果是集群，则添加其它的主机地址 --></span>
    <span class="token comment" spellcheck="true">&lt;!-- &lt;property>
        &lt;name>hbase.zookeeper.quorum&lt;/name>
        &lt;value>localhost:2181&lt;/value>
    &lt;/property> --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/root/hbase/tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- &lt;property>
        &lt;name>hbase.cluster.distributed&lt;/name>
        &lt;value>false&lt;/value>
    &lt;/property> --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.zookeeper.property.dataDir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/root/hbase/datadir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>zookeeper.znode.parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/hbase<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><pre><code>./bin/start-hbase.sh
</code></pre>
<h3 id="Web-UI"><a href="#Web-UI" class="headerlink" title="Web UI"></a>Web UI</h3><p><code>http://192.168.41.128:16010</code></p>
<h3 id="进入shell命令行"><a href="#进入shell命令行" class="headerlink" title="进入shell命令行"></a>进入shell命令行</h3><pre><code>./bin/hbase shell
</code></pre>
<h3 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h3><h4 id="创建一个表，需要指明table-name和ColumnFamily-name"><a href="#创建一个表，需要指明table-name和ColumnFamily-name" class="headerlink" title="创建一个表，需要指明table name和ColumnFamily name"></a>创建一个表，需要指明<code>table name</code>和<code>ColumnFamily name</code></h4><pre class="line-numbers language-sh"><code class="language-sh">hbase(main):002:0> create 'test', 'cf'
Created table test
Took 0.8251 seconds
=> Hbase::Table - test
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="确认"><a href="#确认" class="headerlink" title="确认"></a>确认</h4><pre class="line-numbers language-sh"><code class="language-sh">hbase(main):004:0> list 'test'
TABLE
test
1 row(s)
Took 0.0077 seconds
=> ["test"]
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="describe-‘test’"><a href="#describe-‘test’" class="headerlink" title="describe ‘test’"></a>describe ‘test’</h4><pre class="line-numbers language-sh"><code class="language-sh">hbase(main):005:0> describe 'test'
Table test is ENABLED
test
COLUMN FAMILIES DESCRIPTION
{NAME => 'cf', VERSIONS => '1', EVICT_BLOCKS_ON_CLOSE => 'false', NEW_VERSION_BEHAVIOR => 'false', KEEP_DELETED_CELLS => 'FALSE', CACHE_DATA_ON_WRITE => 'false', DATA_BLOCK_ENCODING => 'NONE', TTL => 'FOREVER', MIN_VERSIONS => '0', REPL
ICATION_SCOPE => '0', BLOOMFILTER => 'ROW', CACHE_INDEX_ON_WRITE => 'false', IN_MEMORY => 'false', CACHE_BLOOMS_ON_WRITE => 'false', PREFETCH_BLOCKS_ON_OPEN => 'false', COMPRESSION => 'NONE', BLOCKCACHE => 'true', BLOCKSIZE => '65536'} 

1 row(s)

QUOTAS                                                                                                                                                                  0 row(s)
Took 0.2132 seconds 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h4><pre class="line-numbers language-sh"><code class="language-sh">hbase(main):003:0> put 'test', 'row1', 'cf:a', 'value1'
0 row(s) in 0.0850 seconds

hbase(main):004:0> put 'test', 'row2', 'cf:b', 'value2'
0 row(s) in 0.0110 seconds

hbase(main):005:0> put 'test', 'row3', 'cf:c', 'value3'
0 row(s) in 0.0100 seconds
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="查看写入的数据"><a href="#查看写入的数据" class="headerlink" title="查看写入的数据"></a>查看写入的数据</h4><pre class="line-numbers language-sh"><code class="language-sh">hbase(main):006:0> scan 'test'
ROW                                      COLUMN+CELL
 row1                                    column=cf:a, timestamp=1586504678931, value=value1
 row2                                    column=cf:b, timestamp=1586504712029, value=value2
 row3                                    column=cf:c, timestamp=1586504717104, value=value3
3 row(s) in 0.0230 seconds
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="获取一行数据"><a href="#获取一行数据" class="headerlink" title="获取一行数据"></a>获取一行数据</h4><pre class="line-numbers language-sh"><code class="language-sh">hbase(main):007:0> get 'test', 'row1'
COLUMN                                   CELL
 cf:a                                    timestamp=1586504678931, value=value1
1 row(s) in 0.0350 seconds
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="获取一个字段"><a href="#获取一个字段" class="headerlink" title="获取一个字段"></a>获取一个字段</h4><pre class="line-numbers language-sh"><code class="language-sh">hbase(main):007:0> get 'test', 'row1','cf:a'
COLUMN                                   CELL
 cf:a                                    timestamp=1586504678931, value=value1
1 row(s) in 0.0350 seconds
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="返回一个字段的多个版本值"><a href="#返回一个字段的多个版本值" class="headerlink" title="返回一个字段的多个版本值"></a>返回一个字段的多个版本值</h4><p>默认<code>Hbase</code>列族最多保存一个版本的数据，可以通过下面命令修改,也可以使用<code>HColumnDescriptor</code>：</p>
<pre class="line-numbers language-sh"><code class="language-sh">alter 'test', NAME => 'cf', VERSIONS => 3
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>从<code>HBase 0.98.2</code>开始，您可以通过在<code>hbase-site.xml</code>中设置<code>hbase.column.max.version</code>为所有新创建列保留的最大版本数指定一个全局默认值。</p>
<pre><code>get 'test', 'row1', {COLUMN=&gt;'cf:a',VERSIONS=&gt;3}
</code></pre>
<h4 id="禁用或者恢复表"><a href="#禁用或者恢复表" class="headerlink" title="禁用或者恢复表"></a>禁用或者恢复表</h4><pre class="line-numbers language-sh"><code class="language-sh">hbase(main):008:0> disable 'test'
0 row(s) in 1.1820 seconds

hbase(main):009:0> enable 'test'
0 row(s) in 0.1770 seconds
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="添加一个列族"><a href="#添加一个列族" class="headerlink" title="添加一个列族"></a>添加一个列族</h4><pre class="line-numbers language-sh"><code class="language-sh">hbase(main):012:0> alter 'test',{NAME=>'haha'}
Updating all regions with the new schema...
1/1 regions updated.
Done.
Took 2.0149 seconds 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sh"><code class="language-sh">hbase(main):014:0> alter 'test',NAME=>'hehe'
Updating all regions with the new schema...
1/1 regions updated.
Done.
Took 1.9555 seconds 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="删除一个列族"><a href="#删除一个列族" class="headerlink" title="删除一个列族"></a>删除一个列族</h4><pre class="line-numbers language-sh"><code class="language-sh">hbase(main):009:0> alter 'test',{NAME=>'haha',METHOD=>'delete'}
Updating all regions with the new schema...
1/1 regions updated.
Done.
Took 1.9296 seconds
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sh"><code class="language-sh">hbase(main):013:0> alter 'test','delete'=>'haha'
Updating all regions with the new schema...
1/1 regions updated.
Done.
Took 1.8706 seconds 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sh"><code class="language-sh"># 添加一个列族，同时删除一个列族
hbase(main):011:0> alter 'test', {NAME => 'hehe'}, {NAME => 'myInfo', METHOD => 'delete'}
Updating all regions with the new schema...
1/1 regions updated.
Done.
Updating all regions with the new schema...
1/1 regions updated.
Done.
0 row(s) in 3.8260 seconds
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="清空表"><a href="#清空表" class="headerlink" title="清空表"></a>清空表</h4><pre class="line-numbers language-sh"><code class="language-sh">hbase(main):013:0> truncate 'test'
Truncating 'test' table (it may take a while):
 - Disabling table...
 - Truncating table...
0 row(s) in 3.6760 seconds
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><p>删除表或者修改表的配置前，需要禁用表</p>
<pre class="line-numbers language-sh"><code class="language-sh">hbase(main):011:0> drop 'test'
0 row(s) in 0.1370 seconds
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="退出Shell"><a href="#退出Shell" class="headerlink" title="退出Shell"></a>退出Shell</h3><p><code>quit</code> 或者 <code>Ctrl+D</code></p>
<h3 id="停止Hbase"><a href="#停止Hbase" class="headerlink" title="停止Hbase"></a>停止Hbase</h3><pre class="line-numbers language-sh"><code class="language-sh">./bin/stop-hbase.sh
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
      <tags>
        <tag>hbase</tag>
      </tags>
  </entry>
  <entry>
    <title>hbase shell常用命令</title>
    <url>/hbase-chang-yong-ming-ling/</url>
    <content><![CDATA[<h3 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>status</td>
<td>提供HBase的状态，例如，服务器的数量。</td>
</tr>
<tr>
<td>version</td>
<td>提供正在使用HBase版本。</td>
</tr>
<tr>
<td>table_help</td>
<td>表引用命令提供帮助。</td>
</tr>
<tr>
<td>whoami</td>
<td>提供有关用户的信息。</td>
</tr>
</tbody></table>
<h3 id="数据定义"><a href="#数据定义" class="headerlink" title="数据定义"></a>数据定义</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>create</td>
<td>用于创建一个表。</td>
</tr>
<tr>
<td>list</td>
<td>用于列出HBase的所有表。</td>
</tr>
<tr>
<td>disable</td>
<td>用于禁用表。</td>
</tr>
<tr>
<td>is_disabled</td>
<td>用于验证表是否被禁用。</td>
</tr>
<tr>
<td>enable</td>
<td>用于启用一个表。</td>
</tr>
<tr>
<td>is_enabled</td>
<td>用于验证表是否已启用。</td>
</tr>
<tr>
<td>describe</td>
<td>用于提供了一个表的描述。</td>
</tr>
<tr>
<td>alter</td>
<td>用于改变一个表。</td>
</tr>
<tr>
<td>exists</td>
<td>用于验证表是否存在。</td>
</tr>
<tr>
<td>drop</td>
<td>用于从HBase中删除表。</td>
</tr>
<tr>
<td>drop_all</td>
<td>用于丢弃在命令中给出匹配“regex”的表。</td>
</tr>
</tbody></table>
<h3 id="数据操作语言"><a href="#数据操作语言" class="headerlink" title="数据操作语言"></a>数据操作语言</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>put</td>
<td>用于把指定列在指定的行中单元格的值在一个特定的表。</td>
</tr>
<tr>
<td>get</td>
<td>用于取行或单元格的内容。</td>
</tr>
<tr>
<td>delete</td>
<td>用于删除表中的单元格值。</td>
</tr>
<tr>
<td>deleteall</td>
<td>用于删除给定行的所有单元格。</td>
</tr>
<tr>
<td>scan</td>
<td>用于扫描并返回表数据。</td>
</tr>
<tr>
<td>count</td>
<td>用于计数并返回表中的行的数目。</td>
</tr>
<tr>
<td>truncate</td>
<td>用于禁用、删除和重新创建一个指定的表。清空表。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
      <tags>
        <tag>hbase</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>hbase数据版本</title>
    <url>/hbase-shu-ju-ban-ben/</url>
    <content><![CDATA[<h3 id="Hbase版本数量"><a href="#Hbase版本数量" class="headerlink" title="Hbase版本数量"></a>Hbase版本数量</h3><p>Hbase版本数量分为<code>最大版本数量</code>和<code>最小版本数量</code>：</p>
<ul>
<li><strong>HBase最大版本数量</strong>:HBase 通过 HColumnDescriptor 为每个列族配置要存储的最大行数版本。最大版本的默认值为1。最大版本的数量可能需要根据应用程序需求增加或减少。不建议将最高版本数设置为极高的级别（例如，数百个或更多）。</li>
<li><strong>HBase最小版本数量</strong>：与最大行版本数一样，HBase 通过 HColumnDescriptor 为每个列族配置要保留的最小行数版本。最小版本的默认值为0，这意味着该功能被禁用。行版本参数的最小数目与<code>生存时间</code>参数一起使用，并且可以与行版本参数的数目组合在一起，以允许诸如“保留最多T分钟值的数据，最多N个版本，但是至少保留 M 个版本 “（其中M 是最小行版本数的值，<code>M &lt; N</code> ）。仅当对列族启用了生存时间并且必须小于行版本的数量时，才应设置此参数。</li>
</ul>
<h3 id="HBase-生存时间（TTL）"><a href="#HBase-生存时间（TTL）" class="headerlink" title="HBase 生存时间（TTL）"></a>HBase 生存时间（TTL）</h3><ul>
<li>ColumnFamilies 可以以<code>秒</code>为单位来设置 TTL（<code>Time To Live</code>）长度，一旦达到到期时间，HBase 将自动删除行。</li>
<li>也支持设置时间以每个单元为基础生存。</li>
<li>单元 TTL 以毫秒为单位而不是秒。</li>
<li>单元 TTL 不能将一个单元的有效生命周期延长超过 ColumnFamily 级 TTL 设置。</li>
</ul>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>默认<code>Hbase</code>列族最多保存一个版本的数据，可以通过下面命令修改,也可以使用<code>HColumnDescriptor</code>：</p>
<pre class="line-numbers language-sh"><code class="language-sh">alter 'test', NAME => 'cf', VERSIONS => 3
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>创建表的时候指定版本数量:</p>
<pre class="line-numbers language-sh"><code class="language-sh">hbase(main):018:0> create 'test',{NAME=>'base_info',VERSIONS=>3 },{NAME=>'extra_info',VERSIONS=>1 } 
0 row(s) in 4.2670 seconds
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>更多详细的用法可以参考<code>help 'create'</code>:</p>
<pre class="line-numbers language-sh"><code class="language-sh">hbase(main):016:0> help 'create'
Creates a table. Pass a table name, and a set of column family
specifications (at least one), and, optionally, table configuration.
Column specification can be a simple string (name), or a dictionary
(dictionaries are described below in main help output), necessarily
including NAME attribute.
Examples:

Create a table with namespace=ns1 and table qualifier=t1
  hbase> create 'ns1:t1', {NAME => 'f1', VERSIONS => 5}

Create a table with namespace=default and table qualifier=t1
  hbase> create 't1', {NAME => 'f1'}, {NAME => 'f2'}, {NAME => 'f3'}
  hbase> # The above in shorthand would be the following:
  hbase> create 't1', 'f1', 'f2', 'f3'
  hbase> create 't1', {NAME => 'f1', VERSIONS => 1, TTL => 2592000, BLOCKCACHE => true}
  hbase> create 't1', {NAME => 'f1', CONFIGURATION => {'hbase.hstore.blockingStoreFiles' => '10'}}
  hbase> create 't1', {NAME => 'f1', IS_MOB => true, MOB_THRESHOLD => 1000000, MOB_COMPACT_PARTITION_POLICY => 'weekly'}

Table configuration options can be put at the end.
Examples:

  hbase> create 'ns1:t1', 'f1', SPLITS => ['10', '20', '30', '40']
  hbase> create 't1', 'f1', SPLITS => ['10', '20', '30', '40']
  hbase> create 't1', 'f1', SPLITS_FILE => 'splits.txt', OWNER => 'johndoe'
  hbase> create 't1', {NAME => 'f1', VERSIONS => 5}, METADATA => { 'mykey' => 'myvalue' }
  hbase> # Optionally pre-split the table into NUMREGIONS, using
  hbase> # SPLITALGO ("HexStringSplit", "UniformSplit" or classname)
  hbase> create 't1', 'f1', {NUMREGIONS => 15, SPLITALGO => 'HexStringSplit'}
  hbase> create 't1', 'f1', {NUMREGIONS => 15, SPLITALGO => 'HexStringSplit', REGION_REPLICATION => 2, CONFIGURATION => {'hbase.hregion.scan.loadColumnFamiliesOnDemand' => 'true'}}
  hbase> create 't1', 'f1', {SPLIT_ENABLED => false, MERGE_ENABLED => false}
  hbase> create 't1', {NAME => 'f1', DFS_REPLICATION => 1}

You can also keep around a reference to the created table:

  hbase> t1 = create 't1', 'f1'

Which gives you a reference to the table named 't1', on which you can then
call methods.
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
      <tags>
        <tag>hbase</tag>
      </tags>
  </entry>
  <entry>
    <title>hbase的rowkey设计</title>
    <url>/hbase-de-rowkey-she-ji/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>HBase是一个<code>K/V</code>存储型NoSQL数据库，与一般k/v数据库不同的是，Hbase的<code>value</code>由<code>rowkey</code>、<code>column family</code>:<code>qualifier</code>和<code>TimeStamp</code>这个三个维度快速定位。</p>
<p>HBase中rowkey可以唯一标识一行记录，在HBase查询的时候，有两种方式：</p>
<ul>
<li>通过get方式，指定rowkey获取唯一一条记录</li>
<li>通过scan方式，设置startRow和stopRow参数进行范围匹配</li>
<li>全表扫描，即直接扫描整张表中所有行记录</li>
</ul>
<h3 id="rowkey长度原则"><a href="#rowkey长度原则" class="headerlink" title="rowkey长度原则"></a>rowkey长度原则</h3><p>rowkey是一个二进制码流，可以是任意字符串，最大长度64kb，实际应用中一般为10-100bytes，以byte[]形式保存，一般设计成定长。</p>
<blockquote>
<p>建议越短越好，不要超过16个字节</p>
</blockquote>
<h3 id="rowkey散列原则"><a href="#rowkey散列原则" class="headerlink" title="rowkey散列原则"></a>rowkey散列原则</h3><ul>
<li>尽量不要将rowkey设计成连续的值，如时间戳;</li>
<li>为rowkey增加随机散列字段，使数据均衡分布在每个RegionServer;</li>
<li>如果没有散列字段，所有的数据都会集中在一个RegionServer上，这样在数据检索的时候负载会集中在个别的RegionServer上，造成热点问题，会降低查询效率。</li>
</ul>
<blockquote>
<p><strong>什么是热点?</strong><br>热点发生在大量的client直接访问集群的一个或极少数个节点（访问可能是读，写或者其他操作）。大量访问会使热点region所在的单个机器超出自身承受能力，引起性能下降甚至region不可用.</p>
</blockquote>
<h3 id="rowkey唯一原则"><a href="#rowkey唯一原则" class="headerlink" title="rowkey唯一原则"></a>rowkey唯一原则</h3><p>必须在设计上保证其唯一性，rowkey是按照字典顺序排序存储的.</p>
<h3 id="设计方法"><a href="#设计方法" class="headerlink" title="设计方法"></a>设计方法</h3><ul>
<li>Salting: 指将随机数据添加到行键的开头。</li>
<li>Hashing: 哈希会使同一行永远用一个前缀加盐。</li>
<li>反转: 以手机号为rowkey，可以将手机号反转后的字符串作为rowkey</li>
<li>时间戳反转: <code>Long.Max_Value - timestamp</code></li>
<li>尽量保持 ColumnFamily 名称尽可能小，最好是一个字符</li>
<li>虽然详细的属性名称更易于阅读，但更喜欢使用较短的属性名称来存储在<code>HBase</code>中。</li>
</ul>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://zhuanlan.zhihu.com/p/64748254">https://zhuanlan.zhihu.com/p/64748254</a></li>
<li><a href="https://wiki.imooc.com/hbase/rowkey.html">https://wiki.imooc.com/hbase/rowkey.html</a></li>
</ul>
]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
      <tags>
        <tag>hbase</tag>
        <tag>rowkey</tag>
      </tags>
  </entry>
  <entry>
    <title>hbase集群搭建</title>
    <url>/hbase-ji-qun-da-jian/</url>
    <content><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ul>
<li>已经配置好java环境</li>
<li>已经搭建zookeeper集群</li>
<li>已经搭建Hadoop集群</li>
<li>准备3台机器</li>
</ul>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>拷贝hadoop的<code>hdfs-site.xml</code>和<code>core-site.xml</code> 放到<code>hbase/conf</code>下.</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cp</span> hdfs-site.xml /root/hbase/hbase-1.2.0/conf/
<span class="token function">cp</span> core-site.xml  /root/hbase/hbase-1.2.0/conf/
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ol start="2">
<li>配置hbase-env.sh</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> JAVA_HOME<span class="token operator">=</span>/usr/local/java/jdk1.8.0_171
<span class="token comment" spellcheck="true"># 告诉hbase使用外部的zk</span>
<span class="token function">export</span> HBASE_MANAGES_ZK<span class="token operator">=</span>false
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ol start="3">
<li>配置hbase-site.xml</li>
</ol>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- hdfs://data1:9000注意和core-site里保持一致 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://data1:9000/hbase<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.cluster.distributed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.zookeeper.quorum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>data1:2181,data2:2181,data3:2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="4">
<li>配置regionservers</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@data1 conf<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat regionservers </span>
data2
data3
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ol start="5">
<li>配置backup-masters</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> data2 <span class="token operator">></span> backup-masters
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="6">
<li>将hbase程序及配置拷贝到其它机器</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">scp</span> -r hbase-1.2.0 root@data2:/root/hbase/
<span class="token function">scp</span> -r hbase-1.2.0 root@data3:/root/hbase/
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ol start="7">
<li>启动hbase</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 在master节点启动即可</span>
bin/start-hbase.sh
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ol start="8">
<li>配置环境变量</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash">vim /etc/profile
<span class="token function">export</span> HBASE_HOME<span class="token operator">=</span>/root/hbase/hbase-1.2.0
<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">$HBASE_HOME</span>/bin
<span class="token function">source</span> /etc/profile
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="9">
<li>进入hbase</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash">hbase shell
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol>
<li>UI</li>
</ol>
<p><a href="http://master:16010/master-status">http://master:16010/master-status</a></p>
<ol start="2">
<li>测试</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash">hbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:001:0<span class="token operator">></span> create <span class="token string">'test'</span>,<span class="token string">'cf'</span>
0 row<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> 1.3920 seconds
<span class="token comment" spellcheck="true">#</span>
<span class="token operator">=</span><span class="token operator">></span> Hbase::Table - <span class="token function">test</span>
hbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:002:0<span class="token operator">></span> list
TABLE                                                                                                                               
<span class="token function">test</span>                                                                                                                                
1 row<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> 0.0170 seconds
<span class="token comment" spellcheck="true">#</span>
<span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"test"</span><span class="token punctuation">]</span>
hbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:003:0<span class="token operator">></span> put <span class="token string">'test'</span>, <span class="token string">'row1'</span>, <span class="token string">'cf:a'</span>, <span class="token string">'value1'</span>
0 row<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> 0.1200 seconds
<span class="token comment" spellcheck="true">#</span>
hbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:004:0<span class="token operator">></span> scan <span class="token string">'test'</span>
ROW                                COLUMN+CELL                                                                                      
 row1                              column<span class="token operator">=</span>cf:a, timestamp<span class="token operator">=</span>1629967515721, value<span class="token operator">=</span>value1                                               
1 row<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> 0.0210 seconds
<span class="token comment" spellcheck="true">#</span>
hbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:005:0<span class="token operator">></span> 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>hbase</category>
      </categories>
  </entry>
  <entry>
    <title>hbase设置ttl</title>
    <url>/hbase-she-zhi-ttl/</url>
    <content><![CDATA[<h3 id="Hbase关于TTL"><a href="#Hbase关于TTL" class="headerlink" title="Hbase关于TTL"></a>Hbase关于TTL</h3><ul>
<li><code>ColumnFamilies</code>可以以秒为单位来设置 <code>TTL</code>（<code>Time To Live</code>）长度，一旦达到到期时间，<code>HBase</code> 将自动删除行。</li>
<li>设置 <code>hbase.store.delete.expired.storefile</code> 为 <code>false</code> 将禁用此功能。将最小版本数设置为 <code>0</code> 以外的值也会禁用此功能。</li>
<li>也支持设置时间以每个单元为基础生存。单元<code>TTL</code> 是使用突变 <code>setTTL</code> 作为突变请求（例如：<code>Appends</code>、<code>Increments</code>、<code>Puts</code>）的属性提交的.</li>
<li>单元 <code>TTL</code> 以毫秒为单位而不是秒;</li>
<li>单元 <code>TTL</code> 不能将一个单元的有效生命周期延长超过 <code>ColumnFamily</code> 级 <code>TTL</code> 设置.</li>
</ul>
<h3 id="设置TTL"><a href="#设置TTL" class="headerlink" title="设置TTL"></a>设置TTL</h3><ol>
<li>创建表的时候指定</li>
</ol>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token string">'t_task_log'</span><span class="token punctuation">,</span>{NAME <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'cf'</span><span class="token punctuation">,</span> TTL<span class="token operator">=</span><span class="token operator">></span><span class="token string">'86400'</span>}
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="2">
<li>查看TTL</li>
</ol>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">desc</span> <span class="token string">"t_task_log"</span>
<span class="token comment" spellcheck="true">-- 默认: TTL => 'FOREVER'</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ol start="3">
<li>修改TTL</li>
</ol>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 禁用表</span>
<span class="token keyword">disable</span> <span class="token string">"t_task_log"</span>
<span class="token comment" spellcheck="true">-- 设置TTL值，作用于列族cf</span>
<span class="token keyword">alter</span> <span class="token string">"t_task_log"</span><span class="token punctuation">,</span>NAME<span class="token operator">=</span><span class="token operator">></span><span class="token string">'cf'</span><span class="token punctuation">,</span>TTL<span class="token operator">=</span><span class="token operator">></span><span class="token string">'86400'</span>
<span class="token comment" spellcheck="true">-- 恢复表</span>
<span class="token keyword">enable</span>  <span class="token string">"t_task_log"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>高版本<code>hbase</code>可以不需要先禁用表,可直接在线修改<code>TTL</code>.</p>
</blockquote>
<ol start="4">
<li>编码设置列族TTL</li>
</ol>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1. 创建一个测试表,并添加列族cf</span>
TableName tableName <span class="token operator">=</span> TableName<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
TableDescriptor tableDescriptor <span class="token operator">=</span> TableDescriptorBuilder<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span>tableName<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setColumnFamily</span><span class="token punctuation">(</span>ColumnFamilyDescriptorBuilder<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token string">"cf"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

admin<span class="token punctuation">.</span><span class="token function">createTable</span><span class="token punctuation">(</span>tableDescriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建表并添加列族cf成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 2.为当前的表添加一个ttl的列族(默认设定时间为10秒)</span>
ColumnFamilyDescriptor cfDesc <span class="token operator">=</span> ColumnFamilyDescriptorBuilder<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token string">"ttl-cf"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTimeToLive</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
admin<span class="token punctuation">.</span><span class="token function">addColumnFamily</span><span class="token punctuation">(</span>tableName<span class="token punctuation">,</span> cfDesc<span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"为表添加一个具有TTL的列族ttl-cf,设定超时时间为10s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="5">
<li>编码设置单元TTL</li>
</ol>
<pre class="line-numbers language-java"><code class="language-java">Put put <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Put</span><span class="token punctuation">(</span>Bytes<span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"row1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
put<span class="token punctuation">.</span><span class="token function">setTTL</span><span class="token punctuation">(</span>86400L<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="怎么重置TTL为FOREVER"><a href="#怎么重置TTL为FOREVER" class="headerlink" title="怎么重置TTL为FOREVER"></a>怎么重置TTL为FOREVER</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- HBase TTL 最大值为INT最大值 2147483647，只需将TTL设为该整数即可</span>
<span class="token keyword">alter</span> <span class="token string">'test'</span><span class="token punctuation">,</span>{NAME <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'cf'</span><span class="token punctuation">,</span>TTL <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'2147483647'</span>}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://www.cnblogs.com/zpb2016/p/12649831.html">https://www.cnblogs.com/zpb2016/p/12649831.html</a></li>
<li><a href="https://blog.csdn.net/weixin_45492007/article/details/106804808">https://blog.csdn.net/weixin_45492007/article/details/106804808</a></li>
<li><a href="https://www.w3cschool.cn/hbase_doc/hbase_doc-x41d2mmo.html">https://www.w3cschool.cn/hbase_doc/hbase_doc-x41d2mmo.html</a></li>
</ul>
]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
      <tags>
        <tag>hbase</tag>
        <tag>ttl</tag>
      </tags>
  </entry>
  <entry>
    <title>hbase默认端口说明</title>
    <url>/hbase-mo-ren-duan-kou-shuo-ming/</url>
    <content><![CDATA[<table>
   <tbody><tr>
      <td>节点</td>
      <td>端口号</td>
      <td>协议</td>
      <td>使用</td>
      <td>说明</td>
   </tr>
   <tr>
      <td rowspan="3">zookeeper</td>
      <td>2181</td>
      <td></td>
      <td>zkCli.sh -server zookeeper1:2181</td>
      <td>客户端接入</td>
   </tr>
   <tr>
      <td>2888</td>
      <td></td>
      <td>N/A</td>
      <td>集群内部通讯</td>
   </tr>
      <tr>
      <td>3888</td>
      <td></td>
      <td>N/A</td>
      <td>集群内部通讯</td>
   </tr>
   <tr>
      <td rowspan="2">HDFS Namenode</td>
      <td>9000</td>
      <td>HDFS</td>
      <td>hdfs dfs -ls hdfs://namenode1:9000/</td>
      <td>客户端接入</td>
   </tr>
   <tr>
      <td>50070</td>
      <td>HTTP</td>
      <td>http://namenode1:50070/</td>
      <td>集群监控</td>
   </tr>
   <tr>
      <td>HDFS SecondaryNamenode</td>
      <td>50090</td>
      <td>HTTP</td>
      <td>http://namenode1:50090/</td>
      <td>secondary监控</td>
   </tr>
   <tr>
      <td rowspan="3">HDFS Datanode</td>
      <td>50010</td>
      <td></td>
      <td>N/A</td>
      <td>客户端接入/其他节点接入</td>
   </tr>
   <tr>
      <td>50020</td>
      <td></td>
      <td>N/A</td>
      <td></td>
   </tr>
   <tr>
      <td>50075</td>
      <td>HTTP</td>
      <td>http://datanode1:50075/</td>
      <td>节点监控</td>
   </tr>
   <tr>
      <td rowspan="2">HBase Master</td>
      <td>16000</td>
      <td></td>
      <td>hbase-client-1.x.x.jar</td>
      <td>RegionServer接入</td>
   </tr>
   <tr>
      <td>16010</td>
      <td>HTTP</td>
      <td>http://namenode1:16010/</td>
      <td>集群监控</td>
   </tr>
   <tr>
      <td rowspan="2">HBase RegionServer</td>
      <td>16020</td>
      <td></td>
      <td>N/A</td>
      <td>客户端接入</td>
   </tr>
   <tr>
      <td>16030</td>
      <td>HTTP</td>
      <td>http://datanode1:16030/</td>
      <td>节点监控</td>
   </tr>
</tbody></table>]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
      <tags>
        <tag>hbase</tag>
      </tags>
  </entry>
  <entry>
    <title>hdfs常用命令</title>
    <url>/hdfs-chang-yong-ming-ling/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>命令</th>
<th>使用方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>ls</code></td>
<td><code>hadoop fs -ls</code></td>
<td>返回文件详细信息或者目录列表</td>
</tr>
<tr>
<td><code>lsr</code></td>
<td><code>hadoop fs -lsr</code></td>
<td>递归返回文件详细信息或者目录列表,类似<code>ls -R</code></td>
</tr>
<tr>
<td><code>cat</code></td>
<td><code>hadoop fs -cat URI</code></td>
<td>返回文件内容</td>
</tr>
<tr>
<td><code>chgrp</code></td>
<td><code>hadoop fs -chgrp [-R] GROUP URI</code></td>
<td>改变文件所属组</td>
</tr>
<tr>
<td><code>chmod</code></td>
<td><code>hadoop fs -chmod [-R]</code></td>
<td>改变文件的权限</td>
</tr>
<tr>
<td><code>chown</code></td>
<td><code>hadoop fs -chown [-R]</code></td>
<td>改变文件拥有者</td>
</tr>
<tr>
<td><code>put</code></td>
<td><code>hadoop fs -put</code></td>
<td>上传文件</td>
</tr>
<tr>
<td><code>copyFromLocal</code></td>
<td><code>hadoop fs -copyFromLocal URI</code></td>
<td>上传文件</td>
</tr>
<tr>
<td><code>moveFromLocal</code></td>
<td><code>hadoop fs -moveFromLocal</code></td>
<td>上传文件</td>
</tr>
<tr>
<td><code>get</code></td>
<td><code>hadoop fs -get [-ignorecrc] [-crc]</code></td>
<td>下载文件</td>
</tr>
<tr>
<td><code>copyToLocal</code></td>
<td><code>hadoop fs -copyToLocal [-ignorecrc] [-crc]</code></td>
<td>下载文件</td>
</tr>
<tr>
<td><code>cp</code></td>
<td><code>hadoop fs -cp URI</code></td>
<td>复制文件</td>
</tr>
<tr>
<td><code>du</code></td>
<td><code>hadoop fs -du URI</code></td>
<td>显示所有文件大小</td>
</tr>
<tr>
<td><code>dus</code></td>
<td><code>hadoop fs -dus</code></td>
<td>显示文件大小</td>
</tr>
<tr>
<td><code>expunge</code></td>
<td><code>hadoop fs -expunge</code></td>
<td>清空回收站</td>
</tr>
<tr>
<td><code>getmerge</code></td>
<td><code>hadoop fs -getmerge [addnl]</code></td>
<td></td>
</tr>
<tr>
<td><code>mkdir</code></td>
<td><code>hadoop fs -mkdir</code></td>
<td>创建目录</td>
</tr>
<tr>
<td><code>mv</code></td>
<td><code>hadoop fs -mv URI</code></td>
<td>移动</td>
</tr>
<tr>
<td><code>rm</code></td>
<td><code>hadoop fs -rm URI</code></td>
<td>删除非空目录和文件</td>
</tr>
<tr>
<td><code>rmr</code></td>
<td><code>hadoop fs -rmr</code></td>
<td>递归删除</td>
</tr>
<tr>
<td><code>setrep</code></td>
<td><code>hadoop fs -setrep [-R]</code></td>
<td>改变文件副本数</td>
</tr>
<tr>
<td><code>stat</code></td>
<td><code>hadoop fs -stat URI</code></td>
<td>返回统计信息</td>
</tr>
<tr>
<td><code>tail</code></td>
<td><code>hadoop fs -tail [-f] URI</code></td>
<td>返回文件尾部<code>1K</code>字节内容</td>
</tr>
<tr>
<td><code>test</code></td>
<td><code>hadoop fs -test -[ezd] URI</code></td>
<td><code>-e</code>检查文件是否存在,<code>-z</code>检查文件是否为空,<code>-d</code>检查文件是否是目录</td>
</tr>
<tr>
<td><code>text</code></td>
<td><code>hadoop fs -text</code></td>
<td>将文件输出和为文本格式,允许的格式<code>zip</code> <code>TextRecordInputStream</code></td>
</tr>
<tr>
<td><code>touchz</code></td>
<td><code>hadoop fs -touchz</code></td>
<td>创建一个空文件</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
      <tags>
        <tag>hdfs</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>helm3常用命令</title>
    <url>/helm3-chang-yong-ming-ling/</url>
    <content><![CDATA[<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 添加仓库, 如</span>
helm repo add loki https://grafana.github.io/loki/charts
<span class="token comment" spellcheck="true"># 更新仓库</span>
helm repo update
<span class="token comment" spellcheck="true"># 安装服务并设置自定义配置</span>
helm <span class="token function">install</span> loki --namespace<span class="token operator">=</span>loki loki/loki-stack --set grafana.enabled<span class="token operator">=</span>true
<span class="token comment" spellcheck="true"># 下载chart到本地</span>
helm pull loki/loki-stack
<span class="token comment" spellcheck="true"># 使用本地chart安装服务</span>
helm <span class="token function">install</span> loki --namespace<span class="token operator">=</span>loki  <span class="token keyword">.</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<ul>
<li><code>helm install</code> 等价于 <code>helm upgrade --install</code></li>
<li>如果安装前没有创建 <code>namespace</code> 可以添加命令 <code>--create-namespace</code> 自动创建</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>helm3</tag>
      </tags>
  </entry>
  <entry>
    <title>helm常用命令总结</title>
    <url>/helm-chang-yong-ming-ling-zong-jie/</url>
    <content><![CDATA[<blockquote>
<h2 id="Helm用途"><a href="#Helm用途" class="headerlink" title="Helm用途"></a>Helm用途</h2><p>做为Kubernetes的一个包管理工具，Helm具有如下功能：</p>
<ul>
<li>创建新的chart</li>
<li>chart打包成tgz格式</li>
<li>上传chart到chart仓库或从仓库中下载chart</li>
<li>在Kubernetes集群中安装或卸载chart</li>
<li>管理用Helm安装的chart的发布周期<br>Helm有三个重要概念：</li>
<li>chart：包含了创建Kubernetes的一个应用实例的必要信息</li>
<li>config：包含了应用发布配置信息</li>
<li>release：是一个chart及其配置的一个运行实例</li>
</ul>
</blockquote>
<h2 id="Helm常用命令"><a href="#Helm常用命令" class="headerlink" title="Helm常用命令"></a>Helm常用命令</h2><table>
<thead>
<tr>
<th>操作类型</th>
<th>命令</th>
</tr>
</thead>
<tbody><tr>
<td>添加仓库</td>
<td>helm repo add loki <a href="https://grafana.github.io/loki/charts">https://grafana.github.io/loki/charts</a></td>
</tr>
<tr>
<td>更新仓库</td>
<td>helm repo update</td>
</tr>
<tr>
<td>查看helm仓库列表</td>
<td>helm repo list</td>
</tr>
<tr>
<td>查看本地已安装的包</td>
<td>helm list (ls)</td>
</tr>
<tr>
<td>查看全部release(包括删除的…)</td>
<td>helm list -a</td>
</tr>
<tr>
<td>查看helm版本</td>
<td>helm version</td>
</tr>
<tr>
<td>删除release</td>
<td>helm delete loki</td>
</tr>
<tr>
<td>设置安装release名称</td>
<td>–name test</td>
</tr>
<tr>
<td>设置安装的namespace</td>
<td>–namespace test</td>
</tr>
<tr>
<td>设置自定义属性</td>
<td>–set “loki.serviceName=loki”</td>
</tr>
<tr>
<td>从文件读取自定义属性集合</td>
<td>-f values.yaml</td>
</tr>
<tr>
<td>查找本地release的版本列表</td>
<td>helm search testapi -l</td>
</tr>
<tr>
<td>指定charts版本</td>
<td>–version 8.2.4</td>
</tr>
<tr>
<td>查看安装历史</td>
<td>helm history prometheus-operator</td>
</tr>
<tr>
<td>版本回滚</td>
<td>helm rollback prometheus-operator&nbsp;1</td>
</tr>
<tr>
<td>打包chart</td>
<td>helm&nbsp;package&nbsp;mychart</td>
</tr>
<tr>
<td>获取charts</td>
<td>helm&nbsp;fetch&nbsp;stable/mysql&nbsp;–version&nbsp;0.2.8&nbsp;–untar</td>
</tr>
<tr>
<td>检查chart是否存在问题</td>
<td>helm&nbsp;lint&nbsp;mysql</td>
</tr>
<tr>
<td>创建一个本地仓库</td>
<td>helm&nbsp;serve&nbsp;–address&nbsp;0.0.0.0:8879&nbsp;–repo-path&nbsp;./charts</td>
</tr>
<tr>
<td>创建一个chart</td>
<td>helm&nbsp;create&nbsp;mychart</td>
</tr>
<tr>
<td>查看release状态</td>
<td>helm&nbsp;status&nbsp;mysql</td>
</tr>
<tr>
<td>更新release</td>
<td>helm&nbsp;upgrade&nbsp;mysql&nbsp;-f&nbsp;mysql/values.yaml&nbsp;–set&nbsp;resources.requests.memory=1024Mi&nbsp;mysql</td>
</tr>
<tr>
<td>查看指定release的历史版本部署时部分配置信息</td>
<td>helm&nbsp;get&nbsp;–revision&nbsp;1&nbsp;mysql</td>
</tr>
<tr>
<td>对chart的模板和配置进行测试</td>
<td>helm install –dry-run –debug ./</td>
</tr>
<tr>
<td>查看release默认配置</td>
<td>helm inspect values stable/prometheus-operator</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>helm常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title>helm版本回退</title>
    <url>/helm-ban-ben-hui-tui/</url>
    <content><![CDATA[<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># helm list -n  istio-system</span>
NAME           	NAMESPACE   	REVISION	UPDATED                                	STATUS  	CHART                 	APP VERSION
jaeger-operator	istio-system	7       	2021-11-18 15:49:10.783153039 +0800 CST	deployed	jaeger-operator-2.26.0	1.27.0     
kiali-operator 	istio-system	4       	2021-11-18 15:36:24.945838387 +0800 CST	deployed	kiali-operator-1.38.1 	v1.38.1    
<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># helm history -n istio-system jaeger-operator</span>
REVISION	UPDATED                 	STATUS    	CHART                 	APP VERSION	DESCRIPTION    
1       	Wed Aug 25 13:39:38 2021	superseded	jaeger-operator-2.14.2	1.17.1     	Install complete              
2       	Mon Nov 15 11:11:58 2021	superseded	jaeger-operator-2.26.0	1.27.0     	Upgrade complete     
3       	Thu Nov 18 15:37:13 2021	superseded	jaeger-operator-2.14.2	1.17.1     	Rollback to 1      
<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#  helm rollback -n istio-system jaeger-operator 2</span>
Rollback was a success<span class="token operator">!</span> Happy Helming<span class="token operator">!</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>helm</tag>
      </tags>
  </entry>
  <entry>
    <title>influxDB内存优化</title>
    <url>/influxdb-nei-cun-you-hua/</url>
    <content><![CDATA[<h3 id="查询series-cardinality命令"><a href="#查询series-cardinality命令" class="headerlink" title="查询series cardinality命令"></a>查询<code>series cardinality</code>命令</h3><ul>
<li>InfluxDB官网说明：<a href="https://docs.influxdata.com/influxdb/v1.7/troubleshooting/frequently-asked-questions/#why-does-series-cardinality-matter">Why does series cardinality matter?</a></li>
</ul>
<pre class="line-numbers language-java"><code class="language-java">InfluxDB maintains an in<span class="token operator">-</span>memory index of every series in the system<span class="token punctuation">.</span> As the number of unique series grows<span class="token punctuation">,</span> so does the RAM usage<span class="token punctuation">.</span> High series cardinality can lead to the operating system killing the InfluxDB process with an out of <span class="token function">memory</span> <span class="token punctuation">(</span>OOM<span class="token punctuation">)</span> exception<span class="token punctuation">.</span> See SHOW CARDINALITY to learn about the InfluxSQL commands <span class="token keyword">for</span> series cardinality<span class="token punctuation">.</span>

<span class="token comment" spellcheck="true">// 翻译</span>
InfluxDB会在系统上为每个series维护一个内存索引，而随着这些series的增加，RAM内存使用率也会增加。如果series cardinality如果太高，就会导致操作系统触发OOMKiller机制，将Influxdb进程KILL掉<span class="token punctuation">.</span> 使用 SHOW CARDINALITY 命令可以查看到 series cardinality。
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><a href="https://docs.influxdata.com/influxdb/v1.7/query_language/spec/#show-cardinality">SHOW CARDINALITY命令</a></li>
</ul>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- show estimated cardinality of the series on current database</span>
<span class="token keyword">SHOW</span> SERIES CARDINALITY
<span class="token comment" spellcheck="true">-- show estimated cardinality of the series on specified database</span>
<span class="token keyword">SHOW</span> SERIES CARDINALITY <span class="token keyword">ON</span> mydb
<span class="token comment" spellcheck="true">-- show exact series cardinality</span>
<span class="token keyword">SHOW</span> SERIES EXACT CARDINALITY
<span class="token comment" spellcheck="true">-- show series cardinality of the series on specified database</span>
<span class="token keyword">SHOW</span> SERIES EXACT CARDINALITY <span class="token keyword">ON</span> mydb
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><a href="https://docs.influxdata.com/influxdb/v1.7/troubleshooting/frequently-asked-questions/#how-can-i-remove-series-from-the-index">How can I remove series from the index?</a></li>
</ul>
<pre class="line-numbers language-java"><code class="language-java">To reduce series cardinality<span class="token punctuation">,</span> series must be dropped from the index<span class="token punctuation">.</span> DROP DATABASE<span class="token punctuation">,</span> DROP MEASUREMENT<span class="token punctuation">,</span> and DROP SERIES will all remove series from the index and reduce the overall series cardinality<span class="token punctuation">.</span>

<span class="token comment" spellcheck="true">//大意</span>
要减少或者删除series cardinality<span class="token punctuation">,</span> 需要删除库<span class="token operator">/</span>表<span class="token operator">/</span>series
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="将series由保存到内存改为保存到TSI文件"><a href="#将series由保存到内存改为保存到TSI文件" class="headerlink" title="将series由保存到内存改为保存到TSI文件"></a>将series由保存到内存改为保存到TSI文件</h3><h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><ul>
<li><a href="https://docs.influxdata.com/influxdb/v1.7/administration/config/#index-version-inmem">官网influxdb详细配置说明</a></li>
</ul>
<p>这里我们需要修改的配置是<code>index-version</code>项,可以在<code>influxdb.conf</code>中<code>[data]</code>下修改，也可以通过环境变量<code>INFLUXDB_DATA_INDEX_VERSION</code>修改.</p>
<pre class="line-numbers language-conf"><code class="language-conf">[data]
  # The type of shard index to use for new shards.  The default is an in-memory index that is
  # recreated at startup.  A value of "tsi1" will use a disk based index that supports higher
  # cardinality datasets.
  # 这个配置项默认值inmem,可以取消注释修改为tsi1，那么后续的index将会保存在TSI文件中了.重启生效.
  # index-version = "inmem"
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><a href="https://docs.influxdata.com/influxdb/v1.7/administration/config/#settings-for-the-tsm-engine">其它关于内存的配置</a></li>
</ul>
<h4 id="重构TSI索引"><a href="#重构TSI索引" class="headerlink" title="重构TSI索引"></a>重构TSI索引</h4><ul>
<li><a href="https://docs.influxdata.com/influxdb/v1.7/tools/influx_inspect#influx-inspect-utility">influx_inspect buildtsi命令</a></li>
<li><a href="https://docs.influxdata.com/influxdb/v1.7/administration/rebuild-tsi-index/">Rebuild the TSI index</a></li>
</ul>
<ol>
<li>停止<code>InfluxDB</code>服务</li>
<li>删除所有<code>_series</code>文件夹<br>默认情况下,<code>_series</code>保存在<code>/data/&lt;dbName&gt;/_series</code>,检查并删除<code>/data</code>目录下所有<code>_series</code></li>
<li>删除所有<code>index</code>文件夹<br>默认情况下,<code>index</code>文件夹在<code>/data/&lt;dbName/&lt;rpName&gt;/&lt;shardID&gt;/index</code></li>
<li>使用<code>influx_inspect</code>重构<code>TSI index</code></li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 格式</span>
influx_inspect buildtsi -datadir <span class="token operator">&lt;</span>data_dir<span class="token operator">></span> -waldir <span class="token operator">&lt;</span>wal_dir<span class="token operator">></span>
<span class="token comment" spellcheck="true"># 示例</span>
influx_inspect buildtsi -datadir /data -waldir /wal
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="5">
<li>启动<code>influxDB</code>服务</li>
</ol>
]]></content>
      <categories>
        <category>influxdb</category>
      </categories>
      <tags>
        <tag>influxDB</tag>
      </tags>
  </entry>
  <entry>
    <title>influxQL</title>
    <url>/influxql/</url>
    <content><![CDATA[<p>InfluxQL是一种类似于SQL的查询语言，用于与InfluxDB进行交互。它经过精心设计，可以使来自其他SQL或类似SQL环境的用户熟悉，同时还提供特定于存储和分析时间序列数据的功能。</p>
<p>InfluxQL的SELECT语句遵循SQL SELECT语句的形式：</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>stuff<span class="token operator">></span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>measurement_name<span class="token operator">></span> <span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>some_conditions<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>WHERE是可选的。</p>
<p>要在上面的部分中获取InfluxDB输出，请输入：</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">"foodships"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果您只想查看有关该行的数据<code>Saturn</code>，请输入：</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">"foodships"</span> <span class="token keyword">WHERE</span> <span class="token string">"planet"</span> <span class="token operator">=</span> <span class="token string">'Saturn'</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果您想Saturn在2015年4月16日世界标准时间<code>12:00:01</code>之后查看行星的数据，请输入：</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">"foodships"</span> <span class="token keyword">WHERE</span> <span class="token string">"planet"</span> <span class="token operator">=</span> <span class="token string">'Saturn'</span> <span class="token operator">AND</span> time <span class="token operator">></span> <span class="token string">'2015-04-16 12:00:01'</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如上面的示例所示，InfluxQL允许您在WHERE子句中指定查询的时间范围。您可以使用日期时间字符串，这些日期时间字符串用单引号引起来，其格式为<code>YYYY-MM-DD HH:MM:SS.mmm</code> （mmm是毫秒，是可选的，还可以指定微秒或纳秒）。您还可以使用相对时间now()来引用服务器的当前时间戳：</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">"foodships"</span> <span class="token keyword">WHERE</span> time <span class="token operator">></span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> 1h
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>该查询foodships以时间戳记比服务器当前时间减去一小时新的量度输出数据。用于指定持续时间的选项<code>now()</code>有：</p>
<table>
<thead>
<tr>
<th>格式</th>
<th>单位</th>
</tr>
</thead>
<tbody><tr>
<td>ns</td>
<td>纳秒</td>
</tr>
<tr>
<td>u或µ</td>
<td>微秒</td>
</tr>
<tr>
<td>ms</td>
<td>毫秒</td>
</tr>
<tr>
<td>s</td>
<td>秒</td>
</tr>
<tr>
<td>m</td>
<td>分钟</td>
</tr>
<tr>
<td>H</td>
<td>小时</td>
</tr>
<tr>
<td>d</td>
<td>天</td>
</tr>
<tr>
<td>w</td>
<td>周</td>
</tr>
</tbody></table>
<ul>
<li><p>InfluxQL还支持正则表达式，表达式，SHOW语句和GROUP BY语句中的算术运算。</p>
</li>
<li><p>InfluxQL功能包括<code>COUNT</code>，<code>MIN</code>，<code>MAX</code>，<code>MEDIAN</code>，<code>DERIVATIVE</code>等等。</p>
</li>
<li><p>查询中的基本计算</p>
</li>
</ul>
<p>SELECT声明支持使用基本数学运算符，如+，-，/，*，()，等。</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- Add two field keys</span>
<span class="token keyword">SELECT</span> field_key1 <span class="token operator">+</span> field_key2 <span class="token keyword">AS</span> <span class="token string">"field_key_sum"</span> <span class="token keyword">FROM</span> <span class="token string">"measurement_name"</span> <span class="token keyword">WHERE</span> time <span class="token operator">&lt;</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> 15m

<span class="token comment" spellcheck="true">-- Subtract one field from another</span>
<span class="token keyword">SELECT</span> field_key1 <span class="token operator">-</span> field_key2 <span class="token keyword">AS</span> <span class="token string">"field_key_difference"</span> <span class="token keyword">FROM</span> <span class="token string">"measurement_name"</span> <span class="token keyword">WHERE</span> time <span class="token operator">&lt;</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> 15m

<span class="token comment" spellcheck="true">-- Grouping and chaining mathematical calculations</span>
<span class="token keyword">SELECT</span> <span class="token punctuation">(</span>field_key1 <span class="token operator">+</span> field_key2<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>field_key3 <span class="token operator">+</span> field_key4<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token string">"some_calculation"</span> <span class="token keyword">FROM</span> <span class="token string">"measurement_name"</span> <span class="token keyword">WHERE</span> time <span class="token operator">&lt;</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> 15m
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>计算查询中的百分比</li>
</ul>
<p>使用基本的数学函数，您可以通过将一个字段值除以另一字段值并将结果乘以100来计算百分比：</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token punctuation">(</span>field_key1 <span class="token operator">/</span> field_key2<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token keyword">AS</span> <span class="token string">"calculated_percentage"</span> <span class="token keyword">FROM</span> <span class="token string">"measurement_name"</span> <span class="token keyword">WHERE</span> time <span class="token operator">&lt;</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> 15m
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>使用聚合函数计算百分比</li>
</ul>
<p>如果在百分比计算中使用汇总函数，则必须使用汇总函数引用所有数据。 您不能混合使用汇总数据和非汇总数据。</p>
<p>所有聚合功能都需要一个<code>GROUP BY time()</code>子句，该子句定义将数据点分组和聚合的时间间隔。</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>field_key1<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">sum</span><span class="token punctuation">(</span>field_key2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token keyword">AS</span> <span class="token string">"calculated_percentage"</span> <span class="token keyword">FROM</span> <span class="token string">"measurement_name"</span> <span class="token keyword">WHERE</span> time <span class="token operator">&lt;</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> 15m <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> time<span class="token punctuation">(</span>1m<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>influxdb</category>
      </categories>
      <tags>
        <tag>influxQL</tag>
        <tag>influxdb</tag>
      </tags>
  </entry>
  <entry>
    <title>influxdb-API</title>
    <url>/influxdb-api/</url>
    <content><![CDATA[<h3 id="支持的API-client"><a href="#支持的API-client" class="headerlink" title="支持的API client"></a>支持的API client</h3><p><a href="https://docs.influxdata.com/influxdb/v1.7/tools/api_client_libraries/">参考官网</a></p>
<h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><pre><code>curl -i -XPOST http://localhost:8086/query --data-urlencode "q=CREATE DATABASE mydb"
</code></pre>
<h4 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h4><pre><code>curl -i -XPOST 'http://localhost:8086/write?db=mydb' --data-binary 'cpu_load_short,host=server01,region=us-west value=0.64 1434055562000000000'
</code></pre>
<h4 id="配置gzip压缩"><a href="#配置gzip压缩" class="headerlink" title="配置gzip压缩"></a>配置gzip压缩</h4><p>InfluxDB支持gzip压缩。要减少网络流量，请考虑以下选项：</p>
<ul>
<li>要接受来自InfluxDB的压缩数据，请将Accept-Encoding: gzip标头添加到InfluxDB API请求中。</li>
<li>要在将数据发送到InfluxDB之前压缩数据，请将Content-Encoding: gzip标头添加到InfluxDB API请求中。</li>
</ul>
<h4 id="批量写入"><a href="#批量写入" class="headerlink" title="批量写入"></a>批量写入</h4><pre><code>curl -i -XPOST 'http://localhost:8086/write?db=mydb' --data-binary 'cpu_load_short,host=server02 value=0.67
cpu_load_short,host=server02,region=us-west value=0.55 1422568543702900257
cpu_load_short,direction=in,host=server01,region=us-west value=2.0 1422568543702900257
</code></pre>
<h4 id="从文件写入"><a href="#从文件写入" class="headerlink" title="从文件写入"></a>从文件写入</h4><p>通过传递<code>@filename</code>到文件来写入文件中的点curl。文件中的数据应遵循InfluxDB行协议语法。</p>
<p>格式正确的文件（cpu_data.txt）的示例：</p>
<pre><code>cpu_load_short,host=server02 value=0.67
cpu_load_short,host=server02,region=us-west value=0.55 1422568543702900257
cpu_load_short,direction=in,host=server01,region=us-west value=2.0 1422568543702900257
</code></pre>
<p>写入数据<code>cpu_data.txt</code>到<code>mydb</code>与数据库：</p>
<pre><code>curl -i -XPOST 'http://localhost:8086/write?db=mydb' --data-binary @cpu_data.txt
</code></pre>
<blockquote>
<p>注意：如果您的数据文件具有5,000个以上的点，则可能有必要将该文件拆分为几个文件，以便将数据批量写入InfluxDB。默认情况下，HTTP请求在五秒钟后超时。超时后，InfluxDB仍将尝试写入这些点，但是不会确认它们已成功写入。</p>
</blockquote>
<h4 id="HTTP响应摘要"><a href="#HTTP响应摘要" class="headerlink" title="HTTP响应摘要"></a>HTTP响应摘要</h4><ul>
<li>2xx：如果收到您的写请求HTTP 204 No Content，那就成功了！</li>
<li>4xx：InfluxDB无法理解该请求。</li>
<li>5xx：系统过载或严重损坏</li>
</ul>
<h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><pre><code>curl -G 'http://localhost:8086/query?pretty=true' --data-urlencode "db=mydb" --data-urlencode "q=SELECT \"value\" FROM \"cpu_load_short\" WHERE \"region\"='us-west'"
</code></pre>
<p>InfluxDB返回JSON。您的查询结果将显示在”results”数组中。如果发生错误，InfluxDB会设置一个”error”包含错误说明的密钥。</p>
<pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>
    <span class="token property">"results"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">"statement_id"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">"series"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">{</span>
                    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cpu_load_short"</span><span class="token punctuation">,</span>
                    <span class="token property">"columns"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                        <span class="token string">"time"</span><span class="token punctuation">,</span>
                        <span class="token string">"value"</span>
                    <span class="token punctuation">]</span><span class="token punctuation">,</span>
                    <span class="token property">"values"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                        <span class="token punctuation">[</span>
                            <span class="token string">"2015-01-29T21:55:43.702900257Z"</span><span class="token punctuation">,</span>
                            <span class="token number">2</span>
                        <span class="token punctuation">]</span><span class="token punctuation">,</span>
                        <span class="token punctuation">[</span>
                            <span class="token string">"2015-01-29T21:55:43.702900257Z"</span><span class="token punctuation">,</span>
                            <span class="token number">0.55</span>
                        <span class="token punctuation">]</span><span class="token punctuation">,</span>
                        <span class="token punctuation">[</span>
                            <span class="token string">"2015-06-11T20:46:02Z"</span><span class="token punctuation">,</span>
                            <span class="token number">0.64</span>
                        <span class="token punctuation">]</span>
                    <span class="token punctuation">]</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>注意：附加pretty=true到URL会启用精美打印的JSON输出。尽管这对于调试或在使用诸如之类的工具直接查询时很有用curl，但不建议用于生产环境，因为它会消耗不必要的网络带宽。</p>
</blockquote>
<h4 id="多个查询"><a href="#多个查询" class="headerlink" title="多个查询"></a>多个查询</h4><p>通过单个API调用将多个查询发送到InfluxDB。只需使用分号分隔每个查询，例如：</p>
<pre><code>curl -G 'http://localhost:8086/query?pretty=true' --data-urlencode "db=mydb" --data-urlencode "q=SELECT \"value\" FROM \"cpu_load_short\" WHERE \"region\"='us-west';SELECT count(\"value\") FROM \"cpu_load_short\" WHERE \"region\"='us-west'"
</code></pre>
<p>返回：</p>
<pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>
    <span class="token property">"results"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">"statement_id"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">"series"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">{</span>
                    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cpu_load_short"</span><span class="token punctuation">,</span>
                    <span class="token property">"columns"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                        <span class="token string">"time"</span><span class="token punctuation">,</span>
                        <span class="token string">"value"</span>
                    <span class="token punctuation">]</span><span class="token punctuation">,</span>
                    <span class="token property">"values"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                        <span class="token punctuation">[</span>
                            <span class="token string">"2015-01-29T21:55:43.702900257Z"</span><span class="token punctuation">,</span>
                            <span class="token number">2</span>
                        <span class="token punctuation">]</span><span class="token punctuation">,</span>
                        <span class="token punctuation">[</span>
                            <span class="token string">"2015-01-29T21:55:43.702900257Z"</span><span class="token punctuation">,</span>
                            <span class="token number">0.55</span>
                        <span class="token punctuation">]</span><span class="token punctuation">,</span>
                        <span class="token punctuation">[</span>
                            <span class="token string">"2015-06-11T20:46:02Z"</span><span class="token punctuation">,</span>
                            <span class="token number">0.64</span>
                        <span class="token punctuation">]</span>
                    <span class="token punctuation">]</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token property">"statement_id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token property">"series"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">{</span>
                    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cpu_load_short"</span><span class="token punctuation">,</span>
                    <span class="token property">"columns"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                        <span class="token string">"time"</span><span class="token punctuation">,</span>
                        <span class="token string">"count"</span>
                    <span class="token punctuation">]</span><span class="token punctuation">,</span>
                    <span class="token property">"values"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                        <span class="token punctuation">[</span>
                            <span class="token string">"1970-01-01T00:00:00Z"</span><span class="token punctuation">,</span>
                            <span class="token number">3</span>
                        <span class="token punctuation">]</span>
                    <span class="token punctuation">]</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><p><a href="https://github.com/influxdata/influxdb-java">influxdb-java</a></p>
<blockquote>
<ul>
<li>Java 1.8+ (tested with jdk8 and jdk11)</li>
<li>Maven 3.0+ (tested with maven 3.5.0)</li>
</ul>
</blockquote>
<pre class="line-numbers language-maven"><code class="language-maven"><dependency>
  <groupId>org.influxdb</groupId>
  <artifactId>influxdb-java</artifactId>
  <version>2.17</version>
</dependency>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-gradle"><code class="language-gradle">compile 'org.influxdb:influxdb-java:2.17'
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><p><a href="https://github.com/influxdb/influxdb-python">influxdb-python</a></p>
<h3 id="go"><a href="#go" class="headerlink" title="go"></a>go</h3><p><a href="https://github.com/influxdata/influxdb1-client">influxdb1-client</a></p>
]]></content>
      <categories>
        <category>influxdb</category>
      </categories>
      <tags>
        <tag>influxdb</tag>
      </tags>
  </entry>
  <entry>
    <title>influxdb-javaAPI</title>
    <url>/influxdb-javaapi/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>influxdb</category>
      </categories>
      <tags>
        <tag>influxdb</tag>
      </tags>
  </entry>
  <entry>
    <title>influxdb-schema设计</title>
    <url>/influxdb-schema-she-ji/</url>
    <content><![CDATA[<h3 id="tag的使用"><a href="#tag的使用" class="headerlink" title="tag的使用"></a>tag的使用</h3><ul>
<li>把你经常查询的字段作为tag</li>
<li>如果你要对其使用GROUP BY()，也要放在tag中</li>
<li>如果你要对其使用InfluxQL函数，则将其放到field中</li>
<li>如果你需要存储的值不是字符串，则需要放到field中，因为tag value只能是字符串</li>
<li>tags不要包含高度可变的信息，如UUID，哈希值和随机字符串，这将导致数据库中的大量series cardinality。<blockquote>
<p>series cardinality高是许多数据库高内存使用的主要原因</p>
</blockquote>
</li>
<li>用tag区分数据比使用详细的measurement名字更好</li>
<li>不要把多条信息放到一个tag里面</li>
</ul>
]]></content>
      <categories>
        <category>influxdb</category>
      </categories>
      <tags>
        <tag>influxdb</tag>
      </tags>
  </entry>
  <entry>
    <title>influxdb-写入性能测试</title>
    <url>/influxdb-xie-ru-xing-neng-ce-shi/</url>
    <content><![CDATA[<h3 id="influx-stress"><a href="#influx-stress" class="headerlink" title="influx-stress"></a>influx-stress</h3><pre><code>Flags:
  -b, --batch-size uint      number of points in a batch (default 10000)
  -c, --consistency string   Write consistency (only applicable to clusters) (default "one")
      --create string        Use a custom create database command
      --db string            Database that will be written to (default "stress")
      --dump string          Dump to given file instead of writing over HTTP
  -f, --fast                 Run as fast as possible
      --gzip int             If non-zero, gzip write bodies with given compression level. 1=best speed, 9=best compression, -1=gzip default.
      --host string          Address of InfluxDB instance (default "http://localhost:8086")
      --pass string          Password for user
  -n, --points uint          number of points that will be written (default 18446744073709551615)
      --pps uint             Points Per Second (default 200000)
  -p, --precision string     Resolution of data being written (default "n")
  -q, --quiet                Only print the write throughput
      --rp string            Retention Policy that will be written to
  -r, --runtime duration     Total time that the test will run (default 2562047h47m16.854775807s)
  -s, --series int           number of series that will be written (default 100000)
      --strict               Strict mode will exit as soon as an error or unexpected status is encountered
      --user string          User to write data as
</code></pre>
<h4 id="Example-Usage"><a href="#Example-Usage" class="headerlink" title="Example Usage"></a>Example Usage</h4><pre><code>Runs forever

$ influx-stress insert
Runs forever writing as fast as possible

$ influx-stress insert -f
Runs for 1 minute writing as fast as possible

$ influx-stress insert -r 1m -f
Writing an example series key

$ influx-stress insert cpu,host=server,location=us-west,id=myid
Writing an example series key with 20,000 series

$ influx-stress insert -s 20000 cpu,host=server,location=us-west,id=myid
Writing an example point

$ influx-stress insert cpu,host=server,location=us-west,id=myid busy=100,idle=10,random=5i
</code></pre>
<h4 id="测试命令"><a href="#测试命令" class="headerlink" title="测试命令"></a>测试命令</h4><pre><code>influx_stress.exe insert -r 1m -f

Total Requests: 2000
        Success: 2000
        Fail: 0
Average Response Time: 93.270662ms
Points Per Second: 484339

Total Queries: 250
Average Query Response Time: 3.372889ms
</code></pre>
]]></content>
      <categories>
        <category>influxdb</category>
      </categories>
      <tags>
        <tag>influxdb</tag>
        <tag>influx-stress</tag>
      </tags>
  </entry>
  <entry>
    <title>influxdb-数学运算符</title>
    <url>/influxdb-shu-xue-yun-suan-fu/</url>
    <content><![CDATA[<h3 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#加一个常数</span>
<span class="token keyword">SELECT</span> <span class="token string">"A"</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token keyword">FROM</span> <span class="token string">"add"</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">"add"</span> <span class="token keyword">WHERE</span> <span class="token string">"A"</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">></span> <span class="token number">10</span>
<span class="token comment" spellcheck="true">#两个字段相加。</span>
<span class="token keyword">SELECT</span> <span class="token string">"A"</span> <span class="token operator">+</span> <span class="token string">"B"</span> <span class="token keyword">FROM</span> <span class="token string">"add"</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">"add"</span> <span class="token keyword">WHERE</span> <span class="token string">"A"</span> <span class="token operator">+</span> <span class="token string">"B"</span> <span class="token operator">>=</span> <span class="token number">10</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#减法里带常数。</span>
<span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token string">"A"</span> <span class="token keyword">FROM</span> <span class="token string">"sub"</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">"sub"</span> <span class="token keyword">WHERE</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token string">"A"</span> <span class="token operator">&lt;=</span> <span class="token number">3</span>
<span class="token comment" spellcheck="true">#两个字段做减法。</span>
<span class="token keyword">SELECT</span> <span class="token string">"A"</span> <span class="token operator">-</span> <span class="token string">"B"</span> <span class="token keyword">FROM</span> <span class="token string">"sub"</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">"sub"</span> <span class="token keyword">WHERE</span> <span class="token string">"A"</span> <span class="token operator">-</span> <span class="token string">"B"</span> <span class="token operator">&lt;=</span> <span class="token number">1</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#乘以一个常数。</span>
<span class="token keyword">SELECT</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token string">"A"</span> <span class="token keyword">FROM</span> <span class="token string">"mult"</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">"mult"</span> <span class="token keyword">WHERE</span> <span class="token string">"A"</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">>=</span> <span class="token number">20</span>
<span class="token comment" spellcheck="true">#两个字段相乘。</span>
<span class="token keyword">SELECT</span> <span class="token string">"A"</span> <span class="token operator">*</span> <span class="token string">"B"</span> <span class="token operator">*</span> <span class="token string">"C"</span> <span class="token keyword">FROM</span> <span class="token string">"mult"</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">"mult"</span> <span class="token keyword">WHERE</span> <span class="token string">"A"</span> <span class="token operator">*</span> <span class="token string">"B"</span> <span class="token operator">&lt;=</span> <span class="token number">80</span>
<span class="token comment" spellcheck="true">#乘法和其他运算符混用。</span>
<span class="token keyword">SELECT</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token string">"A"</span> <span class="token operator">+</span> <span class="token string">"B"</span> <span class="token operator">+</span> <span class="token string">"C"</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token string">"mult"</span>
<span class="token keyword">SELECT</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token string">"A"</span> <span class="token operator">-</span> <span class="token string">"B"</span> <span class="token operator">-</span> <span class="token string">"C"</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token string">"mult"</span>
<span class="token keyword">SELECT</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token string">"A"</span> <span class="token operator">+</span> <span class="token string">"B"</span> <span class="token operator">-</span> <span class="token string">"C"</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token string">"mult"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#除法里带常数。</span>
<span class="token keyword">SELECT</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token string">"A"</span> <span class="token keyword">FROM</span> <span class="token string">"div"</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">"div"</span> <span class="token keyword">WHERE</span> <span class="token string">"A"</span> <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">&lt;=</span> <span class="token number">2</span>
<span class="token comment" spellcheck="true">#两个字段相除。</span>
<span class="token keyword">SELECT</span> <span class="token string">"A"</span> <span class="token operator">/</span> <span class="token string">"B"</span> <span class="token keyword">FROM</span> <span class="token string">"div"</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">"div"</span> <span class="token keyword">WHERE</span> <span class="token string">"A"</span> <span class="token operator">/</span> <span class="token string">"B"</span> <span class="token operator">>=</span> <span class="token number">10</span>
<span class="token comment" spellcheck="true">#除法和其他运算符混用。</span>
<span class="token keyword">SELECT</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token string">"A"</span> <span class="token operator">+</span> <span class="token string">"B"</span> <span class="token operator">+</span> <span class="token string">"C"</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token string">"mult"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="求模"><a href="#求模" class="headerlink" title="求模"></a>求模</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#模一个常数。</span>
<span class="token keyword">SELECT</span> <span class="token string">"B"</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token keyword">FROM</span> <span class="token string">"modulo"</span>
<span class="token keyword">SELECT</span> <span class="token string">"B"</span> <span class="token keyword">FROM</span> <span class="token string">"modulo"</span> <span class="token keyword">WHERE</span> <span class="token string">"B"</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">0</span>
<span class="token comment" spellcheck="true">#两个字段求模。</span>
<span class="token keyword">SELECT</span> <span class="token string">"A"</span> <span class="token operator">%</span> <span class="token string">"B"</span> <span class="token keyword">FROM</span> <span class="token string">"modulo"</span>
<span class="token keyword">SELECT</span> <span class="token string">"A"</span> <span class="token keyword">FROM</span> <span class="token string">"modulo"</span> <span class="token keyword">WHERE</span> <span class="token string">"A"</span> <span class="token operator">%</span> <span class="token string">"B"</span> <span class="token operator">=</span> <span class="token number">0</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="按位与"><a href="#按位与" class="headerlink" title="按位与"></a>按位与</h3><p>你可以在任何整数和布尔值中使用这个操作符，无论是字段或常数。该操作符不支持浮点数或字符串数据类型。并且不能混合使用整数和布尔值。</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token string">"A"</span> <span class="token operator">&amp;</span> <span class="token number">255</span> <span class="token keyword">FROM</span> <span class="token string">"bitfields"</span>
<span class="token keyword">SELECT</span> <span class="token string">"A"</span> <span class="token operator">&amp;</span> <span class="token string">"B"</span> <span class="token keyword">FROM</span> <span class="token string">"bitfields"</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">"data"</span> <span class="token keyword">WHERE</span> <span class="token string">"bitfield"</span> <span class="token operator">&amp;</span> <span class="token number">15</span> <span class="token operator">></span> <span class="token number">0</span>
<span class="token keyword">SELECT</span> <span class="token string">"A"</span> <span class="token operator">&amp;</span> <span class="token string">"B"</span> <span class="token keyword">FROM</span> <span class="token string">"booleans"</span>
<span class="token keyword">SELECT</span> <span class="token punctuation">(</span><span class="token string">"A"</span> <span class="token operator">^</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token string">"B"</span> <span class="token keyword">FROM</span> <span class="token string">"booleans"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="按位或"><a href="#按位或" class="headerlink" title="按位或"></a>按位或</h3><p>你可以在任何整数和布尔值中使用这个操作符，无论是字段或常数。该操作符不支持浮点数或字符串数据类型。并且不能混合使用整数和布尔值。</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token string">"A"</span> <span class="token operator">|</span> <span class="token number">5</span> <span class="token keyword">FROM</span> <span class="token string">"bitfields"</span>
<span class="token keyword">SELECT</span> <span class="token string">"A"</span> <span class="token operator">|</span> <span class="token string">"B"</span> <span class="token keyword">FROM</span> <span class="token string">"bitfields"</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">"data"</span> <span class="token keyword">WHERE</span> <span class="token string">"bitfield"</span> <span class="token operator">|</span> <span class="token number">12</span> <span class="token operator">=</span> <span class="token number">12</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="按位异或"><a href="#按位异或" class="headerlink" title="按位异或"></a>按位异或</h3><p>你可以在任何整数和布尔值中使用这个操作符，无论是字段或常数。该操作符不支持浮点数或字符串数据类型。并且不能混合使用整数和布尔值。</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token string">"A"</span> <span class="token operator">^</span> <span class="token number">255</span> <span class="token keyword">FROM</span> <span class="token string">"bitfields"</span>
<span class="token keyword">SELECT</span> <span class="token string">"A"</span> <span class="token operator">^</span> <span class="token string">"B"</span> <span class="token keyword">FROM</span> <span class="token string">"bitfields"</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">"data"</span> <span class="token keyword">WHERE</span> <span class="token string">"bitfield"</span> <span class="token operator">^</span> <span class="token number">6</span> <span class="token operator">></span> <span class="token number">0</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="原文链接与常见问题"><a href="#原文链接与常见问题" class="headerlink" title="原文链接与常见问题"></a><a href="https://jasper-zhang1.gitbooks.io/influxdb/content/Query_language/math_operators.html">原文链接与常见问题</a></h3>]]></content>
      <categories>
        <category>influxdb</category>
      </categories>
      <tags>
        <tag>influxdb</tag>
      </tags>
  </entry>
  <entry>
    <title>influxdb-查询函数</title>
    <url>/influxdb-cha-xun-han-shu/</url>
    <content><![CDATA[<h3 id="COUNT计数"><a href="#COUNT计数" class="headerlink" title="COUNT计数"></a>COUNT计数</h3><h3 id="DISTINCT查找不同"><a href="#DISTINCT查找不同" class="headerlink" title="DISTINCT查找不同"></a>DISTINCT查找不同</h3><h3 id="INTEGRAL积分"><a href="#INTEGRAL积分" class="headerlink" title="INTEGRAL积分"></a>INTEGRAL积分</h3><h3 id="MEAN平均值"><a href="#MEAN平均值" class="headerlink" title="MEAN平均值"></a>MEAN平均值</h3><h3 id="MEDIAN中位数"><a href="#MEDIAN中位数" class="headerlink" title="MEDIAN中位数"></a>MEDIAN中位数</h3><h3 id="MODE频率最高的数"><a href="#MODE频率最高的数" class="headerlink" title="MODE频率最高的数"></a>MODE频率最高的数</h3><h3 id="SPREAD最大和最小差值"><a href="#SPREAD最大和最小差值" class="headerlink" title="SPREAD最大和最小差值"></a>SPREAD最大和最小差值</h3><h3 id="STDDEV标准差"><a href="#STDDEV标准差" class="headerlink" title="STDDEV标准差"></a>STDDEV标准差</h3><h3 id="SUM求和"><a href="#SUM求和" class="headerlink" title="SUM求和"></a>SUM求和</h3><h3 id="BOTTOM返回最小的N个数"><a href="#BOTTOM返回最小的N个数" class="headerlink" title="BOTTOM返回最小的N个数"></a>BOTTOM返回最小的N个数</h3><h3 id="TOP返回最大的N个field值"><a href="#TOP返回最大的N个field值" class="headerlink" title="TOP返回最大的N个field值"></a>TOP返回最大的N个field值</h3><h3 id="FIRST返回时间戳最早的数"><a href="#FIRST返回时间戳最早的数" class="headerlink" title="FIRST返回时间戳最早的数"></a>FIRST返回时间戳最早的数</h3><h3 id="LAST返回时间戳最近的数"><a href="#LAST返回时间戳最近的数" class="headerlink" title="LAST返回时间戳最近的数"></a>LAST返回时间戳最近的数</h3><h3 id="MAX最大值"><a href="#MAX最大值" class="headerlink" title="MAX最大值"></a>MAX最大值</h3><h3 id="MIN最小值"><a href="#MIN最小值" class="headerlink" title="MIN最小值"></a>MIN最小值</h3><h3 id="PERCENTILE返回较大百分之N的字段值"><a href="#PERCENTILE返回较大百分之N的字段值" class="headerlink" title="PERCENTILE返回较大百分之N的字段值"></a>PERCENTILE返回较大百分之N的字段值</h3><h3 id="SAMPLE返回N个随机抽样的字段值"><a href="#SAMPLE返回N个随机抽样的字段值" class="headerlink" title="SAMPLE返回N个随机抽样的字段值"></a>SAMPLE返回N个随机抽样的字段值</h3><h3 id="CUMULATIVE-SUM返回字段实时前序字段值的和"><a href="#CUMULATIVE-SUM返回字段实时前序字段值的和" class="headerlink" title="CUMULATIVE_SUM返回字段实时前序字段值的和"></a>CUMULATIVE_SUM返回字段实时前序字段值的和</h3><h3 id="DERIVATIVE返回字段的相邻两个点的变化率"><a href="#DERIVATIVE返回字段的相邻两个点的变化率" class="headerlink" title="DERIVATIVE返回字段的相邻两个点的变化率"></a>DERIVATIVE返回字段的相邻两个点的变化率</h3>]]></content>
      <categories>
        <category>influxdb</category>
      </categories>
      <tags>
        <tag>influxdb</tag>
      </tags>
  </entry>
  <entry>
    <title>influxdb-连续查询</title>
    <url>/influxdb-lian-xu-cha-xun/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>InfluxDB每秒可以处理数十万的数据点。如果要长时间地存储大量的数据，对于存储会是很大的压力。一个很自然的方式就是对数据进行采样，对于高精度的裸数据存储较短的时间，而对于低精度的的数据可以保存得久一些甚至永久保存。<br>InfluxDB提供了两个特性——连续查询(<code>Continuous Queries</code>简称<code>CQ</code>)和保留策略(<code>Retention Policies</code>简称<code>RP</code>)，分别用来处理数据采样和管理老数据的。</p>
<blockquote>
<p><code>Continuous Query</code> (CQ)是在数据库内部自动周期性跑着的一个InfluxQL的查询，CQs需要在SELECT语句中使用一个函数，并且一定包括一个GROUP BY time()语句。</p>
</blockquote>
<blockquote>
<p><code>Retention Policy</code> (RP)是InfluxDB数据架构的一部分，它描述了InfluxDB保存数据的时间。InfluxDB会比较服务器本地的时间戳和请求数据里的时间戳，并删除比你在RPs里面用DURATION设置的更老的数据。一个数据库中可以有多个RPs但是每个数据库的RPs是唯一的。</p>
</blockquote>
<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> CONTINUOUS QUERY <span class="token operator">&lt;</span>cq_name<span class="token operator">></span> <span class="token keyword">ON</span> <span class="token operator">&lt;</span>database_name<span class="token operator">></span>
<span class="token keyword">BEGIN</span>
  <span class="token operator">&lt;</span>cq_query<span class="token operator">></span>
<span class="token keyword">END</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="cq-query"><a href="#cq-query" class="headerlink" title="cq_query"></a>cq_query</h4><p>cq_query需要一个函数，一个<code>INTO</code>子句和一个<code>GROUP BY time()</code>子句：</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span><span class="token keyword">function</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">></span> <span class="token keyword">INTO</span> <span class="token operator">&lt;</span>destination_measurement<span class="token operator">></span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>measurement<span class="token operator">></span> <span class="token punctuation">[</span><span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>stuff<span class="token operator">></span><span class="token punctuation">]</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> time<span class="token punctuation">(</span><span class="token operator">&lt;</span>interval<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token operator">&lt;</span>tag_key<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>注意：请注意，在<code>WHERE</code>子句中，cq_query不需要时间范围。 InfluxDB在执行CQ时自动生成cq_query的时间范围。cq_query的WHERE子句中的任何用户指定的时间范围将被系统忽略。</p>
</blockquote>
<h4 id="运行时间点以及覆盖的时间范围"><a href="#运行时间点以及覆盖的时间范围" class="headerlink" title="运行时间点以及覆盖的时间范围"></a>运行时间点以及覆盖的时间范围</h4><ul>
<li>CQ对实时数据进行操作。他们使用本地服务器的时间戳，GROUP BY time()间隔和InfluxDB的预设时间边界来确定何时执行以及查询中涵盖的时间范围。</li>
<li>CQs以与cq_query的GROUP BY time()间隔相同的间隔执行，并且它们在InfluxDB的预设时间边界开始时运行。如果GROUP BY time()间隔为1小时，则CQ每小时开始执行一次。</li>
<li>当CQ执行时，它对于now()和now()减去GROUP BY time()间隔的时间范围运行单个查询。 如果GROUP BY time()间隔为1小时，当前时间为17:00，查询的时间范围为16:00至16:59999999999。</li>
</ul>
<h3 id="高级语法"><a href="#高级语法" class="headerlink" title="高级语法"></a>高级语法</h3><p><a href="https://jasper-zhang1.gitbooks.io/influxdb/content/Query_language/continuous_queries.html">链接</a></p>
]]></content>
      <categories>
        <category>influxdb</category>
      </categories>
      <tags>
        <tag>influxdb</tag>
      </tags>
  </entry>
  <entry>
    <title>influxdb2.0-docker部署</title>
    <url>/influxdb2-0-docker-bu-shu/</url>
    <content><![CDATA[<pre><code>docker run --name influxdb -p 9999:9999 quay.io/influxdb/influxdb:2.0.0-beta
</code></pre>
<pre><code>docker run -p 9999:9999 quay.io/influxdb/influxdb:2.0.0-beta --reporting-disabled
</code></pre>
<pre><code>docker exec -it influxdb /bin/bash
</code></pre>
]]></content>
      <categories>
        <category>influxdb</category>
      </categories>
      <tags>
        <tag>influxdb</tag>
      </tags>
  </entry>
  <entry>
    <title>influxdb2.0-k8s部署</title>
    <url>/influxdb2-0-k8s-bu-shu/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code>kubectl apply -f https://raw.githubusercontent.com/influxdata/docs-v2/master/static/downloads/influxdb-k8-minikube.yaml
</code></pre>
<pre><code>kubectl get pods -n influxdb
</code></pre>
<pre><code>kubectl describe service -n influxdb influxdb
</code></pre>
<pre><code>kubectl port-forward -n influxdb service/influxdb 9999:9999
</code></pre>
<h3 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Namespace
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> influxdb
<span class="token punctuation">---</span>
<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> StatefulSet
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
    <span class="token key atrule">labels</span><span class="token punctuation">:</span>
        <span class="token key atrule">app</span><span class="token punctuation">:</span> influxdb
    <span class="token key atrule">name</span><span class="token punctuation">:</span> influxdb
    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> influxdb
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
    <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>
    <span class="token key atrule">selector</span><span class="token punctuation">:</span>
        <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>
            <span class="token key atrule">app</span><span class="token punctuation">:</span> influxdb
    <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> influxdb
    <span class="token key atrule">template</span><span class="token punctuation">:</span>
        <span class="token key atrule">metadata</span><span class="token punctuation">:</span>
            <span class="token key atrule">labels</span><span class="token punctuation">:</span>
                <span class="token key atrule">app</span><span class="token punctuation">:</span> influxdb
        <span class="token key atrule">spec</span><span class="token punctuation">:</span>
            <span class="token key atrule">containers</span><span class="token punctuation">:</span>
              <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> quay.io/influxdb/influxdb<span class="token punctuation">:</span>2.0.0<span class="token punctuation">-</span>beta
                <span class="token key atrule">name</span><span class="token punctuation">:</span> influxdb
                <span class="token key atrule">ports</span><span class="token punctuation">:</span>
                  <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">9999</span>
                    <span class="token key atrule">name</span><span class="token punctuation">:</span> influxdb
                <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>
                  <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /root/.influxdbv2
                    <span class="token key atrule">name</span><span class="token punctuation">:</span> data
    <span class="token key atrule">volumeClaimTemplates</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">metadata</span><span class="token punctuation">:</span>
            <span class="token key atrule">name</span><span class="token punctuation">:</span> data
            <span class="token key atrule">namespace</span><span class="token punctuation">:</span> influxdb
        <span class="token key atrule">spec</span><span class="token punctuation">:</span>
            <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>
              <span class="token punctuation">-</span> ReadWriteOnce
            <span class="token key atrule">resources</span><span class="token punctuation">:</span>
                <span class="token key atrule">requests</span><span class="token punctuation">:</span>
                    <span class="token key atrule">storage</span><span class="token punctuation">:</span> 10G
<span class="token punctuation">---</span>
<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> influxdb
    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> influxdb
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> influxdb
        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9999</span>
        <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">9999</span>
    <span class="token key atrule">selector</span><span class="token punctuation">:</span>
        <span class="token key atrule">app</span><span class="token punctuation">:</span> influxdb
    <span class="token key atrule">type</span><span class="token punctuation">:</span> ClusterIP
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>influxdb</category>
      </categories>
      <tags>
        <tag>influxdb</tag>
      </tags>
  </entry>
  <entry>
    <title>influxdb使用</title>
    <url>/influxdb-shi-yong/</url>
    <content><![CDATA[<h3 id="CLI连接"><a href="#CLI连接" class="headerlink" title="CLI连接"></a>CLI连接</h3><p><a href="https://docs.influxdata.com/influxdb/v1.7/introduction/getting-started">参考链接</a></p>
<pre><code>influx -precision rfc3339
</code></pre>
<ul>
<li><code>influx</code>默认使用本地<code>8086</code>端口和<code>localhost</code>连接，更多参考<code>influx --help</code></li>
<li><code>-precision</code>格式化时间，<code>rfc3339</code>使用<code>RFC3339</code> format (<code>YYYY-MM-DDTHH:MM:SS.nnnnnnnnnZ</code>).</li>
</ul>
<h3 id="管理连接"><a href="#管理连接" class="headerlink" title="管理连接"></a>管理连接</h3><p><code>exit</code></p>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><pre><code>CREATE DATABASE &lt;db-name&gt;
</code></pre>
<p>例如<code>CREATE DATABASE mydb</code>.<code>default</code>是默认关键字，不能用于数据库名.</p>
<h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><p>创建完数据库可以用<code>SHOW DATABASES</code>查看所有数据库.</p>
<pre><code>&gt; SHOW DATABASES
name: databases
name
----
_internal
mydb
</code></pre>
<h3 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h3><pre><code>USE &lt;db-name&gt;

&gt; USE mydb
Using database mydb
</code></pre>
<h3 id="存储策略"><a href="#存储策略" class="headerlink" title="存储策略"></a>存储策略</h3><p>查看当前数据库Retention Policies</p>
<pre><code>show retention policies on "db_name"
</code></pre>
<p>创建新的Retention Policies</p>
<pre><code>create retention policy "rp_name" on "db_name" duration 3w replication 1 default
</code></pre>
<h3 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h3><pre><code>&lt;measurement&gt;[,&lt;tag-key&gt;=&lt;tag-value&gt;...] &lt;field-key&gt;=&lt;field-value&gt;[,&lt;field2-key&gt;=&lt;field2-value&gt;...] [unix-nano-timestamp]
</code></pre>
<blockquote>
<ul>
<li><code>measurement</code>相当于表名.  </li>
<li><code>tag</code>是数据的标签，可以有多个  </li>
<li><code>field</code>是数据的值，可以有多个，例如 “value=0.64”, or “temperature=21.2”  </li>
<li><code>timestamp</code>是数据的时间戳</li>
</ul>
</blockquote>
<blockquote>
<p>每一条数据称之为<code>points</code>.</p>
</blockquote>
<h3 id="插入一条数据"><a href="#插入一条数据" class="headerlink" title="插入一条数据"></a>插入一条数据</h3><pre><code>INSERT cpu,host=serverA,region=us_west value=0.64
</code></pre>
<pre><code>INSERT temperature,machine=unit42,type=assembly external=25,internal=37
</code></pre>
<h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><pre><code>SELECT "host", "region", "value" FROM "cpu"
</code></pre>
<pre><code>SELECT * FROM "temperature"
</code></pre>
<pre><code>&gt; SELECT * FROM /.*/ LIMIT 1
--
&gt; SELECT * FROM "cpu_load_short"
--
&gt; SELECT * FROM "cpu_load_short" WHERE "value" &gt; 0.9
</code></pre>
<pre><code>SELECT * FROM cpu where time = '2020-02-20T06:43:42.9206681Z'
</code></pre>
]]></content>
      <categories>
        <category>influxdb</category>
      </categories>
      <tags>
        <tag>influxdb</tag>
      </tags>
  </entry>
  <entry>
    <title>influxdb使用docker部署</title>
    <url>/influxdb-shi-yong-docker-bu-shu/</url>
    <content><![CDATA[<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>导出配置</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash">docker run --rm influxdb influxd config <span class="token operator">></span> influxdb.conf
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="2">
<li>启动</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 设置端口映射</span>
<span class="token comment" spellcheck="true"># 设置自动重启</span>
<span class="token comment" spellcheck="true"># 挂载配置并使用配置启动</span>
<span class="token comment" spellcheck="true"># 挂载数据</span>
docker run -d -p 8086:8086 --restart<span class="token operator">=</span>always --name influxdb\
      -v <span class="token variable">$PWD</span>/data:/var/lib/influxdb \
      -v <span class="token variable">$PWD</span>/influxdb.conf:/etc/influxdb/influxdb.conf:ro \
      influxdb:1.7 -config /etc/influxdb/influxdb.conf
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://hub.docker.com/_/influxdb">https://hub.docker.com/_/influxdb</a></li>
</ul>
]]></content>
      <categories>
        <category>influxdb</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>influxdb</tag>
      </tags>
  </entry>
  <entry>
    <title>influxdb安装</title>
    <url>/influxdb-an-zhuang/</url>
    <content><![CDATA[<h3 id="influxdb简介"><a href="#influxdb简介" class="headerlink" title="influxdb简介"></a>influxdb简介</h3><p>influxdb是一款常年在db-engine使用排名第一的时序数据库，提供存储管理、用户管理、http接口、各类语言API接口。</p>
<h4 id="TSM"><a href="#TSM" class="headerlink" title="TSM"></a>TSM</h4><p>时序数据使用类似 LSM Tree 的 TSM Tree （<code>Time Series Merge Tree</code>）存储，而且是一种「列式」存储结构。</p>
<p>数据写入时：</p>
<ul>
<li>先保存到 cache 和 WAL 当中</li>
<li>当 WAL 当中数据超出阈值时，将 WAL 文件写入到 level 1 的 TSM 文件当中，cache 和 WAL 也随之清空</li>
<li>每个 TSM 文件主要分成两部分：时序数据，以及时序数据的索引，通过索引可以使用二分查找找到我们需要的数据</li>
<li>随着 TSM 文件变多，系统会将多个小 的TSM 文件会合并成一个的更大的 TSM 文件，持续这个过程保证文件数量不会过多</li>
<li>TSM 文件的合并策略是比较老的 size-tiered 策略，将小的文件压缩成大的文件，这一点和 leveldb 不太一样，leveldb 要严格保证每个 level 下的文件没有重叠，但是 influxdb 不会。</li>
</ul>
<p>之所以这么设计，应该是因为查询时序数据的时候，一般会根据时间进行筛选，而大部分时候每个 TSM 文件当中都是越老的文件数据也越老，数据天然会按照时间排序，虽然会有重叠的情况，但是权衡利弊，最终可以容忍这种情况，查询的时候做数据合并的成本更小。</p>
<h4 id="TSI"><a href="#TSI" class="headerlink" title="TSI"></a>TSI</h4><p>TSI 是 <code>Time Series Index</code> 的缩写，influxdb 用 TSI 来保存时序数据的倒排索引。可以通过 TSI 快速查询到某个表中，包含某个 tag 的 series 都有哪些。</p>
<p>TSI 的另一个工作是将倒排索引保存在磁盘当中，在 TSI 之前，influxdb 完全是使用内存存储倒排索引的，当时序数据变多的时候，特别是「表」变多的时候，倒排索引消耗的内存会飙升。TSI 使用类似 TSM 的文件结构来存储索引。</p>
<h3 id="inflxdb数据库安装"><a href="#inflxdb数据库安装" class="headerlink" title="inflxdb数据库安装"></a>inflxdb数据库安装</h3><h4 id="centos安装"><a href="#centos安装" class="headerlink" title="centos安装"></a>centos安装</h4><ol>
<li>下载<a href="https://portal.influxdata.com/downloads/">地址</a></li>
</ol>
<pre><code>wget https://dl.influxdata.com/influxdb/releases/influxdb-1.7.10.x86_64.rpm
sudo yum localinstall influxdb-1.7.10.x86_64.rpm
</code></pre>
<ol start="2">
<li>安装</li>
</ol>
<pre><code>yum localinstall influxdb-1.7.10.x86_64.rpm
</code></pre>
<ol start="3">
<li>卸载</li>
</ol>
<pre><code>rpm -qa | grep influx
rpm -e influxdb-1.7.10.x86_64
</code></pre>
<ol start="4">
<li>启动</li>
</ol>
<pre><code>service influxdb start
systemctl enable influxdb
systemctl start influxdb
systemctl restart influxdb
systemctl stop influxdb
</code></pre>
<h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><p><code>https://dl.influxdata.com/influxdb/releases/influxdb-1.7.10_windows_amd64.zip unzip influxdb-1.7.10_windows_amd64.zip</code></p>
<h4 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h4><pre><code>docker pull influxdb
</code></pre>
<h3 id="可视化UI-Chronograf"><a href="#可视化UI-Chronograf" class="headerlink" title="可视化UI-Chronograf"></a>可视化UI-Chronograf</h3><h4 id="docker安装-1"><a href="#docker安装-1" class="headerlink" title="docker安装"></a>docker安装</h4><pre><code>docker pull quay.io/influxdb/chronograf:1.7.17
</code></pre>
<h4 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h4><pre><code>wget https://dl.influxdata.com/chronograf/releases/chronograf-1.7.17.x86_64.rpm
sudo yum localinstall chronograf-1.7.17.x86_64.rpm
</code></pre>
<h4 id="windows-1"><a href="#windows-1" class="headerlink" title="windows"></a>windows</h4><pre><code>https://dl.influxdata.com/chronograf/releases/chronograf-1.7.17_windows_amd64.zip
unzip chronograf-1.7.17_windows_amd64.zip
</code></pre>
<h3 id="数据收集器-Telegraf"><a href="#数据收集器-Telegraf" class="headerlink" title="数据收集器-Telegraf"></a>数据收集器-Telegraf</h3><h4 id="docker安装-2"><a href="#docker安装-2" class="headerlink" title="docker安装"></a>docker安装</h4><pre><code>docker pull telegraf
</code></pre>
<h4 id="centos-1"><a href="#centos-1" class="headerlink" title="centos"></a>centos</h4><pre><code>wget https://dl.influxdata.com/telegraf/releases/telegraf-1.13.3-1.x86_64.rpm
sudo yum localinstall telegraf-1.13.3-1.x86_64.rpm
</code></pre>
<h4 id="windows-2"><a href="#windows-2" class="headerlink" title="windows"></a>windows</h4><pre><code>wget https://dl.influxdata.com/telegraf/releases/telegraf-1.13.3_windows_amd64.zip
unzip telegraf-1.13.3_windows_amd64.zip
</code></pre>
<h3 id="处理和监控服务-Kapacitor"><a href="#处理和监控服务-Kapacitor" class="headerlink" title="处理和监控服务-Kapacitor"></a>处理和监控服务-Kapacitor</h3><h4 id="docker安装-3"><a href="#docker安装-3" class="headerlink" title="docker安装"></a>docker安装</h4><pre><code>docker pull kapacitor
</code></pre>
<h4 id="centos-2"><a href="#centos-2" class="headerlink" title="centos"></a>centos</h4><pre><code>wget https://dl.influxdata.com/kapacitor/releases/kapacitor-1.5.4-1.x86_64.rpm
sudo yum localinstall kapacitor-1.5.4-1.x86_64.rpm
</code></pre>
<h4 id="windows-3"><a href="#windows-3" class="headerlink" title="windows"></a>windows</h4><pre><code>wget https://dl.influxdata.com/kapacitor/releases/kapacitor-1.5.4_windows_amd64.zip
unzip kapacitor-1.5.4_windows_amd64.zip
</code></pre>
]]></content>
      <categories>
        <category>influxdb</category>
      </categories>
      <tags>
        <tag>influxdb</tag>
      </tags>
  </entry>
  <entry>
    <title>influxdb客户端连接超时问题</title>
    <url>/influxdb-ke-hu-duan-lian-jie-chao-shi-wen-ti/</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 默认情况，java客户端连接服务端等待数据返回的时间很短,如果超时就会报以下错误</span>
org<span class="token punctuation">.</span>influxdb<span class="token punctuation">.</span>InfluxDBIOException<span class="token operator">:</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>SocketTimeoutException<span class="token operator">:</span> timeout
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><ul>
<li>java</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java">OkHttpClient<span class="token punctuation">.</span>Builder client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">writeTimeout</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">retryOnConnectionFailure</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
InfluxDB influxdb <span class="token operator">=</span> InfluxDBFactory<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8086"</span><span class="token punctuation">,</span> client<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>Scala</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java">val client <span class="token operator">=</span> OkHttpClient<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">writeTimeout</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">retryOnConnectionFailure</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
val influxConnection <span class="token operator">=</span> InfluxDBFactory<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8086"</span><span class="token punctuation">,</span> client<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://stackoverflow.com/questions/50922473/influxdbioexception-java-net-sockettimeoutexception-timeout">https://stackoverflow.com</a></li>
</ul>
]]></content>
      <categories>
        <category>influxdb</category>
      </categories>
      <tags>
        <tag>influxdb</tag>
      </tags>
  </entry>
  <entry>
    <title>influxdb正则表达式的应用</title>
    <url>/influxdb-zheng-ze-biao-da-shi-de-ying-yong/</url>
    <content><![CDATA[<h3 id="准备测试数据"><a href="#准备测试数据" class="headerlink" title="准备测试数据"></a>准备测试数据</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        InfluxDB influxDB <span class="token operator">=</span> InfluxDBFactory<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"http://192.168.41.128:8086"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String dbName <span class="token operator">=</span> <span class="token string">"mydb"</span><span class="token punctuation">;</span>
        influxDB<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span><span class="token string">"CREATE DATABASE "</span> <span class="token operator">+</span> dbName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> time <span class="token operator">=</span> 1600327592000L<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 每张表内5w条数据</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">50000</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
            count<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 每条数据间隔5秒</span>
            time <span class="token operator">=</span> time <span class="token operator">+</span> <span class="token number">5000</span><span class="token punctuation">;</span>
            BatchPoints batchPoints <span class="token operator">=</span> BatchPoints
                    <span class="token punctuation">.</span><span class="token function">database</span><span class="token punctuation">(</span>dbName<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string">"async"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">consistency</span><span class="token punctuation">(</span>InfluxDB<span class="token punctuation">.</span>ConsistencyLevel<span class="token punctuation">.</span>ALL<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 表名node-0 ~ node-9999,共10000张表,数据随机生成</span>
                Point point1 <span class="token operator">=</span> Point<span class="token punctuation">.</span><span class="token function">measurement</span><span class="token punctuation">(</span><span class="token string">"node-"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">addField</span><span class="token punctuation">(</span><span class="token string">"idle"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">addField</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">addField</span><span class="token punctuation">(</span><span class="token string">"system"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                batchPoints<span class="token punctuation">.</span><span class="token function">point</span><span class="token punctuation">(</span>point1<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            influxDB<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>batchPoints<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        influxDB<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="使用正则表达式查询测试"><a href="#使用正则表达式查询测试" class="headerlink" title="使用正则表达式查询测试"></a>使用正则表达式查询测试</h3><p>目前<code>influxdb</code>支持在以下场景中使用正则表达式：</p>
<ul>
<li><code>field keys</code> and <code>tag keys</code> in the <code>SELECT</code> clause</li>
<li><code>measurements</code> in the <code>FROM</code> clause</li>
<li><code>tag values</code> and <code>string field values</code> in the <code>WHERE</code> clause.</li>
<li><code>tag keys</code> in the <code>GROUP BY</code> clause</li>
</ul>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询格式</span>
<span class="token comment" spellcheck="true">-- Supported operators</span>
<span class="token comment" spellcheck="true">-- =~ matches against !~ doesn’t match against</span>
<span class="token keyword">SELECT</span> <span class="token operator">/</span><span class="token operator">&lt;</span>regular_expression_field_key<span class="token operator">></span><span class="token operator">/</span> <span class="token keyword">FROM</span> <span class="token operator">/</span><span class="token operator">&lt;</span>regular_expression_measurement<span class="token operator">></span><span class="token operator">/</span> <span class="token keyword">WHERE</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>tag_key<span class="token operator">></span> <span class="token operator">&lt;</span>operator<span class="token operator">></span> <span class="token operator">/</span><span class="token operator">&lt;</span>regular_expression_tag_value<span class="token operator">></span><span class="token operator">/</span> <span class="token operator">|</span> <span class="token operator">&lt;</span>field_key<span class="token operator">></span> <span class="token operator">&lt;</span>operator<span class="token operator">></span> <span class="token operator">/</span><span class="token operator">&lt;</span>regular_expression_field_value<span class="token operator">></span><span class="token operator">/</span><span class="token punctuation">]</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token operator">/</span><span class="token operator">&lt;</span>regular_expression_tag_key<span class="token operator">></span><span class="token operator">/</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 测试用例</span>
<span class="token keyword">SELECT</span> <span class="token operator">/</span>l<span class="token operator">/</span> <span class="token keyword">FROM</span> <span class="token string">"h2o_feet"</span> <span class="token keyword">LIMIT</span> <span class="token number">1</span>
<span class="token keyword">SELECT</span> MEAN<span class="token punctuation">(</span><span class="token string">"degrees"</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token operator">/</span>temperature<span class="token operator">/</span>
<span class="token keyword">SELECT</span> MEAN<span class="token punctuation">(</span>water_level<span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token string">"h2o_feet"</span> <span class="token keyword">WHERE</span> <span class="token string">"location"</span> <span class="token operator">=</span><span class="token operator">~</span> <span class="token operator">/</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">/</span> <span class="token operator">AND</span> <span class="token string">"water_level"</span> <span class="token operator">></span> <span class="token number">3</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">"h2o_feet"</span> <span class="token keyword">WHERE</span> <span class="token string">"location"</span> <span class="token operator">!</span><span class="token operator">~</span> <span class="token operator">/</span><span class="token punctuation">.</span><span class="token operator">/</span>
<span class="token keyword">SELECT</span> MEAN<span class="token punctuation">(</span><span class="token string">"water_level"</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token string">"h2o_feet"</span> <span class="token keyword">WHERE</span> <span class="token string">"location"</span> <span class="token operator">=</span><span class="token operator">~</span> <span class="token operator">/</span><span class="token punctuation">.</span><span class="token operator">/</span>
<span class="token keyword">SELECT</span> MEAN<span class="token punctuation">(</span><span class="token string">"water_level"</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token string">"h2o_feet"</span> <span class="token keyword">WHERE</span> <span class="token string">"location"</span> <span class="token operator">=</span> <span class="token string">'santa_monica'</span> <span class="token operator">AND</span> <span class="token string">"level description"</span> <span class="token operator">=</span><span class="token operator">~</span> <span class="token operator">/</span><span class="token operator">between</span><span class="token operator">/</span>
<span class="token keyword">SELECT</span> <span class="token function">FIRST</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token string">"h2o_quality"</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token operator">/</span>l<span class="token operator">/</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>测试使用正则表达式进行切面查询</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询某个时间点,所有表的数据,切面查询</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token operator">/</span>node<span class="token operator">-</span><span class="token operator">/</span> <span class="token keyword">WHERE</span> time<span class="token operator">=</span><span class="token string">'2020-09-18T01:43:27Z'</span>
<span class="token comment" spellcheck="true">-- 查询node-1001,node-1002,node-1003,node-1004,node-1005数据</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token operator">/</span><span class="token punctuation">(</span>node<span class="token number">-100</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">/</span> <span class="token keyword">WHERE</span> time<span class="token operator">=</span><span class="token string">'2020-09-18T01:43:27Z'</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://docs.influxdata.com/influxdb/v1.7/query_language/data_exploration/#regular-expressions">Regular expressions</a></li>
<li><a href="https://docs.influxdata.com/influxdb/v1.7/query_language/data_exploration/#examples-14">测试用例参考</a></li>
<li><a href="https://golang.org/pkg/regexp/syntax/">GO syntax</a></li>
</ul>
]]></content>
      <categories>
        <category>influxdb</category>
      </categories>
      <tags>
        <tag>influxdb</tag>
      </tags>
  </entry>
  <entry>
    <title>influxdb内存持续升高不主动释放问题</title>
    <url>/influxdb-nei-cun-chi-xu-sheng-gao-bu-shi-fang-wen-ti/</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p><code>influxdb</code>部署后,内存会随着查询等操作持续升高且不会主动释放.</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul>
<li><p><code>go</code>在释放内存返回到内核时，在<code>Linux</code>上使用的是<code>MADV_DONTNEED</code>，虽然效率比较低，但是会让<code>RSS</code>（<code>resident set size</code> 常驻内存集）数量下降得很快。</p>
</li>
<li><p>不过在<code>go 1.12</code>里专门针对这个做了优化，在释放内存时，使用了更加高效的<code>MADV_FREE</code>而不是之前的<code>MADV_DONTNEED</code>,这样带来的好处是，一次<code>GC</code>后的内存分配延迟得以改善，也会更加积极地将释放的内存归还给操作系统，以应对大块内存分配无法重用已存在的堆空间的问题。不过也会带来一个<code>副作用</code>：<code>RSS</code>不会立刻下降，而是要等到系统有内存压力了，才会延迟下降。</p>
</li>
<li><p><code>InfluxDB</code>使用<code>MADV_FREE</code>，只有当系统内存使用有压力的时候才会进行真正的内存回收，这个时候<code>RSS</code>才会下降，可以通过<code>GODEBUG=madvdontneed=1 ./influxdb</code>的方式启动,强制使用<code>MADV_DONTNEED</code>方式.</p>
</li>
</ul>
<blockquote>
<p><code>MADV_FREE </code> 需要 <code>Linux 4.5</code> 以及以上内核，否则会继续使用原先的 <code>MADV_DONTNEED</code> 方式。</p>
</blockquote>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://blog.csdn.net/u012794915/article/details/105450680/">记InfluxDB线上内存升高且持续高水位问题处理过程</a></li>
<li><a href="https://ms2008.github.io/2019/06/30/golang-madvfree/">Go 1.12 关于内存释放的一个改进</a></li>
</ul>
]]></content>
      <categories>
        <category>influxdb</category>
      </categories>
      <tags>
        <tag>influxdb</tag>
      </tags>
  </entry>
  <entry>
    <title>ingress-nginx实现灰度发布</title>
    <url>/ingress-nginx-shi-xian-hui-du-fa-bu/</url>
    <content><![CDATA[<h2 id="Ingress-Nginx-Annotation-简介"><a href="#Ingress-Nginx-Annotation-简介" class="headerlink" title="Ingress-Nginx Annotation 简介"></a>Ingress-Nginx Annotation 简介</h2><p>KubeSphere 基于 <a href="https://github.com/kubernetes/ingress-nginx/#nginx-ingress-controller">Nginx Ingress Controller</a> 实现了项目的网关，作为项目对外的流量入口和项目中各个服务的反向代理。而 Ingress-Nginx 支持配置 Ingress Annotations 来实现不同场景下的灰度发布和测试，可以满足<code>金丝雀发布</code>、<code>蓝绿部署</code>与 <code>A/B 测试</code>等业务场景。</p>
<blockquote>
<p><strong>Nginx Annotations 支持以下 5 种 Canary 规则：</strong></p>
<ul>
<li><code>nginx.ingress.kubernetes.io/canary-by-header</code>：基于 Request Header 的流量切分，适用于<code>灰度发布以及 A/B 测试</code>。当 Request Header 设置为 <code>always</code> 时，请求将会被<code>一直</code>发送到 Canary 版本；当 Request Header 设置为 <code>never</code> 时，请求<code>不会</code>被发送到 Canary 入口；对于任何其他 <code>Header</code> 值，将忽略 <code>Header</code>，并通过优先级将请求与其他金丝雀规则进行优先级的比较。</li>
<li><code>nginx.ingress.kubernetes.io/canary-by-header-value</code>：要匹配的 Request Header 的值，用于通知 <code>Ingress</code> 将请求路由到 <code>Canary Ingress </code>中指定的服务。当 <code>Request Header</code> 设置为此值时，它将被路由到 Canary 入口。该规则允许用户自定义 Request Header 的值，必须与上一个 annotation (即：<code>canary-by-header</code>) 一起使用。</li>
<li><code>nginx.ingress.kubernetes.io/canary-by-header-pattern</code>：要匹配的 Request Header 值的 PCRE 正则表达式，作用同上面的 <code>canary-by-header-value</code> 一样，当 <code>Request Header</code> 设置的值满足该正则表达式时，它将被路由到 Canary 入口，必须与 <code>canary-by-header</code> 一起使用。</li>
<li><code>nginx.ingress.kubernetes.io/canary-weight</code>：基于服务权重的流量切分，适用于蓝绿部署，权重范围 <code>0</code> - <code>100</code>按百分比将请求路由到 <code>Canary Ingress</code> 中指定的服务。权重为 <code>0</code> 意味着该金丝雀规则不会向 Canary 入口的服务发送任何请求，权重为 <code>100</code> 意味着所有请求都将被发送到 Canary 入口。</li>
<li><code>nginx.ingress.kubernetes.io/canary-by-cookie</code>：基于 <code>cookie</code> 的流量切分，适用于<code>灰度发布与 A/B 测试</code>。用于通知 Ingress 将请求路由到<code>Canary Ingress</code>中指定的服务的 <code>cookie</code>。当 <code>cookie</code> 值设置为 <code>always</code> 时，它将被路由到 Canary 入口；当 cookie 值设置为 <code>never</code> 时，请求不会被发送到 Canary 入口；对于任何其他值，将忽略 cookie 并将请求与其他金丝雀规则进行优先级的比较。</li>
</ul>
<p><strong>注意：金丝雀规则按优先顺序进行如下排序：</strong></p>
<p><code>canary-by-header</code> - &gt; <code>canary-by-cookie</code> - &gt; <code>canary-weight</code></p>
</blockquote>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li>创建两个不同版本的service及ingress</li>
<li>两个ingress使用相关的域名，但是后端服务使用不同版本的</li>
<li>canary版本的ingress增加<code>nginx.ingress.kubernetes.io/canary: "true"</code> 启用 <code>Canary</code></li>
<li>其余策略参考nginx annotation</li>
</ul>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>ingress-nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>ingress-nginx自带认证功能</title>
    <url>/ingress-nginx-zi-dai-ren-zheng-gong-neng/</url>
    <content><![CDATA[<h3 id="安装htpasswd"><a href="#安装htpasswd" class="headerlink" title="安装htpasswd"></a>安装htpasswd</h3><p><code>htpasswd</code>不是<code>centos7</code>自带的命令，需要使用<code>yum</code>安装。</p>
<pre><code>yum install httpd-tools
</code></pre>
<p>选项</p>
<ul>
<li>-c: 创建一个新的密码文件</li>
<li>-b: 在命令行中一并输入用户名和密码而不是根据提示输入密码</li>
<li>-D: 删除指定的用户</li>
<li>-n: 不更新密码文件,只将加密后的用户名密码输出到屏幕上</li>
<li>-p: 不对密码进行加密,采用明文的方式</li>
<li>-m: 采用MD5算法对密码进行加密(默认的加密方式)</li>
<li>-d: 采用CRYPT算法对密码进行加密</li>
<li>-s: 采用SHA算法对密码进行加密</li>
<li>-B: 采用bcrypt算法对密码进行加密(非常安全)</li>
</ul>
<p>参数</p>
<ul>
<li>用户名: 要创建或者更新的用户名</li>
<li>密码: 用户的新密码</li>
</ul>
<h3 id="创建用户，设置密码"><a href="#创建用户，设置密码" class="headerlink" title="创建用户，设置密码"></a>创建用户，设置密码</h3><p>用下面的三个操作，创建 <code>basic-auth</code> 用户 <code>foo</code>，密码 <code>123456</code>，将用户信息提交到 <code>kubernetes</code>：</p>
<pre class="line-numbers language-sh"><code class="language-sh">$ htpasswd -c auth foo
$ kubectl -n demo-echo create secret generic basic-auth --from-file=auth
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>注意其中命名空间<code>demo-echo</code>，<code>secret</code> 与目标服务<code>echo</code>在同一个 <code>namespace</code> 中。</p>
</blockquote>
<h3 id="为目标服务设置-ingress"><a href="#为目标服务设置-ingress" class="headerlink" title="为目标服务设置 ingress"></a>为目标服务设置 ingress</h3><blockquote>
<p>注意其中的<code>basic-auth</code>改成你的</p>
</blockquote>
<pre class="line-numbers language-yml"><code class="language-yml">apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ingress-echo-with-auth-basic
  annotations:
    # type of authentication
    nginx.ingress.kubernetes.io/auth-type: basic
    # name of the secret that contains the user/password definitions
    nginx.ingress.kubernetes.io/auth-secret: basic-auth
    # message to display with an appropriate context why the authentication is required
    nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - foo'
spec:
  rules:
  - host: auth-basic.echo.example
    http:
      paths:
      - path: /
        backend:
          serviceName: echo
          servicePort: 80
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><p><img data-src="/images/k8s2.png" alt="ingress-nginx"></p>
<h3 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h3><ul>
<li><a href="https://www.lijiaocn.com/soft/k8s/ingress-nginx/auth.html">https://www.lijiaocn.com/soft/k8s/ingress-nginx/auth.html</a></li>
</ul>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>ingress-nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>influxdb客户端设置超时时间</title>
    <url>/influxdb-ke-hu-duan-she-zhi-chao-shi-shi-jian/</url>
    <content><![CDATA[<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// influxdb客户端超时是由于http超时导致.</span>
<span class="token comment" spellcheck="true">// 1. 声明 OkHttpClient 设置超时时间</span>
<span class="token keyword">static</span> OkHttpClient<span class="token punctuation">.</span>Builder build <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 2. </span>
InfluxDB influxDB <span class="token operator">=</span> InfluxDBFactory<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:8086"</span><span class="token punctuation">,</span> build<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>influxdb</tag>
      </tags>
  </entry>
  <entry>
    <title>ingress-nginx设置https证书</title>
    <url>/ingress-nginx-she-zhi-https-zheng-shu/</url>
    <content><![CDATA[<h3 id="创建自签署证书"><a href="#创建自签署证书" class="headerlink" title="创建自签署证书"></a>创建自签署证书</h3><blockquote>
<p>注意证书中的<code>CN=tls.echo.example</code>改成自己的域名地址。</p>
</blockquote>
<pre><code>echo "生成自签署的 ca 证书"
openssl req -x509 -sha256 -newkey rsa:4096 -keyout ca.key -out ca.crt -days 3560 -nodes -subj '/CN=My Cert Authority'
 
echo "生成用上述 ca 签署的 server 证书"
openssl req -new -newkey rsa:4096 -keyout server.key -out server.csr -nodes -subj '/CN=tls.echo.example'
openssl x509 -req -sha256 -days 3650 -in server.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out server.crt
</code></pre>
<h3 id="将-server-证书上传到-kubernetes"><a href="#将-server-证书上传到-kubernetes" class="headerlink" title="将 server 证书上传到 kubernetes"></a>将 server 证书上传到 kubernetes</h3><blockquote>
<p>注意其中的命名空间<code>demo-echo和secret</code>名称<code>tls-echo-exmaple-secret</code>，改成自己的。</p>
</blockquote>
<pre><code>kubectl -n demo-echo create secret generic tls-echo-exmaple-secret --from-file=tls.crt=server.crt --from-file=tls.key=server.key
</code></pre>
<h3 id="配置ingress"><a href="#配置ingress" class="headerlink" title="配置ingress"></a>配置ingress</h3><blockquote>
<p><code>ignress</code> 中的 <code>host</code> 一定要与证书的 <code>CN</code> 相同，在 <code>tls</code> 配置中引用前面创建的 <code>secret</code></p>
</blockquote>
<pre class="line-numbers language-yml"><code class="language-yml">apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ingress-echo-with-tls
spec:
  rules:
  - host: tls.echo.example
    http:
      paths:
      - path: /
        backend:
          serviceName: echo
          servicePort: 80
  tls:
  - hosts:
    - tls.echo.example
    secretName: tls-echo-exmaple-secret
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="为多个域名配置证书"><a href="#为多个域名配置证书" class="headerlink" title="为多个域名配置证书"></a>为多个域名配置证书</h3><pre class="line-numbers language-yml"><code class="language-yml">apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: foo-tls
  namespace: default
spec:
  tls:
  - hosts:
    - foo.bar.com
    # This secret must exist beforehand
    # The cert must also contain the subj-name foo.bar.com
    # https://github.com/kubernetes/ingress-nginx/blob/master/docs/examples/PREREQUISITES.md#tls-certificates
    secretName: foobar
  - hosts:
    - bar.baz.com
    # This secret must exist beforehand
    # The cert must also contain the subj-name bar.baz.com
    # https://github.com/kubernetes/ingress-nginx/blob/master/docs/examples/PREREQUISITES.md#tls-certificates
    secretName: barbaz
  rules:
  - host: foo.bar.com
    http:
      paths:
      - backend:
          serviceName: http-svc
          servicePort: 80
        path: /
  - host: bar.baz.com
    http:
      paths:
      - backend:
          serviceName: nginx
          servicePort: 80
        path: /
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://www.lijiaocn.com/soft/k8s/ingress-nginx/tls.html">https://www.lijiaocn.com/soft/k8s/ingress-nginx/tls.html</a></li>
</ul>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>ingress-nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>ingress-nginx限流</title>
    <url>/ingress-nginx-xian-liu/</url>
    <content><![CDATA[<h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><ul>
<li><a href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#rate-limiting">Rate Limiting</a></li>
</ul>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul>
<li><code>nginx.ingress.kubernetes.io/limit-connections</code>: number of concurrent connections allowed from a single IP address. A 503 error is returned when exceeding this limit.</li>
<li><code>nginx.ingress.kubernetes.io/limit-rps</code>: number of requests accepted from a given IP each second. The burst limit is set to this limit multiplied by the burst multiplier, the default multiplier is 5. When clients exceed this limit, <a href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#limit-req-status-code">limit-req-status-code</a> default: 503 is returned.</li>
<li><code>nginx.ingress.kubernetes.io/limit-rpm</code>: number of requests accepted from a given IP each minute. The burst limit is set to this limit multiplied by the burst multiplier, the default multiplier is 5. When clients exceed this limit, <a href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#limit-req-status-code">limit-req-status-code</a> default: 503 is returned.</li>
<li><code>nginx.ingress.kubernetes.io/limit-burst-multiplier</code>: multiplier of the limit rate for burst size. The default burst multiplier is 5, this annotation override the default multiplier. When clients exceed this limit, <a href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#limit-req-status-code">limit-req-status-code</a> default: 503 is returned.</li>
<li><code>nginx.ingress.kubernetes.io/limit-rate-after</code>: initial number of kilobytes after which the further transmission of a response to a given connection will be rate limited. This feature must be used with <a href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#proxy-buffering">proxy-buffering</a> enabled.</li>
<li><code>nginx.ingress.kubernetes.io/limit-rate</code>: number of kilobytes per second allowed to send to a given connection. The zero value disables rate limiting. This feature must be used with <a href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#proxy-buffering">proxy-buffering</a> enabled.</li>
<li><code>nginx.ingress.kubernetes.io/limit-whitelist</code>: client IP source ranges to be excluded from rate-limiting. The value is a comma separated list of CIDRs.</li>
</ul>
<p>If you specify multiple annotations in a single Ingress rule, limits are applied in the order <code>limit-connections</code>, <code>limit-rpm</code>, <code>limit-rps</code>.</p>
<p>To configure settings globally for all Ingress rules, the <code>limit-rate-after</code> and <code>limit-rate</code> values may be set in the <a href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#limit-rate">NGINX ConfigMap</a>. The value set in an Ingress annotation will override the global setting.</p>
]]></content>
  </entry>
  <entry>
    <title>istio简介</title>
    <url>/istio/</url>
    <content><![CDATA[<h2 id="Istio简介"><a href="#Istio简介" class="headerlink" title="Istio简介"></a>Istio简介</h2><p>Istio是一个开放服务网格，提供了一种连接，管理和保护微服务的统一方法。它支持管理服务之间的流量，执行访问策略以及汇总遥测数据，所有这些都无需更改微服务代码。<br>Istio：</p>
<ul>
<li>HTTP，gRPC，WebSocket，MongoDB和TCP通信的自动负载平衡。  </li>
<li>通过丰富的路由规则，重试，故障转移和故障注入对流量行为进行细粒度控制。  </li>
<li>可配置的策略层和API，支持访问控制，速率限制和配额。  </li>
<li>群集内所有流量的自动指标，日志和跟踪，包括群集入口和出口。  </li>
<li>通过强大的基于身份的身份验证和授权，在群集中进行安全的服务间通信。</li>
</ul>
<h2 id="Istio架构图"><a href="#Istio架构图" class="headerlink" title="Istio架构图"></a>Istio架构图</h2><p><img data-src="/images/istio.jpg" alt="istio" title="istio架构图"></p>
]]></content>
      <categories>
        <category>istio</category>
      </categories>
      <tags>
        <tag>istio</tag>
        <tag>service mesh</tag>
      </tags>
  </entry>
  <entry>
    <title>istio使用【CRDs】</title>
    <url>/istio-shi-yong-crds/</url>
    <content><![CDATA[<blockquote>
<p><strong>本文使用istio版本号：<font size="4" color="#D2691E">1.4.2</font></strong></p>
</blockquote>
<blockquote>
<p> Istio安装时，第一步就是创建了各种自定义资源类型（CRD），参考<a href="">istio部署【在kubernetes上部署】</a>，其中最重要的几个CRD包括：<strong>Gateway</strong>、<strong>VirtualService</strong>、<strong>DestinationRule</strong>、<strong>ServiceEntry</strong>。主要架构如下图：<br><img data-src="/images/istio_CRDs.jpg" alt="CRDs"></p>
</blockquote>
<h2 id="DestinationRule"><a href="#DestinationRule" class="headerlink" title="DestinationRule"></a>DestinationRule</h2><p>DestinationRule用于定义目标服务的访问策略，如在subset定义版本，定义负载均衡策略，熔断，一级TLS等。</p>
<h3 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3
<span class="token key atrule">kind</span><span class="token punctuation">:</span> DestinationRule
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> reviews
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">host</span><span class="token punctuation">:</span> reviews
  <span class="token key atrule">subsets</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> v1
    <span class="token key atrule">labels</span><span class="token punctuation">:</span>
      <span class="token key atrule">version</span><span class="token punctuation">:</span> v1
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> v2
    <span class="token key atrule">labels</span><span class="token punctuation">:</span>
      <span class="token key atrule">version</span><span class="token punctuation">:</span> v2
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="定义负载均衡策略"><a href="#定义负载均衡策略" class="headerlink" title="定义负载均衡策略"></a>定义负载均衡策略</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3
<span class="token key atrule">kind</span><span class="token punctuation">:</span> DestinationRule
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> reviews
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">host</span><span class="token punctuation">:</span> reviews
  <span class="token key atrule">trafficPolicy</span><span class="token punctuation">:</span>
    <span class="token key atrule">loadBalancer</span><span class="token punctuation">:</span>
      <span class="token key atrule">simple</span><span class="token punctuation">:</span> RANDOM
  <span class="token key atrule">subsets</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> v1
    <span class="token key atrule">labels</span><span class="token punctuation">:</span>
      <span class="token key atrule">version</span><span class="token punctuation">:</span> v1
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> v2
    <span class="token key atrule">labels</span><span class="token punctuation">:</span>
      <span class="token key atrule">version</span><span class="token punctuation">:</span> v2
    <span class="token key atrule">trafficPolicy</span><span class="token punctuation">:</span>
      <span class="token key atrule">loadBalancer</span><span class="token punctuation">:</span>
        <span class="token key atrule">simple</span><span class="token punctuation">:</span> ROUND_ROBIN
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="定义熔断器"><a href="#定义熔断器" class="headerlink" title="定义熔断器"></a>定义熔断器</h3><p>参考<a href="https://istio.io/docs/tasks/traffic-management/circuit-breaking/">官网</a></p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3
<span class="token key atrule">kind</span><span class="token punctuation">:</span> DestinationRule
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> reviews
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">host</span><span class="token punctuation">:</span> reviews
  <span class="token key atrule">subsets</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> v1
    <span class="token key atrule">labels</span><span class="token punctuation">:</span>
      <span class="token key atrule">version</span><span class="token punctuation">:</span> v1
    <span class="token key atrule">trafficPolicy</span><span class="token punctuation">:</span>
      <span class="token key atrule">connectionPool</span><span class="token punctuation">:</span>
        <span class="token key atrule">tcp</span><span class="token punctuation">:</span>
          <span class="token key atrule">maxConnections</span><span class="token punctuation">:</span> <span class="token number">100</span>
      <span class="token key atrule">http</span><span class="token punctuation">:</span>
        <span class="token key atrule">http1MaxPendingRequests</span><span class="token punctuation">:</span> <span class="token number">100</span>
        <span class="token key atrule">maxRequestsPerConnection</span><span class="token punctuation">:</span> <span class="token number">100</span>
    <span class="token key atrule">outlierDetection</span><span class="token punctuation">:</span>
      <span class="token key atrule">consecutiveErrors</span><span class="token punctuation">:</span> <span class="token number">1</span>
      <span class="token key atrule">interval</span><span class="token punctuation">:</span> 1s
      <span class="token key atrule">baseEjectionTime</span><span class="token punctuation">:</span> 3m
      <span class="token key atrule">maxEjectionPercent</span><span class="token punctuation">:</span> <span class="token number">100</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="VirtualService"><a href="#VirtualService" class="headerlink" title="VirtualService"></a>VirtualService</h2><p>VirtualService是最重要的配置接口，定义服务的所有路由规则，包括条件判断、权重、路径重写等。</p>
<h3 id="定义权重示例"><a href="#定义权重示例" class="headerlink" title="定义权重示例"></a>定义权重示例</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3
<span class="token key atrule">kind</span><span class="token punctuation">:</span> VirtualService
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> reviews
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> reviews
  <span class="token key atrule">http</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">route</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">destination</span><span class="token punctuation">:</span>
        <span class="token key atrule">host</span><span class="token punctuation">:</span> reviews
        <span class="token key atrule">subset</span><span class="token punctuation">:</span> v1
      <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">90</span>
    <span class="token punctuation">-</span> <span class="token key atrule">destination</span><span class="token punctuation">:</span>
        <span class="token key atrule">host</span><span class="token punctuation">:</span> reviews
        <span class="token key atrule">subset</span><span class="token punctuation">:</span> v2
      <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">10</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="定义超时和重试策略"><a href="#定义超时和重试策略" class="headerlink" title="定义超时和重试策略"></a>定义超时和重试策略</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3
<span class="token key atrule">kind</span><span class="token punctuation">:</span> VirtualService
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> ratings
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> ratings
  <span class="token key atrule">http</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">route</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">destination</span><span class="token punctuation">:</span>
        <span class="token key atrule">host</span><span class="token punctuation">:</span> ratings
        <span class="token key atrule">subset</span><span class="token punctuation">:</span> v1
    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 10s
    <span class="token key atrule">retries</span><span class="token punctuation">:</span>
      <span class="token key atrule">attempts</span><span class="token punctuation">:</span> <span class="token number">3</span>
      <span class="token key atrule">perTryTimeout</span><span class="token punctuation">:</span> 2s
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="故障注入：模拟失败的场景"><a href="#故障注入：模拟失败的场景" class="headerlink" title="故障注入：模拟失败的场景"></a>故障注入：模拟失败的场景</h3><p>参考<a href="https://istio.io/docs/tasks/traffic-management/fault-injection/">Fault Injection</a></p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3
<span class="token key atrule">kind</span><span class="token punctuation">:</span> VirtualService
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> ratings
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> ratings
  <span class="token key atrule">http</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">fault</span><span class="token punctuation">:</span>
      <span class="token comment" spellcheck="true">#定义10%请求+5秒延迟， 也可以是percent: 10</span>
      <span class="token key atrule">delay</span><span class="token punctuation">:</span>
        <span class="token key atrule">percentage</span><span class="token punctuation">:</span>
          <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token number">10</span>
        <span class="token key atrule">fixedDelay</span><span class="token punctuation">:</span> 5s
 
      <span class="token comment" spellcheck="true">#定义10%请求返回400错误， 也可以是percent: 10</span>
      <span class="token key atrule">abort</span><span class="token punctuation">:</span>
        <span class="token key atrule">percentage</span><span class="token punctuation">:</span>
          <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token number">10</span>
        <span class="token key atrule">httpStatus</span><span class="token punctuation">:</span> <span class="token number">400</span>
    <span class="token key atrule">route</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">destination</span><span class="token punctuation">:</span>
        <span class="token key atrule">host</span><span class="token punctuation">:</span> ratings
        <span class="token key atrule">subset</span><span class="token punctuation">:</span> v1
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="条件判断——标签"><a href="#条件判断——标签" class="headerlink" title="条件判断——标签"></a>条件判断——标签</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3
<span class="token key atrule">kind</span><span class="token punctuation">:</span> VirtualService
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> ratings
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> ratings
  <span class="token key atrule">http</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">match</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">sourceLabels</span><span class="token punctuation">:</span>
        <span class="token key atrule">app</span><span class="token punctuation">:</span> reviews
        <span class="token key atrule">version</span><span class="token punctuation">:</span> v2
    <span class="token punctuation">...</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="条件判断——Header"><a href="#条件判断——Header" class="headerlink" title="条件判断——Header"></a>条件判断——Header</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3
<span class="token key atrule">kind</span><span class="token punctuation">:</span> VirtualService
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> reviews
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> reviews
  <span class="token key atrule">http</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">match</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">headers</span><span class="token punctuation">:</span>
        <span class="token key atrule">end-user</span><span class="token punctuation">:</span>
          <span class="token key atrule">exact</span><span class="token punctuation">:</span> jason
    <span class="token key atrule">route</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">destination</span><span class="token punctuation">:</span>
        <span class="token key atrule">host</span><span class="token punctuation">:</span> reviews
        <span class="token key atrule">subset</span><span class="token punctuation">:</span> v2
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="条件判断——URI路径"><a href="#条件判断——URI路径" class="headerlink" title="条件判断——URI路径"></a>条件判断——URI路径</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3
<span class="token key atrule">kind</span><span class="token punctuation">:</span> VirtualService
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> productpage
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> productpage
  <span class="token key atrule">http</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">match</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">uri</span><span class="token punctuation">:</span>
        <span class="token key atrule">prefix</span><span class="token punctuation">:</span> /api/v1
    <span class="token punctuation">...</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="多条件判断"><a href="#多条件判断" class="headerlink" title="多条件判断"></a>多条件判断</h3><p>如果是嵌套在一个匹配语句中，为<font color="red"><strong>AND</strong></font>关系。</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3
<span class="token key atrule">kind</span><span class="token punctuation">:</span> VirtualService
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> ratings
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> ratings
  <span class="token key atrule">http</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">match</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">sourceLabels</span><span class="token punctuation">:</span>
        <span class="token key atrule">app</span><span class="token punctuation">:</span> reviews
        <span class="token key atrule">version</span><span class="token punctuation">:</span> v2
      <span class="token key atrule">headers</span><span class="token punctuation">:</span>
        <span class="token key atrule">end-user</span><span class="token punctuation">:</span>
          <span class="token key atrule">exact</span><span class="token punctuation">:</span> jason
    <span class="token punctuation">...</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果是单独的匹配语句，为<font color="red"><strong>OR</strong></font>关系。</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3
<span class="token key atrule">kind</span><span class="token punctuation">:</span> VirtualService
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> ratings
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> ratings
  <span class="token key atrule">http</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">match</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">sourceLabels</span><span class="token punctuation">:</span>
        <span class="token key atrule">app</span><span class="token punctuation">:</span> reviews
        <span class="token key atrule">version</span><span class="token punctuation">:</span> v2
    <span class="token punctuation">-</span> <span class="token key atrule">headers</span><span class="token punctuation">:</span>
        <span class="token key atrule">end-user</span><span class="token punctuation">:</span>
          <span class="token key atrule">exact</span><span class="token punctuation">:</span> jason
    <span class="token punctuation">...</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="ServiceEntry"><a href="#ServiceEntry" class="headerlink" title="ServiceEntry"></a>ServiceEntry</h2><p>将外部服务接入到服务注册表中，让Istio中自动发现的服务能够访问和路由到这些手工加入的服务。与<code>VirtualService</code>或<code>DestinationRule</code>配合使用。</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3
<span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceEntry
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> foo<span class="token punctuation">-</span>ext<span class="token punctuation">-</span>svc
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> *.foo.com
  <span class="token key atrule">ports</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">number</span><span class="token punctuation">:</span> <span class="token number">80</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> http
    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> HTTP
  <span class="token punctuation">-</span> <span class="token key atrule">number</span><span class="token punctuation">:</span> <span class="token number">443</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> https
    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> HTTPS
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3
<span class="token key atrule">kind</span><span class="token punctuation">:</span> VirtualService
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> bar<span class="token punctuation">-</span>foo<span class="token punctuation">-</span>ext<span class="token punctuation">-</span>svc
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> bar.foo.com
  <span class="token key atrule">http</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">route</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">destination</span><span class="token punctuation">:</span>
        <span class="token key atrule">host</span><span class="token punctuation">:</span> bar.foo.com
    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 10s
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h2><p>提供外部服务访问接入，可发布任意内部端口的服务，供外部访问。配合<code>VirtualService</code>使用。</p>
<p>Bookinfo示例:</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Gateway
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> bookinfo<span class="token punctuation">-</span>gateway
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">selector</span><span class="token punctuation">:</span>
    <span class="token key atrule">istio</span><span class="token punctuation">:</span> ingressgateway <span class="token comment" spellcheck="true"># use istio default controller</span>
  <span class="token key atrule">servers</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span>
      <span class="token key atrule">number</span><span class="token punctuation">:</span> <span class="token number">80</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> http
      <span class="token key atrule">protocol</span><span class="token punctuation">:</span> HTTP
    <span class="token key atrule">hosts</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">"*"</span>
<span class="token punctuation">---</span>
<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3
<span class="token key atrule">kind</span><span class="token punctuation">:</span> VirtualService
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> bookinfo
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token string">"*"</span>
  <span class="token key atrule">gateways</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> bookinfo<span class="token punctuation">-</span>gateway
  <span class="token key atrule">http</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">match</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">uri</span><span class="token punctuation">:</span>
        <span class="token key atrule">exact</span><span class="token punctuation">:</span> /productpage
    <span class="token punctuation">-</span> <span class="token key atrule">uri</span><span class="token punctuation">:</span>
        <span class="token key atrule">prefix</span><span class="token punctuation">:</span> /static
    <span class="token punctuation">-</span> <span class="token key atrule">uri</span><span class="token punctuation">:</span>
        <span class="token key atrule">exact</span><span class="token punctuation">:</span> /login
    <span class="token punctuation">-</span> <span class="token key atrule">uri</span><span class="token punctuation">:</span>
        <span class="token key atrule">exact</span><span class="token punctuation">:</span> /logout
    <span class="token punctuation">-</span> <span class="token key atrule">uri</span><span class="token punctuation">:</span>
        <span class="token key atrule">prefix</span><span class="token punctuation">:</span> /api/v1/products
    <span class="token key atrule">route</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">destination</span><span class="token punctuation">:</span>
        <span class="token key atrule">host</span><span class="token punctuation">:</span> productpage
        <span class="token key atrule">port</span><span class="token punctuation">:</span>
          <span class="token key atrule">number</span><span class="token punctuation">:</span> <span class="token number">9080</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>istio</category>
      </categories>
      <tags>
        <tag>istio</tag>
        <tag>CRDs</tag>
      </tags>
  </entry>
  <entry>
    <title>istio代理接口503报错排查分析</title>
    <url>/istio-dai-li-jie-kou-503-bao-cuo-pai-cha-fen-xi/</url>
    <content><![CDATA[<h3 id="获取istio-proxy所有配置"><a href="#获取istio-proxy所有配置" class="headerlink" title="获取istio-proxy所有配置"></a>获取istio-proxy所有配置</h3><pre><code>kubectl -n test exec auhss-v1-769dc687ff-479r4 -c istio-proxy -- curl http://localhost:15000/config_dump &gt; test.json
</code></pre>
<h3 id="配置istio-proxy日志级别为debug"><a href="#配置istio-proxy日志级别为debug" class="headerlink" title="配置istio-proxy日志级别为debug"></a>配置istio-proxy日志级别为debug</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># -n 名空间</span>
<span class="token comment" spellcheck="true"># server-v1-6dfd6b9846-c2ch6 容器名</span>
kubectl -n mgec  <span class="token function">exec</span> server-v1-6dfd6b9846-c2ch6  -c istio-proxy -- curl -XPOST -s -o /dev/null http://localhost:15000/logging?level<span class="token operator">=</span>debug
<span class="token comment" spellcheck="true"># 通过pod注解方式设置日志级别</span>
template:
    metadata:
      annotations:
        sidecar.istio.io/logLevel: debug
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="查看Prometheus收集的istio指标"><a href="#查看Prometheus收集的istio指标" class="headerlink" title="查看Prometheus收集的istio指标"></a>查看Prometheus收集的istio指标</h3><pre><code>istio_requests_total{response_flags="UC", response_code="503", reporter="destination"}
</code></pre>
]]></content>
      <categories>
        <category>istio</category>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>istio</tag>
        <tag>istio-proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>istio使用【dashboard—Naftis】</title>
    <url>/istio-shi-yong-dashboard-naftis/</url>
    <content><![CDATA[<blockquote>
<p>本文使用的istio版本号：<code>1.4.2</code></p>
</blockquote>
<h3 id="简介（参考官网，Naftis小米开源，不在维护）"><a href="#简介（参考官网，Naftis小米开源，不在维护）" class="headerlink" title="简介（参考官网，Naftis小米开源，不在维护）"></a>简介（参考<a href="https://github.com/xiaomi/naftis/blob/master/README-CN.md">官网</a>，Naftis小米开源，不在维护）</h3><p><code>Naftis</code> 是一个基于 web 的 <code>Istio dashboard</code>，通过任务模板的方式来帮助用户更方便地执行 Istio 任务。 用户可以在 Naftis 中定义自己的任务模板，并填充变量来构造单个或多个构造任务实例，从而完成各种服务治理功能。</p>
<ul>
<li>内部集成了一些常用 dashboard</li>
<li>可定制的任务模板支持</li>
<li>支持回滚指定任务</li>
<li>支持指定根服务节点的服务拓扑图</li>
<li>提供查看 Istio 的 Services 和 Pod 的支持</li>
<li>开箱即用，通过 Kubectl 相关指令即可快速部署</li>
<li>支持 Istio 1.0</li>
</ul>
<h3 id="快速安装"><a href="#快速安装" class="headerlink" title="快速安装"></a>快速安装</h3><pre class="line-numbers language-sh"><code class="language-sh"># 下载最新 release 文件和部署清单
wget -O - https://raw.githubusercontent.com/XiaoMi/naftis/master/tool/getlatest.sh | bash
 
# 创建 Naftis 命名空间
$ kubectl create namespace naftis
 
# 确认 Naftis 命名空间已创建
$ kubectl get namespace naftis
NAME           STATUS    AGE
naftis         Active    18m
 
# 部署 Naftis MySQL 服务（本地 Kuberenetes 集群）
$ kubectl apply -n naftis -f mysql.yaml
# 部署 Naftis MySQL 服务（云服务商提供的 Kuberenetes 集群）
$ kubectl apply -n naftis -f mysql-cloud.yaml
 
# 确认 MySQL 已部署
NAME                           READY     STATUS    RESTARTS   AGE
naftis-mysql-c78f99d6c-kblbq   0/1       Running   0          9s
naftis-mysql-test              1/1       Running   0          10s
 
# 部署 Naftis API 和 UI 服务
kubectl apply -n naftis -f naftis.yaml
 
# 确认 Naftis 所有的服务已经正确定义并正常运行中
kubectl get svc -n naftis
NAME           TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE
naftis-api     ClusterIP      10.233.3.144    <none>        50000/TCP      7s
naftis-mysql   ClusterIP      10.233.57.230   <none>        3306/TCP       55s
naftis-ui      LoadBalancer   10.233.18.125   <pending>     80:31286/TCP   6s
 
kubectl get pod -n naftis
NAME                           READY     STATUS    RESTARTS   AGE
naftis-api-0                   1/2       Running   0          19s
naftis-mysql-c78f99d6c-kblbq   1/1       Running   0          1m
naftis-mysql-test              1/1       Running   0          1m
naftis-ui-69f7d75f47-4jzwz     1/1       Running   0          19s
 
# 端口转发访问 Naftis
kubectl -n naftis port-forward $(kubectl -n naftis get pod -l app=naftis-ui -o jsonpath='{.items[0].metadata.name}') 8080:80 &
 
# 打开浏览器，访问 http://localhost:8080 即可。默认用户名和密码分别为 admin、admin。
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h3><p><img data-src="/images/k8s11.png" alt="naftis"></p>
<p>安装比较简单，功能也比较简单。</p>
]]></content>
      <categories>
        <category>istio</category>
      </categories>
      <tags>
        <tag>istio</tag>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>istio使用【安装配置】</title>
    <url>/istio-shi-yong-an-zhuang-pei-zhi/</url>
    <content><![CDATA[<blockquote>
<p>本文使用的版本号：<code>1.4.2</code></p>
</blockquote>
<h3 id="自定义安装组件"><a href="#自定义安装组件" class="headerlink" title="自定义安装组件"></a>自定义安装组件</h3><p>参考<a href="https://istio.io/docs/setup/install/helm/">安装页面</a>，官网给配置分了几个级别，</p>
<p><img data-src="/images/k8s9.png" alt="istio"></p>
<p>分别代表：</p>
<ul>
<li>default：根据IstioControlPlaneAPI的默认设置启用组件&nbsp;（建议用于生产部署）。您可以通过运行命令显示默认设置istioctl profile dump。</li>
<li>demo：旨在展示Istio功能且资源需求适中的配置。适合运行Bookinfo应用程序和相关任务。这是随快速入门说明一起安装的配置，但是&nbsp;如果您想探索更高级的任务，则可以稍后自定义配置以启用其他功能。<blockquote>
<p>此配置文件可实现高级别的跟踪和访问日志记录，因此不适合进行性能测试。</p>
</blockquote>
</li>
<li>minimal：使用Istio的流量管理功能所需的最少组件集。</li>
<li>sds：类似于默认配置文件，但也启用Istio的SDS（​​秘密发现服务）。此配置文件附带默认情况下启用的其他身份验证功能（严格双向TLS）。</li>
<li>remote：用于配置共享控制平面的多集群服务网格multicluster mesh。</li>
</ul>
<p>不同配置安装的的组件也不一样，参考<a href="https://istio.io/docs/setup/additional-setup/config-profiles/">配置</a>，打<code>X</code>是要安装的<br><img data-src="/images/k8s10.png" alt="istio"></p>
<p>当然我们也可以自定义安装组件</p>
<pre><code>cd install/kubernetes/helm/istio
vim values.yaml
</code></pre>
<pre class="line-numbers language-yml"><code class="language-yml">gateways:
  enabled: true
 
sidecarInjectorWebhook:
  enabled: true
 
galley:
  enabled: true
 
mixer:
  policy:
    enabled: true
 
  telemetry:
    enabled: true
 
pilot:
  enabled: true
 
security:
  enabled: true
 
nodeagent:
  enabled: false
 
grafana:
  enabled: false
 
prometheus:
  enabled: true
 
tracing:
  enabled: false
 
kiali:
  enabled: false
 
certmanager:
  enabled: false
 
istio_cni:
  enabled: false
 
istiocoredns:
  enabled: false
 
# ...
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以将我们需要安装的组件定义为<code>true</code>之后，参考<a href="">部署</a>再安装。</p>
<p>所有的配置说明参考<a href="https://istio.io/docs/reference/config/installation-options/">官网配置选项</a>.</p>
]]></content>
      <categories>
        <category>istio</category>
      </categories>
      <tags>
        <tag>istio</tag>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>istio架构【数据平面与控制平面】</title>
    <url>/istio-jia-gou/</url>
    <content><![CDATA[<h3 id="架构综述"><a href="#架构综述" class="headerlink" title="架构综述"></a>架构综述</h3><p><code>Istio</code>在逻辑上分为数据平面(<code>data plane</code>)和控制平面(<code>control plane</code>)两部分：</p>
<ul>
<li><strong>数据平面</strong>：由一系列以<code>sidecar</code>形式部署的智能代理(<code>Envoy</code>)组成。这些代理可以调节和控制微服务及混合器(Mixer)之间的所有网络通信</li>
<li><strong>控制平面</strong>：负责管理和配置代理来路由流量，除此之外控制平面还配置混合器(<code>Mixer</code>)以执行策略和收集遥测数据</li>
</ul>
<p><img data-src="/images/istio2.png" alt="istio 架构"></p>
<h3 id="数据平面"><a href="#数据平面" class="headerlink" title="数据平面"></a>数据平面</h3><ul>
<li><code>Envoy</code>是以C++开发的高性能代理，用于接管服务网格中所有服务的所有<code>inbound</code>和<code>outbound</code>流量。 Istio实际上利用了很多Envoy已有的特性，例如：服务的动态发现、负载均衡、TSL终止、HTTP/2和gRPC代理、断路器、健康检查、基于百分比流量拆分的灰度发布、故障注入以及丰富的度量指标。</li>
<li>Envoy以sidecar部署，与对应的服务在同一个Kubernetes Pod中。这样的部署方式使得Istio可以将大量了关于流量行为的信号作为属性(<code>Attribute</code>)提取出来。这些属性可以被用来在混合器(Mixer)中执行策略决策，并发送给监控系统，以提供整个Service Mesh的行为信息。Sidecar模式允许我们将istio的功能添加到现有的部署中，而无需重构或重写现有的代码。</li>
</ul>
<h3 id="控制平面"><a href="#控制平面" class="headerlink" title="控制平面"></a>控制平面</h3><ul>
<li><p><strong>Pilot为</strong> Envoy <code>sidecar</code> 提供服务发现功能，为智能路由（例如 A/B 测试、金丝雀部署等）和弹性（超时、重试、熔断器等）提供流量管理功能。 将控制流量行为的高级路由规则转换为Envoy的相关配置，并在运行时将它们传播到sidecar。</p>
</li>
<li><p><strong>Mixer</strong>分为<code>Policy</code>和<code>Telemetry</code>两个子模块。<code>Policy</code>用于向Envoy提供准入策略控制，黑白名单控制，速率限制等相关策略；<code>Telemetry</code>为Envoy提供了数据上报和日志搜集服务，以用于监控告警和日志查询。</p>
</li>
<li><p><strong>Galley</strong>在Istio中，承担配置的导入、处理和分发任务，为Istio提供了配置管理服务,提供在k8s服务端验证Istio的<code>CRD</code> 资源的合法性的方法，是整个控制面的配置管理中心。</p>
</li>
<li><p><strong>Citadel</strong>主要关注安全，为服务之间以及与终端用户提供认证、授权、凭据管理等功能。</p>
</li>
</ul>
<h3 id="类比"><a href="#类比" class="headerlink" title="类比"></a>类比</h3><p><img data-src="/images/istio3.jpg" alt="istio 架构"></p>
]]></content>
      <categories>
        <category>istio</category>
      </categories>
      <tags>
        <tag>istio</tag>
      </tags>
  </entry>
  <entry>
    <title>istio部署【在kubernetes上部署】</title>
    <url>/istio-bu-shu-zai-kubernetes-shang-bu-shu/</url>
    <content><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="下载istio"><a href="#下载istio" class="headerlink" title="下载istio"></a>下载istio</h3><p>下载页面，下载与您的操作系统相对应的安装文件。Linux上可以直接执行下面命令下载并解压最新版</p>
<pre><code>curl -L https://istio.io/downloadIstio | sh -
</code></pre>
<h3 id="移至Istio软件包目录"><a href="#移至Istio软件包目录" class="headerlink" title="移至Istio软件包目录"></a>移至Istio软件包目录</h3><p>例如，如果软件包为&nbsp;<code>istio-1.4.2</code>：</p>
<pre><code>cd istio-1.4.2
</code></pre>
<h3 id="安装目录包含："><a href="#安装目录包含：" class="headerlink" title="安装目录包含："></a>安装目录包含：</h3><ul>
<li><code>Kubernetes</code>的安装<code>YAML</code>文件在&nbsp;<code>install/kubernetes</code></li>
<li>示例应用程序&nbsp;<code>samples/</code></li>
<li>目录中的客户端二进制文件。手动注入<code>Envoy</code>作为<code>Sidecar</code>代理时使用。<code>istioctlbin/istioctl</code></li>
<li>将<code>istioctl</code>命令添加到环境变量，如下命令是临时加入</li>
</ul>
<pre><code>export PATH=$PWD/bin:$PATH
</code></pre>
<h2 id="两种安装方式"><a href="#两种安装方式" class="headerlink" title="两种安装方式"></a>两种安装方式</h2><p>istio在kubenetes上有两种安装方式，参考<a href="https://istio.io/docs/setup/install/helm/">官网</a></p>
<h3 id="helm-template方式安装Istio"><a href="#helm-template方式安装Istio" class="headerlink" title="helm template方式安装Istio"></a>helm template方式安装Istio</h3><h4 id="创建namespace"><a href="#创建namespace" class="headerlink" title="创建namespace"></a>创建namespace</h4><pre><code>kubectl create namespace istio-system
</code></pre>
<h4 id="安装所有istio的CRD"><a href="#安装所有istio的CRD" class="headerlink" title="安装所有istio的CRD"></a>安装所有istio的CRD</h4><p>先将<code>template</code>导出到<code>istio.yaml</code></p>
<pre><code>helm template install/kubernetes/helm/istio-init --name istio-init --namespace istio-system &gt; istio.yaml
</code></pre>
<p>然后执行</p>
<pre><code>kubectl apply -f istio.yaml
</code></pre>
<p>或者，两个步骤合二为一 </p>
<pre><code>helm template install/kubernetes/helm/istio-init --name istio-init --namespace istio-system | kubectl apply -f -
</code></pre>
<h4 id="等待所有CRD创建完毕"><a href="#等待所有CRD创建完毕" class="headerlink" title="等待所有CRD创建完毕"></a>等待所有CRD创建完毕</h4><pre><code>kubectl -n istio-system wait --for=condition=complete job --all
</code></pre>
<h4 id="使用默认配置安装isito，其它配置参考官网，同上，命令也可以分开执行"><a href="#使用默认配置安装isito，其它配置参考官网，同上，命令也可以分开执行" class="headerlink" title="使用默认配置安装isito，其它配置参考官网，同上，命令也可以分开执行"></a>使用默认配置安装isito，其它配置参考官网，同上，命令也可以分开执行</h4><pre><code>helm template install/kubernetes/helm/istio --name istio --namespace istio-system | kubectl apply -f -
</code></pre>
<h3 id="helm-install方式安装Istio"><a href="#helm-install方式安装Istio" class="headerlink" title="helm install方式安装Istio"></a>helm install方式安装Istio</h3><h4 id="为Tiller创建service-account，如果已安装好Tiller直接跳过。"><a href="#为Tiller创建service-account，如果已安装好Tiller直接跳过。" class="headerlink" title="为Tiller创建service-account，如果已安装好Tiller直接跳过。"></a>为Tiller创建service-account，如果已安装好Tiller直接跳过。</h4><pre><code>kubectl apply -f install/kubernetes/helm/helm-service-account.yaml
</code></pre>
<h4 id="安装Tiller，如果已安装好Tiller直接跳过。"><a href="#安装Tiller，如果已安装好Tiller直接跳过。" class="headerlink" title="安装Tiller，如果已安装好Tiller直接跳过。"></a>安装Tiller，如果已安装好Tiller直接跳过。</h4><pre><code>helm init --service-account tiller
</code></pre>
<h4 id="安装istio-init，其中包括了创建istio的CRDs。"><a href="#安装istio-init，其中包括了创建istio的CRDs。" class="headerlink" title="安装istio-init，其中包括了创建istio的CRDs。"></a>安装istio-init，其中包括了创建istio的CRDs。</h4><pre><code>helm install install/kubernetes/helm/istio-init --name istio-init --namespace istio-system
</code></pre>
<h4 id="等待CRD创建完成。"><a href="#等待CRD创建完成。" class="headerlink" title="等待CRD创建完成。"></a>等待CRD创建完成。</h4><pre><code>kubectl -n istio-system wait --for=condition=complete job --all
</code></pre>
<h4 id="使用默认配置安装istio，其它配置参考官网"><a href="#使用默认配置安装istio，其它配置参考官网" class="headerlink" title="使用默认配置安装istio，其它配置参考官网"></a>使用默认配置安装istio，其它配置参考官网</h4><pre><code>helm install install/kubernetes/helm/istio --name istio --namespace istio-system
</code></pre>
<h4 id="确定安装完成"><a href="#确定安装完成" class="headerlink" title="确定安装完成"></a>确定安装完成</h4><pre><code>kubectl get svc -n istio-system
</code></pre>
<pre><code>kubectl get pods -n istio-system
</code></pre>
<h2 id="卸载Istio"><a href="#卸载Istio" class="headerlink" title="卸载Istio"></a>卸载Istio</h2><h3 id="使用helm-template安装方式卸载"><a href="#使用helm-template安装方式卸载" class="headerlink" title="使用helm template安装方式卸载"></a>使用helm template安装方式卸载</h3><pre><code>helm template install/kubernetes/helm/istio --name istio --namespace istio-system | kubectl delete -f -
 
kubectl delete namespace istio-system
</code></pre>
<h3 id="使用helm-install安装方式卸载"><a href="#使用helm-install安装方式卸载" class="headerlink" title="使用helm install安装方式卸载"></a>使用helm install安装方式卸载</h3><pre><code>helm delete --purge istio
helm delete --purge istio-init
helm delete --purge istio-cni
kubectl delete namespace istio-system
</code></pre>
<h3 id="删除CRDs"><a href="#删除CRDs" class="headerlink" title="删除CRDs"></a>删除CRDs</h3><pre><code>kubectl delete -f install/kubernetes/helm/istio-init/files
</code></pre>
<p>以上就是通过默认配置安装和卸载istio。</p>
]]></content>
      <categories>
        <category>istio</category>
      </categories>
      <tags>
        <tag>istio</tag>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>java8中List&lt;&lt;Obj&gt;&gt;排序</title>
    <url>/java8-list-pai-xu/</url>
    <content><![CDATA[<h3 id="List排序问题"><a href="#List排序问题" class="headerlink" title="List排序问题"></a>List排序问题</h3><p><code>java8</code>中引入了流的概念，还有<code>Lambda</code>函数的概念，那么针对<code>List&lt;Object&gt;</code>排序有哪些方法呢？</p>
<p>首先我们创建一个<code>User</code>实体类：</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> String name<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//重写了toString方法，方便打印观察</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">"User{"</span> <span class="token operator">+</span>
                    <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>
                    <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>
                    <span class="token string">"}\n"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>创建<code>List&lt;User&gt;</code>对象</p>
<pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>
        <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"zhang1"</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"zhang2"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"zhang3"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"zhang4"</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"zhang5"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"zhang6"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们想根据年龄来做个排序</p>
<p>方法一：</p>
<pre class="line-numbers language-java"><code class="language-java">users<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>User o1<span class="token punctuation">,</span> User o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> o1<span class="token punctuation">.</span>age <span class="token operator">-</span> o2<span class="token punctuation">.</span>age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>print<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>有了<code>Lambda</code>，直接可以简写成</p>
<pre class="line-numbers language-java"><code class="language-java">users<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> o1<span class="token punctuation">.</span>age <span class="token operator">-</span> o2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>print<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>方法二：</p>
<pre class="line-numbers language-java"><code class="language-java">users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> o1<span class="token punctuation">.</span>age <span class="token operator">-</span> o2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>print<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>以上都可以实现<code>List&lt;User&gt;</code>根据年龄排序，打印结果</p>
<pre class="line-numbers language-json"><code class="language-json">User<span class="token punctuation">{</span>name='zhang6'<span class="token punctuation">,</span> age=<span class="token number">12</span><span class="token punctuation">}</span>
User<span class="token punctuation">{</span>name='zhang1'<span class="token punctuation">,</span> age=<span class="token number">14</span><span class="token punctuation">}</span>
User<span class="token punctuation">{</span>name='zhang3'<span class="token punctuation">,</span> age=<span class="token number">16</span><span class="token punctuation">}</span>
User<span class="token punctuation">{</span>name='zhang5'<span class="token punctuation">,</span> age=<span class="token number">18</span><span class="token punctuation">}</span>
User<span class="token punctuation">{</span>name='zhang2'<span class="token punctuation">,</span> age=<span class="token number">25</span><span class="token punctuation">}</span>
User<span class="token punctuation">{</span>name='zhang4'<span class="token punctuation">,</span> age=<span class="token number">27</span><span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java8</tag>
        <tag>list</tag>
        <tag>stream</tag>
      </tags>
  </entry>
  <entry>
    <title>java8方法引用</title>
    <url>/java8-fang-fa-yin-yong/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>双冒号（ <code>::</code> ）运算符在 <code>Java 8</code> 中被用作方法引用（<code>method reference</code>），方法引用是与 <code>lambda</code> 表达式相关的一个重要特性。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><table>
<thead>
<tr>
<th>Kind</th>
<th>Example</th>
</tr>
</thead>
<tbody><tr>
<td>对静态方法的引用</td>
<td><code>ContainingClass::staticMethodName</code></td>
</tr>
<tr>
<td>对一个特定对象的实例方法的引用</td>
<td><code>containingObject::instanceMethodName</code></td>
</tr>
<tr>
<td>对一个任意对象特定类型的实例方法的引用</td>
<td><code>ContainingType::methodName</code></td>
</tr>
<tr>
<td>对构造函数的引用</td>
<td><code>ClassName::new</code></td>
</tr>
</tbody></table>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodReferencesTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">,</span> <span class="token string">"python"</span><span class="token punctuation">,</span> <span class="token string">"go"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 静态方法引用</span>
        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>MethodReferencesTest<span class="token operator">:</span><span class="token operator">:</span>staticMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 对象方法引用</span>
        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MethodReferencesTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token operator">:</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>

        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list1 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list1<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Integer<span class="token operator">:</span><span class="token operator">:</span>valueOf<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>MethodReferencesTest<span class="token operator">:</span><span class="token operator">:</span>staticMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>String a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span>String a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"int "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>java8</category>
      </categories>
  </entry>
  <entry>
    <title>java8流-Stream用法</title>
    <url>/java8-liu-stream-yong-fa/</url>
    <content><![CDATA[<h3 id="用法"><a href="#用法" class="headerlink" title="::用法"></a><code>::</code>用法</h3><p>jdk8中使用了<code>::</code>的用法。就是把方法当做参数传到stream内部，使stream的每个元素都传入到该方法里面执行一下，双冒号运算就是Java中的<code>[方法引用]</code>,<code>[方法引用]</code>的格式是：</p>
<pre><code>类名：：方法名
</code></pre>
<p><strong>例如：</strong></p>
<p>表达式：</p>
<pre class="line-numbers language-java"><code class="language-java">person <span class="token operator">-</span><span class="token operator">></span> person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>使用双冒号：</p>
<pre class="line-numbers language-java"><code class="language-java">Person <span class="token operator">:</span><span class="token operator">:</span> getAge
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="stream和parallelStream"><a href="#stream和parallelStream" class="headerlink" title="stream和parallelStream"></a>stream和parallelStream</h3><p>用于生成数据流</p>
<pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> strings <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"bc"</span><span class="token punctuation">,</span> <span class="token string">"efg"</span><span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"jkl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//生成顺序流</span>
strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//生成并行流</span>
strings<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><p>用于迭代数据流中每个数据</p>
<pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> strings <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"bc"</span><span class="token punctuation">,</span> <span class="token string">"efg"</span><span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"jkl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>对数据流中每个数据执行方法</p>
<pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> strings <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 每个数据加1操作</span>
strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">-</span><span class="token operator">></span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h3><p>去重</p>
<pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> strings <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 去除重复的4,5,5</span>
strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>过滤</p>
<pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span>strings <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"bc"</span><span class="token punctuation">,</span> <span class="token string">"efg"</span><span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"jkl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 获取空字符串的数量</span>
<span class="token keyword">long</span> count <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>string <span class="token operator">-</span><span class="token operator">></span> string<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//获取非空数量</span>
<span class="token keyword">long</span> count <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>string <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>string<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h3><p>限制流的大小</p>
<pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> strings <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 只会打印前4个</span>
strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h3><p>排序</p>
<pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> strings <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 排序打印</span>
strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="Collectors"><a href="#Collectors" class="headerlink" title="Collectors"></a>Collectors</h3><p>归约操作</p>
<pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span>strings <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"bc"</span><span class="token punctuation">,</span> <span class="token string">"efg"</span><span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"jkl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
List<span class="token operator">&lt;</span>String<span class="token operator">></span> filtered <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>string <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>string<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"筛选列表: "</span> <span class="token operator">+</span> filtered<span class="token punctuation">)</span><span class="token punctuation">;</span>
String mergedString <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>string <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>string<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"合并字符串: "</span> <span class="token operator">+</span> mergedString<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="summaryStatistics"><a href="#summaryStatistics" class="headerlink" title="summaryStatistics"></a>summaryStatistics</h3><p>统计</p>
<pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> numbers <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
IntSummaryStatistics stats <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">summaryStatistics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"列表中最大的数 : "</span> <span class="token operator">+</span> stats<span class="token punctuation">.</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"列表中最小的数 : "</span> <span class="token operator">+</span> stats<span class="token punctuation">.</span><span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有数之和 : "</span> <span class="token operator">+</span> stats<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"平均数 : "</span> <span class="token operator">+</span> stats<span class="token punctuation">.</span><span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.runoob.com/java/java8-streams.html">参考1</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java8</tag>
        <tag>stream</tag>
      </tags>
  </entry>
  <entry>
    <title>java二维码工具google.zxing的使用</title>
    <url>/java-er-wei-ma-gong-ju-google-zxing-de-shi-yong/</url>
    <content><![CDATA[<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.google.zxing<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javase<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="编写工具类"><a href="#编写工具类" class="headerlink" title="编写工具类"></a>编写工具类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QRCodeUtil</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 设置二维码长宽</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> width <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> String format <span class="token operator">=</span> <span class="token string">"png"</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 将文本信息封装到二维码中,并返回图片的Base64编码后的字符串</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">encodeQRCode</span><span class="token punctuation">(</span>String text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ByteArrayOutputStream outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String result <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            Map<span class="token operator">&lt;</span>EncodeHintType<span class="token punctuation">,</span> Object<span class="token operator">></span> hints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 设置字符集编码</span>
            hints<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>EncodeHintType<span class="token punctuation">.</span>CHARACTER_SET<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// ErrorCorrectionLevel：误差校正等级，L = ~7% correction、M = ~15% correction、Q = ~25% correction、H = ~30% correction</span>
            <span class="token comment" spellcheck="true">// 不设置时，默认为 L 等级，等级不一样，生成的图案不同，但扫描的结果是一样的</span>
            hints<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>EncodeHintType<span class="token punctuation">.</span>ERROR_CORRECTION<span class="token punctuation">,</span> ErrorCorrectionLevel<span class="token punctuation">.</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 设置二维码边距，单位像素，值越小，二维码距离四周越近</span>
            hints<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>EncodeHintType<span class="token punctuation">.</span>MARGIN<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 生成二维码矩阵</span>
            BitMatrix bitMatrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultiFormatWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> BarcodeFormat<span class="token punctuation">.</span>QR_CODE<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> hints<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 写入文件</span>
            MatrixToImageWriter<span class="token punctuation">.</span><span class="token function">writeToStream</span><span class="token punctuation">(</span>bitMatrix<span class="token punctuation">,</span> format<span class="token punctuation">,</span> outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
            bitMatrix<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            result <span class="token operator">=</span> <span class="token string">"data:image/png;base64,"</span> <span class="token operator">+</span> Base64<span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 通过base64编码后的图片，解析出二维码中的文本信息</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">decodeQRCode</span><span class="token punctuation">(</span>String base64<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Result result <span class="token operator">=</span> null<span class="token punctuation">;</span>
        BufferedImage image <span class="token operator">=</span> null<span class="token punctuation">;</span>
        ByteArrayInputStream inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>base64<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 读取图片</span>
            image <span class="token operator">=</span> ImageIO<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 多步解析</span>
            LuminanceSource source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedImageLuminanceSource</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>
            Binarizer binarizer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HybridBinarizer</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
            BinaryBitmap binaryBitmap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryBitmap</span><span class="token punctuation">(</span>binarizer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 设置字符集编码</span>
            Map<span class="token operator">&lt;</span>DecodeHintType<span class="token punctuation">,</span> String<span class="token operator">></span> hints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            hints<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>DecodeHintType<span class="token punctuation">.</span>CHARACTER_SET<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 对图像进行解码</span>
            result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultiFormatReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>binaryBitmap<span class="token punctuation">,</span> hints<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            image<span class="token punctuation">.</span><span class="token function">getGraphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 测试准确率还是非常高的</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 生成二维码</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">encodeQRCode</span><span class="token punctuation">(</span><span class="token string">"我叫XX勇~~~"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 解码二维码</span>
        <span class="token comment" spellcheck="true">// 注意：需要去掉data:image/png;base64,</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">decodeQRCode</span><span class="token punctuation">(</span><span class="token string">"xxxxxxxxxx.....xxxxxxxx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>zxing</tag>
        <tag>二维码</tag>
      </tags>
  </entry>
  <entry>
    <title>java容器中时区问题</title>
    <url>/java-rong-qi-zhong-shi-qu-wen-ti/</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>容器时间与主机差8个小时,如果里面运行的是java程序，那么程序时间还是有8个小时时差.</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ul>
<li>容器内时间与宿主机时间不一样</li>
</ul>
<pre class="line-numbers language-sh"><code class="language-sh">#启动容器时增加
-v /etc/localtime:/etc/localtime
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>java时区主要从<code>/etc/timezone</code>获取</li>
</ul>
<pre class="line-numbers language-sh"><code class="language-sh">#dockerfile增加
RUN echo "Asia/shanghai" > /etc/timezone

#也也可以从宿主机映射，宿主机可能没有该文件，则需要先新增
-v /etc/timezone:/etc/timezone

#或者jvm参数传递
-Duser.timezone=GMT+08
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>java容器内运行docker命令</title>
    <url>/java-rong-qi-nei-yun-xing-docker-ming-ling/</url>
    <content><![CDATA[<ul>
<li>创建一个能运行docker命令的基础镜像</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash">FROM hub.deri.org.cn/library/openjdk:8-jdk-alpine
MAINTAINER wuzhiyong Docker Maintainers <span class="token string">"wuzhiyong@deri.energy"</span>
RUN <span class="token keyword">echo</span> <span class="token string">"Asia/shanghai"</span> <span class="token operator">></span> /etc/timezone
RUN apk add docker
ENV LANG C.UTF-8
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>创建java镜像</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash">FROM hub.deri.org.cn/library/openjdk:8-jdk-alpine-docker
MAINTAINER wuzhiyong Docker Maintainers <span class="token string">"wuzhiyong@deri.energy"</span>
ADD route-1.0.0-SNAPSHOT.jar /root
EXPOSE 8080
ENV LANG C.UTF-8
CMD <span class="token function">cd</span> /root  <span class="token operator">&amp;&amp;</span> java -jar route-1.0.0-SNAPSHOT.jar
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>启动容器必须携带的</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"> -v /var/run/docker.sock:/var/run/docker.sock
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这样启动起来的java容器内，可以直接执行docker命令,如<code>docker ps</code>获取宿主机所有运行的容器列表.</p>
]]></content>
  </entry>
  <entry>
    <title>java插件化设计开发</title>
    <url>/java-cha-jian-hua-she-ji-kai-fa/</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p><code>java</code>实现动态从<code>jar</code>包加载插件并运行.</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul>
<li>定义插件运行的接口,用户需要自己实现的</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PluginService</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * 插件运行方法
     */</span>
    <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>定义插件实体类</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Plugin</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * 插件名称
     */</span>
    <span class="token keyword">private</span> String pluginName<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
     * jar包完整路径
     */</span>
    <span class="token keyword">private</span> String jarPath<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
     * class完整路径
     */</span>
    <span class="token keyword">private</span> String className<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>定义插件异常</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PluginException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token function">PluginException</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>定义插件管理类</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PluginManager</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Class<span class="token operator">></span> clazzMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">PluginManager</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Plugin<span class="token operator">></span> plugins<span class="token punctuation">)</span> <span class="token keyword">throws</span> PluginException <span class="token punctuation">{</span>
        <span class="token function">initPlugins</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initPlugin</span><span class="token punctuation">(</span>Plugin plugin<span class="token punctuation">)</span> <span class="token keyword">throws</span> PluginException <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
<span class="token comment" spellcheck="true">//            URL url = new URL("file:" + plugin.getJarPath());</span>
            URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>plugin<span class="token punctuation">.</span><span class="token function">getJarPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            URLClassLoader classLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLClassLoader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>url<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Class <span class="token class-name">clazz</span> <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>plugin<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            clazzMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>plugin<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PluginException</span><span class="token punctuation">(</span><span class="token string">"plugin "</span> <span class="token operator">+</span> plugin<span class="token punctuation">.</span><span class="token function">getPluginName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" init error,"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initPlugins</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Plugin<span class="token operator">></span> plugins<span class="token punctuation">)</span> <span class="token keyword">throws</span> PluginException <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Plugin plugin <span class="token operator">:</span> plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">initPlugin</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> PluginService <span class="token function">getInstance</span><span class="token punctuation">(</span>String className<span class="token punctuation">)</span> <span class="token keyword">throws</span> PluginException <span class="token punctuation">{</span>
        Class <span class="token class-name">clazz</span> <span class="token operator">=</span> clazzMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Object instance <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            instance <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PluginException</span><span class="token punctuation">(</span><span class="token string">"plugin "</span> <span class="token operator">+</span> className <span class="token operator">+</span> <span class="token string">" instantiate error,"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>PluginService<span class="token punctuation">)</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>定义插件配置文件</li>
</ul>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 采用xml方式存储配置,dom4j解析 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.dom4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dom4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PluginXmlParser</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>Plugin<span class="token operator">></span> <span class="token function">getPluginList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> PluginException <span class="token punctuation">{</span>

        List<span class="token operator">&lt;</span>Plugin<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        SAXReader saxReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Document document <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            document <span class="token operator">=</span> saxReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"plugin.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PluginException</span><span class="token punctuation">(</span><span class="token string">"read plugin.xml error,"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        Element root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getRootElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> plugins <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token string">"plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object pluginObj <span class="token operator">:</span> plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Element pluginEle <span class="token operator">=</span> <span class="token punctuation">(</span>Element<span class="token punctuation">)</span> pluginObj<span class="token punctuation">;</span>
            Plugin plugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Plugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            plugin<span class="token punctuation">.</span><span class="token function">setPluginName</span><span class="token punctuation">(</span>pluginEle<span class="token punctuation">.</span><span class="token function">elementText</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            plugin<span class="token punctuation">.</span><span class="token function">setJarPath</span><span class="token punctuation">(</span>pluginEle<span class="token punctuation">.</span><span class="token function">elementText</span><span class="token punctuation">(</span><span class="token string">"jar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            plugin<span class="token punctuation">.</span><span class="token function">setClassName</span><span class="token punctuation">(</span>pluginEle<span class="token punctuation">.</span><span class="token function">elementText</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>运行测试类</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> PluginException <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 从配置文件加载插件</span>
        List<span class="token operator">&lt;</span>Plugin<span class="token operator">></span> pluginList <span class="token operator">=</span> PluginXmlParser<span class="token punctuation">.</span><span class="token function">getPluginList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        PluginManager pluginManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PluginManager</span><span class="token punctuation">(</span>pluginList<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span>Plugin plugin <span class="token operator">:</span> pluginList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            PluginService pluginService <span class="token operator">=</span> pluginManager<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>plugin<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始执行["</span> <span class="token operator">+</span> plugin<span class="token punctuation">.</span><span class="token function">getPluginName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]插件..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 调用插件</span>
            pluginService<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"["</span> <span class="token operator">+</span> plugin<span class="token punctuation">.</span><span class="token function">getPluginName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]插件执行完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// 动态加载插件</span>
        Plugin plugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Plugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        plugin<span class="token punctuation">.</span><span class="token function">setPluginName</span><span class="token punctuation">(</span><span class="token string">"B插件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        plugin<span class="token punctuation">.</span><span class="token function">setJarPath</span><span class="token punctuation">(</span><span class="token string">"D:\\flinkDemo\\java8\\out\\artifacts\\test\\test.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        plugin<span class="token punctuation">.</span><span class="token function">setClassName</span><span class="token punctuation">(</span><span class="token string">"com.deri.stream.plugina.PluginB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pluginManager<span class="token punctuation">.</span><span class="token function">initPlugin</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span><span class="token punctuation">;</span>
        PluginService pluginService <span class="token operator">=</span> pluginManager<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"com.deri.stream.plugina.PluginB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pluginService<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>插件A/B/C</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PluginA</span> <span class="token keyword">implements</span> <span class="token class-name">PluginService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Plugin A."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PluginB</span> <span class="token keyword">implements</span> <span class="token class-name">PluginService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Plugin B."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PluginC</span> <span class="token keyword">implements</span> <span class="token class-name">PluginService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Plugin C."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>插件配置文件</li>
</ul>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>A插件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jar</span><span class="token punctuation">></span></span>D:\flinkDemo\java8\out\artifacts\test\test.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jar</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class</span><span class="token punctuation">></span></span>com.deri.stream.plugina.PluginA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>class</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://blog.csdn.net/u010675669/article/details/86677540">java插件化开发</a></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java枚举的使用</title>
    <url>/java-mei-ju-de-shi-yong/</url>
    <content><![CDATA[<h3 id="规范使用枚举类"><a href="#规范使用枚举类" class="headerlink" title="规范使用枚举类"></a>规范使用枚举类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> StatEnum <span class="token punctuation">{</span>
    <span class="token function">SUCCESS</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">END</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">REPEAT_KILL</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"重复"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">INNER_ERROR</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"系统异常"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">DATA_REWRITE</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"数据异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span>  <span class="token keyword">int</span> state<span class="token punctuation">;</span>

    <span class="token keyword">private</span>  String stateInfo<span class="token punctuation">;</span>

    <span class="token function">StatEnum</span><span class="token punctuation">(</span><span class="token keyword">int</span> state<span class="token punctuation">,</span> String stateInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>stateInfo <span class="token operator">=</span> stateInfo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> state<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">getStateInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> stateInfo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> StatEnum <span class="token function">stateOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>StatEnum state<span class="token operator">:</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> state<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span>  null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="枚举搭配接口一起使用"><a href="#枚举搭配接口一起使用" class="headerlink" title="枚举搭配接口一起使用"></a>枚举搭配接口一起使用</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 定义接口</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CodeEnum</span> <span class="token punctuation">{</span>
    Integer <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    String <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 定义枚举</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> StatusEnum <span class="token keyword">implements</span> <span class="token class-name">CodeEnum</span> <span class="token punctuation">{</span>
    <span class="token function">UP</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">DOWN</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Integer code<span class="token punctuation">;</span>

    <span class="token keyword">private</span> String message<span class="token punctuation">;</span>

    <span class="token function">StatusEnum</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">,</span> String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Integer <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> code<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> message<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 定义工具类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumUtil</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">CodeEnum</span><span class="token operator">></span> T <span class="token function">getByCode</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> enumClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>T each<span class="token operator">:</span> enumClass<span class="token punctuation">.</span><span class="token function">getEnumConstants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>each<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> each<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用：</p>
<ul>
<li><code>EnumUtil.getByCode(0, StatusEnum.class).getMessage()</code></li>
<li><code>EnumUtil.getByCode(1, StatusEnum.class).getCode()</code></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>enum</tag>
      </tags>
  </entry>
  <entry>
    <title>java验证码实现</title>
    <url>/java-yan-zheng-ma-shi-xian/</url>
    <content><![CDATA[<h3 id="验证码EasyCaptcha介绍"><a href="#验证码EasyCaptcha介绍" class="headerlink" title="验证码EasyCaptcha介绍"></a>验证码EasyCaptcha介绍</h3><ul>
<li><a href="https://gitee.com/whvse/EasyCaptcha">EasyCaptcha - gitee</a>是一个<code>Java</code>图形验证码库，支持<code>gif</code>、<code>中文</code>、<code>算术</code>等类型，可用于<code>Java Web</code>、<code>JavaSE</code>等项目。</li>
<li><a href="https://github.com/whvcse/EasyCaptcha">EasyCaptcha - github</a></li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.whvcse<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>easy-captcha<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>也许下载不下来，可以直接下载 <a href="https://repo1.maven.org/maven2/com/github/whvcse/easy-captcha/1.6.2/easy-captcha-1.6.2.jar">easy-captcha.jar</a> 包.</p>
</blockquote>
<p>使用下面的命令可以将<code>jar</code>包安装到本地仓库.</p>
<pre class="line-numbers language-bash"><code class="language-bash">mvn install:install-file -Dfile<span class="token operator">=</span>D:/easy-captcha.jar -DgroupId<span class="token operator">=</span>com.github.whvcse -DartifactId<span class="token operator">=</span>easy-captcha -Dversion<span class="token operator">=</span>1.6.2 -Dpackaging<span class="token operator">=</span>jar
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// PNG格式 设置长宽和验证码长度</span>
SpecCaptcha captcha <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpecCaptcha</span><span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 设置验证码字符类型,数字/大小写字母</span>
captcha<span class="token punctuation">.</span><span class="token function">setCharType</span><span class="token punctuation">(</span>Captcha<span class="token punctuation">.</span>TYPE_ONLY_NUMBER<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// GIF格式 设置长宽和验证码长度</span>
GifCaptcha captcha <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GifCaptcha</span><span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 中文验证码 设置长宽和验证码长度</span>
ChineseCaptcha captcha <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChineseCaptcha</span><span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 设置字体, 设置默认字体Captcha.FONT_1...好像有问题,英文可以使用默认字体</span>
captcha<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"楷体"</span><span class="token punctuation">,</span> Font<span class="token punctuation">.</span>PLAIN<span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 使用算术验证码,设置长宽和几位数运算</span>
ArithmeticCaptcha captcha <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArithmeticCaptcha</span><span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 获取运算的公式：3+2=?</span>
captcha<span class="token punctuation">.</span><span class="token function">getArithmeticString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// 通用方法</span>
captcha<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 获取验证码的字符</span>
captcha<span class="token punctuation">.</span><span class="token function">textChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 获取验证码的字符数组</span>

<span class="token comment" spellcheck="true">// 验证码保存到文件</span>
FileOutputStream outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:/captcha.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
captcha<span class="token punctuation">.</span><span class="token function">out</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 输出验证码</span>

<span class="token comment" spellcheck="true">// 输出base64编码, 返回给前端需要用到</span>
specCaptcha<span class="token punctuation">.</span><span class="token function">toBase64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 如果不想要base64的头部data:image/png;base64,</span>
specCaptcha<span class="token punctuation">.</span><span class="token function">toBase64</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 加一个空的参数即可</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><a href="https://gitee.com/whvse/EasyCaptcha">更多使用方式参考</a></li>
</ul>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul>
<li><a href="https://www.wakatool.com/base64img">在线base64转图片</a>，可以用于测试.</li>
</ul>
<h3 id="已知问题"><a href="#已知问题" class="headerlink" title="已知问题"></a>已知问题</h3><p>同样的程序本地测试没有问题，部署到<code>docker</code>上测试出现问题.  </p>
<ul>
<li>解决办法: 不要使用<code>openjdk</code>做基础镜像,采用<code>oracle jdk</code>.</li>
<li>这边提供一个能用的: <code>docker pull hub.deri.org.cn/library/oracle_jdk_1.8_131:latest</code></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>验证码</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s-master节点NotReady</title>
    <url>/k8s-master-jie-dian-notready/</url>
    <content><![CDATA[<h3 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h3><p>master节点显示NotReady,不可调度,原本在master节点上运行的<code>corecdn</code>,各类<code>DeamonSet</code>服务都显示异常,查看kubelet服务发现启动报错.   </p>
<p>通过命令<code>journalctl -u kubelet -f</code>查看kubelet启动报错的详细日志,发现主要原因是找不到文件<code>/etc/kubernetes/bootstrap-kubelet.conf</code>.   </p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ol>
<li>从别的节点拷入<code>/etc/kubernetes/bootstrap-kubelet.conf</code>到master节点.</li>
<li>此时kubelet可以启动但是 任然报错</li>
</ol>
<pre class="line-numbers language-log"><code class="language-log">Aug 11 11:18:06 master kubelet[1757]: E0811 11:18:06.553681    1757 reflector.go:125] k8s.io/client-go/informers/factory.go:133: Failed to list *v1beta1.RuntimeClass: runtimeclasses.node.k8s.io is forbidden: User "system:anonymous" cannot list resource "runtimeclasses" in API group "node.k8s.io" at the cluster scope
Aug 11 11:18:06 master kubelet[1757]: E0811 11:18:06.631490    1757 kubelet.go:2248] node "master" not found
Aug 11 11:18:06 master kubelet[1757]: E0811 11:18:06.731614    1757 kubelet.go:2248] node "master" not found
Aug 11 11:18:06 master kubelet[1757]: E0811 11:18:06.753619    1757 reflector.go:125] k8s.io/kubernetes/pkg/kubelet/kubelet.go:444: Failed to list *v1.Service: services is forbidden: User "system:anonymous" cannot list resource "services" in API group "" at the cluster scope
Aug 11 11:18:06 master kubelet[1757]: E0811 11:18:06.831748    1757 kubelet.go:2248] node "master" not found
Aug 11 11:18:06 master kubelet[1757]: E0811 11:18:06.931869    1757 kubelet.go:2248] node "master" not found
Aug 11 11:18:06 master kubelet[1757]: E0811 11:18:06.954503    1757 reflector.go:125] k8s.io/kubernetes/pkg/kubelet/config/apiserver.go:47: Failed to list *v1.Pod: pods is forbidden: User "system:anonymous" cannot list resource "pods" in API group "" at the cluster scope
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="3">
<li>给匿名用户赋予权限</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash">kubectl create clusterrolebinding test:anonymous --clusterrole<span class="token operator">=</span>cluster-admin --user<span class="token operator">=</span>system:anonymous
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>k8s【PostStart钩子】</title>
    <url>/k8s-poststart-gou-zi/</url>
    <content><![CDATA[<h3 id="PostStart"><a href="#PostStart" class="headerlink" title="PostStart"></a>PostStart</h3><p>容器生命周期钩子（<code>Container Lifecycle Hooks</code>）监听容器生命周期的特定事件，并在事件发生时</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spec</span><span class="token punctuation">:</span>
<span class="token key atrule">&amp;nbsp;&amp;nbsp;containers</span><span class="token punctuation">:</span>
<span class="token important">&amp;nbsp</span>;<span class="token important">&amp;nbsp</span>;<span class="token punctuation">-</span><span class="token important">&amp;nbsp</span>;name<span class="token punctuation">:</span><span class="token important">&amp;nbsp</span>;lifecycle<span class="token punctuation">-</span>demo<span class="token punctuation">-</span>container
<span class="token important">&amp;nbsp</span>;<span class="token important">&amp;nbsp</span>;<span class="token important">&amp;nbsp</span>;<span class="token important">&amp;nbsp</span>;image<span class="token punctuation">:</span><span class="token important">&amp;nbsp</span>;nginx
<span class="token key atrule">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lifecycle</span><span class="token punctuation">:</span>
<span class="token key atrule">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;postStart</span><span class="token punctuation">:</span>
<span class="token key atrule">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;exec</span><span class="token punctuation">:</span>
<span class="token important">&amp;nbsp</span>;<span class="token important">&amp;nbsp</span>;<span class="token important">&amp;nbsp</span>;<span class="token important">&amp;nbsp</span>;<span class="token important">&amp;nbsp</span>;<span class="token important">&amp;nbsp</span>;<span class="token important">&amp;nbsp</span>;<span class="token important">&amp;nbsp</span>;<span class="token important">&amp;nbsp</span>;<span class="token important">&amp;nbsp</span>;command<span class="token punctuation">:</span><span class="token important">&amp;nbsp</span>;<span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span><span class="token important">&amp;nbsp</span>;"<span class="token punctuation">-</span>c"<span class="token punctuation">,</span><span class="token important">&amp;nbsp</span>;"echo<span class="token important">&amp;nbsp</span>;Hello<span class="token important">&amp;nbsp</span>;from<span class="token important">&amp;nbsp</span>;the<span class="token important">&amp;nbsp</span>;postStart<span class="token important">&amp;nbsp</span>;handler<span class="token important">&amp;nbsp</span>;<span class="token punctuation">></span><span class="token important">&amp;nbsp</span>;/usr/share/message"<span class="token punctuation">]</span>
<span class="token key atrule">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;preStop</span><span class="token punctuation">:</span>
<span class="token key atrule">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;exec</span><span class="token punctuation">:</span>
<span class="token important">&amp;nbsp</span>;<span class="token important">&amp;nbsp</span>;<span class="token important">&amp;nbsp</span>;<span class="token important">&amp;nbsp</span>;<span class="token important">&amp;nbsp</span>;<span class="token important">&amp;nbsp</span>;<span class="token important">&amp;nbsp</span>;<span class="token important">&amp;nbsp</span>;<span class="token important">&amp;nbsp</span>;<span class="token important">&amp;nbsp</span>;command<span class="token punctuation">:</span><span class="token important">&amp;nbsp</span>;<span class="token punctuation">[</span><span class="token string">"/usr/sbin/nginx"</span><span class="token punctuation">,</span><span class="token string">"-s"</span><span class="token punctuation">,</span><span class="token string">"quit"</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行已注册的回调函数。支持两种钩子：</p>
<ul>
<li><code>postStart</code>： 容器启动后执行，注意由于是<strong>异步执行</strong>，它无法保证一定在ENTRYPOINT之后运行。如果失败，容器会被杀死，并根据RestartPolicy决定是否重启</li>
<li><code>preStop</code>：容器停止前执行，常用于资源清理。如果失败，容器同样也会被杀死</li>
</ul>
<p>而钩子的回调函数支持两种方式：</p>
<ul>
<li><code>exec</code>：在容器内执行命令</li>
<li><code>httpGet</code>：向指定URL发起GET请求</li>
</ul>
<h3 id="关于postStart异步执行测试"><a href="#关于postStart异步执行测试" class="headerlink" title="关于postStart异步执行测试"></a>关于<code>postStart</code><strong>异步执行</strong>测试</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>post<span class="token punctuation">-</span>start
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">containers</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>post<span class="token punctuation">-</span>start<span class="token punctuation">-</span>container
    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox
    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"sleep 5 &amp;&amp; echo $(date) 'written by entrypoint' >> log.log &amp;&amp; sleep 600"</span><span class="token punctuation">]</span>
    <span class="token key atrule">lifecycle</span><span class="token punctuation">:</span>
      <span class="token key atrule">postStart</span><span class="token punctuation">:</span>
        <span class="token key atrule">exec</span><span class="token punctuation">:</span>
          <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"sleep 10 &amp;&amp; echo $(date) 'written by post start' >> log.log"</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>创建上面的<code>pod</code>，通过进入<code>pod</code>，查看<code>log.log</code>打印日志，证明：</p>
<ul>
<li>PostStart是否会挡住主进程的启动</li>
<li>PostStart是否是异步执行</li>
</ul>
<p>如果 PostStart 会阻挡 ENTRYPOINT 的启动，则日志文件内容应该是：</p>
<pre class="line-numbers language-log"><code class="language-log">（时间点 T）written by post start
（时间点 T + 约 10 秒）written by entrypoint
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>否则内容应该是：</p>
<pre class="line-numbers language-log"><code class="language-log">（时间点 T）written by entrypoint
（时间点 T + 约 5 秒）written by post start
```log

实验结果：
```log
/ # cat log.log
Thu Jun 4 06:14:50 UTC 2020 written by entrypoint
Thu Jun 4 06:14:55 UTC 2020 written by post start
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>修改YML</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>post<span class="token punctuation">-</span>start
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">containers</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>post<span class="token punctuation">-</span>start<span class="token punctuation">-</span>container
    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox
    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"sleep 15 &amp;&amp; echo $(date) 'written by entrypoint' >> log.log &amp;&amp; sleep 600"</span><span class="token punctuation">]</span>
    <span class="token key atrule">lifecycle</span><span class="token punctuation">:</span>
      <span class="token key atrule">postStart</span><span class="token punctuation">:</span>
        <span class="token key atrule">exec</span><span class="token punctuation">:</span>
          <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"sleep 10 &amp;&amp; echo $(date) 'written by post start' >> log.log"</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果 PostStart 不是异步执行，则日志文件内容应该是：</p>
<pre class="line-numbers language-log"><code class="language-log">（时间点 T）written by entrypoint
（时间点 T + 约 5 秒）written by post start
```log

否则内容应该是：
```log
（时间点 T）written by post start
（时间点 T + 约 5 秒）written by entrypoint
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>实验结果：</p>
<pre class="line-numbers language-log"><code class="language-log">[root@master k8s]# kubectl exec -it test-post-start sh
/ # cat log.log
Thu Jun 4 06:17:54 UTC 2020 written by post start
Thu Jun 4 06:17:59 UTC 2020 written by entrypoint
/ # 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="实验结论"><a href="#实验结论" class="headerlink" title="实验结论"></a>实验结论</h4><ul>
<li>PostStart不会挡住主进程的启动</li>
<li>PostStart是异步执行</li>
</ul>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>postStart</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s【coredns解析问题】</title>
    <url>/k8s-dns-jie-xi-wen-ti/</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@master busybox<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get pod -nkube-system -owide</span>
NAME                             READY   STATUS    RESTARTS   AGE     IP               NODE     NOMINATED NODE   READINESS GATES
coredns-5c98db65d4-8zjps         1/1     Running   1          2d23h   10.244.0.13      master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>
coredns-5c98db65d4-d2kth         1/1     Running   1          2d23h   10.244.0.14      master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@master busybox<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get pod -owide</span>
NAME                      READY   STATUS    RESTARTS   AGE    IP            NODE     NOMINATED NODE   READINESS GATES
curl-6bf6db5c4f-pjld9     1/1     Running   1          3d     10.244.1.2    node2    <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>
gateway-99b655cc6-np685   1/1     Running   0          44s    10.244.0.54   master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>
test-post-start1          1/1     Running   0          115s   10.244.1.6    node2    <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>
test-post-start2          1/1     Running   0          115s   10.244.0.52   master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>
test-post-start3          1/1     Running   0          115s   10.244.0.53   master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如上所示，出现部署在<code>master</code>节点上的<code>pod</code>，无法解析<code>gateway.default.svc.cluster.local</code>域名，但是部署在<code>node2</code>，确可以解析，如上<code>curl-6bf6db5c4f-pjld9</code>,<code>test-post-start1</code>通过<code>nslookup</code>都可以解析.</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 报错</span>
/ <span class="token comment" spellcheck="true"># nslookup gateway</span>
nslookup: can<span class="token string">'t resolve '</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token string">': Name does not resolve

nslookup: can'</span>t resolve <span class="token string">'gateway'</span><span class="token keyword">:</span> Try again

/ <span class="token comment" spellcheck="true"># nslookup gateway.default.svc.cluster.local</span>
Server:    10.244.0.10
Address 1: 10.244.0.10

nslookup: can<span class="token string">'t resolve '</span>gateway.default.svc.cluster.local'
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>进入<code>master</code>节点<code>pod</code>，直接通过<code>coredns pod ip</code>解析测试</p>
<pre class="line-numbers language-bash"><code class="language-bash">kubectl <span class="token function">exec</span> -it test-post-start2 sh
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash">/ <span class="token comment" spellcheck="true"># nslookup gateway.default.svc.cluster.local 10.244.0.13</span>
Server:    10.244.0.13
Address 1: 10.244.0.13 10-244-0-13.kube-dns.kube-system.svc.cluster.local

Name:      gateway.default.svc.cluster.local
Address 1: 10.244.106.29 gateway.default.svc.cluster.local
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>发现直接通过<code>coredns pod ip</code>解析可以成功，证明<code>coredns</code>服务本身没有问题.</p>
<p>查看<code>dns clusterIP</code>.</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get svc -nkube-system</span>
NAME            TYPE        CLUSTER-IP       EXTERNAL-IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>                  AGE
kube-dns        ClusterIP   10.244.0.10    <span class="token operator">&lt;</span>none<span class="token operator">></span>        53/UDP,53/TCP,9153/TCP   21m
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 通过clusterIP解析域名失败</span>
<span class="token function">nslookup</span> gateway.default.svc.cluster.local 10.244.0.10
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>通过以上测试证明问题出现在<code>coredns service</code>上.</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>导出现有<code>kube-dns service</code>配置</p>
<pre class="line-numbers language-bash"><code class="language-bash">kubectl get svc -nkube-system kube-dns -oyaml <span class="token operator">></span> kube-dns-svc.yaml
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>修改<code>kube-dns-svc.yaml</code>.</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>
    <span class="token key atrule">prometheus.io/port</span><span class="token punctuation">:</span> <span class="token string">"9153"</span>
    <span class="token key atrule">prometheus.io/scrape</span><span class="token punctuation">:</span> <span class="token string">"true"</span>
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">k8s-app</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>dns
    <span class="token key atrule">kubernetes.io/cluster-service</span><span class="token punctuation">:</span> <span class="token string">"true"</span>
    <span class="token key atrule">kubernetes.io/name</span><span class="token punctuation">:</span> KubeDNS
  <span class="token key atrule">name</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>dns
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">ports</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> dns
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">53</span>
    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> UDP
    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">53</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> dns<span class="token punctuation">-</span>tcp
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">53</span>
    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP
    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">53</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> metrics
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9153</span>
    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP
    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">9153</span>
  <span class="token key atrule">selector</span><span class="token punctuation">:</span>
    <span class="token key atrule">k8s-app</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>dns
  <span class="token key atrule">sessionAffinity</span><span class="token punctuation">:</span> None
  <span class="token key atrule">type</span><span class="token punctuation">:</span> ClusterIP
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash">kubectl apply -f kube-dns-svc.yaml
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>查看最新的<code>coredns clusterIP</code>,当前为<code>10.244.47.231</code>.</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get svc -nkube-system</span>
NAME            TYPE        CLUSTER-IP       EXTERNAL-IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>                  AGE
kube-dns        ClusterIP   10.244.47.231    <span class="token operator">&lt;</span>none<span class="token operator">></span>        53/UDP,53/TCP,9153/TCP   21m
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>进去之前无法解析的<code>pod</code>中测试，证明新的<code>clusterIP</code>没有问题.</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">nslookup</span> gateway.default.svc.cluster.local 10.244.47.231
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>修改<code>kubelet --clusterDNS</code>,这样新创建的<code>pod /etc/resolv.conf</code>中<code>nameserver</code>为新的<code>coredns clusterIP</code>.</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 修改kubelet配置</span>
vim  /var/lib/kubelet/config.yaml

<span class="token comment" spellcheck="true"># 找到clusterDNS</span>
clusterDNS:
- 10.244.47.231

<span class="token comment" spellcheck="true"># 重启kubelet生效,注意k8s中所有节点都需要修改重启</span>
systemctl restart kubelet.service
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后测试，新的<code>pod</code>中<code>/etc/resolv.conf</code>.解析没有问题.</p>
<pre class="line-numbers language-bash"><code class="language-bash">/ <span class="token comment" spellcheck="true"># cat /etc/resolv.conf </span>
nameserver 10.244.47.231
search default.svc.cluster.local svc.cluster.local cluster.local
options ndots:5
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>kube-dns</tag>
        <tag>kubelet</tag>
        <tag>coreDNS</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s【如果忘记master节点init后join命令怎么办】</title>
    <url>/k8s-ru-guo-wang-ji-master-jie-dian-init-hou-join-ming-ling-zen-me-ban/</url>
    <content><![CDATA[<h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>首先我们可以知道<code>kubeadm join</code>格式如下：</p>
<pre><code>kubeadm join 192.168.99.11:6443 --token 4qcl2f.gtl3h8e5kjltuo0r \
    --discovery-token-ca-cert-hash sha256:7ed5404175cc0bf18dbfe53f19d4a35b1e3d40c19b10924275868ebf2a3bbe6e
</code></pre>
<h3 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h3><p><code>master</code>节点执行：</p>
<pre class="line-numbers language-sh"><code class="language-sh">[root@master ~]# kubeadm token list
TOKEN                     TTL       EXPIRES                     USAGES                   DESCRIPTION   EXTRA GROUPS
xh7hwq.a62kp9myjdde3nif   22h       2020-06-05T15:54:14+08:00   authentication,signing   <none>        system:bootstrappers:kubeadm:default-node-token
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>注意<code>token</code>有效期,使用<code>kubeadm token create</code>创建新的<code>token</code>,<code>kubeadm token create --ttl 0</code>生成一个永不过期的<code>token</code>.</p>
</blockquote>
<h3 id="获取cert"><a href="#获取cert" class="headerlink" title="获取cert"></a>获取cert</h3><pre><code>openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt;/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'
</code></pre>
<h3 id="最后就可以在新节点执行上面的命令加入集群了"><a href="#最后就可以在新节点执行上面的命令加入集群了" class="headerlink" title="最后就可以在新节点执行上面的命令加入集群了"></a>最后就可以在新节点执行上面的命令加入集群了</h3><h3 id="一条命令解决"><a href="#一条命令解决" class="headerlink" title="一条命令解决"></a>一条命令解决</h3><pre class="line-numbers language-bash"><code class="language-bash">kubeadm token create --print-join-command
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>join</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s与harbor联合使用【k8s拉取harbor中镜像】</title>
    <url>/k8s-yu-harbor-lian-he-shi-yong-k8s-la-qu-harbor-zhong-jing-xiang/</url>
    <content><![CDATA[<blockquote>
<p><strong>概要</strong>：要想<code>k8s</code>从<code>harbor</code>中拉取镜像，需要有<code>harbor</code>的用户、密码、服务器信息，然后在<code>k8s</code>指定<code>namespace</code>中创建<code>docker-registry</code>类型。</p>
</blockquote>
<blockquote>
<p><strong>前提</strong>：已经搭建<code>K8s</code>集群、<code>harbor</code>服务，且已经在机器上配置可以从<code>harbor</code>中拉取上传镜像。</p>
</blockquote>
<h3 id="创建docker-registry"><a href="#创建docker-registry" class="headerlink" title="创建docker-registry"></a>创建<code>docker-registry</code></h3><p>创建<code>docker-registry</code>，有两种方式，命令行和<code>YAML</code>.</p>
<h4 id="第一种方式：命令行"><a href="#第一种方式：命令行" class="headerlink" title="第一种方式：命令行"></a>第一种方式：命令行</h4><pre class="line-numbers language-bash"><code class="language-bash">kubectl create secret docker-registry test-deri-registry-secret --namespace<span class="token operator">=</span>test-namespace \ 
--docker-server<span class="token operator">=</span>hub.test.org.cn --docker-username<span class="token operator">=</span>test2019 \ 
--docker-password<span class="token operator">=</span>tests12019 --docker-email<span class="token operator">=</span>admin@harbor.com
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="第二种方式：YAML"><a href="#第二种方式：YAML" class="headerlink" title="第二种方式：YAML"></a>第二种方式：YAML</h4><p>需要有一台已经成功登录过<code>harbor</code>服务器的机器，使用命令<code>cat ~/.docker/config.json</code>，确认是否有<code>harbor</code>服务器的认证信息，例如:</p>
<pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>
    <span class="token property">"auths"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"hub.test.org.cn:443"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">"auth"</span><span class="token operator">:</span> <span class="token string">"YWRtaW46RGVxasdXXnsada"</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">"HttpHeaders"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"User-Agent"</span><span class="token operator">:</span> <span class="token string">"Docker-Client/19.03.4 (linux)"</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>接下来k8s也可以直接使用该认证信息，使用命令<code>cat ~/.docker/config.json |base64 -w 0</code>将该认证信息<code>BASE64</code>编码<font color="red"><strong>【以下示例结果都是瞎写的，请使用自己返回的结果】</strong></font>。</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat .docker/config.json |base64 -w 0</span>
ewoJImF1dGhzIjogewoJCSJodWIuZGVyaS5vcmcuY246NDQzIjogewoJCQkiYXV0aCI6ICJZV1J0YVc0NlJHVnlhU015TURFNSIKCHIUASDGUGDUGAUDUIAGDJIIGIUDZWFkZXJzIjogewoJCSJVc2VyLUFnZW50IjogIkRvY2tlci1DbGllbnQvMTkSDISDhi7asd56523gHGSGH
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>编写<code>test-registry-secret.yaml</code></p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Secret
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>registry<span class="token punctuation">-</span>secret
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>deri
<span class="token key atrule">data</span><span class="token punctuation">:</span>
  <span class="token key atrule">.dockerconfigjson</span><span class="token punctuation">:</span> wraJImF1dGhzIjogeraJCSIxOTIuMTY4LjEzMC4yMyI6IHsKCQkJImF1dGgiOiAiYW5OaVpHVjJaV3h2Y0dWeU9rcHpZakV5TXpRMSIKCQl9Cgl9LAoJIkh0dHBIZWFkZXJzIjogewoJCSJVc2VyLUFnZW50IjogIkRvY2tlci1DbGllbnQvMTguMDkuMiAobGludXgpIgoJfQp9
<span class="token key atrule">type</span><span class="token punctuation">:</span> kubernetes.io/dockerconfigjson
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用命令<code>kubectl create -f test-registry-secret.yaml</code>或者在<code>dashboard</code>中用上述<code>YAML</code>即可创建<code>docker-registry</code>。</p>
<p>使用命令查看结果</p>
<pre class="line-numbers language-bash"><code class="language-bash">kubectl get secret -n test-namespace
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash">kubectl describe secret test-registry-secret -n test-namespace
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="使用刚刚创建的docker-registry"><a href="#使用刚刚创建的docker-registry" class="headerlink" title="使用刚刚创建的docker-registry"></a>使用刚刚创建的<code>docker-registry</code></h3><p>如何使用刚刚创建的<code>docker-registry</code>呢？两种方式:</p>
<ul>
<li>一种是每次在创建<code>pod</code>或者<code>deployment</code>时指定<code>imagePullSecrets</code>，</li>
<li>一种是在该<code>namespace</code>的<code>serviceaccount</code>【默认<code>default</code>，如果是别的<code>serviceaccount</code>，需要在创建<code>pod</code>时指定<code>spec.serviceAccount</code>】中指定<code>imagePullSecrets</code>，这样用该<code>serviceaccount</code>创建的<code>pod</code>会自动加上。</li>
</ul>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">imagePullSecrets</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>registry<span class="token punctuation">-</span>secret
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><p>每次创建<code>pod</code>时指定<code>secret</code>，例如</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>baresystem
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>namespace
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">containers</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>baresystem
      <span class="token key atrule">image</span><span class="token punctuation">:</span> hub.test.org.cn/dev<span class="token punctuation">-</span>project/centos6<span class="token punctuation">-</span>bare<span class="token punctuation">-</span>system<span class="token punctuation">:</span>v0
      <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080</span>
        <span class="token key atrule">hostPort</span><span class="token punctuation">:</span> <span class="token number">30001</span>
  <span class="token key atrule">imagePullSecrets</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>registry<span class="token punctuation">-</span>secret
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h4><p>以创建<code>namespace</code>时自动创建的<code>serviceaccount default</code>为例，首先查看<code>default</code>的详细情况:</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl describe sa test-deri -n test-namespace</span>
Name:                test-deri
Namespace:           test-namespace
Labels:              <span class="token operator">&lt;</span>none<span class="token operator">></span>
Annotations:         <span class="token operator">&lt;</span>none<span class="token operator">></span>
Image pull secrets:  <span class="token operator">&lt;</span>none<span class="token operator">></span>
Mountable secrets:   test-deri-token-rmxbn
Tokens:              test-deri-token-rmxbn
Events:              <span class="token operator">&lt;</span>none<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到当前的<code>Image pull secrets:  &lt;none&gt; </code>，需要为它指定成刚刚我们创建的<code>secret</code>。使用命令:</p>
<pre class="line-numbers language-bash"><code class="language-bash">kubectl patch serviceaccount default -p <span class="token string">'{"imagePullSecrets": [{"name": "test-registry-secret"}]}'</span> -n test-namespace
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>或者使用命令:</p>
<pre class="line-numbers language-bash"><code class="language-bash">kubectl edit sa default -n test-namespace
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在打开的<code>YAML</code>文件中添加两行，保存退出。</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">imagePullSecrets</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>registry<span class="token punctuation">-</span>secret
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>最后再次查看<code>default</code>的详细情况，可以看到<code>Image pull secrets: &nbsp;test-registry-secret</code>.</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl describe sa default -n test-namespace</span>
Name:                default
Namespace:           test-namespace
Labels:              <span class="token operator">&lt;</span>none<span class="token operator">></span>
Annotations:         <span class="token operator">&lt;</span>none<span class="token operator">></span>
Image pull secrets:  test-registry-secret
Mountable secrets:   default-token-5fcn5
Tokens:              default-token-5fcn5
Events:              <span class="token operator">&lt;</span>none<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>接下来在<code>test-namespace</code>命名空间下用<code>default</code>这个<code>serviceaccount</code>创建的任何<code>pods</code>容器，都会自动在<code>pod</code>定义中附加上下面这样的密钥认证信息了。</p>
<p>最后测试一下吧。</p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>harbor</tag>
        <tag>docker-registry</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s修改POD内核参数【sysctl】</title>
    <url>/k8s-xiu-gai-pod-nei-he-can-shu-sysctl/</url>
    <content><![CDATA[<p>有时候需要在启动POD前，修改POD内核相关参数，除了使用<code>initContainer</code>还可以使用<code>sysctl</code>。<br>参考<a href="https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/">链接Using sysctls in a Kubernetes Cluster</a></p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> sysctl<span class="token punctuation">-</span>example
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>
    <span class="token key atrule">sysctls</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> kernel.shm_rmid_forced
      <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"0"</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> net.core.somaxconn
      <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"1024"</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> kernel.msgmax
      <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"65536"</span>
  <span class="token punctuation">...</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>sysctl</tag>
        <tag>pod</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s内通过Prometheus监控外部节点资源</title>
    <url>/k8s-nei-tong-guo-prometheus-jian-kong-wai-bu-jie-dian-zi-yuan/</url>
    <content><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ul>
<li>已部署<code>k8s</code>集群</li>
<li>集群内部署<code>prometheus</code></li>
</ul>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ul>
<li>在外部节点安装<code>node-exporter</code></li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash">docker run -d --name node-exporter -p 9100:9100 prom/node-exporter
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>启动完成可以访问<code>http://IP:9100/metrics</code>.</p>
<ul>
<li>创建<code>endpoints</code></li>
</ul>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Endpoints
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span>data
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kubesphere<span class="token punctuation">-</span>monitoring<span class="token punctuation">-</span>system
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span>data
<span class="token key atrule">subsets</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">addresses</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">ip</span><span class="token punctuation">:</span> 192.168.3.17
      <span class="token punctuation">-</span> <span class="token key atrule">ip</span><span class="token punctuation">:</span> 192.168.3.19
      <span class="token punctuation">-</span> <span class="token key atrule">ip</span><span class="token punctuation">:</span> 192.168.3.20
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9100</span>
        <span class="token key atrule">name</span><span class="token punctuation">:</span> http
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>创建<code>service</code></li>
</ul>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span>data
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kubesphere<span class="token punctuation">-</span>monitoring<span class="token punctuation">-</span>system
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span>data
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">ports</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9100</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> http
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>创建<code>ServiceMonitor</code></li>
</ul>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> monitoring.coreos.com/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceMonitor
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span>exporter<span class="token punctuation">-</span>data
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kubesphere<span class="token punctuation">-</span>monitoring<span class="token punctuation">-</span>system
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> http
  <span class="token key atrule">namespaceSelector</span><span class="token punctuation">:</span>
    <span class="token key atrule">matchNames</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> kubesphere<span class="token punctuation">-</span>monitoring<span class="token punctuation">-</span>system
  <span class="token key atrule">selector</span><span class="token punctuation">:</span>
    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>
      <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span>data
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>创建完成可以<code>prometheus web</code>页面查看是否有新建的<code>targets</code>.</p>
<h3 id="PromQL"><a href="#PromQL" class="headerlink" title="PromQL"></a>PromQL</h3><ol>
<li>计算CPU使用率</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 1m查不到数据可以设置成3m,5m</span>
<span class="token punctuation">(</span>1-<span class="token punctuation">(</span>sum<span class="token punctuation">(</span>increase<span class="token punctuation">(</span>node_cpu_seconds_total<span class="token punctuation">{</span>mode<span class="token operator">=</span><span class="token string">"idle"</span><span class="token punctuation">}</span><span class="token punctuation">[</span>1m<span class="token punctuation">]</span><span class="token punctuation">))</span>by<span class="token punctuation">(</span>instance<span class="token punctuation">))</span>/<span class="token punctuation">(</span>sum<span class="token punctuation">(</span>increase<span class="token punctuation">(</span>node_cpu_seconds_total<span class="token punctuation">[</span>1m<span class="token punctuation">]</span><span class="token punctuation">))</span>by<span class="token punctuation">(</span>instance<span class="token punctuation">))</span><span class="token punctuation">)</span>*100
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ol start="2">
<li>内存使用率</li>
</ol>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span><span class="token punctuation">(</span>node_memory_MemAvailable_bytes{}<span class="token operator">/</span><span class="token punctuation">(</span>node_memory_MemTotal_bytes{}<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="3">
<li>磁盘分区</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 注意mountpoint</span>
100 - <span class="token punctuation">(</span>node_filesystem_free_bytes<span class="token punctuation">{</span>mountpoint<span class="token operator">=</span><span class="token string">"/"</span>,fstype<span class="token operator">=</span>~<span class="token string">"ext4|xfs"</span><span class="token punctuation">}</span> / node_filesystem_size_bytes<span class="token punctuation">{</span>mountpoint<span class="token operator">=</span><span class="token string">"/"</span>,fstype<span class="token operator">=</span>~<span class="token string">"ext4|xfs"</span><span class="token punctuation">}</span> * 100<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>k8s</category>
        <category>prometheus</category>
      </categories>
  </entry>
  <entry>
    <title>k8s动态分配存储【helm安装nfs-client】</title>
    <url>/k8s-dong-tai-fen-pei-cun-chu-helm-an-zhuang-nfs-client/</url>
    <content><![CDATA[<blockquote>
<p>前文：在所有节点安装nfs-utils并启动相关服务。</p>
</blockquote>
<h3 id="NFS服务端新建一个挂载目录"><a href="#NFS服务端新建一个挂载目录" class="headerlink" title="NFS服务端新建一个挂载目录"></a>NFS服务端新建一个挂载目录</h3><pre><code>echo "/home/nfs *(rw,async,no_root_squash)" &gt;&gt; /etc/exports
exportfs -r
showmount -e localhost
</code></pre>
<h3 id="安装nfs-client"><a href="#安装nfs-client" class="headerlink" title="安装nfs-client"></a>安装nfs-client</h3><pre><code>helm install stable/nfs-client-provisioner --name test-storageclass --set nfs.server=192.168.1.210 --set nfs.path=/home/nfs
</code></pre>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>可以先用命令<code>helm inspect values stable/nfs-client-provisioner</code>查看所有配置项，并提前下载好镜像。</p>
<pre class="line-numbers language-yml"><code class="language-yml">replicaCount: 1
strategyType: Recreate
 
image:
  repository: quay.io/external_storage/nfs-client-provisioner
  tag: v3.1.0-k8s1.11
  pullPolicy: IfNotPresent
 
nfs:
  server:
  path: /ifs/kubernetes
  mountOptions:
 
# For creating the StorageClass automatically:
storageClass:
  create: true
 
  # Set a provisioner name. If unset, a name will be generated.
  # provisionerName:
 
  # Set StorageClass as the default StorageClass
  # Ignored if storageClass.create is false
  defaultClass: false
 
  # Set a StorageClass name
  # Ignored if storageClass.create is false
  name: nfs-client
 
  # Allow volume to be expanded dynamically
  allowVolumeExpansion: true
 
  # Method used to reclaim an obsoleted volume
  reclaimPolicy: Delete
 
  # When set to false your PVs will not be archived by the provisioner upon deletion of the PVC.
  archiveOnDelete: true
 
## For RBAC support:
rbac:
  # Specifies whether RBAC resources should be created
  create: true
 
# If true, create & use Pod Security Policy resources
# https://kubernetes.io/docs/concepts/policy/pod-security-policy/
podSecurityPolicy:
  enabled: false
 
## Set pod priorityClassName
# priorityClassName: ""
 
serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true
 
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name:
 
resources: {}
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>也可以修改下上面的yaml，直接通过<code>nfs-client.yaml</code>创建：</p>
<pre class="line-numbers language-yml"><code class="language-yml">replicaCount: 1
strategyType: Recreate
 
image:
  repository: quay.io/external_storage/nfs-client-provisioner
  tag: v3.1.0-k8s1.11
  pullPolicy: IfNotPresent
 
nfs:
  server: 192.168.1.210
  path: /home/nfs
  mountOptions:
 
storageClass:
  create: true
  defaultClass: false
  name: nfs-client
  allowVolumeExpansion: true
  reclaimPolicy: Delete
  archiveOnDelete: true
 
rbac:
  create: true
 
podSecurityPolicy:
  enabled: false
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行安装命令：</p>
<pre><code>helm install stable/nfs-client-provisioner -n test-storageclass -f nfs-client.yaml
</code></pre>
<h3 id="创建PVC测试"><a href="#创建PVC测试" class="headerlink" title="创建PVC测试"></a>创建PVC测试</h3><p>创建<code>test-pvc.yaml</code></p>
<pre class="line-numbers language-yml"><code class="language-yml">apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: testclaim
spec:
  storageClassName: "nfs-client"
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Mi
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre><code>kubectl apply -f test-pvc.yaml
</code></pre>
<h3 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h3><pre class="line-numbers language-log"><code class="language-log">[root@k8s-master home]# kubectl get sc
NAME         PROVISIONER                                              AGE
nfs-client   cluster.local/test-storageclass-nfs-client-provisioner   36m
[root@k8s-master home]# kubectl get pv,pvc
NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS        CLAIM                 STORAGECLASS    REASON   AGE
persistentvolume/pvc-d9bdfa45-6417-4ad9-bbf0-02301f928342   10Mi       RWX            Delete           Bound         default/testclaim     nfs-client               33m
 
NAME                              STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE
persistentvolumeclaim/testclaim   Bound    pvc-d9bdfa45-6417-4ad9-bbf0-02301f928342   10Mi       RWX            nfs-client     34m
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>nfs-client</tag>
        <tag>storageclass</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s动态分配存储【创建新的StorageClass】</title>
    <url>/k8s-dong-tai-fen-pei-cun-chu-chuang-jian-xin-de-storageclass/</url>
    <content><![CDATA[<pre class="line-numbers language-yml"><code class="language-yml">apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
  labels:
    app: nfs-client-provisioner
    chart: nfs-client-provisioner-1.2.8
    release: test-storageclass
  name: nfs-client
parameters:
  archiveOnDelete: "true"
provisioner: cluster.local/test-storageclass-nfs-client-provisioner
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>注意事项</strong></p>
<ul>
<li><code>provisioner</code>：这个是安装<code>nfs-client-provisioner</code>是定义的<code>provisionerName</code>，如果配置中没有指明，会自动生成。</li>
<li>添加<code>storageclass.kubernetes.io/is-default-class: "true"</code>表面这是一个默认的<code>StorageClass</code> 资源对象</li>
<li><code>name</code>：它处使用这个<code>StorageClass</code>时要指定的名称。</li>
</ul>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>StorageClass</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s常用命令整理</title>
    <url>/k8s-chang-yong-ming-ling-zheng-li/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>用途</th>
<th>命令</th>
</tr>
</thead>
<tbody><tr>
<td>查看集群状态</td>
<td><code>kubectl cluster-info</code></td>
</tr>
<tr>
<td>查看集群详细状态</td>
<td><code>kubectl cluster-info dump</code></td>
</tr>
<tr>
<td>查看节点</td>
<td><code>kubectl get nodes</code></td>
</tr>
<tr>
<td>查看节点更多信息</td>
<td><code>kubectl get nodes -o wide</code></td>
</tr>
<tr>
<td>标志一个节点不可调度</td>
<td><code>kubectl cordon -nodeName</code></td>
</tr>
<tr>
<td>标志一个节点可调度</td>
<td><code>kubectl uncordon -nodeName</code></td>
</tr>
<tr>
<td>查看token列表</td>
<td><code>kubeadm token list</code></td>
</tr>
<tr>
<td>创建token</td>
<td><code>kubeadm token create</code></td>
</tr>
<tr>
<td>删除节点</td>
<td><code>kubectl drain &lt;node name&gt; --delete-local-data --force --ignore-daemonsets</code>/<code>kubectl delete node &lt;node name&gt;</code></td>
</tr>
<tr>
<td>创建一个deployment</td>
<td><code>kubectl create deployment nginx --image=nginx</code></td>
</tr>
<tr>
<td>查看deployments</td>
<td><code>kubectl get deployment(deployments)</code></td>
</tr>
<tr>
<td>创建一个service</td>
<td><code>kubectl create service nodeport nginx --tcp 80:80</code></td>
</tr>
<tr>
<td>查看services</td>
<td><code>kubectl get svc(service/services)</code></td>
</tr>
<tr>
<td>删除一个deployment</td>
<td><code>kubectl delete deployments/nginx</code></td>
</tr>
<tr>
<td>删除一个service</td>
<td><code>kubectl delete services/nginx</code></td>
</tr>
<tr>
<td>同时删除deployment和service</td>
<td><code>kubectl delete deployments/nginx services/nginx</code></td>
</tr>
<tr>
<td>从yaml文件创建deployment</td>
<td><code>kubectl create -f deployment.yaml</code></td>
</tr>
<tr>
<td>查看pods</td>
<td><code>kubectl get pods(pod)</code></td>
</tr>
<tr>
<td>查看pod更多信息</td>
<td><code>kubectl get pods -o wide</code></td>
</tr>
<tr>
<td>查看具体pod信息</td>
<td><code>kubectl describe pods/kube-node-59bf664cbf-2qzgd</code></td>
</tr>
<tr>
<td>修改deployment</td>
<td><code>kubectl edit deployments/test</code></td>
</tr>
<tr>
<td>从yaml创建service</td>
<td><code>kubectl create -f service.yaml</code></td>
</tr>
<tr>
<td>快捷创建service(expose)</td>
<td><code>kubectl expose deployment kube-node --type=NodePort</code></td>
</tr>
<tr>
<td>查看service具体信息</td>
<td><code>kubectl describe services/kube-node</code></td>
</tr>
<tr>
<td>查看namespace</td>
<td><code>kubectl get namespace</code></td>
</tr>
<tr>
<td>创建namespace</td>
<td><code>kubectl create namespace -name</code></td>
</tr>
<tr>
<td>删除namespace</td>
<td><code>kubectl delete namespace -name</code></td>
</tr>
<tr>
<td>根据配置文件创建configmap</td>
<td><code>kubectl create configmap my-config --from-file=path/to/bar</code>/<code>kubectl create configmap my-config --from-file=key1=/path/file1.txt --from-file=key2=/path/to/bar/file2.txt</code></td>
</tr>
<tr>
<td>从字符串创建configmap</td>
<td><code>kubectl create configmap my-config --from-literal=key1=config1 --from-literal=key2=config2</code></td>
</tr>
<tr>
<td>从env文件创建configmap</td>
<td><code>kubectl create configmap my-config --from-env-file=path/to/bar.env</code></td>
</tr>
<tr>
<td>扩容</td>
<td><code>kubectl scale deployment nginx-deployment --replicas 10</code></td>
</tr>
<tr>
<td>自动扩容</td>
<td><code>kubectl autoscale deployment nginx-deployment --min=10 --max=15 --cpu-percent=80</code></td>
</tr>
<tr>
<td>更新镜像</td>
<td><code>kubectl set image deployment/nginx-deployment nginx=nginx:1.9.1</code></td>
</tr>
<tr>
<td>回滚</td>
<td><code>kubectl rollout undo deployment/nginx-deployment</code></td>
</tr>
<tr>
<td>查看默认配置项，如pod.spec</td>
<td><code>kubectl explain pod.spec</code></td>
</tr>
</tbody></table>
<p>以上都是亲自用过的，没用过的自己查表，附上<a href="http://docs.kubernetes.org.cn/683.html">kubectl命令表</a></p>
<h3 id="kubectl命令自动补全"><a href="#kubectl命令自动补全" class="headerlink" title="kubectl命令自动补全"></a>kubectl命令自动补全</h3><p>在<code>CentOS Linux</code>系统上，您可能需要安装默认情况下未安装的<code>bash-completion</code>软件包。</p>
<pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> bash-completion -y
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>执行<code>source &lt;(kubectl completion bash)</code>命令在您目前正在运行的<code>shell</code>中开启<code>kubectl</code>自动补全功能。</p>
<p>可以将上述命令添加到<code>shell</code>配置文件中，这样在今后运行的<code>shell</code>中将自动开启<code>kubectl</code>自动补全：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">"source &lt;(kubectl completion bash)"</span> <span class="token operator">>></span> ~/.bashrc
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="快速生成YAML样例"><a href="#快速生成YAML样例" class="headerlink" title="快速生成YAML样例"></a>快速生成YAML样例</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 用run命令生成</span>
kubectl run --image<span class="token operator">=</span>nginx my-deploy -o yaml --dry-run <span class="token operator">></span> my-deploy.yaml
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 用get命令导出</span>
kubectl get statefulset/foo -o<span class="token operator">=</span>yaml --export <span class="token operator">></span> new.yaml
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Pod亲和性下面字段的拼写忘记了</span>
kubectl explain pod.spec.affinity.podAffinity
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s开启临时容器</title>
    <url>/k8s-kai-qi-lin-shi-rong-qi/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p><code>EphemeralContainers</code>:<a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#ephemeralcontainer-v1-core">官方说明</a></p>
<p>kubectl 版本为 v1.18 或者更高 beta 功能 默认不开启，需要手动开启, v1.22 版本开始成为正式功能无需开启.</p>
<p>如果执行<code>kubectl debug xxxx</code> 报以下错误说明需要手动开启临时容器功能：</p>
<pre class="line-numbers language-log"><code class="language-log">error: ephemeral containers are disabled for this cluster (error from server: "the server could not find the requested resource").
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="手动开启操作"><a href="#手动开启操作" class="headerlink" title="手动开启操作"></a>手动开启操作</h3><h4 id="master节点"><a href="#master节点" class="headerlink" title="master节点"></a>master节点</h4><ul>
<li>修改<code>apiserver</code><br>编辑<code>/etc/kubernetes/manifests/kube-apiserver.yaml</code></li>
</ul>
<p>在<code>--feature-gates=xxxxx</code>后面添加<code>,EphemeralContainers=true</code>，注意逗号.</p>
<ul>
<li>修改<code>controller-manager</code><br>编辑<code>/etc/kubernetes/manifests/kube-controller-manager.yaml</code></li>
</ul>
<p>在<code>--feature-gates=xxxxx</code>后面添加<code>,EphemeralContainers=true</code>，注意逗号.</p>
<ul>
<li>修改<code>kube-scheduler</code><br>编辑<code>/etc/kubernetes/manifests/kube-scheduler.yaml</code></li>
</ul>
<p>在<code>--feature-gates=xxxxx</code>后面添加<code>,EphemeralContainers=true</code>，注意逗号.</p>
<h4 id="所有节点"><a href="#所有节点" class="headerlink" title="所有节点"></a>所有节点</h4><ul>
<li>修改<code>kubelet</code><br>编辑<code>/var/lib/kubelet/kubeadm-flags.env</code></li>
</ul>
<p>添加<code>--feature-gates=EphemeralContainers=true</code></p>
<p>修改后如下</p>
<pre class="line-numbers language-bash"><code class="language-bash">KUBELET_KUBEADM_ARGS<span class="token operator">=</span><span class="token string">"--cgroup-driver=systemd --network-plugin=cni --pod-infra-container-image=k8s.gcr.io/pause:3.2 --feature-gates=EphemeralContainers=true"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>重启kubelet</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash">systemctl daemon-reload
systemctl restart kubelet 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li><a href="http://www.lishuai.fun/2021/08/25/kubectl-debug">参考链接</a></li>
</ul>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>EphemeralContainers</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s权限使用【ServiceAccount、Role、RoleBinding使用】</title>
    <url>/k8s-quan-xian-shi-yong-serviceaccount-role-rolebinding-shi-yong/</url>
    <content><![CDATA[<blockquote>
<p><font color="red"><strong>需求</strong></font>：需要为每个项目组在K8s集群中创建不同的<code>namespace</code>，然后为这个<code>namespace</code>创建单独的<code>ServiceAccount</code>，这个<code>ServiceAccount</code>需要拥有这个<code>namespace</code>的完全控制权。以下均通过<code>YAML</code>文件的方式创建。</p>
</blockquote>
<h3 id="创建namespace"><a href="#创建namespace" class="headerlink" title="创建namespace"></a>创建<code>namespace</code></h3><p>打个标签，代表是测试用的</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Namespace
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>deri
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> test
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="创建ServiceAccount"><a href="#创建ServiceAccount" class="headerlink" title="创建ServiceAccount"></a>创建<code>ServiceAccount</code></h3><p>注意指定<code>namespace</code></p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>deri
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>deri
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="创建role"><a href="#创建role" class="headerlink" title="创建role"></a>创建<code>role</code></h3><p>创建<code>role</code>，两种方式:</p>
<ul>
<li>第一种，需要依次指定<code>apiGroups</code>、<code>resources</code>和<code>verbs</code>，便于权限的细粒度控制，</li>
<li>第二种通过通用符 <code>*</code> 设置所有权限，非常方便。</li>
</ul>
<h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Role
<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1beta1
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>deri
  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>reader
<span class="token key atrule">rules</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># The API group "" indicates the core API Group.</span>
    <span class="token key atrule">resources</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> configmaps
    <span class="token punctuation">-</span> secrets
    <span class="token punctuation">-</span> nodes
    <span class="token punctuation">-</span> nodes/metrics
    <span class="token punctuation">-</span> nodes/stats
    <span class="token punctuation">-</span> nodes/log
    <span class="token punctuation">-</span> nodes/spec
    <span class="token punctuation">-</span> nodes/proxy
    <span class="token punctuation">-</span> pods
    <span class="token punctuation">-</span> services
    <span class="token punctuation">-</span> resourcequotas
    <span class="token punctuation">-</span> replicationcontrollers
    <span class="token punctuation">-</span> limitranges
    <span class="token punctuation">-</span> persistentvolumeclaims
    <span class="token punctuation">-</span> persistentvolumes
    <span class="token punctuation">-</span> namespaces
    <span class="token punctuation">-</span> endpoints
    <span class="token punctuation">-</span> proxy
    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> list
    <span class="token punctuation">-</span> watch
    <span class="token punctuation">-</span> get
  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> extensions
    <span class="token key atrule">resources</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> daemonsets
    <span class="token punctuation">-</span> deployments
    <span class="token punctuation">-</span> replicasets
    <span class="token punctuation">-</span> ingresses
    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> list
    <span class="token punctuation">-</span> watch
  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> apps
    <span class="token key atrule">resources</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> statefulsets
    <span class="token punctuation">-</span> daemonsets
    <span class="token punctuation">-</span> deployments
    <span class="token punctuation">-</span> replicasets
    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> list
    <span class="token punctuation">-</span> watch
  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> batch
    <span class="token key atrule">resources</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> cronjobs
    <span class="token punctuation">-</span> jobs
    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> list
    <span class="token punctuation">-</span> watch
  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> autoscaling
    <span class="token key atrule">resources</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> horizontalpodautoscalers
    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> list
    <span class="token punctuation">-</span> watch
  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> authentication.k8s.io
    <span class="token key atrule">resources</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> tokenreviews
    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> create
  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> authorization.k8s.io
    <span class="token key atrule">resources</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> subjectaccessreviews
    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> create
    <span class="token key atrule">nonResourceURLs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h4><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Role
<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1beta1
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>deri
  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>reader
<span class="token key atrule">rules</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">'*'</span>
    <span class="token key atrule">resources</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">'*'</span>
    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">'*'</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="创建RoleBinding"><a href="#创建RoleBinding" class="headerlink" title="创建RoleBinding"></a>创建<code>RoleBinding</code></h3><p>将创建的<code>role</code>和<code>serviceaccount</code>绑定</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># This role binding allows "test-deri" to read pods in the namespace "test-deri"</span>
<span class="token key atrule">kind</span><span class="token punctuation">:</span> RoleBinding
<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1beta1
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> read<span class="token punctuation">-</span>pods
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>deri
<span class="token key atrule">subjects</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount <span class="token comment" spellcheck="true"># May be "User", "Group" or "ServiceAccount"</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>deri
<span class="token key atrule">roleRef</span><span class="token punctuation">:</span>
  <span class="token key atrule">kind</span><span class="token punctuation">:</span> Role
  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>reader
  <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="查看token"><a href="#查看token" class="headerlink" title="查看token"></a>查看<code>token</code></h3><p>查看创建<code>ServiceAccount</code>时自动创建的<code>Secret Token</code>，查看<code>ServiceAccount</code>名称开头的<code>token</code></p>
<pre class="line-numbers language-bash"><code class="language-bash">kubectl get secret -n test-deri
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash">kubectl describe secret test-deri-token-xxxxx -n test-deri
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>使用该<code>token</code>登录<code>dashboard</code>，可以查看、使用刚刚创建的<code>namespace</code>,但是没有权限访问别的<code>namespace</code>,这样就做到了权限控制。</p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>权限</tag>
        <tag>ServiceAccount</tag>
        <tag>Role</tag>
        <tag>RoleBinding</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s监控【metrics-server部署使用】</title>
    <url>/k8s-jian-kong-metrics-server-bu-shu-shi-yong/</url>
    <content><![CDATA[<p>从<code>Heapster</code>的<a href="https://github.com/kubernetes/heapster">github</a> 中可以看到已经，<code>heapster</code>已经<code>DEPRECATED</code>。 这里是<code>heapster</code>的<a href="https://github.com/kubernetes-retired/heapster/blob/master/docs/deprecation.md">deprecation timeline</a>。 可以看出<code>heapster</code>从<code>Kubernetes 1.12</code>开始从<code>Kubernetes</code>各种安装脚本中移除。</p>
<p><code>Kubernetes</code>推荐使用<code>metrics-server</code>。我们这里也使用<code>helm</code>来部署<code>metrics-server</code>。</p>
<h3 id="创建配置metrics-server-yaml"><a href="#创建配置metrics-server-yaml" class="headerlink" title="创建配置metrics-server.yaml"></a>创建配置<code>metrics-server.yaml</code></h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">replicaCount</span><span class="token punctuation">:</span> <span class="token number">1</span>
<span class="token key atrule">image</span><span class="token punctuation">:</span>
    <span class="token key atrule">repository</span><span class="token punctuation">:</span> hub.deri.org.cn/k8s/metrics<span class="token punctuation">-</span>server<span class="token punctuation">-</span>amd64
    <span class="token key atrule">tag</span><span class="token punctuation">:</span> v0.3.5
    <span class="token key atrule">pullPolicy</span><span class="token punctuation">:</span> IfNotPresent
<span class="token key atrule">args</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>logtostderr
<span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>kubelet<span class="token punctuation">-</span>insecure<span class="token punctuation">-</span>tls
<span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>kubelet<span class="token punctuation">-</span>preferred<span class="token punctuation">-</span>address<span class="token punctuation">-</span>types=InternalIP
<span class="token key atrule">nodeSelector</span><span class="token punctuation">:</span>
    <span class="token key atrule">node-role.kubernetes.io/edge</span><span class="token punctuation">:</span> <span class="token string">''</span>
<span class="token key atrule">tolerations</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span>role.kubernetes.io/master
      <span class="token key atrule">operator</span><span class="token punctuation">:</span> Exists
      <span class="token key atrule">effect</span><span class="token punctuation">:</span> NoSchedule
    <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span>role.kubernetes.io/master
      <span class="token key atrule">operator</span><span class="token punctuation">:</span> Exists
      <span class="token key atrule">effect</span><span class="token punctuation">:</span> PreferNoSchedule
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-bash"><code class="language-bash">helm <span class="token function">install</span> stable/metrics-server \
-n metrics-server \
--namespace kube-system \
-f metrics-server.yaml
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-bash"><code class="language-bash">kubectl <span class="token function">top</span> node
NAME    CPU<span class="token punctuation">(</span>cores<span class="token punctuation">)</span>   CPU%   MEMORY<span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>   MEMORY%
node1   650m         32%    1276Mi          73%
node2   73m          3%     527Mi           30%
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash">kubectl <span class="token function">top</span> pod -n kube-system
NAME                                    CPU<span class="token punctuation">(</span>cores<span class="token punctuation">)</span>   MEMORY<span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>   
coredns-5c98db65d4-dr8lf                8m           7Mi             
coredns-5c98db65d4-lp8dg                6m           8Mi             
etcd-node1                              44m          46Mi            
kube-apiserver-node1                    74m          295Mi           
kube-controller-manager-node1           35m          50Mi            
kube-flannel-ds-amd64-7lwm9             2m           8Mi             
kube-flannel-ds-amd64-mm296             5m           9Mi             
kube-proxy-7fsrg                        1m           11Mi            
kube-proxy-k8vhm                        3m           11Mi            
kube-scheduler-node1                    8m           15Mi            
kubernetes-dashboard-848b8dd798-c4sc2   2m           14Mi            
metrics-server-8456fb6676-fwh2t         10m          19Mi            
tiller-deploy-7bf78cdbf7-9q94c          1m           16Mi
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>遗憾的是，当前<code>Kubernetes Dashboard</code>还不支持<code>metrics-server</code>。因此如果使用<code>metrics-server</code>替代了<code>heapster</code>，将无法在<code>dashboard</code>中以图形展示<code>Pod</code>的内存和<code>CPU</code>情况。计划在<a href="https://github.com/kubernetes/dashboard">dashboard 2.0</a>版本以后才会支持，尽情期待~</p>
</blockquote>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>metrics-server</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s证书管理【Cert-manager自动签发/更新证书】</title>
    <url>/k8s-zheng-shu-guan-li-cert-manager-zi-dong-qian-fa-geng-xin-zheng-shu/</url>
    <content><![CDATA[<blockquote>
<p>Cert-manager 是一个云原生证书管理开源项目，用于在 Kubernetes 集群中提供 HTTPS 证书并自动续期，支持 Let’s Encrypt, HashiCorp Vault 这些免费证书的签发。在Kubernetes集群中，我们可以通过 Kubernetes Ingress 和 Let’s Encrypt 实现外部服务的自动化 HTTPS。<br>本文 Cert manager使用版本：<font color="red"><strong>v0.12.0</strong></font><br><img data-src="/images/cert-manager.png" alt="cert-manager"><br>强烈建议参考官方文档：<a href="https://cert-manager.io/docs">https://cert-manager.io/docs</a></p>
</blockquote>
<h3 id="添加helm源"><a href="#添加helm源" class="headerlink" title="添加helm源"></a>添加helm源</h3><blockquote>
<p>注意<a href="https://github.com/helm/charts/tree/master/stable/cert-manager">stable/cert-manager</a>已经过时不再维护了，转到<a href="https://github.com/jetstack/cert-manager/tree/master/deploy/charts/cert-manager">jetstack/cert-manager</a>。</p>
</blockquote>
<pre class="line-numbers language-bash"><code class="language-bash">helm repo add jetstack https://charts.jetstack.io
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h3><pre class="line-numbers language-bash"><code class="language-bash">helm repo update
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="创建CRDs"><a href="#创建CRDs" class="headerlink" title="创建CRDs"></a>创建CRDs</h3><pre class="line-numbers language-bash"><code class="language-bash">kubectl apply --validate<span class="token operator">=</span>false -f https://raw.githubusercontent.com/jetstack/cert-manager/release-0.12/deploy/manifests/00-crds.yaml
或
kubectl create -f https://raw.githubusercontent.com/jetstack/cert-manager/release-0.12/deploy/manifests/00-crds.yaml
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote>
<p>这里设置了两个默认值<br>–set ingressShim.defaultIssuerName=<font color="red"><strong>letsencrypt-prod</strong></font><br>–set ingressShim.defaultIssuerKind=ClusterIssuer<br>–set ingressShim.defaultIssuerGroup=cert-manager.io<br>用于在后续创建Ingress时，配合annotations<br>kubernetes.io/tls-acme: “true”<br>kubernetes.io/ingress.class: “nginx”<br>实现<strong>自动创建</strong>证书。</p>
</blockquote>
<pre class="line-numbers language-bash"><code class="language-bash">helm <span class="token function">install</span> --name cert-manager --namespace cert-manager --version v0.12.0 --set ingressShim.defaultIssuerName<span class="token operator">=</span>letsencrypt-prod --set ingressShim.defaultIssuerKind<span class="token operator">=</span>ClusterIssuer --set ingressShim.defaultIssuerGroup<span class="token operator">=</span>cert-manager.io jetstack/cert-manager
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="查看安装是否完成"><a href="#查看安装是否完成" class="headerlink" title="查看安装是否完成"></a>查看安装是否完成</h3><blockquote>
<p>注意事项：下面的<code>pod</code>需要部署在可以访问外网的机器上.</p>
</blockquote>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master cert<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get pod -n cert-manager</span>
NAME                                      READY   STATUS    RESTARTS   AGE
cert-manager-5cd477f7bb-fxpvf             1/1     Running   0          22m
cert-manager-cainjector-df4dc78cd-l527b   1/1     Running   0          22m
cert-manager-webhook-5f78ff89bc-ggvqt     1/1     Running   0          22m
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master cert<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get crd | grep cert-manager</span>
certificaterequests.cert-manager.io         2020-01-07T01:38:32Z
certificates.cert-manager.io                2020-01-07T01:38:32Z
challenges.acme.cert-manager.io             2020-01-07T01:38:32Z
clusterissuers.cert-manager.io              2020-01-07T01:38:32Z
issuers.cert-manager.io                     2020-01-07T01:38:32Z
orders.acme.cert-manager.io                 2020-01-07T01:38:32Z
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="创建默认签发机构"><a href="#创建默认签发机构" class="headerlink" title="创建默认签发机构"></a>创建默认签发机构</h3><p>刚刚安装时已经指定了默认签发类型是<code>ClusterIssuer</code> ，签发机构名称是<code>letsencrypt-prod</code> ，但是我们还没有创建，现在需要创建<code>cluster-issuer.yaml</code>。 </p>
<blockquote>
<p>cert-manager 给我们提供了 <code>Issuer</code> 和 <code>ClusterIssuer</code> 这两种用于创建签发机构的自定义资源对象，<code>Issuer</code> 只能用来签发自己所在 namespace 下的证书，<code>ClusterIssuer</code> 可以签发任意 namespace 下的证书.</p>
</blockquote>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> cert<span class="token punctuation">-</span>manager.io/v1alpha2
<span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterIssuer
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> letsencrypt<span class="token punctuation">-</span>prod
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">acme</span><span class="token punctuation">:</span>
    <span class="token key atrule">server</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//acme<span class="token punctuation">-</span>v02.api.letsencrypt.org/directory
    <span class="token key atrule">email</span><span class="token punctuation">:</span> 1154365135@qq.com
    <span class="token key atrule">privateKeySecretRef</span><span class="token punctuation">:</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> letsencrypt<span class="token punctuation">-</span>prod
    <span class="token key atrule">solvers</span><span class="token punctuation">:</span>    
    <span class="token punctuation">-</span> <span class="token key atrule">http01</span><span class="token punctuation">:</span>
        <span class="token key atrule">ingress</span><span class="token punctuation">:</span>
          <span class="token key atrule">class</span><span class="token punctuation">:</span> nginx
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>上述配置，更多配置参考<a href="https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1alpha2.ClusterIssuer">ClusterIssuer</a></p>
<ul>
<li><code>metadata.name</code> 是我们创建的签发机构的名称，后面我们创建证书的时候会引用它</li>
<li><code>spec.acme.email</code> 是你自己的邮箱，证书快过期的时候会有邮件提醒，不过 cert-manager 会利用 acme 协议自动给我们重新颁发证书来续期</li>
<li><code>spec.acme.server</code> 是 acme 协议的服务端，我们这里用 Let’s Encrypt，这个地址就写死成这样就行</li>
<li><code>spec.acme.privateKeySecretRef</code> 指示此签发机构的私钥将要存储到哪个 Secret 对象中，名称不重要</li>
<li><code>spec.acme.solvers.http01</code> 这里指示签发机构使用 HTTP-01 的方式进行 acme 协议 (还可以用 DNS 方式，acme 协议的目的是证明这台机器和域名都是属于你的，然后才准许给你颁发证书)</li>
</ul>
</blockquote>
<pre class="line-numbers language-bash"><code class="language-bash">kubectl create -f cluster-issuer.yaml
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash">kubectl get clusterissuer
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="配置ingress"><a href="#配置ingress" class="headerlink" title="配置ingress"></a>配置ingress</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> extensions/v1beta1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Ingress
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>
    <span class="token key atrule">kubernetes.io/ingress.class</span><span class="token punctuation">:</span> nginx
    <span class="token key atrule">kubernetes.io/tls-acme</span><span class="token punctuation">:</span> <span class="token string">"true"</span>
    <span class="token key atrule">nginx.ingress.kubernetes.io/backend-protocol</span><span class="token punctuation">:</span> HTTPS
    <span class="token key atrule">nginx.ingress.kubernetes.io/ssl-redirect</span><span class="token punctuation">:</span> <span class="token string">"true"</span>
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">app</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard
    <span class="token key atrule">chart</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard<span class="token punctuation">-</span>1.10.0
    <span class="token key atrule">heritage</span><span class="token punctuation">:</span> Tiller
    <span class="token key atrule">release</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard
  <span class="token key atrule">name</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">rules</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> k8s.deri.com
    <span class="token key atrule">http</span><span class="token punctuation">:</span>
      <span class="token key atrule">paths</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">backend</span><span class="token punctuation">:</span>
          <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard
          <span class="token key atrule">servicePort</span><span class="token punctuation">:</span> <span class="token number">443</span>
        <span class="token key atrule">path</span><span class="token punctuation">:</span> /
  <span class="token key atrule">tls</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> k8s.deri.com
    <span class="token key atrule">secretName</span><span class="token punctuation">:</span> deri<span class="token punctuation">-</span>com<span class="token punctuation">-</span>tls<span class="token punctuation">-</span>secret<span class="token punctuation">-</span>cc
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>由于添加了<code>annotations kubernetes.io/tls-acme: "true"</code>，tls这个secret会自动创建。</p>
<blockquote>
<p>创建完成后隔一会儿我们可以看到会多出现一个随机名称的 Ingress 对象<code>cm-acme-http-solver-hl5sx</code>，这个 Ingress 对象就是用来专门验证证书的：</p>
<pre class="line-numbers language-bash"><code class="language-bash">$ kubectl get ingress -n gateway
NAME                        HOSTS                   ADDRESS   PORTS     AGE
cm-acme-http-solver-hl5sx   cs.deri.com             80        37s
kube-ui                     cs.deri.com             80, 443   41s
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<p>验证成功后，这个 Ingress 对象会自动删除.</p>
<h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><pre class="line-numbers language-bash"><code class="language-bash">helm delete --purge cert-manager
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash">kubectl delete -f https://raw.githubusercontent.com/jetstack/cert-manager/release-0.12/deploy/manifests/00-crds.yaml
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="Check"><a href="#Check" class="headerlink" title="Check"></a>Check</h3><p>检查服务是否正常</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get certificate -n gateway </span>
NAME              READY   SECRET            AGE
consul-tls-test   True    consul-tls-test   19m
 
<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get clusterissuer</span>
NAME               READY   AGE
letsencrypt-prod   True    157m
 
<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get certificate -n gateway </span>
NAME              READY   SECRET            AGE
consul-tls-test   True    consul-tls-test   19m
 
<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get Order -n gateway</span>
NAME                                    STATE   AGE
consul-tls-test-3546184973-1845474898   valid   20m
 
<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get  CertificateRequest -n gateway</span>
NAME                         READY   AGE
consul-tls-test-3546184973   True    27m
 
<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get secret -ngateway</span>
NAME                      TYPE                                  DATA   AGE
consul-tls-test           kubernetes.io/tls                     3      29m
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="用到的镜像"><a href="#用到的镜像" class="headerlink" title="用到的镜像"></a>用到的镜像</h3><pre><code>quay.io/jetstack/cert-manager-cainjector:v0.12.0
quay.io/jetstack/cert-manager-webhook:v0.12.0
quay.io/jetstack/cert-manager-controller:v0.12.0
#这里由于上面配置solve是acme所以用到这个镜像，如果你配置别的，可能不一致
quay.io/jetstack/cert-manager-acmesolver:v0.12.0
</code></pre>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>cert-manager</tag>
        <tag>证书</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s资源限制【针对namespace、pod、Container】</title>
    <url>/k8s-zi-yuan-xian-zhi-zhen-dui-namespace-pod-container/</url>
    <content><![CDATA[<h3 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h3><p>K8s中对资源的限制分以下情况：</p>
<ul>
<li>对<code>namespace</code>中容器、<code>pod</code>等使用<font color="green"><strong>总和</strong></font>限制</li>
</ul>
<pre><code>ResourceQuota
</code></pre>
<ul>
<li>对<code>namespace</code>中容器、<code>pod</code>等使用<font color="yellow"><strong>单独</strong></font>限制：</li>
</ul>
<pre><code>LimitRange
</code></pre>
<h3 id="创建一个namespace用于测试"><a href="#创建一个namespace用于测试" class="headerlink" title="创建一个namespace用于测试"></a>创建一个<code>namespace</code>用于测试</h3><pre><code>kubectl create namespace quota-mem-cpu-example
</code></pre>
<h3 id="创建一个ResourceQuota"><a href="#创建一个ResourceQuota" class="headerlink" title="创建一个ResourceQuota"></a>创建一个<code>ResourceQuota</code></h3><p>创建一个<code>ResourceQuota</code>对<code>namespace</code>中资源使用总和做限制，创建<code>quota-mem-cpu.yaml</code></p>
<blockquote>
<h4 id="资源配额的类型"><a href="#资源配额的类型" class="headerlink" title="资源配额的类型"></a>资源配额的类型</h4><ol>
<li>计算资源，包括<code>cpu</code>和<code>memory</code><blockquote>
<ul>
<li><code>cpu</code>, <code>limits.cpu</code>, <code>requests.cpu</code></li>
<li><code>memory</code>, <code>limits.memory</code>, <code>requests.memory</code></li>
</ul>
</blockquote>
</li>
<li>存储资源，包括存储资源的总量以及指定<code>storage class</code>的总量<blockquote>
<ul>
<li><code>requests.storage</code>：存储资源总量，如<code>500Gi</code></li>
<li><code>persistentvolumeclaims</code>：<code>pvc</code>的个数</li>
<li><code>storageclass.storage.k8s.io/requests.storage</code></li>
<li><code>storageclass.storage.k8s.io/persistentvolumeclaims</code></li>
</ul>
</blockquote>
</li>
<li>对象数，即可创建的对象的个数<blockquote>
<ul>
<li><code>pods</code>, <code>replicationcontrollers</code>, <code>configmaps</code>, <code>secrets</code></li>
<li><code>resourcequotas</code>, <code>persistentvolumeclaims</code></li>
<li><code>services</code>, <code>services.loadbalancers</code>, <code>services.nodeports</code></li>
</ul>
</blockquote>
</li>
</ol>
</blockquote>
<h4 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h4><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> ResourceQuota
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> object<span class="token punctuation">-</span>counts
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">hard</span><span class="token punctuation">:</span>
    <span class="token key atrule">pods</span><span class="token punctuation">:</span> <span class="token string">"4"</span>
    <span class="token key atrule">configmaps</span><span class="token punctuation">:</span> <span class="token string">"10"</span>
    <span class="token key atrule">persistentvolumeclaims</span><span class="token punctuation">:</span> <span class="token string">"4"</span>
    <span class="token key atrule">replicationcontrollers</span><span class="token punctuation">:</span> <span class="token string">"20"</span>
    <span class="token key atrule">secrets</span><span class="token punctuation">:</span> <span class="token string">"10"</span>
    <span class="token key atrule">services</span><span class="token punctuation">:</span> <span class="token string">"10"</span>
    <span class="token key atrule">services.loadbalancers</span><span class="token punctuation">:</span> <span class="token string">"2"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h4><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> ResourceQuota
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> mem<span class="token punctuation">-</span>cpu<span class="token punctuation">-</span>demo
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">hard</span><span class="token punctuation">:</span>
    <span class="token key atrule">requests.cpu</span><span class="token punctuation">:</span> <span class="token string">"1"</span>
    <span class="token key atrule">requests.memory</span><span class="token punctuation">:</span> 1Gi
    <span class="token key atrule">limits.cpu</span><span class="token punctuation">:</span> <span class="token string">"2"</span>
    <span class="token key atrule">limits.memory</span><span class="token punctuation">:</span> 2Gi
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash">kubectl create -f quota-mem-cpu.yaml --namespace<span class="token operator">=</span>quota-mem-cpu-example
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="查看-ResourceQuota-详情："><a href="#查看-ResourceQuota-详情：" class="headerlink" title="查看 ResourceQuota 详情："></a>查看 <code>ResourceQuota</code> 详情：</h4><pre class="line-numbers language-bash"><code class="language-bash">kubectl get resourcequota mem-cpu-demo --namespace<span class="token operator">=</span>quota-mem-cpu-example --output<span class="token operator">=</span>yaml
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p><code>ResourceQuota</code> 在 <code>quota-mem-cpu-example</code> 命名空间中设置了如下要求：</p>
<ul>
<li>每个容器必须有内存请求和限制，以及 <code>CPU</code> 请求和限制。</li>
<li>所有容器的内存请求总和不能超过<code>1 GiB</code>。</li>
<li>所有容器的内存限制总和不能超过<code>2 GiB</code>。</li>
<li>所有容器的 <code>CPU</code> 请求总和不能超过<code>1 cpu</code>。</li>
<li>所有容器的 <code>CPU</code> 限制总和不能超过<code>2 cpu</code>。</li>
</ul>
</blockquote>
<h3 id="创建一个LimitRange"><a href="#创建一个LimitRange" class="headerlink" title="创建一个LimitRange"></a>创建一个<code>LimitRange</code></h3><p>创建一个<code>LimitRange</code>，对<code>namespace</code>中<code>pod</code>、容器设置单独的默认限制  </p>
<p>创建<code>limits.yaml</code></p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> LimitRange
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> mem<span class="token punctuation">-</span>limit<span class="token punctuation">-</span>range
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">limits</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">default</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># default limit</span>
      <span class="token key atrule">memory</span><span class="token punctuation">:</span> 512Mi
      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token number">2</span>
    <span class="token key atrule">defaultRequest</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># default request</span>
      <span class="token key atrule">memory</span><span class="token punctuation">:</span> 256Mi
      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token number">0.5</span>
    <span class="token key atrule">max</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># max limit</span>
      <span class="token key atrule">memory</span><span class="token punctuation">:</span> 800Mi
      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token number">3</span>
    <span class="token key atrule">min</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># min request</span>
      <span class="token key atrule">memory</span><span class="token punctuation">:</span> 100Mi
      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token number">0.3</span>
    <span class="token key atrule">maxLimitRequestRatio</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># max value for limit / request</span>
      <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token number">2</span>
      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token number">2</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> Container <span class="token comment" spellcheck="true"># limit type, support: Container / Pod / PersistentVolumeClaim</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash">kubectl create -f limits.yaml --namespace<span class="token operator">=</span>limit-example
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>查看一下在该  <code>Namespace</code> 中被强加的限制 </p>
<pre class="line-numbers language-bash"><code class="language-bash">kubectl describe limits mylimits --namespace<span class="token operator">=</span>limit-example
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<h4 id="CPU和内存的单位"><a href="#CPU和内存的单位" class="headerlink" title="CPU和内存的单位"></a><code>CPU</code>和内存的单位</h4><ul>
<li><code>CPU</code>的测量单位是<code>cpus</code>，允许分数值。你可以使用前缀<code>m</code>来表示<code>mili</code>（千分之一）。例如<code>100mcpu</code>就是<code>100 milicpu</code>，等价于<code>0.1CPU</code>。</li>
<li>内存的测量单位是字节。你可以使用纯整数来表示内存，也可以使用一些前缀：<code>E</code>, <code>P</code>, <code>T</code>, <code>G</code>, <code>M</code>, <code>K</code>, <code>Ei</code>, <code>Pi</code>, <code>Ti</code>, <code>Gi</code>, <code>Mi</code>, <code>Ki</code>.</li>
</ul>
</blockquote>
<h3 id="创建pod时，指定资源限制"><a href="#创建pod时，指定资源限制" class="headerlink" title="创建pod时，指定资源限制"></a>创建<code>pod</code>时，指定资源限制</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> quota<span class="token punctuation">-</span>mem<span class="token punctuation">-</span>cpu<span class="token punctuation">-</span>demo
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">containers</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> quota<span class="token punctuation">-</span>mem<span class="token punctuation">-</span>cpu<span class="token punctuation">-</span>demo<span class="token punctuation">-</span>ctr
    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx
    <span class="token key atrule">resources</span><span class="token punctuation">:</span>
      <span class="token key atrule">limits</span><span class="token punctuation">:</span>
        <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">"800Mi"</span>
        <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">"800m"</span> 
      <span class="token key atrule">requests</span><span class="token punctuation">:</span>
        <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">"600Mi"</span>
        <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">"400m"</span>
      
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>namespace</tag>
        <tag>pod</tag>
        <tag>资源限制</tag>
        <tag>Container</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s问题【删除namespace一直处于Terminating状态】</title>
    <url>/k8s-wen-ti-shan-chu-namespace-yi-zhi-chu-yu-terminating-zhuang-tai/</url>
    <content><![CDATA[<blockquote>
<p><code>kubernetes</code>在删除<code>namespace</code>时，或多或少出现过删除后一直处于<code>Terminating</code>状态，这时又该如何删除呢？<br>本文介绍各种手段删除处于<code>Terminating</code>状态的<code>namespace</code>。</p>
</blockquote>
<h3 id="一般删除"><a href="#一般删除" class="headerlink" title="一般删除"></a>一般删除</h3><pre class="line-numbers language-bash"><code class="language-bash">kubectl delete namespace NAMESPACENAME
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="强制删除"><a href="#强制删除" class="headerlink" title="强制删除"></a>强制删除</h3><pre class="line-numbers language-bash"><code class="language-bash">kubectl delete namespace NAMESPACENAME --force --grace-period<span class="token operator">=</span>0
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="删除finalizers"><a href="#删除finalizers" class="headerlink" title="删除finalizers"></a>删除finalizers</h3><blockquote>
<p>修改<code>namespace</code>配置，删除<font color="red">红色框</font>中内容</p>
</blockquote>
<pre class="line-numbers language-bash"><code class="language-bash">kubectl edit namespace NAMESPACE_NAME
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img data-src="/images/k8s_namespace.jpg" alt="NAMESPACE"></p>
<h3 id="调用接口删除"><a href="#调用接口删除" class="headerlink" title="调用接口删除"></a>调用接口删除</h3><blockquote>
<p>也有可能，上述方法中没有看到<code>finalizers</code>，这时可以通过调用接口的方式删除</p>
</blockquote>
<ul>
<li>第一步：将namespace内容导出到tmp.json文件中：</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash">kubectl get namespace NAMESPACE_NAME -o json <span class="token operator">></span> tmp.json
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>第二步：修改tmp.json内容，删除json中以下内容：</li>
</ul>
<pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>
    //删除spec整个内容
    <span class="token property">"spec"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"finalizers"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token string">"kubernetes"</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    
    <span class="token property">"status"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"phase"</span><span class="token operator">:</span> <span class="token string">"Terminating"</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>第三步：开启k8s接口代理，新开一个窗口，执行</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl proxy</span>
Starting to serve on 127.0.0.1:8001
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>第四步：调用接口删除<code>Namespace</code>，注意URL中修改成要删除的<code>NAMESPACE_NAME</code></li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash">curl -k -H <span class="token string">"Content-Type: application/json"</span> -X PUT --data-binary @tmp.json http://127.0.0.1:8001/api/v1/namespaces/NAMESPACE_NAME/finalize
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>namespace</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s集群监控【使用Helm一键安装Prometheus Operator】</title>
    <url>/k8s-ji-qun-jian-kong-shi-yong-helm-yi-jian-an-zhuang-prometheusoperator/</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>首先我们先来了解下 <code>Prometheus-Operator</code>的架构图：<br><img data-src="/images/k8s3.jpg" alt="Prometheus-Operator"></p>
<p>上图是<code>Prometheus-Operator</code>官方提供的架构图，其中<code>Operator</code>是最核心的部分，作为一个控制器，他会去创建<code>Prometheus</code>、<code>ServiceMonitor</code>、<code>AlertManager</code>以及<code>PrometheusRule</code>4个<code>CRD</code>资源对象，然后会一直监控并维持这4个资源对象的状态。</p>
<p>其中创建的<code>prometheus</code>这种资源对象就是作为<code>Prometheus Server</code>存在，而<code>ServiceMonitor</code>就是<code>exporter</code>的各种抽象，<code>exporter</code>前面我们已经学习了，是用来提供专门提供<code>metrics</code>数据接口的工具，<code>Prometheus</code>就是通过<code>ServiceMonitor</code>提供的<code>metrics</code>数据接口去 <code>pull</code> 数据的，当然<code>alertmanager</code>这种资源对象就是对应的<code>AlertManager</code>的抽象，而<code>PrometheusRule</code>是用来被<code>Prometheus</code>实例使用的报警规则文件。</p>
<p>这样我们要在集群中监控什么数据，就变成了直接去操作 <code>Kubernetes</code> 集群的资源对象了，是不是方便很多了。上图中的 <code>Service </code>和 <code>ServiceMonitor</code> 都是 <code>Kubernetes</code> 的资源，一个 <code>ServiceMonitor </code>可以通过 <code>labelSelector</code> 的方式去匹配一类<code> Service</code>，<code>Prometheus</code> 也可以通过 <code>labelSelector</code> 去匹配多个<code>ServiceMonitor</code>。</p>
<h3 id="查看stable-x2F-prometheus-operator的默认值"><a href="#查看stable-x2F-prometheus-operator的默认值" class="headerlink" title="查看stable/prometheus-operator的默认值"></a>查看stable/prometheus-operator的默认值</h3><pre><code>helm inspect values stable/prometheus-operator
</code></pre>
<h3 id="将默认配置导出，备用"><a href="#将默认配置导出，备用" class="headerlink" title="将默认配置导出，备用"></a>将默认配置导出，备用</h3><pre><code>helm inspect values stable/prometheus-operator &gt; prometheus-operator.yaml
</code></pre>
<h3 id="提前将配置中涉及到的镜像下载好"><a href="#提前将配置中涉及到的镜像下载好" class="headerlink" title="提前将配置中涉及到的镜像下载好"></a>提前将配置中涉及到的镜像下载好</h3><pre class="line-numbers language-sh"><code class="language-sh">#!/bin/sh
docker pull hub.deri.org.cn/k8s_monitor/alertmanager:v0.19.0
docker tag hub.deri.org.cn/k8s_monitor/alertmanager:v0.19.0 quay.io/prometheus/alertmanager:v0.19.0
docker rmi hub.deri.org.cn/k8s_monitor/alertmanager:v0.19.0
 
docker pull hub.deri.org.cn/k8s_monitor/ghostunnel:v1.4.1 
docker tag hub.deri.org.cn/k8s_monitor/ghostunnel:v1.4.1 squareup/ghostunnel:v1.4.1
docker rmi hub.deri.org.cn/k8s_monitor/ghostunnel:v1.4.1 
 
docker pull hub.deri.org.cn/k8s_monitor/kube-webhook-certgen:v1.0.0 
docker tag hub.deri.org.cn/k8s_monitor/kube-webhook-certgen:v1.0.0  jettech/kube-webhook-certgen:v1.0.0
docker rmi hub.deri.org.cn/k8s_monitor/kube-webhook-certgen:v1.0.0 
 
docker pull hub.deri.org.cn/k8s_monitor/prometheus-operator:v0.34.0
docker tag hub.deri.org.cn/k8s_monitor/prometheus-operator:v0.34.0 quay.io/coreos/prometheus-operator:v0.34.0
docker rmi hub.deri.org.cn/k8s_monitor/prometheus-operator:v0.34.0
 
docker pull hub.deri.org.cn/k8s_monitor/configmap-reload:v0.0.1
docker tag hub.deri.org.cn/k8s_monitor/configmap-reload:v0.0.1 quay.io/coreos/configmap-reload:v0.0.1
docker rmi pull hub.deri.org.cn/k8s_monitor/configmap-reload:v0.0.1
 
docker pull hub.deri.org.cn/k8s_monitor/prometheus-config-reloader:v0.34.0
docker tag hub.deri.org.cn/k8s_monitor/prometheus-config-reloader:v0.34.0 quay.io/coreos/prometheus-config-reloader:v0.34.0
docker rmi hub.deri.org.cn/k8s_monitor/prometheus-config-reloader:v0.34.0
 
docker pull hub.deri.org.cn/k8s_monitor/hyperkube:v1.12.1
docker tag hub.deri.org.cn/k8s_monitor/hyperkube:v1.12.1 k8s.gcr.io/hyperkube:v1.12.1
docker rmi  hub.deri.org.cn/k8s_monitor/hyperkube:v1.12.1
 
docker pull hub.deri.org.cn/k8s_monitor/prometheus:v2.13.1
docker tag hub.deri.org.cn/k8s_monitor/prometheus:v2.13.1 quay.io/prometheus/prometheus:v2.13.1
docker rmi hub.deri.org.cn/k8s_monitor/prometheus:v2.13.1
 
docker pull hub.deri.org.cn/k8s_monitor/kube-state-metrics:v1.8.0
docker tag hub.deri.org.cn/k8s_monitor/kube-state-metrics:v1.8.0 quay.io/coreos/kube-state-metrics:v1.8.0
docker rmi hub.deri.org.cn/k8s_monitor/kube-state-metrics:v1.8.0
 
docker pull hub.deri.org.cn/k8s_monitor/node-exporter:v0.18.1
docker tag hub.deri.org.cn/k8s_monitor/node-exporter:v0.18.1 quay.io/prometheus/node-exporter:v0.18.1
docker rmi hub.deri.org.cn/k8s_monitor/node-exporter:v0.18.1
 
docker pull hub.deri.org.cn/k8s_monitor/k8s-sidecar:0.1.20
docker tag hub.deri.org.cn/k8s_monitor/k8s-sidecar:0.1.20 kiwigrid/k8s-sidecar:0.1.20
docker rmi hub.deri.org.cn/k8s_monitor/k8s-sidecar:0.1.20
 
docker pull hub.deri.org.cn/k8s_monitor/grafana:6.4.2
docker tag hub.deri.org.cn/k8s_monitor/grafana:6.4.2 grafana/grafana:6.4.2
docker rmi hub.deri.org.cn/k8s_monitor/grafana:6.4.2
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="用默认配置安装，指定了name、namespace等信息"><a href="#用默认配置安装，指定了name、namespace等信息" class="headerlink" title="用默认配置安装，指定了name、namespace等信息"></a>用默认配置安装，指定了name、namespace等信息</h3><pre><code>helm install stable/prometheus-operator  --name prometheus-operator --namespace monitoring -f prometheus-operator.yaml --set grafana.adminPassword=admin
</code></pre>
<h3 id="查看pod运行情况"><a href="#查看pod运行情况" class="headerlink" title="查看pod运行情况"></a>查看pod运行情况</h3><pre><code>kubectl get pod -n monitoring
</code></pre>
<h3 id="修改Grafana的service类型为NodePort，便于访问测试"><a href="#修改Grafana的service类型为NodePort，便于访问测试" class="headerlink" title="修改Grafana的service类型为NodePort，便于访问测试"></a>修改Grafana的service类型为NodePort，便于访问测试</h3><pre><code>kubectl edit svc prometheus-operator-grafana -n monitoring
</code></pre>
<p>通过下面命令，查看绑定宿主机的端口 ，访问测试密码安装时指定了<code>admin/admin</code></p>
<pre><code>kubectl get svc -n monitoring
</code></pre>
<h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><pre><code>helm delete prometheus-operator
</code></pre>
<pre><code>helm delete --purge prometheus-operator
</code></pre>
<p><code>Prometheus-Operator</code>安装时会去创建<code>Prometheus</code>、<code>ServiceMonitor</code>、<code>AlertManager</code>以及<code>PrometheusRule</code>4个<code>CRD</code>资源对象，卸载时一并删掉</p>
<pre><code>kubectl delete crd prometheuses.monitoring.coreos.com
kubectl delete crd prometheusrules.monitoring.coreos.com
kubectl delete crd servicemonitors.monitoring.coreos.com
kubectl delete crd podmonitors.monitoring.coreos.com
kubectl delete crd alertmanagers.monitoring.coreos.com
</code></pre>
<h3 id="修改prometheus-operator-yaml，配置ingress"><a href="#修改prometheus-operator-yaml，配置ingress" class="headerlink" title="修改prometheus-operator.yaml，配置ingress"></a>修改prometheus-operator.yaml，配置ingress</h3><pre class="line-numbers language-yml"><code class="language-yml"># 例如AlterManager配置，默认情况enabled: false修改成true，hosts: []填入alterManager的域名
alertmanager:
  ingress:
    enabled: true
    hosts: ["alert.deri.com"]
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="修改prometheus-operator-yaml，配置数据持久化"><a href="#修改prometheus-operator-yaml，配置数据持久化" class="headerlink" title="修改prometheus-operator.yaml，配置数据持久化"></a>修改prometheus-operator.yaml，配置数据持久化</h3><pre class="line-numbers language-yml"><code class="language-yml"># 例如AlterManager，默认如下，是被注释掉的，取消注释，并填入你的storageClassName
    storage: {}
    # volumeClaimTemplate:
    #   spec:
    #     storageClassName: gluster
    #     accessModes: ["ReadWriteOnce"]
    #     resources:
    #       requests:
    #         storage: 50Gi
    #   selector: {}
 
alertmanager:
  alertmanagerSpec:
    storage: 
      volumeClaimTemplate:
        spec:
          storageClassName: nfs-client
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 5Gi
        selector: {}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其它配置可以在默认配置<code>prometheus-operator.yaml</code>中查看并修改。</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="问题一"><a href="#问题一" class="headerlink" title="问题一:"></a>问题一:</h4><p>【摘自<code>https://github.com/helm/charts/tree/master/stable/prometheus-operator</code>】</p>
<p>KubeProxy【改完重启kubelet、docker服务】</p>
<pre class="line-numbers language-log"><code class="language-log">The metrics bind address of kube-proxy is default to&nbsp;127.0.0.1:10249&nbsp;that prometheus instances&nbsp;cannot&nbsp;access to. You should expose metrics by changing&nbsp;metricsBindAddress&nbsp;field value to&nbsp;0.0.0.0:10249&nbsp;if you want to collect them.

Depending on the cluster, the relevant part&nbsp;config.conf&nbsp;will be in ConfigMap&nbsp;kube-system/kube-proxy&nbsp;or&nbsp;kube-system/kube-proxy-config. For example:
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre><code>kubectl -n kube-system edit cm kube-proxy
</code></pre>
<pre class="line-numbers language-yml"><code class="language-yml">apiVersion: v1
data:
  config.conf: |-
    apiVersion: kubeproxy.config.k8s.io/v1alpha1
    kind: KubeProxyConfiguration
    # ...
    # metricsBindAddress: 127.0.0.1:10249
    metricsBindAddress: 0.0.0.0:10249
    # ...
  kubeconfig.conf: |-
    # ...
kind: ConfigMap
metadata:
  labels:
    app: kube-proxy
  name: kube-proxy
  namespace: kube-system
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="问题二："><a href="#问题二：" class="headerlink" title="问题二："></a>问题二：</h4><p>在不同环境安装时发现结果不一样，所有配置都一样，可能原因：</p>
<p>由于上述是通过<code>helm</code>安装的，首先通过命令<code>helm repo list</code>检查源是否一致；</p>
<p>通过<code>helm search | grep prometheus</code>查看<code> CHART VERSION&nbsp;&nbsp; &nbsp;APP VERSION&nbsp;</code>是否一致；</p>
<p>如果不一致通过<code>helm repo update</code>更新一下就可以了。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://github.com/helm/charts/tree/master/stable/prometheus-operator">https://github.com/helm/charts/tree/master/stable/prometheus-operator</a></li>
</ul>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka单机版部署</title>
    <url>/kafka-dan-ji-ban-bu-shu/</url>
    <content><![CDATA[<h1 id="下载kafka"><a href="#下载kafka" class="headerlink" title="下载kafka"></a>下载kafka</h1><p>在官网<a href="https://kafka.apache.org/downloads">下载</a>kafka最新版本。</p>
<p>如：当前最新<code>2.4.0</code>，针对Scala不同版本有不同的编译包，下载<code>Scala 2.12</code>的测试。</p>
<pre><code>wget http://mirrors.tuna.tsinghua.edu.cn/apache/kafka/2.4.0/kafka_2.12-2.4.0.tgz
</code></pre>
<pre class="line-numbers language-sh"><code class="language-sh"># 解压
tar -xzf kafka_2.12-2.4.0.tgz

#进入目录
cd kafka_2.12-2.4.0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><h2 id="启动zookeeper"><a href="#启动zookeeper" class="headerlink" title="启动zookeeper"></a>启动zookeeper</h2><pre><code>bin/zookeeper-server-start.sh config/zookeeper.properties
</code></pre>
<h2 id="启动kafka"><a href="#启动kafka" class="headerlink" title="启动kafka"></a>启动kafka</h2><pre><code>bin/kafka-server-start.sh config/server.properties
</code></pre>
<blockquote>
<p>如果需要放到后台运行，可以加上<code>&amp;</code>或者 <code>nohup</code>命令.<br><code>nohup bin/zookeeper-server-start.sh config/zookeeper.properties &amp;</code></p>
</blockquote>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="创建主题"><a href="#创建主题" class="headerlink" title="创建主题"></a>创建主题</h2><pre><code>bin/kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic test
</code></pre>
<h2 id="查看主题列表"><a href="#查看主题列表" class="headerlink" title="查看主题列表"></a>查看主题列表</h2><pre><code>bin/kafka-topics.sh --list --bootstrap-server localhost:9092
</code></pre>
<h2 id="向主题发送消息"><a href="#向主题发送消息" class="headerlink" title="向主题发送消息"></a>向主题发送消息</h2><pre><code>bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test
</code></pre>
<h2 id="从主题消费消息"><a href="#从主题消费消息" class="headerlink" title="从主题消费消息"></a>从主题消费消息</h2><pre><code>bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning
</code></pre>
<h1 id="搭建kafka集群"><a href="#搭建kafka集群" class="headerlink" title="搭建kafka集群"></a>搭建kafka集群</h1><p>参考<a href="https://kafka.apache.org/quickstart">官网</a></p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><pre class="line-numbers language-bash"><code class="language-bash">./kafka-topics.sh --create --zookeeper 192.168.3.17:2181,192.168.3.19:2181,192.168.3.20:2181 --replication-factor 1 --partitions 1 --topic first_kafka

./kafka-console-producer.sh --broker-list 192.168.3.17:9092,192.168.3.19:9092,192.168.3.20:9092 --topic first_kafka

./kafka-console-consumer.sh --bootstrap-server 192.168.3.17:9092,192.168.3.19:9092,192.168.3.20:9092 --topic first_kafka --from-beginning

./kafka-topics.sh --describe --zookeeper 192.168.3.17:2181,192.168.3.19:2181,192.168.3.20:2181 --topic first_kafka

./kafka-topics.sh --list --zookeeper 192.168.3.17:2181,192.168.3.19:2181,192.168.3.20:2181

./kafka-topics.sh --delete --zookeeper 192.168.3.17:2181,192.168.3.19:2181,192.168.3.20:2181 --topic first_kafka
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka集群部署</title>
    <url>/kafka-ji-qun-bu-shu/</url>
    <content><![CDATA[<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># node1</span>
docker run -d --name kafka --net host --restart always \
  -e KAFKA_CFG_ZOOKEEPER_CONNECT<span class="token operator">=</span>192.168.3.17:2181,192.168.3.19:2181,192.168.3.20:2181 \
  -e KAFKA_BROKER_ID<span class="token operator">=</span>1 \
  -e KAFKA_CFG_LISTENERS<span class="token operator">=</span>PLAINTEXT://192.168.3.17:9092 \
  -e KAFKA_CFG_ADVERTISED_LISTENERS<span class="token operator">=</span>PLAINTEXT://192.168.3.17:9092 \
  -e ALLOW_PLAINTEXT_LISTENER<span class="token operator">=</span>yes \
  -e KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE<span class="token operator">=</span>true \
  -v /root/kafka:/bitnami/kafka \
  bitnami/kafka:2.8.0

<span class="token comment" spellcheck="true"># node2</span>
docker run -d --name kafka --net host --restart always \
  -e KAFKA_CFG_ZOOKEEPER_CONNECT<span class="token operator">=</span>192.168.3.17:2181,192.168.3.19:2181,192.168.3.20:2181 \
  -e KAFKA_BROKER_ID<span class="token operator">=</span>2 \
  -e KAFKA_CFG_LISTENERS<span class="token operator">=</span>PLAINTEXT://192.168.3.19:9092 \
  -e KAFKA_CFG_ADVERTISED_LISTENERS<span class="token operator">=</span>PLAINTEXT://192.168.3.19:9092 \
  -e ALLOW_PLAINTEXT_LISTENER<span class="token operator">=</span>yes \
  -e KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE<span class="token operator">=</span>true \
  -v /root/kafka:/bitnami/kafka \
  bitnami/kafka:2.8.0

<span class="token comment" spellcheck="true"># node3</span>
docker run -d --name kafka --net host --restart always \
  -e KAFKA_CFG_ZOOKEEPER_CONNECT<span class="token operator">=</span>192.168.3.17:2181,192.168.3.19:2181,192.168.3.20:2181 \
  -e KAFKA_BROKER_ID<span class="token operator">=</span>3 \
  -e KAFKA_CFG_LISTENERS<span class="token operator">=</span>PLAINTEXT://192.168.3.20:9092 \
  -e KAFKA_CFG_ADVERTISED_LISTENERS<span class="token operator">=</span>PLAINTEXT://192.168.3.20:9092 \
  -e ALLOW_PLAINTEXT_LISTENER<span class="token operator">=</span>yes \
  -e KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE<span class="token operator">=</span>true \
  -v /root/kafka:/bitnami/kafka \
  bitnami/kafka:2.8.0

<span class="token comment" spellcheck="true"># 2种ui</span>
docker run -d -p 18080:8889 --name ui freakchicken/kafka-ui-lite
docker run -d -p 9000:9000 --name ui -e ZK_HOSTS<span class="token operator">=</span>192.168.3.17:2181,192.168.3.19:2181,192.168.3.20:2181 solsson/kafka-manager

<span class="token comment" spellcheck="true"># 测试命令</span>
./kafka-topics.sh --create --zookeeper 192.168.3.17:2181,192.168.3.19:2181,192.168.3.20:2181 --replication-factor 1 --partitions 1 --topic first_kafka

./kafka-console-producer.sh --broker-list 192.168.3.17:9092,192.168.3.19:9092,192.168.3.20:9092 --topic first_kafka

./kafka-console-consumer.sh --bootstrap-server 192.168.3.17:9092,192.168.3.19:9092,192.168.3.20:9092 --topic first_kafka --from-beginning

./kafka-topics.sh --describe --zookeeper 192.168.3.17:2181,192.168.3.19:2181,192.168.3.20:2181 --topic first_kafka

./kafka-topics.sh --list --zookeeper 192.168.3.17:2181,192.168.3.19:2181,192.168.3.20:2181

./kafka-topics.sh --delete --zookeeper 192.168.3.17:2181,192.168.3.19:2181,192.168.3.20:2181 --topic first_kafka
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>kafka</category>
      </categories>
  </entry>
  <entry>
    <title>keepalived+haproxy实现双机热备</title>
    <url>/keepalived-haproxy-shi-xian-shuang-ji-re-bei/</url>
    <content><![CDATA[<h3 id="安装haproxy"><a href="#安装haproxy" class="headerlink" title="安装haproxy"></a>安装<code>haproxy</code></h3><p>参考<a href="">Haproxy安装使用</a></p>
<h3 id="安装keepalived"><a href="#安装keepalived" class="headerlink" title="安装keepalived"></a>安装<code>keepalived</code></h3><pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> keepalived -y
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="修改keepalived配置文件"><a href="#修改keepalived配置文件" class="headerlink" title="修改keepalived配置文件"></a>修改<code>keepalived</code>配置文件</h3><p>默认配置文件目录：<code>/etc/keepalived/keepalived.conf</code></p>
<pre><code>global_defs {
   router_id consul1    #虚拟路由名称
}
 
vrrp_script chk_haproxy {
    script "killall -0 haproxy"     #使用killall -0检查haproxy实例是否存在，性能高于ps命令
    interval 2    #脚本运行周期
    timeout 2    #每次检查的加权权重值
    fall 3
}
 
vrrp_instance haproxy {
    state MASTER     #本机实例状态，MASTER/BACKUP，备机配置文件中请写BACKUP
    interface ens33    #本机网卡名称，使用ifconfig命令查看
    virtual_router_id 51    #虚拟路由编号，主备机保持一致
    priority 100    #本机初始权重，备机请填写小于主机的值（例如100）
    advert_int 1        #争抢虚地址的周期，秒
    authentication {
        auth_type PASS
        auth_pass 1111
    }
    virtual_ipaddress {
        192.168.41.150    #虚地址IP，主备机保持一致
    }
    track_script {
        chk_haproxy        #对应的健康检查配置
    }
}
</code></pre>
<h3 id="启动keepalived服务"><a href="#启动keepalived服务" class="headerlink" title="启动keepalived服务"></a>启动<code>keepalived</code>服务</h3><p>主备机配置完成后，均启动<code>keepalived</code>服务</p>
<pre><code>systemctl  start keepalived.service
</code></pre>
<h3 id="检查主备机网卡上是否有VIP"><a href="#检查主备机网卡上是否有VIP" class="headerlink" title="检查主备机网卡上是否有VIP"></a>检查主备机网卡上是否有<code>VIP</code></h3><p>执行命令：<code>ip addr sh ens33</code></p>
<pre><code>2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
&nbsp; &nbsp; link/ether 00:0c:29:e8:3f:ba brd ff:ff:ff:ff:ff:ff
&nbsp; &nbsp; inet 192.168.41.129/24 brd 192.168.41.255 scope global noprefixroute ens33
&nbsp; &nbsp; &nbsp; &nbsp;valid_lft forever preferred_lft forever
&nbsp; &nbsp; inet 192.168.41.150/32 scope global ens33
&nbsp; &nbsp; &nbsp; &nbsp;valid_lft forever preferred_lft forever
&nbsp; &nbsp; inet6 fe80::999f:e60:1951:9d4d/64 scope link tentative noprefixroute dadfailed&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp;valid_lft forever preferred_lft forever
&nbsp; &nbsp; inet6 fe80::d5e3:a2fa:a42:31d3/64 scope link noprefixroute&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp;valid_lft forever preferred_lft forever
</code></pre>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul>
<li>停止<code>haproxy</code>服务，查看<code>VIP</code>是否转移</li>
</ul>
<pre><code>systemctl  stop haproxy.service
</code></pre>
<ul>
<li>停止<code>keepalived</code>服务，查看<code>VIP</code>是否转移</li>
</ul>
<pre><code>systemctl  stop keepalived.service
</code></pre>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>haproxy</tag>
        <tag>keepalived</tag>
      </tags>
  </entry>
  <entry>
    <title>kubeadm部署k8s【更新证书】</title>
    <url>/kubeadm-bu-shu-k8s-geng-xin-zheng-shu/</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>通过 <code>kubeadm</code>部署<code>k8s</code>，默认生成的证书有效期是<code>一年</code>.需要每年更新证书.</p>
<h3 id="查看证书有效期"><a href="#查看证书有效期" class="headerlink" title="查看证书有效期"></a>查看证书有效期</h3><pre class="line-numbers language-sh"><code class="language-sh">kubeadm alpha certs check-expiration
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="更新证书"><a href="#更新证书" class="headerlink" title="更新证书"></a>更新证书</h3><pre class="line-numbers language-sh"><code class="language-sh">kubeadm alpha certs renew all
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="通过crontab定时更新证书"><a href="#通过crontab定时更新证书" class="headerlink" title="通过crontab定时更新证书"></a>通过crontab定时更新证书</h3><pre class="line-numbers language-sh"><code class="language-sh">0 0 15 10 * kubeadm alpha certs renew all
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="证书过期kubectl命令无法使用"><a href="#证书过期kubectl命令无法使用" class="headerlink" title="证书过期kubectl命令无法使用"></a>证书过期kubectl命令无法使用</h3><pre class="line-numbers language-sh"><code class="language-sh"># 更新客户端配置
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="修改源码增加证书有效期"><a href="#修改源码增加证书有效期" class="headerlink" title="修改源码增加证书有效期"></a>修改源码增加证书有效期</h3><ul>
<li>省略…</li>
</ul>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>kubeadm</tag>
      </tags>
  </entry>
  <entry>
    <title>kubectl插件管理krew</title>
    <url>/kubectl-cha-jian-guan-li-krew/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h3 id="krew安装"><a href="#krew安装" class="headerlink" title="krew安装"></a>krew安装</h3><ul>
<li><a href="https://krew.sigs.k8s.io/docs/user-guide/setup/install/">官方文档</a></li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 1.安装git</span>
yum -y <span class="token function">install</span> <span class="token function">git</span>
<span class="token comment" spellcheck="true"># 2.安装krew</span>
<span class="token punctuation">(</span>
  <span class="token keyword">set</span> -x<span class="token punctuation">;</span> <span class="token function">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>mktemp -d<span class="token variable">)</span></span>"</span> <span class="token operator">&amp;&amp;</span>
  OS<span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token operator">|</span> <span class="token function">tr</span> '<span class="token punctuation">[</span>:upper:<span class="token punctuation">]</span>' '<span class="token punctuation">[</span>:lower:<span class="token punctuation">]</span>'<span class="token variable">)</span></span>"</span> <span class="token operator">&amp;&amp;</span>
  ARCH<span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -m <span class="token operator">|</span> <span class="token function">sed</span> -e 's/x86_64/amd64/' -e 's/\<span class="token punctuation">(</span>arm\<span class="token variable">)</span></span>\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')"</span> <span class="token operator">&amp;&amp;</span>
  KREW<span class="token operator">=</span><span class="token string">"krew-<span class="token variable">${OS}</span>_<span class="token variable">${ARCH}</span>"</span> <span class="token operator">&amp;&amp;</span>
  curl -fsSLO <span class="token string">"https://github.com/kubernetes-sigs/krew/releases/latest/download/<span class="token variable">${KREW}</span>.tar.gz"</span> <span class="token operator">&amp;&amp;</span>
  <span class="token function">tar</span> zxvf <span class="token string">"<span class="token variable">${KREW}</span>.tar.gz"</span> <span class="token operator">&amp;&amp;</span>
  ./<span class="token string">"<span class="token variable">${KREW}</span>"</span> <span class="token function">install</span> krew
<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 3.配置环境变量:.bashrc或者其它位置配置</span>
<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token string">"<span class="token variable">${KREW_ROOT:-$HOME/.krew}</span>/bin:<span class="token variable">$PATH</span>"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="krew快速开始"><a href="#krew快速开始" class="headerlink" title="krew快速开始"></a>krew快速开始</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 1.更新插件列表</span>
kubectl krew update
<span class="token comment" spellcheck="true"># 2.查看插件列表</span>
kubectl krew search
<span class="token comment" spellcheck="true"># 3.安装插件</span>
kubectl krew <span class="token function">install</span> xxxxx
<span class="token comment" spellcheck="true"># 4.卸载插件</span>
kubectl krew uninstall xxxxx
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h3><ul>
<li><code>sniff</code> : 抓包工具</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 保存文件,可以用wireshark分析</span>
kubectl -n <span class="token function">test</span> sniff website-7d7d96cdbf-6v4p6 -o test.pcap
<span class="token comment" spellcheck="true"># 明文查看</span>
kubectl -n <span class="token function">test</span> sniff website-7d7d96cdbf-6v4p6 -o -
<span class="token comment" spellcheck="true"># 抓取时过滤</span>
kubectl -n <span class="token function">test</span> sniff website-7d7d96cdbf-6v4p6 -f <span class="token string">"port 80"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>其它插件推荐: <a href="https://blog.csdn.net/weixin_49366475/article/details/109124327">参考链接</a></li>
</ul>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>krew</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes-v1.15.0安装【使用kubeadm部署】</title>
    <url>/kubernetes-v1-15-0-an-zhuang-shi-yong-kubeadm-bu-shu/</url>
    <content><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><table>
<thead>
<tr>
<th>节点名</th>
<th>IP</th>
<th>角色</th>
</tr>
</thead>
<tbody><tr>
<td>node2</td>
<td>192.168.41.129</td>
<td>master</td>
</tr>
<tr>
<td>node3</td>
<td>192.168.41.130</td>
<td>slave</td>
</tr>
<tr>
<td>node4</td>
<td>192.168.41.131</td>
<td>slave</td>
</tr>
</tbody></table>
<h3 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h3><p>在安装之前，需要先做如下准备,修改hosts：</p>
<pre class="line-numbers language-sh"><code class="language-sh">cat /etc/hosts
192.168.41.129 node2
192.168.41.130 node3
192.168.41.131 node4
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>禁用防火墙：</p>
<pre class="line-numbers language-sh"><code class="language-sh">systemctl stop firewalld
systemctl disable firewalld
 
systemctl stop iptables
systemctl disable iptables
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>禁用SELINUX：</p>
<pre><code>setenforce 0
</code></pre>
<pre><code>vi /etc/selinux/config
SELINUX=disabled
</code></pre>
<pre class="line-numbers language-sh"><code class="language-sh">#检查SELINUX状态
/usr/sbin/sestatus -v
SELinux status: disabled
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>创建/etc/sysctl.d/k8s.conf文件，添加如下内容：（vm.swappiness=0是swap相关配置，后面需要配置，这里统一加上）</p>
<pre><code>net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
vm.swappiness=0
</code></pre>
<p>执行命令使修改生效。</p>
<pre><code>modprobe br_netfilter
sysctl -p /etc/sysctl.d/k8s.conf
</code></pre>
<h3 id="kube-proxy开启ipvs的前置条件"><a href="#kube-proxy开启ipvs的前置条件" class="headerlink" title="kube-proxy开启ipvs的前置条件"></a>kube-proxy开启ipvs的前置条件</h3><p>由于ipvs已经加入到了内核的主干，所以为kube-proxy开启ipvs的前提需要加载以下的内核模块：</p>
<pre class="line-numbers language-s"><code class="language-s">ip_vs
ip_vs_rr
ip_vs_wrr
ip_vs_sh
nf_conntrack_ipv4
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在所有的Kubernetes节点node1和node2上执行以下脚本:</p>
<pre><code>cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;EOF
#!/bin/bash
modprobe -- ip_vs
modprobe -- ip_vs_rr
modprobe -- ip_vs_wrr
modprobe -- ip_vs_sh
modprobe -- nf_conntrack_ipv4
EOF
chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack_ipv4
</code></pre>
<p>上面脚本创建了的<code>/etc/sysconfig/modules/ipvs.modules</code>文件，保证在节点重启后能自动加载所需模块。 使用</p>
<pre><code>lsmod | grep -e ip_vs -e nf_conntrack_ipv4
</code></pre>
<p>命令查看是否已经正确加载所需的内核模块。</p>
<p>接下来还需要确保各个节点上已经安装了<code>ipset</code>软件包</p>
<pre><code>yum install ipset
</code></pre>
<p>为了便于查看ipvs的代理规则，最好安装一下管理工具<code>ipvsadm</code> 。</p>
<pre><code>yum install ipvsadm
</code></pre>
<p>如果以上前提条件如果不满足，则即使<code>kube-proxy</code>的配置开启了<code>ipvs</code>模式，也会退回到<code>iptables</code>模式。</p>
<h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><blockquote>
<p>Kubernetes从1.6开始使用<code>CRI</code>(<code>Container Runtime Interface</code>)容器运行时接口。默认的容器运行时仍然是<code>Docker</code>，使用的是<code>kubelet</code>中内置<code>dockershim CRI</code>实现。</p>
</blockquote>
<p>安装<code>docker</code>的<code>yum</code>源:</p>
<pre class="line-numbers language-sh"><code class="language-sh">yum install -y yum-utils device-mapper-persistent-data lvm2
yum-config-manager \
    --add-repo \
    https://download.docker.com/linux/centos/docker-ce.repo
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>查看最新的Docker版本：</p>
<pre class="line-numbers language-log"><code class="language-log">yum list docker-ce.x86_64  --showduplicates |sort -r
docker-ce.x86_64            3:18.09.7-3.el7                     docker-ce-stable
docker-ce.x86_64            3:18.09.6-3.el7                     docker-ce-stable
docker-ce.x86_64            3:18.09.5-3.el7                     docker-ce-stable
docker-ce.x86_64            3:18.09.4-3.el7                     docker-ce-stable
docker-ce.x86_64            3:18.09.3-3.el7                     docker-ce-stable
docker-ce.x86_64            3:18.09.2-3.el7                     docker-ce-stable
docker-ce.x86_64            3:18.09.1-3.el7                     docker-ce-stable
docker-ce.x86_64            3:18.09.0-3.el7                     docker-ce-stable
docker-ce.x86_64            18.06.3.ce-3.el7                    docker-ce-stable
docker-ce.x86_64            18.06.2.ce-3.el7                    docker-ce-stable
docker-ce.x86_64            18.06.1.ce-3.el7                    docker-ce-stable
docker-ce.x86_64            18.06.0.ce-3.el7                    docker-ce-stable
docker-ce.x86_64            18.03.1.ce-1.el7.centos             docker-ce-stable
docker-ce.x86_64            18.03.0.ce-1.el7.centos             docker-ce-stable
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>Kubernetes 1.15</code>当前支持的docker版本列表是<code>1.13.1</code>, <code>17.03</code>, <code>17.06</code>, <code>17.09</code>, <code>18.06</code>, <code>18.09</code>。 这里在各节点安装docker的<code>18.09.7</code>版本。</p>
<pre class="line-numbers language-sh"><code class="language-sh">yum makecache fast
 
yum install -y --setopt=obsoletes=0 \
  docker-ce-18.09.7-3.el7 
 
systemctl start docker
systemctl enable docker
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>确认一下<code>iptables filter</code>表中<code>FOWARD</code>链的默认策略(<code>pllicy</code>)为<code>ACCEPT</code>:</p>
<pre class="line-numbers language-sh"><code class="language-sh">iptables -nvL
Chain INPUT (policy ACCEPT 263 packets, 19209 bytes)
 pkts bytes target     prot opt in     out     source               destination
 
Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination
    0     0 DOCKER-USER  all  --  *      *       0.0.0.0/0            0.0.0.0/0
    0     0 DOCKER-ISOLATION-STAGE-1  all  --  *      *       0.0.0.0/0            0.0.0.0/0
    0     0 ACCEPT     all  --  *      docker0  0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED
    0     0 DOCKER     all  --  *      docker0  0.0.0.0/0            0.0.0.0/0
    0     0 ACCEPT     all  --  docker0 !docker0  0.0.0.0/0            0.0.0.0/0
    0     0 ACCEPT     all  --  docker0 docker0  0.0.0.0/0            0.0.0.0/0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="修改docker-cgroup-driver为systemd"><a href="#修改docker-cgroup-driver为systemd" class="headerlink" title="修改docker cgroup driver为systemd"></a>修改docker cgroup driver为systemd</h3><p>根据文档<code>CRI installation</code>中的内容，对于使用<code>systemd</code>作为<code>init system</code>的Linux的发行版，使用systemd作为docker的<code>cgroup driver</code>可以确保服务器节点在资源紧张的情况更加稳定，因此这里修改各个节点上docker的cgroup driver为systemd。</p>
<p>创建或修改<code>/etc/docker/daemon.json</code>：</p>
<pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"exec-opts"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"native.cgroupdriver=systemd"</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>重启docker：</p>
<pre class="line-numbers language-sh"><code class="language-sh">systemctl restart docker
 
docker info | grep Cgroup
Cgroup Driver: systemd
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="使用kubeadm部署Kubernetes"><a href="#使用kubeadm部署Kubernetes" class="headerlink" title="使用kubeadm部署Kubernetes"></a>使用kubeadm部署Kubernetes</h2><h3 id="安装kubeadm和kubelet"><a href="#安装kubeadm和kubelet" class="headerlink" title="安装kubeadm和kubelet"></a>安装kubeadm和kubelet</h3><p>下面在各节点安装<code>kubeadm</code>和<code>kubelet</code>：</p>
<pre class="line-numbers language-sh"><code class="language-sh">cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
        https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF
 
 
#由于国内网络不通问题，推荐使用以下阿里云镜像
cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg
        http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
EOF
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sh"><code class="language-sh">yum makecache fast
#默认可能安装的版本不一样
yum install -y kubelet kubeadm kubectl
#建议指定版本
yum install -y kubelet-1.15.0 kubeadm-1.15.0 kubectl-1.15.0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>Kubernetes 1.8</code>开始要求关闭系统的<code>Swap</code>，如果不关闭，默认配置下kubelet将无法启动。 关闭系统的Swap方法如下:</p>
<pre><code>swapoff -a
</code></pre>
<p>永久关闭swap：</p>
<p>修改 <code>/etc/fstab</code> 文件，注释掉 SWAP 的自动挂载，使用<code>free -m</code>确认swap已经关闭。</p>
<p><code>swappiness</code>参数调整，修改<code>/etc/sysctl.d/k8s.conf</code>添加下面一行,<strong>前面已经统一加过了</strong>：</p>
<pre><code>vm.swappiness=0
</code></pre>
<p>执行<code>sysctl -p /etc/sysctl.d/k8s.conf</code>使修改生效。</p>
<blockquote>
<p>关闭swap可能会对其他服务产生影响，所以这里修改kubelet的配置去掉这个限制。<br>使用kubelet的启动参数<code>–fail-swap-on=false</code>去掉必须关闭Swap的限制，修改<code>/etc/sysconfig/kubelet</code>，加入：<br><code>KUBELET_EXTRA_ARGS=--fail-swap-on=false</code></p>
</blockquote>
<h3 id="使用kubeadm-init初始化集群"><a href="#使用kubeadm-init初始化集群" class="headerlink" title="使用kubeadm init初始化集群"></a>使用kubeadm init初始化集群</h3><p>在各节点开机启动<code>kubelet</code>服务：</p>
<pre><code>systemctl enable kubelet.service
</code></pre>
<p>使用<code>kubeadm config print init-defaults</code>可以打印集群初始化默认的使用的配置：</p>
<pre class="line-numbers language-yml"><code class="language-yml">apiVersion: kubeadm.k8s.io/v1beta2
bootstrapTokens:
- groups:
  - system:bootstrappers:kubeadm:default-node-token
  token: abcdef.0123456789abcdef
  ttl: 24h0m0s
  usages:
  - signing
  - authentication
kind: InitConfiguration
localAPIEndpoint:
  advertiseAddress: 1.2.3.4
  bindPort: 6443
nodeRegistration:
  criSocket: /var/run/dockershim.sock
  name: node1
  taints:
  - effect: NoSchedule
    key: node-role.kubernetes.io/master
---
apiServer:
  timeoutForControlPlane: 4m0s
apiVersion: kubeadm.k8s.io/v1beta2
certificatesDir: /etc/kubernetes/pki
clusterName: kubernetes
controllerManager: {}
dns:
  type: CoreDNS
etcd:
  local:
    dataDir: /var/lib/etcd
imageRepository: k8s.gcr.io
kind: ClusterConfiguration
kubernetesVersion: v1.14.0
networking:
  dnsDomain: cluster.local
  serviceSubnet: 10.96.0.0/12
scheduler: {}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>从默认的配置中可以看到，可以使用<code>imageRepository</code>定制在集群初始化时拉取k8s所需镜像的地址。基于默认配置定制出本次使用kubeadm初始化集群所需的配置文件<code>kubeadm.yaml</code>：</p>
<pre class="line-numbers language-yml"><code class="language-yml">apiVersion: kubeadm.k8s.io/v1beta2
kind: InitConfiguration
localAPIEndpoint:
&nbsp; advertiseAddress: 192.168.41.129
&nbsp; bindPort: 6443
nodeRegistration:
&nbsp; taints:
&nbsp; - effect: PreferNoSchedule
&nbsp; &nbsp; key: node-role.kubernetes.io/master
---
apiVersion: kubeadm.k8s.io/v1beta2
kind: ClusterConfiguration
kubernetesVersion: v1.15.0
networking:
&nbsp; podSubnet: 10.244.0.0/16
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在开始初始化集群之前可以使用</p>
<pre><code>kubeadm config images pull
</code></pre>
<p>预先在各个节点上拉取所k8s需要的docker镜像。</p>
<blockquote>
<p>由于国内网络问题，k8s.gcr.io 资源获取不了,使用以下方法</p>
</blockquote>
<pre class="line-numbers language-sh"><code class="language-sh">#!/bin/bash
MY_REGISTRY=gcr.azk8s.cn/google-containers
 
## 拉取镜像
docker pull ${MY_REGISTRY}/kube-apiserver:v1.15.0
docker pull ${MY_REGISTRY}/kube-controller-manager:v1.15.0
docker pull ${MY_REGISTRY}/kube-scheduler:v1.15.0
docker pull ${MY_REGISTRY}/kube-proxy:v1.15.0
docker pull ${MY_REGISTRY}/pause:3.1
docker pull ${MY_REGISTRY}/etcd:3.3.10
docker pull ${MY_REGISTRY}/coredns:1.3.1
 
## 添加Tag
docker tag ${MY_REGISTRY}/kube-apiserver:v1.15.0 k8s.gcr.io/kube-apiserver:v1.15.0
docker tag ${MY_REGISTRY}/kube-controller-manager:v1.15.0 k8s.gcr.io/kube-controller-manager:v1.15.0
docker tag ${MY_REGISTRY}/kube-scheduler:v1.15.0 k8s.gcr.io/kube-scheduler:v1.15.0
docker tag ${MY_REGISTRY}/kube-proxy:v1.15.0 k8s.gcr.io/kube-proxy:v1.15.0
docker tag ${MY_REGISTRY}/pause:3.1 k8s.gcr.io/pause:3.1
docker tag ${MY_REGISTRY}/etcd:3.3.10 k8s.gcr.io/etcd:3.3.10
docker tag ${MY_REGISTRY}/coredns:1.3.1 k8s.gcr.io/coredns:1.3.1
 
#删除无用的镜像
docker images | grep ${MY_REGISTRY} | awk '{print "docker rmi "  $1":"$2}' | sh -x
 
echo "end"
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的所有操作可以在一个节点上面完成，然后对进行复制即可。</p>
<p>其它因为网络原因pull的镜像都可以同理先下载下来:</p>
<pre class="line-numbers language-sh"><code class="language-sh">#1.先使用docker search命令查找
 
#2.选择一个下载快的镜像使用docker pull下载下来
 
#3.使用docker tag命令修改成程序需要的镜像
 
#4.使用docker rmi删除之前的镜像
 
#下载flannel网络镜像
docker pull xmlgrg/flannel:v0.11.0-amd64
docker tag docker.io/xmlgrg/flannel:v0.11.0-amd64 quay.io/coreos/flannel:v0.11.0-amd64
docker rmi docker.io/xmlgrg/flannel:v0.11.0-amd64
 
#下载tiller
docker pull junolu/tiller:v2.14.3
docker tag docker.io/junolu/tiller:v2.14.3 gcr.io/kubernetes-helm/tiller:v2.14.3
docker rmi docker.io/junolu/tiller:v2.14.3
 
#下载ingress-nginx/defaultbackend-amd64
docker pull fungitive/defaultbackend-amd64
docker tag docker.io/fungitive/defaultbackend-amd64:latest k8s.gcr.io/defaultbackend-amd64:1.5
docker rmi docker.io/fungitive/defaultbackend-amd64:latest
 
#下载dashboard
docker.io/loveone/kubernetes-dashboard-amd64:v1.10.1
docker tag docker.io/loveone/kubernetes-dashboard-amd64:v1.10.1 k8s.gcr.io/kubernetes-dashboard-amd64:v1.10.1
docker  rmi docker.io/loveone/kubernetes-dashboard-amd64:v1.10.1
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>接下来使用<code>kubeadm</code>初始化集群，选择<code>node2</code>作为<code>Master Node</code>，在<code>node2</code>上执行下面的命令：</p>
<pre class="line-numbers language-log"><code class="language-log">kubeadm init --config kubeadm.yaml --ignore-preflight-errors=Swap
[init] Using Kubernetes version: v1.15.0
[preflight] Running pre-flight checks
    [WARNING Swap]: running with swap on is not supported. Please disable swap
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Activating the kubelet service
[certs] Using certificateDir folder "/etc/kubernetes/pki"
[certs] Generating "etcd/ca" certificate and key
[certs] Generating "apiserver-etcd-client" certificate and key
[certs] Generating "etcd/server" certificate and key
[certs] etcd/server serving cert is signed for DNS names [node1 localhost] and IPs [192.168.99.11 127.0.0.1 ::1]
[certs] Generating "etcd/peer" certificate and key
[certs] etcd/peer serving cert is signed for DNS names [node1 localhost] and IPs [192.168.99.11 127.0.0.1 ::1]
[certs] Generating "etcd/healthcheck-client" certificate and key
[certs] Generating "ca" certificate and key
[certs] Generating "apiserver" certificate and key
[certs] apiserver serving cert is signed for DNS names [node1 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.99.11]
[certs] Generating "apiserver-kubelet-client" certificate and key
[certs] Generating "front-proxy-ca" certificate and key
[certs] Generating "front-proxy-client" certificate and key
[certs] Generating "sa" key and public key
[kubeconfig] Using kubeconfig folder "/etc/kubernetes"
[kubeconfig] Writing "admin.conf" kubeconfig file
[kubeconfig] Writing "kubelet.conf" kubeconfig file
[kubeconfig] Writing "controller-manager.conf" kubeconfig file
[kubeconfig] Writing "scheduler.conf" kubeconfig file
[control-plane] Using manifest folder "/etc/kubernetes/manifests"
[control-plane] Creating static Pod manifest for "kube-apiserver"
[control-plane] Creating static Pod manifest for "kube-controller-manager"
[control-plane] Creating static Pod manifest for "kube-scheduler"
[etcd] Creating static Pod manifest for local etcd in "/etc/kubernetes/manifests"
[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory "/etc/kubernetes/manifests". This can take up to 4m0s
[apiclient] All control plane components are healthy after 26.004907 seconds
[upload-config] Storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace
[kubelet] Creating a ConfigMap "kubelet-config-1.15" in namespace kube-system with the configuration for the kubelets in the cluster
[upload-certs] Skipping phase. Please see --upload-certs
[mark-control-plane] Marking the node node1 as control-plane by adding the label "node-role.kubernetes.io/master=''"
[mark-control-plane] Marking the node node1 as control-plane by adding the taints [node-role.kubernetes.io/master:PreferNoSchedule]
[bootstrap-token] Using token: 4qcl2f.gtl3h8e5kjltuo0r
[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
[bootstrap-token] Creating the "cluster-info" ConfigMap in the "kube-public" namespace
[addons] Applied essential addon: CoreDNS
[addons] Applied essential addon: kube-proxy
 
Your Kubernetes control-plane has initialized successfully!
 
To start using your cluster, you need to run the following as a regular user:
 
  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config
 
You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/
 
Then you can join any number of worker nodes by running the following on each as root:
 
kubeadm join 192.168.99.11:6443 --token 4qcl2f.gtl3h8e5kjltuo0r \
    --discovery-token-ca-cert-hash sha256:7ed5404175cc0bf18dbfe53f19d4a35b1e3d40c19b10924275868ebf2a3bbe6e
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面记录了完成的初始化输出的内容，根据输出的内容基本上可以看出手动初始化安装一个Kubernetes集群所需要的关键步骤。 其中有以下关键内容：</p>
<ul>
<li>[kubelet-start]&nbsp;生成kubelet的配置文件”/var/lib/kubelet/config.yaml”</li>
<li>[certs]生成相关的各种证书</li>
<li>[kubeconfig]生成相关的kubeconfig文件</li>
<li>[control-plane]使用/etc/kubernetes/manifests目录中的yaml文件创建apiserver、controller-manager、scheduler的静态pod</li>
<li>[bootstraptoken]生成token记录下来，后边使用kubeadm join往集群中添加节点时会用到</li>
<li>最后给出了将节点加入集群的命令<code>kubeadm join 18.16.202.163:6443 --token jrts59.18pe12atfafgcxca \ --discovery-token-ca-cert-hash sha256:56d6c7d7b63a9109444ece68a1b155d8a9ac049ba57febab2c72d40d8ab7d426</code></li>
</ul>
<p><strong><font style="color:red">下面的命令是配置常规用户如何使用kubectl访问集群：务必配上，不然无法使用kubectl命令！</font></strong></p>
<pre class="line-numbers language-sh"><code class="language-sh">mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>集群初始化如果遇到问题，可以使用下面的命令进行清理：</p>
<pre><code>kubeadm reset
</code></pre>
<blockquote>
<p>遇到的问题：<code>The connection to the server localhost:8080 was refused - did you specify the right host or port?</code><br>初始化的集群，kube-apiserver没有监听默认的http 8080端口。</p>
</blockquote>
<p>查看kube-apiserver的监听端口可以看到只监听了https的6443端口:</p>
<pre class="line-numbers language-log"><code class="language-log">netstat -nltp | grep apiserver
tcp6       0      0 :::6443                 :::*                    LISTEN      9831/kube-apiserver
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>为了使用kubectl访问apiserver，在~/.bash_profile中追加下面的环境变量：</p>
<pre class="line-numbers language-log"><code class="language-log">export KUBECONFIG=/etc/kubernetes/admin.conf
source ~/.bash_profile
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>此时kubectl命令在master node上就好用了.</p>
<h3 id="安装Pod-Network"><a href="#安装Pod-Network" class="headerlink" title="安装Pod Network"></a>安装Pod Network</h3><h4 id="使用flannel网络"><a href="#使用flannel网络" class="headerlink" title="使用flannel网络"></a>使用flannel网络</h4><p>接下来安装<code>flannel network add-on</code>：</p>
<pre class="line-numbers language-log"><code class="language-log">mkdir -p ~/k8s/
cd ~/k8s
curl -O https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
kubectl apply -f  kube-flannel.yml
 
clusterrole.rbac.authorization.k8s.io/flannel created
clusterrolebinding.rbac.authorization.k8s.io/flannel created
serviceaccount/flannel created
configmap/kube-flannel-cfg created
daemonset.extensions/kube-flannel-ds-amd64 created
daemonset.extensions/kube-flannel-ds-arm64 created
daemonset.extensions/kube-flannel-ds-arm created
daemonset.extensions/kube-flannel-ds-ppc64le created
daemonset.extensions/kube-flannel-ds-s390x created
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>这里注意kube-flannel.yml这个文件里的flannel的镜像是0.11.0，quay.io/coreos/flannel:v0.11.0-amd64.<br>由于网络问题，flannel镜像可能pull失败，建议参考之前拉取镜像的方法，提前再各个节点拉好镜像！</p>
</blockquote>
<blockquote>
<p>如果Node有多个网卡的话，参考<a href="https://github.com/kubernetes/kubernetes/issues/39701">flannel issues 39701</a>，目前需要在kube-flannel.yml中使用–iface参数指定集群主机内网网卡的名称，否则可能会出现dns无法解析。需要将<code>kube-flannel.yml</code>下载到本地，flanneld启动参数加上<code>–iface=&lt;iface-name&gt;</code></p>
</blockquote>
<pre class="line-numbers language-yml"><code class="language-yml">containers:
      - name: kube-flannel
        image: quay.io/coreos/flannel:v0.11.0-amd64
        command:
        - /opt/bin/flanneld
        args:
        - --ip-masq
        - --kube-subnet-mgr
        - --iface=eth1
# ......
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用kubectl get pod –all-namespaces -o wide确保所有的Pod都处于Running状态。</p>
<pre class="line-numbers language-log"><code class="language-log">kubectl get pod -n kube-system
NAME                            READY   STATUS    RESTARTS   AGE
coredns-5c98db65d4-dr8lf        1/1     Running   0          52m
coredns-5c98db65d4-lp8dg        1/1     Running   0          52m
etcd-node1                      1/1     Running   0          51m
kube-apiserver-node1            1/1     Running   0          51m
kube-controller-manager-node1   1/1     Running   0          51m
kube-flannel-ds-amd64-mm296     1/1     Running   0          44s
kube-proxy-kchkf                1/1     Running   0          52m
kube-scheduler-node1            1/1     Running   0          51m
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="问题，flannel一直在CrashLoopBackOff，日志如下"><a href="#问题，flannel一直在CrashLoopBackOff，日志如下" class="headerlink" title="问题，flannel一直在CrashLoopBackOff，日志如下"></a>问题，flannel一直在CrashLoopBackOff，日志如下</h4><pre class="line-numbers language-sh"><code class="language-sh">[root@master ~]# kubectl get pods --all-namespaces
NAMESPACE     NAME                             READY   STATUS              RESTARTS   AGE
kube-system   coredns-5c98db65d4-57zm5         0/1     ContainerCreating   0          7m46s
kube-system   coredns-5c98db65d4-g8kqh         0/1     ContainerCreating   0          7m46s
kube-system   etcd-master                      1/1     Running             0          6m51s
kube-system   kube-apiserver-master            1/1     Running             0          6m31s
kube-system   kube-controller-manager-master   1/1     Running             0          6m29s
kube-system   kube-flannel-ds-amd64-jthsp      0/1     CrashLoopBackOff    3          104s
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-log"><code class="language-log">[root@master ~]# kubectl logs kube-flannel-ds-amd64-jthsp -n kube-system
I1105 08:37:34.863407       1 main.go:527] Using interface with name eth0 and address 192.168.1.209
I1105 08:37:34.863461       1 main.go:544] Defaulting external address to interface address (192.168.1.209)
I1105 08:37:35.061919       1 kube.go:126] Waiting 10m0s for node controller to sync
I1105 08:37:35.166015       1 kube.go:309] Starting kube subnet manager
I1105 08:37:36.065963       1 kube.go:133] Node controller sync successful
I1105 08:37:36.065985       1 main.go:244] Created subnet manager: Kubernetes Subnet Manager - master
I1105 08:37:36.065989       1 main.go:247] Installing signal handlers
I1105 08:37:36.066082       1 main.go:386] Found network config - Backend type: vxlan
I1105 08:37:36.066143       1 vxlan.go:120] VXLAN config: VNI=1 Port=0 GBP=false DirectRouting=false
E1105 08:37:36.066314       1 main.go:289] Error registering network: failed to acquire lease: node "master" pod cidr not assigned
I1105 08:37:36.066356       1 main.go:366] Stopping shutdownHandler...
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>解决办法:</p>
<pre class="line-numbers language-sh"><code class="language-sh"># 修改 
/etc/kubernetes/manifests/kube-controller-manager.yaml
# 增加参数
--allocate-node-cidrs=true
--cluster-cidr=10.244.0.0/16
# 然后重启kubelet
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="使用weave网络"><a href="#使用weave网络" class="headerlink" title="使用weave网络"></a>使用weave网络</h4><p>虽然系统显示安装成功，但是master节点显示状态还是 NotReady，原因是需要安装网络插件，这边kubernetes官方提供了<a href="https://kubernetes.io/docs/concepts/cluster-administration/addons/#networking-and-network-policy">几款网络插件</a>。。</p>
<pre><code>kubectl apply -f https://git.io/weave-kube-1.6
NAME                      STATUS    ROLES     AGE       VERSION
izj6c3vsekthy7xn94b5s6z   Ready     master    1h        v1.10.3
</code></pre>
<p>大概过一会master节点就显示ready了，说明master已经准备就绪了.</p>
<h3 id="测试集群DNS是否可用"><a href="#测试集群DNS是否可用" class="headerlink" title="测试集群DNS是否可用"></a>测试集群DNS是否可用</h3><pre class="line-numbers language-sh"><code class="language-sh">kubectl run curl --image=radial/busyboxplus:curl -it
kubectl run --generator=deployment/apps.v1beta1 is DEPRECATED and will be removed in a future version. Use kubectl create instead.
If you don't see a command prompt, try pressing enter.
[ root@curl-5cc7b478b6-r997p:/ ]$
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>进入后执行<code>nslookup kubernetes.default</code>确认解析正常:</p>
<pre class="line-numbers language-log"><code class="language-log">nslookup kubernetes.default
Server:    10.96.0.10
Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local
 
Name:      kubernetes.default
Address 1: 10.96.0.1 kubernetes.default.svc.cluster.local
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="向Kubernetes集群中添加Node节点"><a href="#向Kubernetes集群中添加Node节点" class="headerlink" title="向Kubernetes集群中添加Node节点"></a>向Kubernetes集群中添加Node节点</h3><p>下面将node3这个主机添加到Kubernetes集群中，在node3上执行:</p>
<pre class="line-numbers language-log"><code class="language-log">kubeadm join 192.168.99.11:6443 --token 4qcl2f.gtl3h8e5kjltuo0r \
    --discovery-token-ca-cert-hash sha256:7ed5404175cc0bf18dbfe53f19d4a35b1e3d40c19b10924275868ebf2a3bbe6e \
 --ignore-preflight-errors=Swap
 
[preflight] Running pre-flight checks
    [WARNING Swap]: running with swap on is not supported. Please disable swap
    [WARNING Service-Kubelet]: kubelet service is not enabled, please run 'systemctl enable kubelet.service'
[preflight] Reading configuration from the cluster...
[preflight] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -oyaml'
[kubelet-start] Downloading configuration for the kubelet from the "kubelet-config-1.15" ConfigMap in the kube-system namespace
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Activating the kubelet service
[kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap...
 
This node has joined the cluster:
* Certificate signing request was sent to apiserver and a response was received.
* The Kubelet was informed of the new secure connection details.
 
Run 'kubectl get nodes' on the control-plane to see this node join the cluster.
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>node3加入集群后，下面在master节点上执行命令查看集群中的节点：</p>
<pre class="line-numbers language-log"><code class="language-log">kubectl get node
NAME    STATUS   ROLES    AGE   VERSION
node2   Ready    master   57m   v1.15.0
node3   Ready    <none>   11s   v1.15.0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="如果只想搭建一个只有master节点的单机测试环境"><a href="#如果只想搭建一个只有master节点的单机测试环境" class="headerlink" title="如果只想搭建一个只有master节点的单机测试环境"></a>如果只想搭建一个只有master节点的单机测试环境</h4><p>单机版<code>kubernetes</code>为了运行<code>Pod</code>.需要删除主机上的<code>Train</code>.允许<code>master</code>执行<code>Pod</code>.<br>执行命令如下：</p>
<pre><code>kubectl taint nodes --all node-role.kubernetes.io/master-
</code></pre>
<h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><p>执行上述命令一直卡在了<br><code>[preflight] Running pre-flight checks</code></p>
<ul>
<li>问题可能的原因是master防火墙没有关掉，检查firewalld和iptables</li>
<li>加上 –v=2 命令具体看看</li>
</ul>
<h3 id="从集群中移除Node"><a href="#从集群中移除Node" class="headerlink" title="从集群中移除Node"></a>从集群中移除Node</h3><p>在master节点上执行：</p>
<pre class="line-numbers language-sh"><code class="language-sh">kubectl drain node2 --delete-local-data --force --ignore-daemonsets
kubectl delete node node2
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>在<code>Node</code>上执行：</p>
<pre class="line-numbers language-sh"><code class="language-sh">kubeadm reset
ifconfig cni0 down
ip link delete cni0
ifconfig flannel.1 down
ip link delete flannel.1
rm -rf /var/lib/cni/
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="kube-proxy开启ipvs"><a href="#kube-proxy开启ipvs" class="headerlink" title="kube-proxy开启ipvs"></a>kube-proxy开启ipvs</h3><p>修改<code>ConfigMap</code>的<code>kube-system/kube-proxy</code>中的<code>config.conf</code>，<code>mode: "ipvs"</code></p>
<pre><code>kubectl edit cm kube-proxy -n kube-system
</code></pre>
<p>之后重启各个节点上的<code>kube-proxy pod</code>：</p>
<pre class="line-numbers language-sh"><code class="language-sh">kubectl get pod -n kube-system | grep kube-proxy | awk '{system("kubectl delete pod "$1" -n kube-system")}'
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-log"><code class="language-log">kubectl get pod -n kube-system | grep kube-proxy
kube-proxy-7fsrg                1/1     Running   0          3s
kube-proxy-k8vhm                1/1     Running   0          9s
 
kubectl logs kube-proxy-7fsrg  -n kube-system
I0703 04:42:33.308289       1 server_others.go:170] Using ipvs Proxier.
W0703 04:42:33.309074       1 proxier.go:401] IPVS scheduler not specified, use rr by default
I0703 04:42:33.309831       1 server.go:534] Version: v1.15.0
I0703 04:42:33.320088       1 conntrack.go:52] Setting nf_conntrack_max to 131072
I0703 04:42:33.320365       1 config.go:96] Starting endpoints config controller
I0703 04:42:33.320393       1 controller_utils.go:1029] Waiting for caches to sync for endpoints config controller
I0703 04:42:33.320455       1 config.go:187] Starting service config controller
I0703 04:42:33.320470       1 controller_utils.go:1029] Waiting for caches to sync for service config controller
I0703 04:42:33.420899       1 controller_utils.go:1036] Caches are synced for endpoints config controller
I0703 04:42:33.420969       1 controller_utils.go:1036] Caches are synced for service config controller
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>日志中打印出了Using ipvs Proxier，说明ipvs模式已经开启。</p>
<h2 id="Kubernetes常用组件部署"><a href="#Kubernetes常用组件部署" class="headerlink" title="Kubernetes常用组件部署"></a>Kubernetes常用组件部署</h2><p>越来越多的公司和团队开始使用Helm这个Kubernetes的包管理器，这里也将使用Helm安装Kubernetes的常用组件。</p>
<h3 id="Helm的安装"><a href="#Helm的安装" class="headerlink" title="Helm的安装"></a>Helm的安装</h3><p>Helm由客户端命helm令行工具和服务端tiller组成，Helm的安装十分简单。 下载helm命令行工具到master节点node1的<code>/usr/local/bin</code>下，这里下载的<code>2.14.1</code>版本.</p>
<p><strong>网络问题下载不了，可以直接在网上搜个压缩包拷进去即可！</strong></p>
<pre class="line-numbers language-sh"><code class="language-sh">curl -O https://get.helm.sh/helm-v2.14.1-linux-amd64.tar.gz
tar -zxvf helm-v2.14.1-linux-amd64.tar.gz
cd linux-amd64/
cp helm /usr/local/bin/
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>为了安装服务端tiller，还需要在这台机器上配置好kubectl工具和kubeconfig文件，确保kubectl工具可以在这台机器上访问apiserver且正常使用。</p>
</blockquote>
<p>因为Kubernetes APIServer开启了RBAC访问控制，所以需要创建tiller使用的service account: tiller并分配合适的角色给它。 详细内容可以查看helm文档中的<a href="https://helm.sh/docs/intro/">Role-based Access Control</a>。 这里简单起见直接分配<code>cluster-admin</code>这个集群内置的<code>ClusterRole</code>给它。创建<code>helm-rbac.yaml</code>文件：</p>
<pre class="line-numbers language-yml"><code class="language-yml">apiVersion: v1
kind: ServiceAccount
metadata:
  name: tiller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: tiller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: tiller
    namespace: kube-system
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sh"><code class="language-sh">kubectl create -f helm-rbac.yaml
serviceaccount/tiller created
clusterrolebinding.rbac.authorization.k8s.io/tiller created
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>接下来使用helm部署<code>tiller</code>:</p>
<pre class="line-numbers language-log"><code class="language-log">helm init --service-account tiller --skip-refresh
Creating /root/.helm
Creating /root/.helm/repository
Creating /root/.helm/repository/cache
Creating /root/.helm/repository/local
Creating /root/.helm/plugins
Creating /root/.helm/starters
Creating /root/.helm/cache/archive
Creating /root/.helm/repository/repositories.yaml
Adding stable repo with URL: https://kubernetes-charts.storage.googleapis.com
Adding local repo with URL: http://127.0.0.1:8879/charts
$HELM_HOME has been configured at /root/.helm.
 
Tiller (the Helm server-side component) has been installed into your Kubernetes Cluster.
 
Please note: by default, Tiller is deployed with an insecure 'allow unauthenticated users' policy.
To prevent this, run `helm init` with the --tiller-tls-verify flag.
For more information on securing your installation see: https://docs.helm.sh/using_helm/#securing-your-helm-installation
Happy Helming!
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>tiller</code>默认被部署在k8s集群中的<code>kube-system</code>这个<code>namespace</code>下：</p>
<pre class="line-numbers language-log"><code class="language-log">kubectl get pod -n kube-system -l app=helm
NAME                            READY   STATUS    RESTARTS   AGE
tiller-deploy-c4fd4cd68-dwkhv   1/1     Running   0          83s
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-log"><code class="language-log">helm version
Client: &version.Version{SemVer:"v2.14.1", GitCommit:"5270352a09c7e8b6e8c9593002a73535276507c0", GitTreeState:"clean"}
Server: &version.Version{SemVer:"v2.14.1", GitCommit:"5270352a09c7e8b6e8c9593002a73535276507c0", GitTreeState:"clean"}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="遇到的问题-1"><a href="#遇到的问题-1" class="headerlink" title="遇到的问题!!!!"></a>遇到的问题!!!!</h4><p>tiller可能因为网络问题安装失败，可以使用以下命令重置</p>
<pre><code>helm reset --force
</code></pre>
<p>然后安装tiller的时候指定image和stable url，这里用的阿里云的</p>
<pre class="line-numbers language-log"><code class="language-log">helm init --service-account tiller --skip-refresh -i registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.14.3 --stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>最后在node1上修改helm chart仓库的地址为azure提供的镜像地址：</p>
<pre class="line-numbers language-log"><code class="language-log">helm repo add stable http://mirror.azure.cn/kubernetes/charts
"stable" has been added to your repositories
 
helm repo list
NAME    URL                                     
stable  http://mirror.azure.cn/kubernetes/charts
local   http://127.0.0.1:8879/charts
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="使用Helm部署Nginx-Ingress"><a href="#使用Helm部署Nginx-Ingress" class="headerlink" title="使用Helm部署Nginx Ingress"></a>使用Helm部署Nginx Ingress</h3><p>为了便于将集群中的服务暴露到集群外部，需要使用Ingress。接下来使用Helm将Nginx Ingress部署到Kubernetes上。</p>
<blockquote>
<p>Nginx Ingress Controller被部署在Kubernetes的边缘节点上</p>
</blockquote>
<p>我们将<code>node1(192.168.99.11)</code>做为边缘节点，打上<code>Label</code>：</p>
<pre class="line-numbers language-log"><code class="language-log">kubectl label node node1 node-role.kubernetes.io/edge=
node/node1 labeled
 
 
kubectl get node
NAME    STATUS   ROLES         AGE    VERSION
node1   Ready    edge,master   138m   v1.15.0
node2   Ready    <none>        82m    v1.15.0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>stable/nginx-ingress</code> <code>chart</code>的值文件<code>ingress-nginx.yaml</code>如下：</p>
<pre class="line-numbers language-yml"><code class="language-yml">controller:
  replicaCount: 1
  hostNetwork: true
  nodeSelector:
    node-role.kubernetes.io/edge: ''
  affinity:
    podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
            - key: app
              operator: In
              values:
              - nginx-ingress
            - key: component
              operator: In
              values:
              - controller
          topologyKey: kubernetes.io/hostname
  tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: PreferNoSchedule
defaultBackend:
  nodeSelector:
    node-role.kubernetes.io/edge: ''
  tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: PreferNoSchedule
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>nginx ingress controller</code>的副本数<code>replicaCount</code>为<code>1</code>，将被调度到node1这个边缘节点上。</p>
<p>这里并没有指定nginx ingress controller service的<code>externalIPs</code>，而是通过<code>hostNetwork: true</code>设置nginx ingress controller使用宿主机网络。</p>
<pre class="line-numbers language-sh"><code class="language-sh">helm repo update
 
# helm安装指定chart版本 --version
helm install stable/nginx-ingress \
-n nginx-ingress \
--namespace ingress-nginx  \
-f ingress-nginx.yaml --verion 1.27.1
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-log"><code class="language-log">kubectl get pod -n ingress-nginx -o wide
NAME                                            READY   STATUS    RESTARTS   AGE   IP              NODE    NOMINATED NODE   READINESS GATES
nginx-ingress-controller-cc9b6d55b-pr8vr        1/1     Running   0          10m   192.168.99.11   node1   <none>           <none>
nginx-ingress-default-backend-cc888fd56-bf4h2   1/1     Running   0          10m   10.244.0.14     node1   <none>           <none>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果访问<code>http://192.168.99.11</code>返回<code>default backend</code>，则部署完成。</p>
<h4 id="遇到的问题-2"><a href="#遇到的问题-2" class="headerlink" title="遇到的问题!!!!"></a>遇到的问题!!!!</h4><blockquote>
<p>这里可能因为网络原因安装失败需要清理之前的<code>nginx-ingress</code>，建议提前下载好相关镜像。<br>使用<code>kubectl describe pod [name] -n [namespace]</code>看看默认拉取的是哪个版本的镜像，参考之前方法提前下载！</p>
</blockquote>
<pre><code>kubectl delete namespace/ingress-nginx
helm delete nginx-ingress
helm del --purge nginx-ingress
</code></pre>
<h3 id="使用Helm部署dashboard"><a href="#使用Helm部署dashboard" class="headerlink" title="使用Helm部署dashboard"></a>使用Helm部署dashboard</h3><h4 id="创建tls-secret："><a href="#创建tls-secret：" class="headerlink" title="创建tls secret："></a>创建<code>tls secret</code>：</h4><p>通过https进行访问必需要使用证书和密钥，在Kubernetes中可以通过配置一个加密凭证（TLS secret）来提供。创建一个自己签名的证书:</p>
<pre><code>openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout ./tls.key -out ./tls.crt -subj "/CN=192.168.1.210"
</code></pre>
<p>将会产生两个文件tls.key和tls.crt，你可以改成自己的文件名或放在特定的目录下。<strong>后面的192.168.1.210是我的服务器IP地址，你需要改成自己的。</strong></p>
<h4 id="安装tls-secret"><a href="#安装tls-secret" class="headerlink" title="安装tls secret:"></a>安装<code>tls secret</code>:</h4><p>将这两个文件的信息创建为一个Kubernetes的secret访问凭证，我将名称指定为<code>test-com-tls-secret</code>，这在后面的Ingress配置时将会用到。</p>
<blockquote>
<p>如果你修改了这个名字，注意后面的配置yaml文件也需要同步修改。</p>
</blockquote>
<pre><code>kubectl -n kube-system create secret tls test-com-tls-secret --key ./tls.key --cert ./tls.crt
</code></pre>
<h4 id="查看"><a href="#查看" class="headerlink" title="查看:"></a>查看:</h4><pre><code>kubectl get secret -n kube-system |grep test
</code></pre>
<h4 id="kubernetes-dashboard-yaml"><a href="#kubernetes-dashboard-yaml" class="headerlink" title="kubernetes-dashboard.yaml:"></a><code>kubernetes-dashboard.yaml</code>:</h4><blockquote>
<p>注意修改里面的<code>secretName</code>和<code>hosts</code></p>
</blockquote>
<pre class="line-numbers language-yml"><code class="language-yml">image:
  repository: k8s.gcr.io/kubernetes-dashboard-amd64
  tag: v1.10.1
ingress:
  enabled: true
  hosts: 
    - k8s.test.com
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
  tls:
    - secretName: test-com-tls-secret
      hosts:
      - k8s.test.com
nodeSelector:
    node-role.kubernetes.io/edge: ''
tolerations:
    - key: node-role.kubernetes.io/master
      operator: Exists
      effect: NoSchedule
    - key: node-role.kubernetes.io/master
      operator: Exists
      effect: PreferNoSchedule
rbac:
  clusterAdminRole: true
 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h4><pre><code>helm install stable/kubernetes-dashboard \
-n kubernetes-dashboard \
--namespace kube-system  \
-f kubernetes-dashboard.yaml
</code></pre>
<h4 id="查看："><a href="#查看：" class="headerlink" title="查看："></a>查看：</h4><pre class="line-numbers language-log"><code class="language-log">kubectl -n kube-system get secret | grep kubernetes-dashboard-token
kubernetes-dashboard-token-pkm2s                 kubernetes.io/service-account-token   3      3m7s
 
kubectl describe -n kube-system secret/kubernetes-dashboard-token-pkm2s
Name:         kubernetes-dashboard-token-pkm2s
Namespace:    kube-system
Labels:       <none>
Annotations:  kubernetes.io/service-account.name: kubernetes-dashboard
              kubernetes.io/service-account.uid: 2f0781dd-156a-11e9-b0f0-080027bb7c43
 
Type:  kubernetes.io/service-account-token
 
Data
====
ca.crt:     1025 bytes
namespace:  11 bytes
token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJrdWJlcm5ldGVzLWRhc2hib2FyZC10b2tlbi1wa20ycyIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjJmMDc4MWRkLTE1NmEtMTFlOS1iMGYwLTA4MDAyN2JiN2M0MyIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlLXN5c3RlbTprdWJlcm5ldGVzLWRhc2hib2FyZCJ9.24ad6ZgZMxdydpwlmYAiMxZ9VSIN7dDR7Q6-RLW0qC81ajXoQKHAyrEGpIonfld3gqbE0xO8nisskpmlkQra72-9X6sBPoByqIKyTsO83BQlME2sfOJemWD0HqzwSCjvSQa0x-bUlq9HgH2vEXzpFuSS6Svi7RbfzLXlEuggNoC4MfA4E2hF1OX_ml8iAKx-49y1BQQe5FGWyCyBSi1TD_-ZpVs44H5gIvsGK2kcvi0JT4oHXtWjjQBKLIWL7xxyRCSE4HmUZT2StIHnOwlX7IEIB0oBX4mPg2_xNGnqwcu-8OERU9IoqAAE2cZa0v3b5O2LMcJPrcxrVOukvRIumA
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h4><p>在dashboard的登录窗口使用上面的<code>token</code>登录，访问刚刚填写的hosts，如果是内网域名，需要在访问的那台机器上，在hosts文件中加入刚刚的域名和IP。<br><img data-src="/images/k8s1.png" alt="k8s"></p>
<h3 id="使用Helm部署metrics-server"><a href="#使用Helm部署metrics-server" class="headerlink" title="使用Helm部署metrics-server"></a>使用Helm部署metrics-server</h3><blockquote>
<p><code>heapster</code>从<code>Kubernetes 1.12</code>开始从Kubernetes各种安装脚本中移除。</p>
</blockquote>
<p>Kubernetes推荐使用<code>metrics-server</code>。我们这里也使用helm来部署<code>metrics-server</code>。</p>
<p><code>metrics-server.yaml</code>:</p>
<pre class="line-numbers language-yml"><code class="language-yml">replicaCount: 1
image:
    repository: hub.deri.org.cn/k8s/metrics-server-amd64
    tag: v0.3.5
    pullPolicy: IfNotPresent
args:
- --logtostderr
- --kubelet-insecure-tls
- --kubelet-preferred-address-types=InternalIP
nodeSelector:
    node-role.kubernetes.io/edge: ''
tolerations:
    - key: node-role.kubernetes.io/master
      operator: Exists
      effect: NoSchedule
    - key: node-role.kubernetes.io/master
      operator: Exists
      effect: PreferNoSchedule
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre><code>helm install stable/metrics-server \
-n metrics-server \
--namespace kube-system \
-f metrics-server.yaml
</code></pre>
<p>使用下面的命令可以获取到关于集群节点基本的指标信息：</p>
<pre class="line-numbers language-log"><code class="language-log">kubectl top node
NAME    CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%
node1   650m         32%    1276Mi          73%
node2   73m          3%     527Mi           30%
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-log"><code class="language-log">kubectl top pod -n kube-system
NAME                                    CPU(cores)   MEMORY(bytes)   
coredns-5c98db65d4-dr8lf                8m           7Mi             
coredns-5c98db65d4-lp8dg                6m           8Mi             
etcd-node1                              44m          46Mi            
kube-apiserver-node1                    74m          295Mi           
kube-controller-manager-node1           35m          50Mi            
kube-flannel-ds-amd64-7lwm9             2m           8Mi             
kube-flannel-ds-amd64-mm296             5m           9Mi             
kube-proxy-7fsrg                        1m           11Mi            
kube-proxy-k8vhm                        3m           11Mi            
kube-scheduler-node1                    8m           15Mi            
kubernetes-dashboard-848b8dd798-c4sc2   2m           14Mi            
metrics-server-8456fb6676-fwh2t         10m          19Mi            
tiller-deploy-7bf78cdbf7-9q94c          1m           16Mi
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.kubernetes.org.cn/5551.html">https://www.kubernetes.org.cn/5551.html</a></li>
<li><a href="https://www.cnblogs.com/hongdada/p/11250293.html">https://www.cnblogs.com/hongdada/p/11250293.html</a></li>
<li><a href="https://www.jianshu.com/p/03eba1513c17">https://www.jianshu.com/p/03eba1513c17</a></li>
</ul>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>ladp简介</title>
    <url>/ladp-jian-jie/</url>
    <content><![CDATA[<h3 id="ladp简介"><a href="#ladp简介" class="headerlink" title="ladp简介"></a>ladp简介</h3><ul>
<li><a href="http://www.ldap.org.cn/">LDAP中文网</a></li>
</ul>
<p><code>LDAP</code>是<code>轻量目录访问协议</code>，英文全称是<code>LIGHTWEIGHT DIRECTORY ACCESS PROTOCOL</code>，一般都简称为<code>LDAP</code>.</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>读写效率非常高</li>
</ul>
<p>对读操作进行优化的一种数据库，在读写比例大于7比1的情况下，LDAP会体现出极高的性能。这个特性正适合了身份认证的需要。</p>
<ul>
<li>开放的标准协议</li>
</ul>
<p>不同于SQL数据库，LDAP的客户端是跨平台的，并且对几乎所有的程序语言都有标准的API接口。即使是改变了LDAP数据库产品的提供厂商，开发人员也不用担心需要修改程序才能适应新的数据库产品。这个优势是使用SQL语言进行查询的关系型数据库难以达到的。</p>
<ul>
<li>强认证方式</li>
</ul>
<p>可以达到很高的安全级别。在国际化方面，LDAP使用了UTF-8编码来存储各种语言的字符。</p>
<ul>
<li><strong>OpenLDAP</strong>开源实现</li>
</ul>
<p>OpenLDAP是其中最轻便且消耗系统资源最少的一个。OpenLDAP是开源软件，近年国内很多公司开发的LDAP产品都是基于OpenLDAP开发的。</p>
<ul>
<li>灵活添加数据类型</li>
</ul>
<p>LDAP是根据schema的内容定义各种属性之间的从属关系及匹配模式的。例如在关系型数据库中如果要为用户增加一个属性，就要在用户表中增加一个字段，在拥有庞大数量用户的情况下是十分困难的，需要改变表结构。但LDAP只需要在schema中加入新的属性，不会由于用户的属性增多而影响查询性能</p>
<ul>
<li>数据存储是树结构</li>
</ul>
<p>整棵树的任何一个分支都可以单独放在一个服务器中进行分布式管理，不仅有利于做服务器的负载均衡，还方便了跨地域的服务器部署。这个优势在查询负载大或企业在不同地域都设有分公司的时候体现尤为明显</p>
<ul>
<li>总结<ul>
<li>LDAP 是一种网络协议而不是数据库，而且LDAP的目录不是关系型的，没有RDBMS那么复杂，</li>
<li>LDAP不支持数据库的Transaction机制，纯粹的无状态、请求-响应的工作模式。</li>
<li>LDAP不能存储BLOB，LDAP的读写操作是非对称的，读非常方便，写比较麻烦，</li>
<li>LDAP支持复杂的查询过滤器(filter)，可以完成很多类似数据库的查询功能。</li>
<li>LDAP使用树状结构，接近于公司组织结构、文件目录结构、域名结构等我们耳熟能详的东东。 </li>
<li>LDAP使用简单、接口标准，并支持SSL访问。</li>
</ul>
</li>
</ul>
<h3 id="ldap应用场景"><a href="#ldap应用场景" class="headerlink" title="ldap应用场景"></a>ldap应用场景</h3><ol>
<li>网络服务：DNS服务</li>
<li>统一认证服务：Linux PAM (ssh, login, cvs. . . )</li>
<li>Apache访问控制</li>
<li>各种服务登录(ftpd, php based, perl based, python based. . . )</li>
<li>个人信息类，如地址簿</li>
<li>服务器信息，如帐号管理、邮件服务等</li>
</ol>
]]></content>
      <categories>
        <category>ldap</category>
      </categories>
      <tags>
        <tag>ldap</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes集群发布外部服务【mysql、redis并测试】</title>
    <url>/kubernetes-ji-qun-fa-bu-wai-bu-fu-wu-mysql-redis-bing-ce-shi/</url>
    <content><![CDATA[<p>有时候我们需要将<code>k8s</code>集群外的服务引入到集群内部来，便于集群内部服务调用，我可以使用<code>Endpoints</code>.</p>
<h3 id="引入外部myql"><a href="#引入外部myql" class="headerlink" title="引入外部myql"></a>引入外部<code>myql</code></h3><h4 id="编写k8s-mysql-endpoints-yaml"><a href="#编写k8s-mysql-endpoints-yaml" class="headerlink" title="编写k8s-mysql-endpoints.yaml"></a>编写<code>k8s-mysql-endpoints.yaml</code></h4><p>为外部<code>Mysql</code>创建<code>Endpoints</code></p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Endpoints
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default
<span class="token key atrule">subsets</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">addresses</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">ip</span><span class="token punctuation">:</span> 192.168.1.11
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">20030</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>可以使用命令<code>kubectl get endpoints</code>查看是否创建完成</li>
<li><code>kubectl describe  endpoints mysql</code> 查看具体描述</li>
</ol>
<h4 id="编写k8s-mysql-service-yaml"><a href="#编写k8s-mysql-service-yaml" class="headerlink" title="编写k8s-mysql-service.yaml"></a>编写<code>k8s-mysql-service.yaml</code></h4><p>编写<code>k8s-mysql-service.yaml</code>，为<code>endpoints</code>发布成内部<code>pod</code>可以调用的服务</p>
<blockquote>
<p>注意<code>metadata.name</code>与<code>k8s-mysql-endpoints.yaml</code>中<code>metadata.name</code>保持一致，此处均为<code>mysql</code>.</p>
</blockquote>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">ports</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">20030</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>可以使用命令 <code>kubectl get svc</code> 查看是否服务创建完成</li>
<li><code>kubectl describe  svc mysql</code> 查看具体服务描述</li>
</ol>
<h4 id="测试endpoints是否生效"><a href="#测试endpoints是否生效" class="headerlink" title="测试endpoints是否生效"></a>测试endpoints是否生效</h4><p>为了方便测试<code>endpoints</code>是否生效，我们修改上述的<code>k8s-mysql-service.yaml</code>配置 </p>
<blockquote>
<ol>
<li>我们将<code>type</code>类型改为<code>NodePort</code>，这样可以设定宿主机上的映射端口号<code>nodePort：30030</code>，这样直接通过宿主机<code>IP:30030</code>就可以调用到<code>mysql</code>服务。</li>
<li>注意删除了创建好的<code>service</code>，对应的<code>endpoints</code>也会删除掉，需要重新创建！测试的时候注意！</li>
</ol>
</blockquote>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort
  <span class="token key atrule">ports</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">20030</span>
    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">20030</span>
    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP
    <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">30030</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="使用Navicat测试"><a href="#使用Navicat测试" class="headerlink" title="使用Navicat测试"></a>使用<code>Navicat</code>测试</h4><p>使用<code>Navicat</code>测试，输入宿主机<code>IP</code>和端口<code>30030</code>（用户名密码还是外部数据库原本的用户名密码），测试连接！成功！证明了通过<code>Endpoints</code>机制可以将外部服务发布成<code>k8s</code>内部的服务！</p>
<blockquote>
<p><strong>发布外部的<code>redis</code>服务也是同理，只需要修改<code>name</code>、<code>port</code>、<code>ip</code>等参数即可！</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>endpoints</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-crontab定时任务</title>
    <url>/linux-crontab-ding-shi-ren-wu/</url>
    <content><![CDATA[<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">crontab</span> <span class="token punctuation">[</span>-u username<span class="token punctuation">]</span>　　　　//省略用户表表示操作当前用户的crontab
    -e      <span class="token punctuation">(</span>编辑工作表<span class="token punctuation">)</span>
    -l      <span class="token punctuation">(</span>列出工作表里的命令<span class="token punctuation">)</span>
    -r      <span class="token punctuation">(</span>删除工作作<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># cron表达式说明：</span>
*    *    *    *    *
-    -    -    -    -
<span class="token operator">|</span>    <span class="token operator">|</span>    <span class="token operator">|</span>    <span class="token operator">|</span>    <span class="token operator">|</span>
<span class="token operator">|</span>    <span class="token operator">|</span>    <span class="token operator">|</span>    <span class="token operator">|</span>    +----- 周几 <span class="token punctuation">(</span>0 - 7<span class="token punctuation">)</span> <span class="token punctuation">(</span>Sunday<span class="token operator">=</span>0 or 7<span class="token punctuation">)</span> OR sun,mon,tue,wed,thu,fri,sat
<span class="token operator">|</span>    <span class="token operator">|</span>    <span class="token operator">|</span>    +---------- 月 <span class="token punctuation">(</span>1 - 12<span class="token punctuation">)</span> OR jan,feb,mar,apr <span class="token punctuation">..</span>.
<span class="token operator">|</span>    <span class="token operator">|</span>    +--------------- 日 <span class="token punctuation">(</span>1 - 31<span class="token punctuation">)</span>
<span class="token operator">|</span>    +-------------------- 小时 <span class="token punctuation">(</span>0 - 23<span class="token punctuation">)</span>
+------------------------- 分钟 <span class="token punctuation">(</span>0 - 59<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 每月的最后1天</span>
0 0 L * * * <span class="token keyword">echo</span> <span class="token string">"last"</span> <span class="token operator">>></span> /tmp/test.txt
<span class="token comment" spellcheck="true"># 每1分钟执行一次myCommand</span>
* * * * * myCommand
<span class="token comment" spellcheck="true"># 每小时的第3和第15分钟执行</span>
3,15 * * * * myCommand
<span class="token comment" spellcheck="true"># 在上午8点到11点的第3和第15分钟执行</span>
3,15 8-11 * * * myCommand
<span class="token comment" spellcheck="true"># 每星期六的晚上11 : 00 pm重启smb</span>
0 23 * * 6 /etc/init.d/smb restart
<span class="token comment" spellcheck="true"># 每一小时重启smb</span>
* */1 * * * /etc/init.d/smb restart
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>crontab</tag>
      </tags>
  </entry>
  <entry>
    <title>linux常用运维工具</title>
    <url>/linux-chang-yong-yun-wei-gong-ju/</url>
    <content><![CDATA[<h3 id="查看CPU"><a href="#查看CPU" class="headerlink" title="查看CPU"></a>查看CPU</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 最常使用命令</span>
<span class="token function">top</span>

<span class="token comment" spellcheck="true"># vmstat 命令报告关于线程、虚拟内存、磁盘、陷阱和 CPU 活动的统计信息</span>
<span class="token function">vmstat</span>
<span class="token comment" spellcheck="true"># 2秒一次刷新5次</span>
<span class="token function">vmstat</span> 2 5 -w
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="查看磁盘"><a href="#查看磁盘" class="headerlink" title="查看磁盘"></a>查看磁盘</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 安装</span>
yum <span class="token function">install</span> sysstat
<span class="token comment" spellcheck="true"># r/s 和 w/s 分别是每秒的读操作和写操作,而rKB/s 和wKB/s 列以每秒千字节为单位显示了读和写的数据量</span>
iostat -dx
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash">yum -y <span class="token function">install</span> iotop 
<span class="token comment" spellcheck="true"># 查看每个进程使用的磁盘IO</span>
iotop
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 可以看出磁盘空间使用情况</span>
yum -y <span class="token function">install</span> agedu
<span class="token comment" spellcheck="true"># 扫描全盘</span>
agedu -s /
<span class="token comment" spellcheck="true"># 生成一个网页可以访问查看,有访问权限要求</span>
<span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># agedu -w --address 192.168.41.128:8071</span>
Using Linux /proc/net magic authentication
URL: http://192.168.41.128:8071/ 
<span class="token comment" spellcheck="true"># 可以直接访问</span>
agedu -w --address 192.168.41.128:8072 --auth none
URL: http://192.168.41.128:8072/
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="查看网络"><a href="#查看网络" class="headerlink" title="查看网络"></a>查看网络</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 安装</span>
yum -y <span class="token function">install</span> epel-release
yum -y <span class="token function">install</span> nload
<span class="token comment" spellcheck="true"># 查看,命令后面加网卡</span>
nload ens33
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># iftop命令</span>
yum <span class="token function">install</span> iftop

iftop
iftop -i eth1
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 可以查看每个进程使用的网络带宽</span>
yum <span class="token function">install</span> nethogs

nethogs
nethogs ens33
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 安装</span>
yum <span class="token function">install</span> -y nmap

<span class="token comment" spellcheck="true"># 扫描所有开放的端口</span>
nmap 192.168.41.1
<span class="token comment" spellcheck="true"># -p 端口范围 主机IP</span>
nmap -p0-1000 192.168.41.1
<span class="token comment" spellcheck="true"># -vv参数设置对结果的详细输出</span>
nmap -p902 -vv 192.168.41.1
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux文件内容比较-diff命令</title>
    <url>/linux-wen-jian-nei-rong-bi-jiao-diff-ming-ling/</url>
    <content><![CDATA[<h3 id="diff命令说明"><a href="#diff命令说明" class="headerlink" title="diff命令说明"></a>diff命令说明</h3><p>Linux diff命令用于比较文件的差异。</p>
<p>diff以逐行的方式，比较文本文件的异同处。如果指定要比较目录，则diff会比较目录中相同文件名的文件，但不会比较其中子目录。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-sh"><code class="language-sh">diff <文件1> <文件2> [附加参数]
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class="line-numbers language-sh"><code class="language-sh">diff test1.txt test2.txt
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><ul>
<li><code>-b</code>或<code>--ignore-space-change</code> 　不检查空格字符的不同</li>
<li><code>-B</code>或<code>--ignore-blank-lines</code> 　不检查空白行</li>
<li><code>-c </code>　显示全部内文，并标出不同之处</li>
<li><code>-H</code>或<code>--speed-large-files</code>　比较大文件时，可加快速度</li>
<li><code>-i</code>或<code>--ignore-case</code> 　不检查大小写的不同</li>
<li><code>-y</code>或<code>--side-by-side</code> 　以并列的方式显示文件的异同之处</li>
<li><code>-W</code>&lt;宽度&gt;或<code>--width</code>&lt;宽度&gt; 　在使用-y参数时，指定栏宽</li>
</ul>
<h3 id="结果说明"><a href="#结果说明" class="headerlink" title="结果说明"></a>结果说明</h3><ul>
<li><code>|</code>表示前后2个文件内容有不同</li>
<li><code>&lt;</code>表示后面文件比前面文件少了1行内容</li>
<li><code>&gt;</code>表示后面文件比前面文件多了1行内容</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>diff</tag>
      </tags>
  </entry>
  <entry>
    <title>linux查询目录下指定格式最大文件</title>
    <url>/linux-cha-xun-mu-lu-xia-zui-da-wen-jian/</url>
    <content><![CDATA[<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><pre class="line-numbers language-sh"><code class="language-sh"># 指定格式
ls -lSh `find /var/lib/docker -type f -name "*.log"` | head -n 5
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sh"><code class="language-sh"># 所有文件格式按大小排序
find /var/lib/docker -type f -printf '%s %p\n' | sort -rn | head -10
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sh"><code class="language-sh"># 查找大文件
find . -type f -size +800M  -print0 | xargs -0 du -h | sort -nr | head -10
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h3><ul>
<li><code>type</code>: <code>b:块设备文档</code>、<code>d:目录</code>、<code>c:字符设备文档</code>、<code>P:管道文档</code>、<code>l:符号链接文档</code>、<code>f:普通文档 </code>.</li>
<li><code>name</code>: 按文件名查找。支持<code>*</code>模糊匹配.</li>
<li><code>size</code>: 文件大小。<code>+</code>表示大于，<code>-</code>表示小于。支持<code>k</code>,<code>M</code>,<code>G</code>单位.</li>
</ul>
<h3 id="xargs命令"><a href="#xargs命令" class="headerlink" title="xargs命令"></a>xargs命令</h3><p>给命令传递参数的一个过滤器</p>
<pre class="line-numbers language-sh"><code class="language-sh">somecommand |xargs -item  command
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li><code>xargs -0</code> 将 <code>\0</code> 作为定界符.</li>
<li>删除指定格式文件</li>
</ul>
<pre class="line-numbers language-sh"><code class="language-sh">find . -type f -name "*.log" -print0 | xargs -0 rm -f
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>统计文件行数</li>
</ul>
<pre class="line-numbers language-sh"><code class="language-sh">find . -type f -name "*.php" -print0 | xargs -0 wc -l
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>下载文件中所有url链接</li>
</ul>
<pre class="line-numbers language-sh"><code class="language-sh">cat url-list.txt | xargs wget -c
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>linux虚拟机设置固定IP并且可以访问外网配置</title>
    <url>/linux-xu-ni-ji-she-zhi-gu-ding-ip-bing-qie-ke-yi-fang-wen-wai-wang-pei-zhi/</url>
    <content><![CDATA[<h3 id="设置网络模式"><a href="#设置网络模式" class="headerlink" title="设置网络模式"></a>设置网络模式</h3><p><img data-src="/images/nat.jpg" alt="NAT模式"></p>
<h3 id="设置固定ip"><a href="#设置固定ip" class="headerlink" title="设置固定ip"></a>设置固定ip</h3><pre><code>#编辑以下文件
vi /etc/sysconfig/network-scripts/ifcfg-ens33
 
#修改以下内容,注意属性BOOTPROTO,ONBOOT,IPADDR,NETMASK,GATEWAY
TYPE=Ethernet
PROXY_METHOD=none
BROWSER_ONLY=no
BOOTPROTO=static
DEFROUTE=yes
IPV4_FAILURE_FATAL=no
IPV6INIT=yes
IPV6_AUTOCONF=yes
IPV6_DEFROUTE=yes
IPV6_FAILURE_FATAL=no
IPV6_ADDR_GEN_MODE=stable-privacy
NAME=ens33
UUID=e27ede3e-740b-4241-adf1-e979fd2788e9
DEVICE=ens33
ONBOOT=yes
IPADDR=192.168.41.128
NETMASK=255.255.255.0
GATEWAY=192.168.41.2
 
#重启网络
service network restart
</code></pre>
<h3 id="设置nameserver"><a href="#设置nameserver" class="headerlink" title="设置nameserver"></a>设置nameserver</h3><pre><code>#编辑/etc/resolv.conf,随便增加一些国内DNS服务器IP，例如：
nameserver 114.114.114.114
nameserver 119.29.29.29
nameserver 114.114.114.114
nameserver 223.5.5.5
nameserver 8.8.8.8
 
#重启网络服务，注意和上一步重启网络要分开执行，不然本文件内容会因为上一步重启而清空
service network restart
</code></pre>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>虚拟机</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>linux设置swap</title>
    <url>/linux-she-zhi-swap/</url>
    <content><![CDATA[<h3 id="查看swap状态"><a href="#查看swap状态" class="headerlink" title="查看swap状态"></a>查看swap状态</h3><pre class="line-numbers language-sh"><code class="language-sh">[root@ecs ~]# free -m
              total        used        free      shared  buff/cache   available
Mem:           7820        4825         133         896        2862        1818
Swap:             0           0           0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sh"><code class="language-sh"># 无返回
swapon -s
# 空
cat /proc/swaps
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="通过文件设置swap"><a href="#通过文件设置swap" class="headerlink" title="通过文件设置swap"></a>通过文件设置swap</h3><ol>
<li>新建swap交换文件</li>
</ol>
<pre class="line-numbers language-sh"><code class="language-sh"># count设置文件大小,4G
dd if=/dev/zero of=/home/swap bs=1024 count=4096000
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ol start="2">
<li>制作为swap格式文件</li>
</ol>
<pre class="line-numbers language-sh"><code class="language-sh">mkswap /home/swap
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="3">
<li>挂载swap分区</li>
</ol>
<pre class="line-numbers language-sh"><code class="language-sh">swapon /home/swap
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>此时通过<code>free</code>命令已经可以看到<code>swap</code>分区了,但是重启失效.</p>
<ol start="4">
<li>设置持久生效</li>
</ol>
<pre class="line-numbers language-sh"><code class="language-sh">vi /etc/fstab
# 在文件最后一行加上
/home/swap swap swap default 0 0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="删除文件swap分区"><a href="#删除文件swap分区" class="headerlink" title="删除文件swap分区"></a>删除文件swap分区</h3><ol>
<li>先停止swap分区</li>
</ol>
<pre class="line-numbers language-sh"><code class="language-sh">swapoff /home/swap
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="2">
<li>删除swap分区文件</li>
</ol>
<pre class="line-numbers language-sh"><code class="language-sh">rm -rf /home/swap
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="3">
<li>删除自动装载配置</li>
</ol>
<pre class="line-numbers language-sh"><code class="language-sh">vi /etc/fstab
# 删除刚刚 增加的配置
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="通过分区配置swap"><a href="#通过分区配置swap" class="headerlink" title="通过分区配置swap"></a>通过分区配置swap</h3><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://blog.csdn.net/weixin_43228740/article/details/83620958">参考链接</a></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>swap</tag>
      </tags>
  </entry>
  <entry>
    <title>logback关闭启动时自身调试信息打印</title>
    <url>/logback-guan-bi-qi-dong-shi-zi-shen-diao-shi-xin-xi-da-yin/</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>使用logback打印日志，启动服务时logback会打印一些自身的调试信息如下，会打印它检查了哪些配置、看见了哪些配置：</p>
<pre class="line-numbers language-log"><code class="language-log">18:00:22,729 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback-test.xml]
18:00:22,729 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback.groovy]
18:00:22,729 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Found resource [logback.xml] at [file:/D:/DeriGateway/DBCompare/target/classes/logback.xml]
18:00:22,770 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - debug attribute not set
18:00:22,775 |-INFO in ch.qos.logback.core.joran.action.TimestampAction - Using current interpretation time, i.e. now, as time reference.
18:00:22,788 |-INFO in ch.qos.logback.core.joran.action.TimestampAction - Adding property to the context with key="DATETIME" and value="2020-04-01 18:00:22" to the LOCAL scope
18:00:22,788 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.ConsoleAppender]
18:00:22,793 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [STDOUT]
18:00:22,796 |-INFO in ch.qos.logback.core.joran.action.NestedComplexPropertyIA - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] property
18:00:22,813 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.rolling.RollingFileAppender]
18:00:22,816 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [FILEOUT]
18:00:22,817 |-INFO in ch.qos.logback.core.joran.action.NestedComplexPropertyIA - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] property
18:00:22,828 |-INFO in c.q.l.core.rolling.TimeBasedRollingPolicy@984849465 - No compression will be used
18:00:22,829 |-INFO in c.q.l.core.rolling.TimeBasedRollingPolicy@984849465 - Will use the pattern ./logs//log.%d.%i.log for the active file
18:00:22,830 |-INFO in ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP@2eee9593 - The date pattern is 'yyyy-MM-dd' from file name pattern './logs//log.%d.%i.log'.
18:00:22,830 |-INFO in ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP@2eee9593 - Roll-over at midnight.
18:00:22,832 |-INFO in ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP@2eee9593 - Setting initial period to Wed Apr 01 18:00:22 CST 2020
18:00:22,833 |-WARN in ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP@2eee9593 - SizeAndTimeBasedFNATP is deprecated. Use SizeAndTimeBasedRollingPolicy instead
18:00:22,833 |-WARN in ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP@2eee9593 - For more information see http://logback.qos.ch/manual/appenders.html#SizeAndTimeBasedRollingPolicy
18:00:22,834 |-INFO in ch.qos.logback.core.rolling.RollingFileAppender[FILEOUT] - Active log file name: ./logs//log.2020-04-01.0.log
18:00:22,834 |-INFO in ch.qos.logback.core.rolling.RollingFileAppender[FILEOUT] - File property is set to [null]
18:00:22,835 |-INFO in ch.qos.logback.classic.joran.action.RootLoggerAction - Setting level of ROOT logger to INFO
18:00:22,835 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [STDOUT] to Logger[ROOT]
18:00:22,835 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [FILEOUT] to Logger[ROOT]
18:00:22,835 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - End of configuration.
18:00:22,836 |-INFO in ch.qos.logback.classic.joran.JoranConfigurator@7907ec20 - Registering current configuration as safe fallback point
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="关闭logback自身调试信息打印"><a href="#关闭logback自身调试信息打印" class="headerlink" title="关闭logback自身调试信息打印"></a>关闭logback自身调试信息打印</h3><p>只需增加一行以下配置即可。将状态信息监听器设置为无操作监听器。</p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>statusListener</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.status.NopStatusListener<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="完整logback-xml"><a href="#完整logback-xml" class="headerlink" title="完整logback.xml"></a>完整logback.xml</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>statusListener</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.status.NopStatusListener<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ROOT<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./logs/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FILESIZE<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100MB<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MAXHISTORY<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timestamp</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DATETIME<span class="token punctuation">"</span></span> <span class="token attr-name">datePattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>yyyy-MM-dd HH:mm:ss<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 控制台打印 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>[%-5level] %d{${DATETIME}} [%thread] %logger{36} - %m%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 输入到文件，按日期和文件大小 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FILEOUT<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>[%-5level] %d{${DATETIME}} [%thread] %logger{36} - %m%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>${ROOT}/log.%d.%i.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>${MAXHISTORY}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>${FILESIZE}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- Logger 根目录 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FILEOUT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>logback</tag>
      </tags>
  </entry>
  <entry>
    <title>logback配置文件模板</title>
    <url>/logback-pei-zhi-wen-jian-mo-ban/</url>
    <content><![CDATA[<h2 id="Logback默认配置的步骤"><a href="#Logback默认配置的步骤" class="headerlink" title="Logback默认配置的步骤"></a>Logback默认配置的步骤</h2><ol>
<li>尝试在 classpath下查找文件logback-test.xml；</li>
<li>如果文件不存在，则查找文件logback.xml；</li>
<li>如果两个文件都不存在，logback用BasicConfigurator自动对自己进行配置，这会导致记录输出到控制台。</li>
</ol>
<h2 id="logback配置文件模板"><a href="#logback配置文件模板" class="headerlink" title="logback配置文件模板"></a>logback配置文件模板</h2><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>statusListener</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.status.NopStatusListener<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ROOT<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./logs/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FILESIZE<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100MB<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MAXHISTORY<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timestamp</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DATETIME<span class="token punctuation">"</span></span> <span class="token attr-name">datePattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>yyyy-MM-dd HH:mm:ss<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 控制台打印 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>[%-5level] %d{yyyy-MM-dd HH:mm:ss:SSS} [%thread] %logger{36} - %m%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 输入到文件，按日期和文件大小 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FILEOUT<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>[%-5level] %d{yyyy-MM-dd HH:mm:ss:SSS} [%thread] %logger{36} - %m%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>${ROOT}/log.%d.%i.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>${MAXHISTORY}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>${FILESIZE}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- Logger 根目录 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FILEOUT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>logback</tag>
        <tag>logback配置</tag>
      </tags>
  </entry>
  <entry>
    <title>logrotate配置与使用</title>
    <url>/logrotate-pei-zhi-yu-shi-yong/</url>
    <content><![CDATA[<h3 id="logrotate"><a href="#logrotate" class="headerlink" title="logrotate"></a>logrotate</h3><p><code>logrotate</code>是linux自带的一个日志轮转工具,可以自动对日志进行截断（或轮循）、压缩以及删除旧的日志文件。如：配置<code>/var/log/nginx.log</code>每周轮询并删除3周前的日志.</p>
<h3 id="logrotate配置"><a href="#logrotate配置" class="headerlink" title="logrotate配置"></a>logrotate配置</h3><blockquote>
<p><code>logrotate</code>默认配置文件：<code>/etc/logrotate.conf</code></p>
</blockquote>
<h3 id="需求：配置对docker容器日志轮询"><a href="#需求：配置对docker容器日志轮询" class="headerlink" title="需求：配置对docker容器日志轮询"></a>需求：配置对docker容器日志轮询</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 进入到/etc/logrotate.d/目录下,该目录下有logrotate默认配置的一些规则</span>
<span class="token comment" spellcheck="true"># 创建一个新的文件container</span>
<span class="token comment" spellcheck="true"># 配置规则,更多规则可以自行搜索</span>
/var/lib/docker/containers/*/*-json.log
<span class="token punctuation">{</span>
    create 644 root root
    missingok
    weekly
    copytruncate
    rotate 3
    size<span class="token operator">=</span>100M
    notifempty
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>限制docker容器日志大小的方式不仅仅只有logrotate方式,此处仅以容器日志为例.</p>
</blockquote>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># debug模式测试配置文件</span>
logrotate -d /etc/logrotate.d/xxxxx
<span class="token comment" spellcheck="true"># 手动运行</span>
logrotate -f /etc/logrotate.d/xxxxx
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="限制docker容器日志"><a href="#限制docker容器日志" class="headerlink" title="限制docker容器日志"></a>限制docker容器日志</h3><ol>
<li>统一限制</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 修改docker配置：vim /etc/docker/daemon.json</span>
<span class="token punctuation">{</span>
  <span class="token string">"log-driver"</span><span class="token keyword">:</span><span class="token string">"json-file"</span>,
  <span class="token string">"log-opts"</span><span class="token keyword">:</span> <span class="token punctuation">{</span><span class="token string">"max-size"</span><span class="token keyword">:</span><span class="token string">"500m"</span>, <span class="token string">"max-file"</span><span class="token keyword">:</span><span class="token string">"3"</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true"># 重启</span>
systemctl daemon-reload
systemctl restart docker
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>单独限制</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash">docker run --name <span class="token function">test</span> --log-opt max-size<span class="token operator">=</span>100m --log-opt max-file<span class="token operator">=</span>2 -d nginx
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>log</category>
      </categories>
  </entry>
  <entry>
    <title>loki持久化</title>
    <url>/loki-chi-jiu-hua/</url>
    <content><![CDATA[<h3 id="查看配置"><a href="#查看配置" class="headerlink" title="查看配置"></a>查看配置</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 查看helm安装Loki默认配置</span>
<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># helm inspect values loki/loki > loki.yaml</span>
<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat loki.yaml</span>
<span class="token comment" spellcheck="true"># 部分配置</span>
<span class="token key atrule">config</span><span class="token punctuation">:</span>
  <span class="token key atrule">storage_config</span><span class="token punctuation">:</span>
    <span class="token key atrule">boltdb</span><span class="token punctuation">:</span>
      <span class="token key atrule">directory</span><span class="token punctuation">:</span> /data/loki/index
    <span class="token key atrule">filesystem</span><span class="token punctuation">:</span>
      <span class="token key atrule">directory</span><span class="token punctuation">:</span> /data/loki/chunks
  <span class="token key atrule">table_manager</span><span class="token punctuation">:</span>
    <span class="token key atrule">retention_deletes_enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">retention_period</span><span class="token punctuation">:</span> <span class="token number">0</span>

<span class="token key atrule">image</span><span class="token punctuation">:</span>
  <span class="token key atrule">repository</span><span class="token punctuation">:</span> grafana/loki
  <span class="token key atrule">tag</span><span class="token punctuation">:</span> v1.2.0
  <span class="token key atrule">pullPolicy</span><span class="token punctuation">:</span> IfNotPresent

<span class="token comment" spellcheck="true">## ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/</span>
<span class="token comment" spellcheck="true">## If you set enabled as "True", you need :</span>
<span class="token comment" spellcheck="true">## - create a pv which above 10Gi and has same namespace with loki</span>
<span class="token comment" spellcheck="true">## - keep storageClassName same with below setting</span>
<span class="token key atrule">persistence</span><span class="token punctuation">:</span>
  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> ReadWriteOnce
  <span class="token key atrule">size</span><span class="token punctuation">:</span> 10Gi
  <span class="token key atrule">annotations</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token comment" spellcheck="true"># subPath: ""</span>
  <span class="token comment" spellcheck="true"># existingClaim:</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="配置循环删除"><a href="#配置循环删除" class="headerlink" title="配置循环删除"></a>配置循环删除</h3><ul>
<li>参考[<a href="https://github.com/grafana/loki/blob/v1.5.0/docs/operations/storage/retention.md]">https://github.com/grafana/loki/blob/v1.5.0/docs/operations/storage/retention.md]</a></li>
</ul>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">config</span><span class="token punctuation">:</span>
  <span class="token key atrule">table_manager</span><span class="token punctuation">:</span>
    <span class="token key atrule">retention_deletes_enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token comment" spellcheck="true"># 注意是168的倍数:168 * 4</span>
    <span class="token key atrule">retention_period</span><span class="token punctuation">:</span> 672h
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="配置持久化"><a href="#配置持久化" class="headerlink" title="配置持久化"></a>配置持久化</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">persistence</span><span class="token punctuation">:</span>
  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> ReadWriteOnce
  <span class="token key atrule">size</span><span class="token punctuation">:</span> 100Gi
  <span class="token key atrule">annotations</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token key atrule">existingClaim</span><span class="token punctuation">:</span> loki<span class="token punctuation">-</span>pvc
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>创建<code>PVC</code></p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolumeClaim
<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> loki<span class="token punctuation">-</span>pvc
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> monitoring
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> ReadWriteOnce
  <span class="token key atrule">resources</span><span class="token punctuation">:</span>
    <span class="token key atrule">requests</span><span class="token punctuation">:</span>
        <span class="token key atrule">storage</span><span class="token punctuation">:</span> 100Gi
  <span class="token key atrule">storageClassName</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>client
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 卸载重新安装</span>
helm delete --purge loki
helm <span class="token function">install</span> loki/loki --name loki --namespace monitoring -f loki.yaml

<span class="token comment" spellcheck="true"># 升级命令</span>
helm upgrade loki --values loki.yaml loki/loki
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>loki</tag>
      </tags>
  </entry>
  <entry>
    <title>loki集群配置</title>
    <url>/loki-ji-qun-pei-zhi/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>通过 helm 部署的 Loki 默认都是采用一个副本，如果想部署集群方案直接将 Loki 副本数改成 3 或者其它数是不行的，网上集群相关的文档也比较少，不过在 Loki 官方仓库 production 目录下有相关的配置样例，具体参考 <a href="https://github.com/grafana/loki/blob/main/production/docker/config/loki-docker-memberlist-boltdb-shipper.yaml">production</a>。</p>
<h3 id="Loki组件"><a href="#Loki组件" class="headerlink" title="Loki组件"></a>Loki组件</h3><p><img data-src="/images/loki5.png" alt="loki"></p>
<ul>
<li>Distributor（分配器）<br>Distributor主要负责分发从客户端上报的日志, 在进行完日志的校验之后便会分发给ingester处理. Distributor使用了一致性哈希以及一个可以配置的副本数来决定不同的日志流的后端ingester. 哈希环信息的存储使用了Consul. Ingester会根据自身的状态注册在哈希环上来标识自身可提供服务的状态. Distributor会使用注册租户id和标签集时作为哈希的输入, 计算出对应的哈希环位置, 并找到对应的ingester.</li>
<li>Ingester（采集器）<br>Ingester是loki中比较核心的服务, 该服务将从Distributor发送来的日志进行转储到后端存储, 并给Querier提供仍在内存中未写盘的数据查询功能.<br>Ingester注册在哈希环上的状态有PENDING, JOINING, ACTIVE, LEAVING, UNHEALTHY, 除了ACTIVE状态外, 其余状态都只会提供部分服务。<br>在存储到真正的存储前, 日志流只有按顺序收到才会被处理, Ingester会按照标签的组合set构建若干压缩过的chunks, 间隔一段时间将chunks作为整体刷写到后端存储. 刷进后端存储的chunks被标记为只读.</li>
<li>Querier frontend<br>该服务是一个可选组件，在一组查询器前面，来负责在它们之间公平地调度请求，尽可能地并行化它们并缓存请求。</li>
<li>Querier（查询器）<br>Querier则是用来提供查询服务, 他使用了LogQL, 一种类似于PromQL的语言作为用户界面. Querier会查询已经写入后端存储的chunks以及仍在ingester内存中的数据, 根据label查找数据后, 再遍历数据查找到满足条件的日志</li>
<li>Chunk（块）存储<br>Chunk Store是Loki的后端存储框架, 可以支持多种存储方式, 存储分为两部分:索引的存储（Index）和日志数据存储.<br><img data-src="/images/loki6.png" alt="loki"></li>
</ul>
<h3 id="Loki集群方案"><a href="#Loki集群方案" class="headerlink" title="Loki集群方案"></a>Loki集群方案</h3><p><img data-src="/images/loki7.png" alt="loki"></p>
<ul>
<li>loki 核心服务 distributor、ingester、querier 没有分离，而是启动在一个实例当中；</li>
<li>是直接用 memberlist 在内存中维护集群状态；</li>
<li>使用 <a href="https://grafana.com/docs/loki/latest/operations/storage/boltdb-shipper/">boltdb-shipper</a> 替代其他日志索引方案</li>
</ul>
<h3 id="Loki集群配置"><a href="#Loki集群配置" class="headerlink" title="Loki集群配置"></a>Loki集群配置</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">config</span><span class="token punctuation">:</span>
  <span class="token key atrule">ingester</span><span class="token punctuation">:</span>
    <span class="token key atrule">lifecycler</span><span class="token punctuation">:</span>
      <span class="token key atrule">ring</span><span class="token punctuation">:</span>
        <span class="token key atrule">kvstore</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># store 支持 consul, etcd, inmemory, memberlist</span>
          <span class="token key atrule">store</span><span class="token punctuation">:</span> memberlist
        <span class="token comment" spellcheck="true"># 设置副本数</span>
        <span class="token key atrule">replication_factor</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">memberlist</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 加入集群的节点地址列表</span>
    <span class="token key atrule">join_members</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"loki-1.loki-headless.loki"</span><span class="token punctuation">,</span> <span class="token string">"loki-2.loki-headless.loki"</span><span class="token punctuation">,</span> <span class="token string">"loki-0.loki-headless.loki"</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>更多配置参考官方 <a href="https://grafana.com/docs/loki/latest/configuration/">configuration</a>.</li>
</ul>
<h3 id="Loki-helm安装"><a href="#Loki-helm安装" class="headerlink" title="Loki helm安装"></a>Loki helm安装</h3><ul>
<li><a href="https://grafana.github.io/loki/charts/">charts</a></li>
</ul>
<h3 id="Promtail-配置注意事项"><a href="#Promtail-配置注意事项" class="headerlink" title="Promtail 配置注意事项"></a>Promtail 配置注意事项</h3><ul>
<li>vim charts/promtail/values.yaml</li>
</ul>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Extra volumes to scrape logs from</span>
<span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> docker
  <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 修改为docker的实际路径</span>
    <span class="token key atrule">path</span><span class="token punctuation">:</span> /home/docker/containers
<span class="token comment" spellcheck="true">#  ...</span>
<span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> docker
  <span class="token comment" spellcheck="true"># 修改为docker的实际路径</span>
  <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /home/docker/containers
  <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li>参考文档：<a href="https://blog.csdn.net/weixin_49366475/article/details/116978885">1</a></li>
</ul>
]]></content>
      <categories>
        <category>k8s</category>
        <category>loki</category>
      </categories>
      <tags>
        <tag>loki</tag>
      </tags>
  </entry>
  <entry>
    <title>maven打包插件指定main函数及依赖包</title>
    <url>/maven-da-bao-cha-jian-zhi-ding-main-han-shu-ji-yi-lai-bao/</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p><code>Maven</code>打包<code>jar</code>用的默认插件是<code>maven-jar-plugin</code>，默认<code>Maven</code>生成的<code>JAR</code>包只包含了编译生成的<code>.class</code>文件和项目资源文件。有两个问题：</p>
<ul>
<li>运行时提示没有主清单属性;</li>
<li>依赖的jar包也没有打包进去.</li>
</ul>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p><code>maven</code>打包插件有很多种：</p>
<ul>
<li><code>maven-shade-plugin</code></li>
<li><code>maven-assembly-plugin</code></li>
<li><code>maven-jar-plugin</code></li>
</ul>
<p>我们直接重新定义<code>maven-jar-plugin</code>,详细配置如下：</p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-shade-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>shade<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformers</span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformer</span>
                                    <span class="token attr-name">implementation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.maven.plugins.shade.resource.ManifestResourceTransformer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                                <span class="token comment" spellcheck="true">&lt;!-- 这里指定main函数 --></span>
                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">></span></span>com.deri.App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transformer</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transformers</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>maven配置编译环境</title>
    <url>/maven-pei-zhi-bian-yi-huan-jing/</url>
    <content><![CDATA[<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>modal获取表格数据</title>
    <url>/modal-huo-qu-biao-ge-shu-ju/</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>如何在点击进入Modal后将表格数据传入？</p>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-info btn-xs<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>data-port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${port.port}<span class="token punctuation">"</span></span> <span class="token attr-name">data-toggle</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>showDialog(this)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>配置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">showDialog</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#myModal'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">modal</span><span class="token punctuation">(</span><span class="token string">'show'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 获取表格所在行的数据</span>
    <span class="token keyword">var</span> tds <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'td'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// eq(0)获取第1列的数据传入ID为port输入框中</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#port"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span>tds<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-info btn-xs<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>data-port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${port.port}<span class="token punctuation">"</span></span> <span class="token attr-name">data-toggle</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span> <span class="token attr-name">data-target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#myModal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>配置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#myModal'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'show.bs.modal'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> btn <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>relatedTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 获取data-port数据</span>
        port <span class="token operator">=</span> btn<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token operator">=</span>port<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>mongodb部署</title>
    <url>/mongodb-bu-shu/</url>
    <content><![CDATA[<h3 id="docker部署"><a href="#docker部署" class="headerlink" title="docker部署"></a>docker部署</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># MONGO_INITDB_ROOT_USERNAME 设置root用户名</span>
<span class="token comment" spellcheck="true"># MONGO_INITDB_ROOT_PASSWORD 设置root密码</span>
<span class="token comment" spellcheck="true"># --auth 需要密码才能访问容器服务</span>
<span class="token comment" spellcheck="true"># -v /my/own/datadir:/data/db 设置持久化存储</span>
docker run -d --name mongo -p 27017:27017 -e MONGO_INITDB_ROOT_USERNAME<span class="token operator">=</span>admin -e MONGO_INITDB_ROOT_PASSWORD<span class="token operator">=</span>123456  mongo --auth
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it mongo mongo admin
<span class="token comment" spellcheck="true"># 测试root用户登录</span>
<span class="token operator">></span> db.auth<span class="token punctuation">(</span><span class="token string">'admin'</span>,<span class="token string">'123456'</span><span class="token punctuation">)</span>
1

<span class="token comment" spellcheck="true"># 创建一个名为 test，密码为 123456 的用户。</span>
<span class="token operator">></span>  db.createUser<span class="token punctuation">(</span><span class="token punctuation">{</span> user:<span class="token string">'test'</span>,pwd:<span class="token string">'123456'</span>,roles:<span class="token punctuation">[</span> <span class="token punctuation">{</span> role:<span class="token string">'userAdminAnyDatabase'</span>, db: <span class="token string">'admin'</span><span class="token punctuation">}</span>,<span class="token string">"readWriteAnyDatabase"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-bash"><code class="language-bash">
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql8用户密码问题</title>
    <url>/mysql8-yong-hu-mi-ma-wen-ti/</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p><code>navicat</code>连接<code>mysql8.0.26</code>时报错.</p>
<pre class="line-numbers language-log"><code class="language-log">Client does not support authentication protocol requested by server; consider upgrading MySQL client.
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 进入mysql</span>
docker <span class="token function">exec</span> -it mysql <span class="token function">bash</span>
<span class="token comment" spellcheck="true"># 登录</span>
mysql -u root -p
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">use</span> mysql<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 查看密码加密规则,8.0后使用的是caching_sha2_password,需要修改成mysql_native_password</span>
<span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">,</span>host<span class="token punctuation">,</span>plugin <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span>
<span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'root'</span>@'localhost<span class="token string">' IDENTIFIED BY '</span><span class="token number">123456</span><span class="token string">' PASSWORD EXPIRE NEVER;
ALTER USER '</span>root<span class="token string">'@'</span>localhost<span class="token string">' IDENTIFIED WITH mysql_native_password BY '</span><span class="token number">123456</span><span class="token string">';
ALTER USER '</span>root<span class="token string">'@'</span><span class="token operator">%</span><span class="token string">' IDENTIFIED BY '</span><span class="token number">123456</span><span class="token string">' PASSWORD EXPIRE NEVER;
ALTER USER '</span>root<span class="token string">'@'</span><span class="token operator">%</span><span class="token string">' IDENTIFIED WITH mysql_native_password BY '</span><span class="token number">123456</span>'<span class="token punctuation">;</span>
flush <span class="token keyword">privileges</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql【docker部署之主从复制】</title>
    <url>/mysql-docker-bu-shu-zhi-zhu-cong-fu-zhi/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul>
<li>使用的<code>docker</code>镜像<code>mysql:5.7.18</code>;</li>
<li>容器中<code>mysql</code>配置文件目录<code>/etc/mysql/</code>;</li>
</ul>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>启动镜像，将镜像中配置目录拷贝到宿主机</li>
</ol>
<pre class="line-numbers language-sh"><code class="language-sh">#启动,并设置root密码
docker run -d --name mysql  -e MYSQL_ROOT_PASSWORD=123456 hub.deri.org.cn/library/mysql:5.7

#复制
docker cp mysql:/etc/mysql /root
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sh"><code class="language-sh">#配置文件目录结构
[root@mysql01 mysql]# tree
.
├── conf.d
│&nbsp;&nbsp; ├── docker.cnf
│&nbsp;&nbsp; └── mysql.cnf
├── my.cnf -> /etc/alternatives/my.cnf
├── my.cnf.fallback
├── mysql.cnf
└── mysql.conf.d
    └── mysqld.cnf

2 directories, 6 files
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>查看<code>mysql data</code>目录,便于将<code>docker</code>中数据持久化到宿主机</li>
</ol>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 登录</span>
docker <span class="token keyword">exec</span> <span class="token operator">-</span>it mysql bash
mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>p123456
<span class="token comment" spellcheck="true">-- 查询</span>
mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%datadir%'</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">---------------+-----------------+</span>
<span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span>           <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">---------------+-----------------+</span>
<span class="token operator">|</span> datadir       <span class="token operator">|</span> <span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>mysql<span class="token operator">/</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">---------------+-----------------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>修改<code>mysql.cnf</code></li>
</ol>
<pre class="line-numbers language-sh"><code class="language-sh">#参考mysql主从配置
[mysqld]
server-id=1 # 主从设置不一样
log-bin=mysql-bin #备无需开启
auto-increment-increment=2
auto-increment-offset=2 # 主从设置不一样：1,2
log-slave-updates=true
#replicate-ignore-db=information_schema
max_binlog_size=1024M
binlog-format=ROW
#binlog_rows_query_log_events=on # 在row 模式的binlog中包含SQL EVENTS（即SQL语句也会保留）
#master-info-repository=TABLE
#relay-log-info-repository=TABLE
#slave-skip-errors=all # 忽略复制产生的错误
#slave-skip-errors=1062,1032,1060 # 跳过已知错误,主键冲突、表已存在等错误代码如1062,1032,1060等
#relay-log-purge = 1    #是否自动清空不再需要中继日志时。默认值为1(启用)
#expire_logs_days = 30  #超过 30 天的 binlog 删除
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="4">
<li>启动mysql</li>
</ol>
<pre class="line-numbers language-sh"><code class="language-sh">#映射端口、配置文件和data
docker run -d --name mysql -v /root/mysql:/etc/mysql -v /var/lib/mysql/:/var/lib/mysql/ -e MYSQL_ROOT_PASSWORD=123456 -p 3306:3306  hub.deri.org.cn/library/mysql:5.7

#也可以按需只映射一个配置文件mysql.cnf
docker run -d --name mysql -v /root/mysql/mysql.cnf:/etc/mysql/mysql.cnf -v /var/lib/mysql/:/var/lib/mysql/ -e MYSQL_ROOT_PASSWORD=123456 -p 3307:3306  hub.deri.org.cn/library/mysql:5.7
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="5">
<li>其它主从配置,参考非<code>docker</code>安装配置</li>
</ol>
<ul>
<li>添加主从帐号</li>
<li>配置主从信息</li>
<li>开启半同步复制</li>
<li>开启从节点只读模式</li>
<li>…</li>
</ul>
<ol start="6">
<li>使用<code>keepalive</code>工具</li>
</ol>
<p>写一个脚本<code>/etc/docker_mysql.sh</code>判断<code>docker</code>中<code>mysql</code>是否存活</p>
<pre class="line-numbers language-sh"><code class="language-sh">#! /bin/bash
count=$(docker ps |grep hub.deri.org.cn/library/mysql:5.7 | grep Up| wc -l)
if [ $count == "1" ];then
    exit 0
else
    exit 1
fi


#测试这个脚本
[root@mysql01 ~]# docker stop mysql
mysql
[root@mysql01 ~]# ./docker_mysql.sh 
[root@mysql01 ~]# ./docker_mysql.sh ;echo $?
1
[root@mysql01 ~]# docker start mysql 
mysql
[root@mysql01 ~]# ./docker_mysql.sh ;echo $?
0

#配置keepalived
vrrp_script chk_mysql {
    script "/etc/docker_mysql.sh"
    interval 2
    timeout 2
    fall 3
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql【主从同步工具Maatkit安装使用】</title>
    <url>/mysql-zhu-cong-tong-bu-gong-ju-maatkit-an-zhuang-shi-yong/</url>
    <content><![CDATA[<h3 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h3><p><code>mysql</code>主从同步时难免出现问题导致数据不一致情况.此时需要手动将主从数据同步.</p>
<p><code>Maatkit</code>是一个开源的工具包，为<code>mySQL</code>日常管理提供了帮助，它包含很多工具，这里主要说下面两个：</p>
<ul>
<li><code>mk-table-checksum</code> : 用来检测<code>master</code>和<code>slave</code>上的表结构和数据是否一致的；</li>
<li><code>mk-table-sync</code> : 在主从数据不一致时，用来修复数据的；先主后从有效保证表一致的工具，不必重载从表而能够保证一致。<blockquote>
<p>上面两个perl脚本在运行时都会锁表，表的大小取决于执行的快慢，勿在高峰期间运行，可选择凌晨</p>
</blockquote>
</li>
</ul>
<h3 id="安装Maatkit"><a href="#安装Maatkit" class="headerlink" title="安装Maatkit"></a>安装Maatkit</h3><ol>
<li>安装依赖</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 安装依赖</span>
yum <span class="token function">install</span> perl-IO-Socket-SSL perl-DBD-MySQL perl-Time-HiRes perl perl-DBI -y

yum <span class="token function">install</span> perl-ExtUtils-Embed perl-ExtUtils-CBuilder perl-ExtUtils-MakeMaker -y

yum -y <span class="token function">install</span> perl-Digest-MD5
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>下载<code>maatkit</code></li>
</ol>
<ul>
<li>需要翻墙到官网下载：<a href="https://code.google.com/archive/p/maatkit/downloads">https://code.google.com/archive/p/maatkit/downloads</a></li>
<li>百度云盘下载地址：<a href="https://pan.baidu.com/s/1c1AufW8">https://pan.baidu.com/s/1c1AufW8</a>    （提取密码：<code>vbi1</code>）</li>
</ul>
<ol start="3">
<li>安装<code>maatkit</code></li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 解压进入目录</span>
<span class="token function">tar</span> -zvxf maatkit-7540.tar.gz  <span class="token operator">&amp;&amp;</span> <span class="token function">cd</span> maatkit-7540 

<span class="token punctuation">[</span>root@mysql01 maatkit-7540<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># perl Makefile.PL</span>
Checking <span class="token keyword">if</span> your kit is complete<span class="token punctuation">..</span>.
Looks good
Writing Makefile <span class="token keyword">for</span> maatkit

<span class="token comment" spellcheck="true"># 安装</span>
<span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span>

<span class="token comment" spellcheck="true"># 测试查看mk-相关命令</span>
<span class="token punctuation">[</span>root@mysql01 maatkit-7540<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mk-</span>
mk-archiver               mk-duplicate-key-checker  mk-heartbeat              mk-log-player             mk-profile-compact        mk-query-profiler         mk-slave-move             mk-table-sync             mk-variable-advisor       
mk-checksum-filter        mk-error-log              mk-index-usage            mk-merge-mqd-results      mk-purge-logs             mk-show-grants            mk-slave-prefetch         mk-table-usage            mk-visual-explain         
mk-config-diff            mk-fifo-split             mk-kill                   mk-parallel-dump          mk-query-advisor          mk-slave-delay            mk-slave-restart          mk-tcp-model              
mk-deadlock-logger        mk-find                   mk-loadavg                mk-parallel-restore       mk-query-digest           mk-slave-find             mk-table-checksum         mk-upgrade                
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h3><ol>
<li>创建<code>mysql</code>检查帐号</li>
</ol>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 主从服务器上创建只有SELECT权限的帐号</span>
mysql<span class="token operator">></span> <span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'data_check'</span>@'<span class="token operator">%</span><span class="token string">' IDENTIFIED BY '</span><span class="token number">123456</span>'<span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
 
mysql<span class="token operator">></span> flush <span class="token keyword">privileges</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>检查一致性</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 第一个h：   填写主库ip</span>
<span class="token comment" spellcheck="true"># 第一个u：   主库授权的用户名</span>
<span class="token comment" spellcheck="true"># 第一个p：   主库授权的密码</span>
<span class="token comment" spellcheck="true"># 第二个h：   填写从库ip</span>
<span class="token comment" spellcheck="true"># 第二个u：   从库授权的用户名</span>
<span class="token comment" spellcheck="true"># 第二个p：   从库授权的密码</span>
<span class="token comment" spellcheck="true"># 大写P：   mysql的端口</span>
<span class="token punctuation">[</span>root@mysql01 maatkit-7540<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mk-table-checksum h=192.168.41.141,u=data_check,p=123456,P=3306 h=192.168.41.142,u=data_check,p=123456,P=3306</span>
DATABASE TABLE        CHUNK HOST           ENGINE      COUNT         CHECKSUM TIME WAIT STAT  LAG
<span class="token function">test</span>     t_department     0 192.168.41.141 InnoDB       NULL         83657212    0    0 NULL NULL
<span class="token function">test</span>     t_department     0 192.168.41.142 InnoDB       NULL       3344593131    0    0 NULL NULL
<span class="token function">test</span>     testttt          0 192.168.41.141 InnoDB       NULL       3722958311    0    0 NULL NULL
<span class="token function">test</span>     testttt          0 192.168.41.142 InnoDB       NULL       3722958311    0    0 NULL NULL
DATABASE TABLE                     CHUNK HOST           ENGINE      COUNT         CHECKSUM TIME WAIT STAT  LAG
mysql    columns_priv                  0 192.168.41.141 MyISAM       NULL                0    0    0 NULL NULL
mysql    columns_priv                  0 192.168.41.142 MyISAM       NULL                0    0    0 NULL NULL
mysql    db                            0 192.168.41.141 MyISAM       NULL       2629905140    0    0 NULL NULL
mysql    db                            0 192.168.41.142 MyISAM       NULL       2629905140    0    0 NULL NULL
mysql    engine_cost                   0 192.168.41.141 InnoDB       NULL       2678612005    0    0 NULL NULL
<span class="token punctuation">..</span>.


<span class="token comment" spellcheck="true"># 参数-d(或者--database) 指定要检查的数据库,多个数据库之间用逗号隔开，如果不加-d，校验的是所有库；</span>
<span class="token comment" spellcheck="true"># --count    会计算出表的行数</span>
<span class="token punctuation">[</span>root@mysql01 maatkit-7540<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mk-table-checksum h=192.168.41.141,u=data_check,p=123456,P=3306 h=192.168.41.142,u=data_check,p=123456,P=3306 --count -dtest</span>
DATABASE TABLE        CHUNK HOST           ENGINE      COUNT         CHECKSUM TIME WAIT STAT  LAG
<span class="token function">test</span>     t_department     0 192.168.41.141 InnoDB         13         5e339d70    0    0 NULL NULL
<span class="token function">test</span>     t_department     0 192.168.41.142 InnoDB         13         7a4c9153    0    0 NULL NULL
<span class="token function">test</span>     testttt          0 192.168.41.141 InnoDB          8         41db7636    0    0 NULL NULL
<span class="token function">test</span>     testttt          0 192.168.41.142 InnoDB          8         41db7636    0    0 NULL NULL

<span class="token comment" spellcheck="true"># 结果参数说明</span>
<span class="token comment" spellcheck="true"># DATABASE      检查的库名</span>
<span class="token comment" spellcheck="true"># TABLE：       检查的库中的表名</span>
<span class="token comment" spellcheck="true"># CHUNK：       checksum时的近似数值</span>
<span class="token comment" spellcheck="true"># HOST：        主从MYSQL的地址</span>
<span class="token comment" spellcheck="true"># ENGINE：      表引擎</span>
<span class="token comment" spellcheck="true"># COUNT：       表的行数</span>
<span class="token comment" spellcheck="true"># CHECKSUM：    校验值</span>
<span class="token comment" spellcheck="true"># TIME：        所用时间</span>
<span class="token comment" spellcheck="true"># WAIT：        等待时间</span>
<span class="token comment" spellcheck="true"># STAT：        MASTER_POS_WAIT()返回值</span>
<span class="token comment" spellcheck="true"># LAG：         slave的延时时间</span>


<span class="token comment" spellcheck="true"># mk-checksum-filter过滤出不一样的结果</span>
<span class="token punctuation">[</span>root@mysql01 maatkit-7540<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mk-table-checksum h=192.168.41.141,u=data_check,p=123456,P=3306 h=192.168.41.142,u=data_check,p=123456,P=3306 --count -dtest | mk-checksum-filter</span>
<span class="token function">test</span>     t_department     0 192.168.41.141 InnoDB         13         5e339d70    0    0 NULL NULL
<span class="token function">test</span>     t_department     0 192.168.41.142 InnoDB         13         7a4c9153    0    0 NULL NULL
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="3">
<li>修复主从不同步的数据</li>
</ol>
<p><code>mk-table-sync</code>用来修复多个实例之间数据的不一致. <code>mk-table-sync</code>的工作方式是：先一行一行检查主从库的表是否一样，如果哪里不一样，就执行删除，更新，插入等操作，使其达到一致。</p>
<p>由于上面在<code>mk-table-checksum</code>检查时用的<code>data_check</code>只有<code>select</code>权限，权限太小，不能用于<code>mk-table-sync</code>修复数据只用。<br>所以还需要在主库和从库数据库里创建用于<code>mk-table-sync</code>修复数据之用的账号权限</p>
<pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> mksync<span class="token variable">@'%'</span> identified <span class="token keyword">by</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
 
mysql<span class="token operator">></span> flush <span class="token keyword">privileges</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 注意：主从数据库表和表结构必须一致,否则会报错！</span>
<span class="token comment" spellcheck="true"># --print               显示同步需要执行的语句</span>
<span class="token comment" spellcheck="true"># --execute             执行数据同步</span>
<span class="token comment" spellcheck="true"># --charset=utf8mb4     设置字符集，避免从库乱码。</span>
<span class="token comment" spellcheck="true"># --no-check-slave      如果不加这个参数，会提示报错，因为此工具默认不允许在从库上修改数据</span>
<span class="token comment" spellcheck="true"># -t                    指定同步的表名,多个表时可以在-t后加=号，即-t=tables1,tables2,..</span>
<span class="token comment" spellcheck="true"># > /root/result        命令后面加上 > /root/result 将结果导出</span>

<span class="token punctuation">[</span>root@mysql01 maatkit-7540<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mk-table-sync --execute --charset=utf8mb4 --print --no-check-slave --databases test h=192.168.41.141,u=mksync,p=123456,P=3306 h=192.168.41.142,u=mksync,p=123456,P=3306</span>
UPDATE <span class="token variable"><span class="token variable">`</span><span class="token function">test</span><span class="token variable">`</span></span><span class="token keyword">.</span><span class="token variable"><span class="token variable">`</span>t_department<span class="token variable">`</span></span> SET <span class="token variable"><span class="token variable">`</span>department_name<span class="token variable">`</span></span><span class="token operator">=</span><span class="token string">'44'</span>, <span class="token variable"><span class="token variable">`</span>parent_id<span class="token variable">`</span></span><span class="token operator">=</span><span class="token string">'0'</span>, <span class="token variable"><span class="token variable">`</span>level<span class="token variable">`</span></span><span class="token operator">=</span><span class="token string">'1'</span>, <span class="token variable"><span class="token variable">`</span>create_time<span class="token variable">`</span></span><span class="token operator">=</span><span class="token string">'2020-07-28 16:06:24'</span>, <span class="token variable"><span class="token variable">`</span>update_time<span class="token variable">`</span></span><span class="token operator">=</span><span class="token string">'2020-07-28 16:06:24'</span> WHERE <span class="token variable"><span class="token variable">`</span>department_id<span class="token variable">`</span></span><span class="token operator">=</span><span class="token string">'3'</span> LIMIT 1 /*maatkit src_db:test src_tbl:t_department src_dsn:A<span class="token operator">=</span>utf8mb4,P<span class="token operator">=</span>3306,h<span class="token operator">=</span>192.168.41.141,p<span class="token operator">=</span><span class="token punctuation">..</span>.,u<span class="token operator">=</span>mksync dst_db:test dst_tbl:t_department dst_dsn:A<span class="token operator">=</span>utf8mb4,P<span class="token operator">=</span>3306,h<span class="token operator">=</span>192.168.41.142,p<span class="token operator">=</span><span class="token punctuation">..</span>.,u<span class="token operator">=</span>mksync lock:0 transaction:1 changing_src:0 replicate:0 bidirectional:0 pid:3869 user:root host:mysql01*/<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 修复之后检查主从,通过CHECKSUM可以看出,数据已经完全一样了</span>
<span class="token punctuation">[</span>root@mysql01 maatkit-7540<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mk-table-checksum h=192.168.41.141,u=data_check,p=check@123,P=3306 h=192.168.41.142,u=data_check,p=check@123,P=3306 --count -dtest</span>
DATABASE TABLE        CHUNK HOST           ENGINE      COUNT         CHECKSUM TIME WAIT STAT  LAG
<span class="token function">test</span>     t_department     0 192.168.41.141 InnoDB         13         5e339d70    0    0 NULL NULL
<span class="token function">test</span>     t_department     0 192.168.41.142 InnoDB         13         5e339d70    0    0 NULL NULL
<span class="token function">test</span>     testttt          0 192.168.41.141 InnoDB          8         41db7636    0    0 NULL NULL
<span class="token function">test</span>     testttt          0 192.168.41.142 InnoDB          8         41db7636    0    0 NULL NULL
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://www.cnblogs.com/kevingrace/p/6278200.html">利用 mk-table-checksum 监测 MySQL主从数据一致性操作记录</a></li>
</ul>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>Maatkit</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql【主从同步工具percona-toolkit安装使用】</title>
    <url>/mysql-zhu-cong-tong-bu-gong-ju-percona-toolkit-an-zhuang-shi-yong/</url>
    <content><![CDATA[<h3 id="percona-toolkit介绍"><a href="#percona-toolkit介绍" class="headerlink" title="percona-toolkit介绍"></a><code>percona-toolkit</code>介绍</h3><p><code>percona-toolkit</code>是一组高级命令行工具的集合，用来执行各种通过手工执行非常复杂和麻烦的mysql和系统任务，这些任务包括：</p>
<ol>
<li>检查master和slave数据的一致性</li>
<li>有效地对记录进行归档</li>
<li>查找重复的索引</li>
<li>对服务器信息进行汇总</li>
<li>分析来自日志和tcpdump的查询</li>
<li>当系统出问题的时候收集重要的系统信息</li>
</ol>
<p><code>percona-toolkit</code>工具中最主要的三个组件分别是：</p>
<ol>
<li><code>pt-table-checksum</code> 负责监测mysql主从数据一致性</li>
<li><code>pt-table-sync</code> 负责当主从数据不一致时修复数据，让它们保存数据的一致性</li>
<li><code>pt-heartbeat</code> 负责监控mysql主从同步延迟</li>
</ol>
<h3 id="percona-toolkit安装"><a href="#percona-toolkit安装" class="headerlink" title="percona-toolkit安装"></a><code>percona-toolkit</code>安装</h3><ol>
<li>安装依赖</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 安装依赖</span>
yum <span class="token function">install</span> perl-IO-Socket-SSL perl-DBD-MySQL perl-Time-HiRes perl perl-DBI -y
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ol start="2">
<li>下载安装包</li>
</ol>
<ul>
<li>百度云盘下载地址：<a href="https://pan.baidu.com/s/1bp1OOgf">https://pan.baidu.com/s/1bp1OOgf</a>   （提取密码：y462）</li>
<li><code>wget https://www.percona.com/downloads/percona-toolkit/2.2.7/RPM/percona-toolkit-2.2.7-1.noarch.rpm</code></li>
</ul>
<ol start="3">
<li>安装</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash">rpm -ivh percona-toolkit-2.2.7-1.noarch.rpm
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="percona-toolkit使用"><a href="#percona-toolkit使用" class="headerlink" title="percona-toolkit使用"></a><code>percona-toolkit</code>使用</h3><p><code>pt-table-checksum</code> 是 <code>Percona-Toolkit</code>的组件之一，用于检测MySQL主、从库的数据是否一致。其原理是在主库执行基于<code>statement</code>的sql语句来生成主库数据块的<code>checksum</code>，把相同的sql语句传递到从库执行，并在从库上计算相同数据块的<code>checksum</code>，最后，比较主从库上相同数据块的<code>checksum</code>值，由此判断主从数据是否一致。</p>
<p>为了减少对数据库的干预，pt-table-checksum还会自动侦测并连接到从库，当然如果失败，可以指定–recursion-method选项来告诉从库在哪里。它的易用性还体现在，复制若有延迟，在从库 checksum 会暂停直到赶上主库的计算时间点。</p>
<p>为了保证主数据库服务的安全，该工具实现了许多保护措施：</p>
<ol>
<li>自动设置 <code>innodb_lock_wait_timeout</code> 为<code>1s</code>，避免引起</li>
<li>默认当数据库有25个以上的并发查询时，<code>pt-table-checksum</code>会暂停。可以设置 <code>--max-load</code> 选项来设置这个阀值</li>
<li>当用<code>Ctrl+C</code>停止任务后，工具会正常的完成当前<code>chunk</code>检测，下次使用<code>--resume</code>选项启动可以恢复继续下一个<code>chunk</code></li>
</ol>
<h4 id="创建授权帐号"><a href="#创建授权帐号" class="headerlink" title="创建授权帐号"></a>创建授权帐号</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 工具在主库上执行,IP写主库IP</span>
mysql<span class="token operator">></span> <span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span><span class="token punctuation">,</span> PROCESS<span class="token punctuation">,</span> SUPER<span class="token punctuation">,</span> <span class="token keyword">REPLICATION</span> SLAVE<span class="token punctuation">,</span><span class="token keyword">CREATE</span><span class="token punctuation">,</span><span class="token keyword">DELETE</span><span class="token punctuation">,</span><span class="token keyword">INSERT</span><span class="token punctuation">,</span><span class="token keyword">UPDATE</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'pt'</span>@'<span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">41.141</span><span class="token string">' identified by '</span><span class="token number">123456</span>'<span class="token punctuation">;</span>
mysql<span class="token operator">></span> flush <span class="token keyword">privileges</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="pt-table-checksum"><a href="#pt-table-checksum" class="headerlink" title="pt-table-checksum"></a>pt-table-checksum</h4><p>在主（<code>master</code>）上通过执行校验的查询对复制的一致性进行检查，对比主从的校验值，从而产生结果。</p>
<blockquote>
<p>注意：第一次运行的时候需要加上<code>--create-replicate-table</code>参数，生成<code>checksums</code>表！</p>
</blockquote>
<p>常用参数解释：</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><code>--nocheck-replication-filters</code></td>
<td>不检查复制过滤器，建议启用。</td>
</tr>
<tr>
<td><code>--no-check-binlog-format</code></td>
<td>不检查复制的binlog模式，要是binlog模式是ROW，则会报错。</td>
</tr>
<tr>
<td><code>--replicate-check-only</code></td>
<td>只显示不同步的信息。</td>
</tr>
<tr>
<td><code>--replicate=</code></td>
<td>把checksum的信息写入到指定表中，建议直接写到被检查的数据库当中。</td>
</tr>
<tr>
<td><code>--databases=</code></td>
<td>指定需要被检查的数据库，多个则用逗号隔开。</td>
</tr>
<tr>
<td><code>--tables=</code></td>
<td>指定需要被检查的表，多个用逗号隔开</td>
</tr>
<tr>
<td><code>--recursion-method</code></td>
<td>指定复制检查的方式,默认为processlist,hosts</td>
</tr>
<tr>
<td><code>h=</code></td>
<td>Master的地址</td>
</tr>
<tr>
<td><code>u=</code></td>
<td>用户名</td>
</tr>
<tr>
<td><code>p=</code></td>
<td>密码</td>
</tr>
<tr>
<td><code>P=</code></td>
<td>端口</td>
</tr>
</tbody></table>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 从库需要开启slave;</span>
<span class="token keyword">start</span> slave<span class="token punctuation">;</span>
<span class="token keyword">show</span> slave <span class="token keyword">status</span>\G

<span class="token comment" spellcheck="true">-- 主库processlist可以查到slave</span>
mysql<span class="token operator">></span> <span class="token keyword">show</span> processlist<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">--------+-------------+---------------+------+------------------+--------+---------------------------------------------------------------+------------------+</span>
<span class="token operator">|</span> Id     <span class="token operator">|</span> <span class="token keyword">User</span>        <span class="token operator">|</span> Host          <span class="token operator">|</span> <span class="token number">db</span>   <span class="token operator">|</span> Command          <span class="token operator">|</span> Time   <span class="token operator">|</span> State                                                         <span class="token operator">|</span> Info             <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">--------+-------------+---------------+------+------------------+--------+---------------------------------------------------------------+------------------+</span>
<span class="token operator">|</span>      <span class="token number">2</span> <span class="token operator">|</span> system <span class="token keyword">user</span> <span class="token operator">|</span>               <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token keyword">Connect</span>          <span class="token operator">|</span> <span class="token number">589655</span> <span class="token operator">|</span> Slave has <span class="token keyword">read</span> <span class="token keyword">all</span> relay log<span class="token punctuation">;</span> waiting <span class="token keyword">for</span> more updates        <span class="token operator">|</span> <span class="token boolean">NULL</span>             <span class="token operator">|</span>
<span class="token operator">|</span>   <span class="token number">2049</span> <span class="token operator">|</span> slave       <span class="token operator">|</span> mysql02:<span class="token number">37382</span> <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> Binlog <span class="token keyword">Dump</span> GTID <span class="token operator">|</span> <span class="token number">587611</span> <span class="token operator">|</span> Master has sent <span class="token keyword">all</span> binlog <span class="token keyword">to</span> slave<span class="token punctuation">;</span> waiting <span class="token keyword">for</span> more updates <span class="token operator">|</span> <span class="token boolean">NULL</span>             <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">588590</span> <span class="token operator">|</span> root        <span class="token operator">|</span> localhost     <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> Query            <span class="token operator">|</span>      <span class="token number">0</span> <span class="token operator">|</span> starting                                                      <span class="token operator">|</span> <span class="token keyword">show</span> processlist <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">--------+-------------+---------------+------+------------------+--------+---------------------------------------------------------------+------------------+</span>
<span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.03</span> sec<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 执行检查命令,注意第一次添加--create-replicate-table参数创建表</span>
<span class="token punctuation">[</span>root@mysql01 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># pt-table-checksum --nocheck-replication-filters --no-check-binlog-format --replicate=test2.checksums --create-replicate-table --databases=test h=192.168.41.141,u=pt,p=123456,P=3306</span>
            TS ERRORS  DIFFS     ROWS  CHUNKS SKIPPED    TIME TABLE
08-05T17:35:54      0      1       13       1       0   0.091 test.t_department
08-05T17:35:54      0      0        8       1       0   0.202 test.testttt

<span class="token comment" spellcheck="true"># 结果字段说明</span>
<span class="token comment" spellcheck="true"># TS ：完成检查的时间。</span>
<span class="token comment" spellcheck="true"># ERRORS ：检查时候发生错误和警告的数量。</span>
<span class="token comment" spellcheck="true"># DIFFS ：0表示一致，1表示不一致。当指定--no-replicate-check时，会一直为0，当指定--replicate-check-only会显示不同的信息。</span>
<span class="token comment" spellcheck="true"># ROWS ：表的行数。</span>
<span class="token comment" spellcheck="true"># CHUNKS ：被划分到表中的块的数目。</span>
<span class="token comment" spellcheck="true"># SKIPPED ：由于错误或警告或过大，则跳过块的数目。</span>
<span class="token comment" spellcheck="true"># TIME ：执行的时间。</span>
<span class="token comment" spellcheck="true"># TABLE ：被检查的表名。</span>

<span class="token punctuation">[</span>root@mysql01 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># pt-table-checksum --nocheck-replication-filters --no-check-binlog-format --replicate=test2.checksums --no-replicate-check  --databases=test h=192.168.41.141,u=pt,p=123456,P=3306</span>
            TS ERRORS  DIFFS     ROWS  CHUNKS SKIPPED    TIME TABLE
08-06T09:30:43      0      0       13       1       0   0.023 test.t_department
08-06T09:30:43      0      0        8       1       0   0.033 test.testttt
<span class="token punctuation">[</span>root@mysql01 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># pt-table-checksum --nocheck-replication-filters --no-check-binlog-format --replicate=test2.checksums --replicate-check-only --databases=test h=192.168.41.141,u=pt,p=123456,P=3306</span>
Differences on mysql02
TABLE CHUNK CNT_DIFF CRC_DIFF CHUNK_INDEX LOWER_BOUNDARY UPPER_BOUNDARY
test.t_department 1 0 1 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="pt-table-sync"><a href="#pt-table-sync" class="headerlink" title="pt-table-sync"></a>pt-table-sync</h4><p><code>pt-table-sync</code>: 高效的同步MySQL表之间的数据，他可以做单向和双向同步的表数据。他可以同步单个表，也可以同步整个库。它不同步表结构、索引、或任何其他模式对象。所以在修复一致性之前需要保证他们表存在。</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 参数解释：</span>
<span class="token comment" spellcheck="true"># --replicate= ：   指定通过pt-table-checksum得到的表，这2个工具差不多都会一直用。</span>
<span class="token comment" spellcheck="true"># --databases= :    指定执行同步的数据库。</span>
<span class="token comment" spellcheck="true"># --tables= ：      指定执行同步的表，多个用逗号隔开。</span>
<span class="token comment" spellcheck="true"># --sync-to-master ：指定一个DSN，即从的IP，他会通过show processlist或show slave status 去自动的找主。</span>
<span class="token comment" spellcheck="true"># h= ：             服务器地址，命令里有2个ip，第一次出现的是Master的地址，第2次是Slave的地址。</span>
<span class="token comment" spellcheck="true"># u= ：             帐号。</span>
<span class="token comment" spellcheck="true"># p= ：             密码。</span>
<span class="token comment" spellcheck="true"># --print ：        打印，但不执行命令。打印出来修复数据的sql语句，可以手动的在slave从库上执行，让他们数据保持一致性</span>
<span class="token comment" spellcheck="true"># --execute ：      执行命令。</span>

<span class="token punctuation">[</span>root@mysql01 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># pt-table-sync --replicate=test2.checksums h=192.168.41.141,u=pt,p=123456 h=192.168.41.142,u=pt,p=123456 --print</span>
REPLACE INTO <span class="token variable"><span class="token variable">`</span><span class="token function">test</span><span class="token variable">`</span></span><span class="token keyword">.</span><span class="token variable"><span class="token variable">`</span>t_department<span class="token variable">`</span></span><span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>department_id<span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span>department_name<span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span>parent_id<span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span>level<span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span>create_time<span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span>update_time<span class="token variable">`</span></span><span class="token punctuation">)</span> VALUES <span class="token punctuation">(</span><span class="token string">'7'</span>, <span class="token string">'8'</span>, <span class="token string">'0'</span>, <span class="token string">'1'</span>, <span class="token string">'2020-07-28 16:06:40'</span>, <span class="token string">'2020-07-28 16:06:40'</span><span class="token punctuation">)</span> /*percona-toolkit src_db:test src_tbl:t_department src_dsn:h<span class="token operator">=</span>192.168.41.141,p<span class="token operator">=</span><span class="token punctuation">..</span>.,u<span class="token operator">=</span>pt dst_db:test dst_tbl:t_department dst_dsn:h<span class="token operator">=</span>mysql02,p<span class="token operator">=</span><span class="token punctuation">..</span>.,u<span class="token operator">=</span>pt lock:1 transaction:1 changing_src:test2.checksums replicate:test2.checksums bidirectional:0 pid:114329 user:root host:mysql01*/<span class="token punctuation">;</span>


<span class="token punctuation">[</span>root@mysql01 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># pt-table-sync --replicate=test2.checksums h=192.168.41.141,u=pt,p=123456 h=192.168.41.142,u=pt,p=123456 --print --execute</span>
REPLACE INTO <span class="token variable"><span class="token variable">`</span><span class="token function">test</span><span class="token variable">`</span></span><span class="token keyword">.</span><span class="token variable"><span class="token variable">`</span>t_department<span class="token variable">`</span></span><span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>department_id<span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span>department_name<span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span>parent_id<span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span>level<span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span>create_time<span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span>update_time<span class="token variable">`</span></span><span class="token punctuation">)</span> VALUES <span class="token punctuation">(</span><span class="token string">'7'</span>, <span class="token string">'8'</span>, <span class="token string">'0'</span>, <span class="token string">'1'</span>, <span class="token string">'2020-07-28 16:06:40'</span>, <span class="token string">'2020-07-28 16:06:40'</span><span class="token punctuation">)</span> /*percona-toolkit src_db:test src_tbl:t_department src_dsn:h<span class="token operator">=</span>192.168.41.141,p<span class="token operator">=</span><span class="token punctuation">..</span>.,u<span class="token operator">=</span>pt dst_db:test dst_tbl:t_department dst_dsn:h<span class="token operator">=</span>mysql02,p<span class="token operator">=</span><span class="token punctuation">..</span>.,u<span class="token operator">=</span>pt lock:1 transaction:1 changing_src:test2.checksums replicate:test2.checksums bidirectional:0 pid:115260 user:root host:mysql01*/<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true"># 同步之后再次查看,主从数据已经同步</span>
<span class="token punctuation">[</span>root@mysql01 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># pt-table-checksum --nocheck-replication-filters --no-check-binlog-format --replicate=test2.checksums --databases=test h=192.168.41.141,u=pt,p=123456,P=3306</span>
            TS ERRORS  DIFFS     ROWS  CHUNKS SKIPPED    TIME TABLE
08-06T09:36:23      0      0       13       1       0   0.293 test.t_department
08-06T09:36:23      0      0        8       1       0   0.018 test.testttt
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以编写脚本定时同步主备库数据</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>
NUM<span class="token operator">=</span><span class="token punctuation">$(</span>/usr/bin/pt-table-checksum --nocheck-replication-filters --no-check-binlog-format --replicate<span class="token operator">=</span>test2.checksums --databases<span class="token operator">=</span>test  h<span class="token operator">=</span>192.168.41.141,u<span class="token operator">=</span>pt,p<span class="token operator">=</span>123456,P<span class="token operator">=</span>3306<span class="token operator">|</span><span class="token function">awk</span> -F<span class="token string">" "</span> <span class="token string">'{print <span class="token variable">$3</span>}'</span><span class="token operator">|</span><span class="token function">sed</span> -n <span class="token string">'2p'</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$NUM</span> -eq 1 <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>
  /usr/bin/pt-table-sync --replicate<span class="token operator">=</span>test2.checksums h<span class="token operator">=</span>192.168.41.141,u<span class="token operator">=</span>pt,p<span class="token operator">=</span>123456 h<span class="token operator">=</span>192.168.41.142,u<span class="token operator">=</span>pt,p<span class="token operator">=</span>123456 --print --execute
<span class="token keyword">else</span>
  <span class="token keyword">echo</span> <span class="token string">"data is ok"</span>
<span class="token keyword">fi</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="pt-heartbeat"><a href="#pt-heartbeat" class="headerlink" title="pt-heartbeat"></a>pt-heartbeat</h4><p>对于MySQL数据库主从复制延迟的监控，可以借助<code>pt-heartbeat</code>来实现。</p>
<p><code>pt-heartbeat</code>的工作原理通过使用时间戳方式在主库上更新特定表，然后在从库上读取被更新的时间戳然后与本地系统时间对比来得出其延迟。具体流程：</p>
<ol>
<li>在主上创建一张<code>heartbeat</code>表，按照一定的时间频率更新该表的字段（把时间更新进去）。监控操作运行后，<code>heartbeat</code>表能促使主从同步！</li>
<li>连接到从库上检查复制的时间记录，和从库的当前系统时间进行比较，得出时间的差异。</li>
</ol>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://www.cnblogs.com/kevingrace/p/6261091.html">percona-toolkit工具（数据一致性监测、延迟监控）使用梳理</a></li>
<li><a href="http://www.mamicode.com/info-detail-1658251.html">percona-toolkit的安装和使用 / 常见错误</a></li>
</ul>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>percona-toolkit</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql【主从复制模式,且从节点只读】</title>
    <url>/mysql-zhu-cong-fu-zhi-mo-shi/</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>双主之间复制如果网络中断或者其它原因导致不可用，此时在不同主上修改了同一条数据，就会存在数据不一致的情况。</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><ol>
<li>过滤到已知错误</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#slave-skip-errors=all # 忽略复制产生的错误</span>
<span class="token comment" spellcheck="true">#slave-skip-errors=1062,1032,1060 # 跳过已知错误,主键冲突、表已存在等错误代码如1062,1032,1060等</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>但是这样数据不一致的问题还是存在.</p>
<ol start="2">
<li>不用双主模式,改成主从模式,且从节点只能读不能写<br>关闭双向复制,设置单向复制,一主一从</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 从节点设置不能写,设置完需要重启mysql服务</span>
read_only<span class="token operator">=</span>ON
super_read_only<span class="token operator">=</span>ON

<span class="token comment" spellcheck="true"># SQL</span>
FLUSH TABLES WITH READ LOCK<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql【半同步复制模式】</title>
    <url>/mysql-ban-tong-bu-fu-zhi-mo-shi/</url>
    <content><![CDATA[<h3 id="复制模式"><a href="#复制模式" class="headerlink" title="复制模式"></a>复制模式</h3><p>MySQL主从复制包括异步模式、半同步模式、GTID模式以及多源复制模式，默认是异步模式.</p>
<ul>
<li>异步复制（<code>Asynchronous replication</code>）</li>
</ul>
<p>所谓异步模式指的是MySQL 主服务器上I/O thread 线程将二进制日志写入binlog文件之后就返回客户端结果，不会考虑二进制日志是否完整传输到从服务器以及是否完整存放到从服务器上的relay log(中继日志)中，这种模式一旦主服务(器)宕机，数据就可能会发生丢失。</p>
<ul>
<li>全同步复制（<code>Fully synchronous replication</code>）</li>
</ul>
<p>指当主库执行完一个事务，所有的从库都执行了该事务才返回给客户端。因为需要等待所有从库执行完该事务才能返回，所以全同步复制的性能必然会收到严重的影响。</p>
<ul>
<li>半同步复制（<code>Semisynchronous replication</code>）</li>
</ul>
<p>介于异步复制和全同步复制之间，主库在执行完客户端提交的事务后不是立刻返回给客户端，而是等待至少一个从库接收到并写到relay log中才返回给客户端。相对于异步复制，半同步复制提高了数据的安全性，同时它也造成了一定程度的延迟，这个延迟最少是一个TCP/IP往返的时间。所以，半同步复制最好在低延时的网络中使用。</p>
<h3 id="半同步潜藏问题"><a href="#半同步潜藏问题" class="headerlink" title="半同步潜藏问题"></a>半同步潜藏问题</h3><p><code>mysql5.7</code>版本前,客户端事务在存储引擎层提交后，在得到从库确认的过程中，主库宕机了，客户端会收到事务提交失败的信息,此时，可能的情况有两种:</p>
<ul>
<li>事务还没发送到从库上</li>
<li>事务已经发送到从库上</li>
</ul>
<p>此时客户端由于提交失败，再次提交事务，出现问题.</p>
<p><code>mysql5.7</code>版本引入新的半同步方式，事务提交需要从库同步完成.通过<code>rpl_semi_sync_master_wait_point</code>参数控制：</p>
<ul>
<li><code>AFTER_SYNC</code> , 这个是新的半同步方案</li>
<li><code>AFTER_COMMIT</code>, 这个是老的半同步方案</li>
</ul>
<h3 id="开启半同步复制"><a href="#开启半同步复制" class="headerlink" title="开启半同步复制"></a>开启半同步复制</h3><p>半同步复制的安装部署条件:</p>
<ul>
<li><code>MySQL 5.5</code>及以上版本</li>
<li>变量<code>have_dynamic_loading</code>为<code>YES</code> (查看命令：<code>show variables like "have_dynamic_loading";</code>)</li>
<li>主从复制已经配置完成</li>
</ul>
<p>半同步复制是以插件的形式安装的，默认安装包在<code>/usr/local/mysql/lib/plugin/</code>目录下.可以通过命令查看</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查看所有插件</span>
<span class="token keyword">show</span> plugins<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">-- 模糊查询</span>
<span class="token keyword">SELECT</span> PLUGIN_NAME<span class="token punctuation">,</span> PLUGIN_STATUS <span class="token keyword">FROM</span> INFORMATION_SCHEMA<span class="token punctuation">.</span>PLUGINS  <span class="token keyword">WHERE</span> PLUGIN_NAME <span class="token operator">LIKE</span> <span class="token string">'%semi%'</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>启动方式一：通过命令</li>
</ul>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 主库执行安装插件</span>
INSTALL PLUGIN rpl_semi_sync_master <span class="token keyword">SONAME</span> <span class="token string">'semisync_master.so'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 主库执行开启</span>
<span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> rpl_semi_sync_master_enabled <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>


<span class="token comment" spellcheck="true">-- 从库执行安装插件</span>
INSTALL PLUGIN rpl_semi_sync_slave <span class="token keyword">SONAME</span> <span class="token string">'semisync_slave.so'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 从库执行开启</span>
<span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> rpl_semi_sync_master_enabled <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>


<span class="token comment" spellcheck="true">-- 从库重启IO线程</span>
STOP SLAVE IO_THREAD<span class="token punctuation">;</span>
<span class="token keyword">START</span> SLAVE IO_THREAD<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">-- 主库卸载插件(先关闭半同步复制功能)</span>
UNINSTALL PLUGIN rpl_semi_sync_master<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 从库卸载插件(先关闭半同步复制功能)</span>
UNINSTALL PLUGIN rpl_semi_sync_slave<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>启动方式二：通过<code>my.cnf</code>,需要重启<code>mysql</code></li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 主库配置</span>
plugin-load<span class="token operator">=</span>rpl_semi_sync_master<span class="token operator">=</span>semisync_master.so
rpl_semi_sync_master_enabled<span class="token operator">=</span>1

<span class="token comment" spellcheck="true"># 从库配置</span>
plugin-load<span class="token operator">=</span>rpl_semi_sync_slave<span class="token operator">=</span>semisync_slave.so
rpl_semi_sync_slave_enabled<span class="token operator">=</span>1

<span class="token comment" spellcheck="true"># 如果既是主又是从</span>
plugin-load<span class="token operator">=</span><span class="token string">"rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so"</span>
rpl-semi-sync-master-enabled<span class="token operator">=</span>1
rpl-semi-sync-slave-enabled<span class="token operator">=</span>1
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>需要注意，<code>Mysql半同步复制</code>并不是严格意义上的半同步复制。当半同步复制发生超时时（由<code>rpl_semi_sync_master_timeout</code>参数控制，单位是毫秒，默认为<code>10000</code>，即<code>10s</code>），会暂时关闭半同步复制，转而使用异步复制。当master dump线程发送完一个事务的所有事件之后，如果在<code>rpl_semi_sync_master_timeout</code>内，收到了从库的响应，则主从又重新恢复为半同步复制。<code>一旦有一次超时自动降级为异步</code>.</p>
</blockquote>
<h3 id="查看半同步复制状态"><a href="#查看半同步复制状态" class="headerlink" title="查看半同步复制状态"></a>查看半同步复制状态</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查看插件</span>
mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> PLUGIN_NAME<span class="token punctuation">,</span> PLUGIN_STATUS <span class="token keyword">FROM</span> INFORMATION_SCHEMA<span class="token punctuation">.</span>PLUGINS  <span class="token keyword">WHERE</span> PLUGIN_NAME <span class="token operator">LIKE</span> <span class="token string">'%semi%'</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------+---------------+</span>
<span class="token operator">|</span> PLUGIN_NAME          <span class="token operator">|</span> PLUGIN_STATUS <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------+---------------+</span>
<span class="token operator">|</span> rpl_semi_sync_master <span class="token operator">|</span> ACTIVE        <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------+---------------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">-- 主库</span>
mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'Rpl_semi_sync_master_status'</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------------+-------+</span>
<span class="token operator">|</span> Variable_name               <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------------+-------+</span>
<span class="token operator">|</span> Rpl_semi_sync_master_status <span class="token operator">|</span> <span class="token keyword">ON</span>    <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------------+-------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">-- 从库</span>
mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'Rpl_semi_sync_slave_status'</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------+-------+</span>
<span class="token operator">|</span> Variable_name              <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------+-------+</span>
<span class="token operator">|</span> Rpl_semi_sync_slave_status <span class="token operator">|</span> <span class="token keyword">ON</span>    <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------+-------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>


<span class="token comment" spellcheck="true">-- 查看主库半同步插件运行参数</span>
<span class="token comment" spellcheck="true">-- rpl_semi_sync_master_wait_for_slave_count 设置主需要等待多少个slave应答，才能返回给客户端，默认为1</span>
mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%Rpl%'</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------------------+------------+</span>
<span class="token operator">|</span> Variable_name                             <span class="token operator">|</span> <span class="token keyword">Value</span>      <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------------------+------------+</span>
<span class="token operator">|</span> rpl_semi_sync_master_enabled              <span class="token operator">|</span> <span class="token keyword">ON</span>         <span class="token operator">|</span>
<span class="token operator">|</span> rpl_semi_sync_master_timeout              <span class="token operator">|</span> <span class="token number">10000</span>      <span class="token operator">|</span>
<span class="token operator">|</span> rpl_semi_sync_master_trace_level          <span class="token operator">|</span> <span class="token number">32</span>         <span class="token operator">|</span>
<span class="token operator">|</span> rpl_semi_sync_master_wait_for_slave_count <span class="token operator">|</span> <span class="token number">1</span>          <span class="token operator">|</span> 
<span class="token operator">|</span> rpl_semi_sync_master_wait_no_slave        <span class="token operator">|</span> <span class="token keyword">ON</span>         <span class="token operator">|</span>
<span class="token operator">|</span> rpl_semi_sync_master_wait_point           <span class="token operator">|</span> AFTER_SYNC <span class="token operator">|</span>
<span class="token operator">|</span> rpl_stop_slave_timeout                    <span class="token operator">|</span> <span class="token number">31536000</span>   <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------------------+------------+</span>

<span class="token comment" spellcheck="true">-- 查看从库半同步插件运行参数</span>
mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%Rpl%'</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------------+----------+</span>
<span class="token operator">|</span> Variable_name                   <span class="token operator">|</span> <span class="token keyword">Value</span>    <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------------+----------+</span>
<span class="token operator">|</span> rpl_semi_sync_slave_enabled     <span class="token operator">|</span> <span class="token keyword">ON</span>       <span class="token operator">|</span>
<span class="token operator">|</span> rpl_semi_sync_slave_trace_level <span class="token operator">|</span> <span class="token number">32</span>       <span class="token operator">|</span>
<span class="token operator">|</span> rpl_stop_slave_timeout          <span class="token operator">|</span> <span class="token number">31536000</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------------+----------+</span>
<span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>


<span class="token comment" spellcheck="true">-- 查看主库半同步插件运行状态status</span>
mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'%Rpl_semi%'</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------+-------+</span>
<span class="token operator">|</span> Variable_name                              <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------+-------+</span>
<span class="token operator">|</span> Rpl_semi_sync_master_clients               <span class="token operator">|</span> <span class="token number">1</span>     <span class="token operator">|</span>
<span class="token operator">|</span> Rpl_semi_sync_master_net_avg_wait_time     <span class="token operator">|</span> <span class="token number">0</span>     <span class="token operator">|</span>
<span class="token operator">|</span> Rpl_semi_sync_master_net_wait_time         <span class="token operator">|</span> <span class="token number">0</span>     <span class="token operator">|</span>
<span class="token operator">|</span> Rpl_semi_sync_master_net_waits             <span class="token operator">|</span> <span class="token number">1</span>     <span class="token operator">|</span>
<span class="token operator">|</span> Rpl_semi_sync_master_no_times              <span class="token operator">|</span> <span class="token number">0</span>     <span class="token operator">|</span>
<span class="token operator">|</span> Rpl_semi_sync_master_no_tx                 <span class="token operator">|</span> <span class="token number">0</span>     <span class="token operator">|</span>
<span class="token operator">|</span> Rpl_semi_sync_master_status                <span class="token operator">|</span> <span class="token keyword">ON</span>    <span class="token operator">|</span>
<span class="token operator">|</span> Rpl_semi_sync_master_timefunc_failures     <span class="token operator">|</span> <span class="token number">0</span>     <span class="token operator">|</span>
<span class="token operator">|</span> Rpl_semi_sync_master_tx_avg_wait_time      <span class="token operator">|</span> <span class="token number">461</span>   <span class="token operator">|</span>
<span class="token operator">|</span> Rpl_semi_sync_master_tx_wait_time          <span class="token operator">|</span> <span class="token number">461</span>   <span class="token operator">|</span>
<span class="token operator">|</span> Rpl_semi_sync_master_tx_waits              <span class="token operator">|</span> <span class="token number">1</span>     <span class="token operator">|</span>
<span class="token operator">|</span> Rpl_semi_sync_master_wait_pos_backtraverse <span class="token operator">|</span> <span class="token number">0</span>     <span class="token operator">|</span>
<span class="token operator">|</span> Rpl_semi_sync_master_wait_sessions         <span class="token operator">|</span> <span class="token number">0</span>     <span class="token operator">|</span>
<span class="token operator">|</span> Rpl_semi_sync_master_yes_tx                <span class="token operator">|</span> <span class="token number">1</span>     <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------+-------+</span>
<span class="token number">14</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 正常情况下插入数据</span>
mysql<span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> test<span class="token punctuation">.</span>testttt <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'22'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">-- 从库关闭主从复制</span>
mysql<span class="token operator">></span> stop slave<span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">-- 再次插入数据,时间与设置的超时时间吻合</span>
mysql<span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> test<span class="token punctuation">.</span>testttt <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'222'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">10.01</span> sec<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">-- 查看半同步插件状态</span>
mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'Rpl_semi_sync_master_status'</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------------+-------+</span>
<span class="token operator">|</span> Variable_name               <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------------+-------+</span>
<span class="token operator">|</span> Rpl_semi_sync_master_status <span class="token operator">|</span> <span class="token keyword">OFF</span>   <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------------+-------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'Rpl_semi_sync_slave_status'</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------+-------+</span>
<span class="token operator">|</span> Variable_name              <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------+-------+</span>
<span class="token operator">|</span> Rpl_semi_sync_slave_status <span class="token operator">|</span> <span class="token keyword">OFF</span>   <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------+-------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">-- 从库开启同步</span>
mysql<span class="token operator">></span> <span class="token keyword">start</span> slave<span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">-- 再次插入数据,恢复正常</span>
mysql<span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> test<span class="token punctuation">.</span>testttt <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'222'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">-- 查看半同步插件状态也是ON</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="其它注意参数"><a href="#其它注意参数" class="headerlink" title="其它注意参数"></a>其它注意参数</h3><ul>
<li><code>sync_binlog</code></li>
</ul>
<p>默认，<code>sync_binlog=0</code>，表示MySQL不控制binlog的刷新，由文件系统自己控制它的缓存的刷新。这时候的性能是最好的，但是风险也是最大的。因为一旦系统Crash，在binlog_cache中的所有binlog信息都会被丢失。</p>
<p>如果<code>sync_binlog&gt;0</code>，表示每sync_binlog次事务提交，MySQL调用文件系统的刷新操作将缓存刷下去。最安全的就是<code>sync_binlog=1</code>了，表示每次事务提交，MySQL都会把binlog刷下去，是最安全但是性能损耗最大的设置。</p>
<ul>
<li>sync_relay_log</li>
</ul>
<p>默认为<code>10000</code>，即每<code>10000</code>次<code>sync_relay_log</code>事件会刷新到磁盘。为<code>0</code>则表示不刷新，交由系统的<code>cache</code>控制</p>
<ul>
<li>同步刷盘配置</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># my.cnf,最安全配置,牺牲性能</span>
sync_binlog<span class="token operator">=</span>1
sync_master_info<span class="token operator">=</span>1
sync_relay_log<span class="token operator">=</span>1
sync_relay_log_info<span class="token operator">=</span>1
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://www.cnblogs.com/kevingrace/p/10228694.html">MySQL 半同步复制模式说明及配置示例</a></li>
</ul>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql【双主模式+haproxy+keepalived高可用】</title>
    <url>/mysql-shuang-zhu-mo-shi-haproxy-keepalived-gao-ke-yong/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>前文仅仅通过<code>mysql双主 + keepalived</code>实现高可用，这种方式在一台出现问题的时候可以切换，但是正常情况下只有一台服务使用，无法实现负载均衡，本文引入<code>haproxy</code>实现正常情况下也能有负载均衡的效果.</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ol>
<li>安装<code>haproxy</code></li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> haproxy
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="2">
<li>修改<code>haproxy</code>配置文件<br>默认目录：<code>/etc/haproxy/haproxy.cfg</code></li>
</ol>
<pre class="line-numbers language-cfg"><code class="language-cfg">#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   http://haproxy.1wt.eu/download/1.4/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000


######## 监控界面配置 #################
listen admin_status
        bind 0.0.0.0:8888
        mode http
        stats refresh 30s
        stats uri /
        stats realm welcome login\ Haproxy
        stats auth admin:123456
        stats hide-version
        stats admin if TRUE
        ########frontend配置##############

######## mysql负载均衡配置 ###############
listen mysql
        bind 0.0.0.0:13306
        mode tcp
        balance roundrobin                  # 负载均衡策略
        #option tcplog                      # tcp日志
        option mysql-check user haproxy     # 在mysql中创建无任何权限用户haproxy，且无密码
        server mysql_1 192.168.41.141:3306 check weight 1 maxconn 2000
        server mysql_2 192.168.41.142:3306 check weight 1 maxconn 2000
        option tcpka                        # 缺少这个配置,可能无法查看到数据库
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p><code>option mysql-check user haproxy</code>这里是配置健康检查的，需要在mysql中创建无任何权限用户<code>haproxy</code>，且无密码.    </p>
<ul>
<li><code>CREATE USER 'haproxy'@'%' IDENTIFIED BY ''; </code></li>
</ul>
</blockquote>
<ol start="3">
<li>修改ulimit配置<br><code>haproxy</code>要求<code>ulimit</code>大于<code>（maxconn*2 + 15 ）</code></li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#临时修改</span>
<span class="token function">ulimit</span> -n 65536

<span class="token comment" spellcheck="true">#永久修改，需要修改/etc/security/limits.conf配置文件，文末增加以下内容，然后重新登录就可以生效</span>
* soft nofile 65536
* hard nofile 65536
* soft nproc 65565
* hard nproc 65565
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="4">
<li>启动服务并配置自启动</li>
</ol>
<p>启动后访问<code>8888</code>端口，使用<code>admin/123456</code>登录就可以看到<code>UI界面</code>了。</p>
<pre class="line-numbers language-bash"><code class="language-bash">systemctl start haproxy
systemctl <span class="token function">enable</span> haproxy
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ol start="5">
<li>修改<code>keepalived</code>配置<br>前文配置的<code>keepalived</code>监控的是<code>mysqld</code>进程，需要修改成监控<code>haproxy</code>进程.这样不管哪台机器的<code>mysql</code>或者<code>haproxy</code>或者<code>keepalived</code>出现问题，都不影响使用.</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 修改的配置如下</span>
vrrp_script chk_mysql <span class="token punctuation">{</span>
    script <span class="token string">"killall -0 haproxy"</span>
    interval 2
    <span class="token function">timeout</span> 2
    fall 3
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="6">
<li>测试<br>通过<code>VIP</code>连接数据库，增删改查测试.</li>
</ol>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>haproxy</tag>
        <tag>mysql</tag>
        <tag>keepalived</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql【双主模式+keepalived高可用】</title>
    <url>/mysql-shuang-zhu-mo-shi-keepalived-gao-ke-yong/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p><code>mysql</code>双主模式下，在任意一台<code>mysql</code>上写数据都会同步到另一台上，本章通过<code>keepalived VIP</code>实现如果一台服务挂了会自动切换到另一台<code>mysql</code>上.</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 安装keepalived,centos默认安装了</span>
yum <span class="token function">install</span> keepalived -y
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>修改双主机<code>/etc/keepalived/keepalived.conf</code>配置.</p>
<pre class="line-numbers language-json"><code class="language-json">global_defs <span class="token punctuation">{</span>
   router_id mysql
<span class="token punctuation">}</span>

vrrp_script chk_mysql <span class="token punctuation">{</span>
    script <span class="token string">"killall -0 mysqld"</span>      // 检测mysql进程是否存活
    interval <span class="token number">2</span>
    timeout <span class="token number">2</span>
    fall <span class="token number">3</span>
<span class="token punctuation">}</span>

vrrp_instance mysql <span class="token punctuation">{</span>
    state MASTER
    interface ens33
    virtual_router_id <span class="token number">51</span>
    priority <span class="token number">100</span>                // 另一台权重可以设置<span class="token number">90</span>，防止争抢VIP
    advert_int <span class="token number">1</span>
    authentication <span class="token punctuation">{</span>
        auth_type PASS
        auth_pass <span class="token number">1111</span>
    <span class="token punctuation">}</span>
    virtual_ipaddress <span class="token punctuation">{</span>
        <span class="token number">192.168</span>.<span class="token number">41.140</span>          // 设置虚拟ip
    <span class="token punctuation">}</span>
    track_script <span class="token punctuation">{</span>
        chk_mysql
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 通过命令可以看到VIP已经在一台机器上了，也可以通过虚拟IP连接上mysql</span>
<span class="token punctuation">[</span>root@mysql01 mysql<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ip addr sh ens33</span>
2: ens33: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 00:50:56:26:c2:7e brd ff:ff:ff:ff:ff:ff
    inet 192.168.41.141/24 brd 192.168.41.255 scope global ens33
       valid_lft forever preferred_lft forever
    inet 192.168.41.140/32 scope global ens33
       valid_lft forever preferred_lft forever
    inet6 fe80::250:56ff:fe26:c27e/64 scope <span class="token function">link</span> 
       valid_lft forever preferred_lft forever
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 关掉mysql服务,命令可能根据你安装方式有区别</span>
<span class="token function">service</span> mysql stop

<span class="token comment" spellcheck="true"># 再次在两台机器上执行命令，可以看到VIP转移了,可以继续通过VIP连接mysql</span>
ip addr sh ens33
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>keepalived</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql【双主模式配置】</title>
    <url>/mysql-shuang-zhu-mo-shi-pei-zhi/</url>
    <content><![CDATA[<h3 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h3><table>
<thead>
<tr>
<th>主机</th>
<th>系统</th>
<th>IP</th>
<th>mysql</th>
</tr>
</thead>
<tbody><tr>
<td><code>mysql01</code></td>
<td><code>centos7</code></td>
<td><code>192.168.41.141</code></td>
<td>已部署<code>5.7.31</code></td>
</tr>
<tr>
<td><code>mysql02</code></td>
<td><code>centod7</code></td>
<td><code>192.168.41.142</code></td>
<td>已部署<code>5.7.31</code></td>
</tr>
</tbody></table>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><code>MySQL</code>中有一种日志叫做 <code>bin日志</code>（二进制日志），这个日志会记录下所有修改了数据库的SQL语句。主从复制的原理其实就是<code>从服务器</code>向<code>主服务器</code>请求这个日志文件，<code>主服务器</code>会把这个 <code>bin日志</code>复制到<code>从服务器</code>上执行一遍，这样<code>从服务器</code>上的数据就和<code>主服务器</code>上的数据相同了。</p>
<p><img data-src="/images/mysql.png" alt="原理图"></p>
<ol>
<li>主服务器必须启用二进制日志（log-bin），记录任何修改了数据库数据的事件；</li>
<li>从服务器开启一个线程（I/O Thread)把自己扮演成 MySQL 的客户端，通过 MySQL 协议，请求主服务器的二进制日志文件中的事件；</li>
<li>主服务器启动一个线程（Dump Thread），检查自己二进制日志中的事件，跟对方请求的位置对比，如果不带请求位置参数，则主服务器就会从第一个日志文件中的第一个事件一个一个发送给从服务器；</li>
<li>从服务器接收到主服务器发送过来的数据把它放置到中继日志（relay log）文件中。并记录该次请求到主服务器的具体哪一个二进制日志文件内部的哪一个位置（主服务器中的二进制文件会有多个，其名结尾以6位数递增）；</li>
<li>从服务器启动另外一个线程（SQL Thread），把 relay log 中的事件读取出来，并在本地再执行一次。</li>
</ol>
<h3 id="双主架构思路"><a href="#双主架构思路" class="headerlink" title="双主架构思路"></a>双主架构思路</h3><ul>
<li>两台<code>mysql</code>都可读写，互为主备</li>
<li>两台主库之间做高可用,可以采用<code>haproxy</code>、<code>keepalived</code>等方案</li>
</ul>
<h3 id="双主配置"><a href="#双主配置" class="headerlink" title="双主配置"></a>双主配置</h3><blockquote>
<p>主要配置文件<code>/etc/my.cnf</code></p>
</blockquote>
<ol>
<li>修改配置</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash">vim /etc/my.cnf

<span class="token comment" spellcheck="true"># 添加以下配置</span>
<span class="token comment" spellcheck="true"># id 保证唯一</span>
server-id<span class="token operator">=</span>1
<span class="token comment" spellcheck="true"># 开启binlog 日志</span>
log-bin<span class="token operator">=</span>mysql-bin
<span class="token comment" spellcheck="true"># 自增ID保证不冲突, 一主1,3,5 另一主2,4,6</span>
auto-increment-increment<span class="token operator">=</span>2
auto-increment-offset<span class="token operator">=</span>1
<span class="token comment" spellcheck="true"># 将复制事件写入binlog,一台服务器既做主库又做从库此选项必须要开启</span>
log-slave-updates<span class="token operator">=</span>true
<span class="token comment" spellcheck="true"># 忽略同步的数据库</span>
replicate-ignore-db<span class="token operator">=</span>information_schema
replicate-ignore-db<span class="token operator">=</span>performance_schema
replicate-ignore-db<span class="token operator">=</span>mysql
replicate-ignore-db<span class="token operator">=</span>sys
<span class="token comment" spellcheck="true"># binlog文件大小限制</span>
max_binlog_size<span class="token operator">=</span>1024M
<span class="token comment" spellcheck="true"># binlog格式</span>
binlog-format<span class="token operator">=</span>ROW
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>另一台配置</p>
<pre class="line-numbers language-bash"><code class="language-bash">server-id<span class="token operator">=</span>2
log-bin<span class="token operator">=</span>mysql-bin
auto-increment-increment<span class="token operator">=</span>2
auto-increment-offset<span class="token operator">=</span>2
log-slave-updates<span class="token operator">=</span>true
replicate-ignore-db<span class="token operator">=</span>information_schema
replicate-ignore-db<span class="token operator">=</span>performance_schema
replicate-ignore-db<span class="token operator">=</span>mysql
replicate-ignore-db<span class="token operator">=</span>sys
max_binlog_size<span class="token operator">=</span>1024M
binlog-format<span class="token operator">=</span>ROW
<span class="token comment" spellcheck="true">#binlog_rows_query_log_events=on # 在row 模式的binlog中包含SQL EVENTS（即SQL语句也会保留）</span>
<span class="token comment" spellcheck="true">#master-info-repository=TABLE</span>
<span class="token comment" spellcheck="true">#relay-log-info-repository=TABLE</span>
<span class="token comment" spellcheck="true">#slave-skip-errors=all # 忽略复制产生的错误</span>
<span class="token comment" spellcheck="true">#slave-skip-errors=1062,1032,1060 # 跳过已知错误,主键冲突、表已存在等错误代码如1062,1032,1060等</span>
<span class="token comment" spellcheck="true">#relay-log-purge = 1    #是否自动清空不再需要中继日志时。默认值为1(启用)</span>
<span class="token comment" spellcheck="true">#expire_logs_days = 30  #超过 30 天的 binlog 删除</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>slave_skip_errors</code>参数说明:</p>
<pre><code>slave_skip_errors选项有四个可用值，分别为：off，all，ErorCode，ddl_exist_errors, 默认情况下该参数值是off.
mysql5.6及MySQL Cluster NDB 7.3以及后续版本增加了参数ddl_exist_errors，该参数包含一系列error code（1007,1008,1050,1051,1054,1060,1061,1068,1094,1146）
一些error code代表的错误如下：
    1007：数据库已存在，创建数据库失败
    1008：数据库不存在，删除数据库失败
    1050：数据表已存在，创建数据表失败
    1051：数据表不存在，删除数据表失败
    1054：字段不存在，或程序文件跟数据库有冲突
    1060：字段重复，导致无法插入
    1061：重复键名
    1068：定义了多个主键
    1094：位置线程ID
    1146：数据表缺失，请恢复数据库
    1053：复制过程中主服务器宕机
    1062：主键冲突 Duplicate entry '%s' for key %d
</code></pre>
<ol start="2">
<li>重启<code>mysql</code></li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 根据安装方式选择</span>
<span class="token function">service</span> mysql restart
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ol start="3">
<li>添加主从同步账户</li>
</ol>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- mysql01</span>
<span class="token keyword">grant</span> <span class="token keyword">replication</span> slave <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'slave'</span>@'<span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">41.142</span><span class="token string">' identified by '</span><span class="token number">123456</span>'<span class="token punctuation">;</span>
flush <span class="token keyword">privileges</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">-- mysql02</span>
<span class="token keyword">grant</span> <span class="token keyword">replication</span> slave <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'slave'</span>@'<span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">41.141</span><span class="token string">' identified by '</span><span class="token number">123456</span>'<span class="token punctuation">;</span>
flush <span class="token keyword">privileges</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="4">
<li>查看主库状态</li>
</ol>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 分别在mysql01,mysql02查看, 这里由于都是新安装的，status完全一样，实际可能不一样</span>
<span class="token comment" spellcheck="true">-- 记住file的名字和position的值，因为主从同步，从数据库是通过读取主数据库的日志文件来完成同步的，所以需要文件名字和日志的当前位置</span>
mysql<span class="token operator">></span> <span class="token keyword">show</span> master <span class="token keyword">status</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+----------+--------------+------------------+-------------------+</span>
<span class="token operator">|</span> <span class="token keyword">File</span>             <span class="token operator">|</span> Position <span class="token operator">|</span> Binlog_Do_DB <span class="token operator">|</span> Binlog_Ignore_DB <span class="token operator">|</span> Executed_Gtid_Set <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+----------+--------------+------------------+-------------------+</span>
<span class="token operator">|</span> mysql<span class="token operator">-</span>bin<span class="token number">.000001</span> <span class="token operator">|</span>      <span class="token number">604</span> <span class="token operator">|</span>              <span class="token operator">|</span>                  <span class="token operator">|</span>                   <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+----------+--------------+------------------+-------------------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="5">
<li>配置同步信息</li>
</ol>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- mysql01</span>
change master <span class="token keyword">to</span> master_host<span class="token operator">=</span><span class="token string">'192.168.41.142'</span><span class="token punctuation">,</span>master_port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>master_user<span class="token operator">=</span><span class="token string">'slave'</span><span class="token punctuation">,</span>master_password<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">,</span>master_log_file<span class="token operator">=</span><span class="token string">'mysql-bin.000001'</span><span class="token punctuation">,</span>master_log_pos<span class="token operator">=</span><span class="token number">604</span><span class="token punctuation">;</span>

<span class="token keyword">start</span> slave<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">-- mysql02</span>
change master <span class="token keyword">to</span> master_host<span class="token operator">=</span><span class="token string">'192.168.41.141'</span><span class="token punctuation">,</span>master_port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>master_user<span class="token operator">=</span><span class="token string">'slave'</span><span class="token punctuation">,</span>master_password<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">,</span>master_log_file<span class="token operator">=</span><span class="token string">'mysql-bin.000001'</span><span class="token punctuation">,</span>master_log_pos<span class="token operator">=</span><span class="token number">604</span><span class="token punctuation">;</span>

<span class="token keyword">start</span> slave<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="6">
<li>查看同步状态</li>
</ol>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 分别在mysql01,mysql02查看同步状态</span>
mysql<span class="token operator">></span> <span class="token keyword">show</span> slave <span class="token keyword">status</span>\G
<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">.</span> <span class="token keyword">row</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
               Slave_IO_State: Waiting <span class="token keyword">for</span> master <span class="token keyword">to</span> send event
                  Master_Host: <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">41.141</span>
                  Master_User: slave
                  Master_Port: <span class="token number">3306</span>
                Connect_Retry: <span class="token number">60</span>
              Master_Log_File: mysql<span class="token operator">-</span>bin<span class="token number">.000001</span>
          Read_Master_Log_Pos: <span class="token number">604</span>
               Relay_Log_File: mysql02<span class="token operator">-</span>relay<span class="token operator">-</span>bin<span class="token number">.000002</span>
                Relay_Log_Pos: <span class="token number">320</span>
        Relay_Master_Log_File: mysql<span class="token operator">-</span>bin<span class="token number">.000001</span>
             Slave_IO_Running: Yes      <span class="token comment" spellcheck="true">-- 状态正常</span>
            Slave_SQL_Running: Yes      <span class="token comment" spellcheck="true">-- 状态正常</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="7">
<li>测试</li>
</ol>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 随便在 mysql01 或 mysql02 上创建库、表或者数据都能同步到另一台机器上</span>
<span class="token keyword">create</span> <span class="token keyword">database</span> test<span class="token punctuation">;</span>

<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>t_type<span class="token punctuation">`</span> <span class="token punctuation">(</span>
                            <span class="token punctuation">`</span>type_id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'资源类型id'</span><span class="token punctuation">,</span>
                            <span class="token punctuation">`</span>type_name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'资源类型名称'</span><span class="token punctuation">,</span>
                            <span class="token punctuation">`</span>type_remark<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'备注'</span><span class="token punctuation">,</span>
                            <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">DATETIME</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>
                            <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">DATETIME</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span>
                            <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>type_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                            <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>type_name<span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>

<span class="token keyword">insert</span> <span class="token keyword">into</span> t_type<span class="token punctuation">(</span>type_name<span class="token punctuation">,</span> type_remark<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'菜单资源'</span><span class="token punctuation">,</span><span class="token string">'用于确定页面菜单资源，分多级菜单'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> t_type<span class="token punctuation">(</span>type_name<span class="token punctuation">,</span> type_remark<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'按钮资源'</span><span class="token punctuation">,</span><span class="token string">'用于确定页面按钮资源'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> t_type<span class="token punctuation">(</span>type_name<span class="token punctuation">,</span> type_remark<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'路由资源'</span><span class="token punctuation">,</span><span class="token string">'用于确定网关路由资源'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="8">
<li>开启<code>MySQL5.6</code>之后引入的<code>GTID</code>复制功能</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash">vim /etc/my.cnf
<span class="token comment" spellcheck="true"># 增加以下配置,开启gtid</span>
gtid-mode<span class="token operator">=</span>on
enforce-gtid-consistency<span class="token operator">=</span>on
<span class="token comment" spellcheck="true"># 修改完my.cnf需要重启mysql才能生效</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- mysql01,mysql02分别执行以下命令</span>
mysql<span class="token operator">></span> stop slave<span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">></span> change master <span class="token keyword">to</span> MASTER_AUTO_POSITION<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">></span> <span class="token keyword">start</span> slave<span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p><code>GTID</code>又叫<code>全局事务ID</code>（<code>Global Transaction ID</code>），是一个已提交事务的编号，并且是一个全局唯一的编号。<code>MySQL5.6</code>版本之后在主从复制类型上新增了<code>GTID复制</code>。</p>
<ul>
<li><a href="https://blog.51cto.com/sumongodb/2090307">GTID！MySQL复制中的核武器</a></li>
</ul>
</blockquote>
<h3 id="双主配置之前数据备份"><a href="#双主配置之前数据备份" class="headerlink" title="双主配置之前数据备份"></a>双主配置之前数据备份</h3><blockquote>
<p>使用<code>mysqldump</code>命令,<a href="https://www.cnblogs.com/liuriqi/p/4207310.html">MySQL操作mysqldump命令详解</a></p>
</blockquote>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 导出主数据库的数据</span>
mysqldump <span class="token operator">-</span>uroot <span class="token operator">-</span>p <span class="token comment" spellcheck="true">--opt --all-databases >/all_databases.sql</span>

<span class="token comment" spellcheck="true">-- 导入数据</span>
mysql <span class="token operator">-</span>u root <span class="token operator">-</span>p  <span class="token operator">&lt;</span> <span class="token operator">/</span>all_databases<span class="token punctuation">.</span>sql

<span class="token comment" spellcheck="true">-- 或者使用source导入</span>
<span class="token comment" spellcheck="true">-- mysql> source /all_databases.sql;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql【数据库优化】</title>
    <url>/mysql-shu-ju-ku-you-hua/</url>
    <content><![CDATA[<h3 id="mysql慢查询"><a href="#mysql慢查询" class="headerlink" title="mysql慢查询"></a>mysql慢查询</h3><p>查看<code>mysql</code>慢查询日志</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 慢查询日志</span>
<span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%slow_query%'</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------+--------------------------------------+</span>
<span class="token operator">|</span> Variable_name       <span class="token operator">|</span> <span class="token keyword">Value</span>                                <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------+--------------------------------------+</span>
<span class="token operator">|</span> slow_query_log      <span class="token operator">|</span> <span class="token keyword">OFF</span>                                  <span class="token operator">|</span>
<span class="token operator">|</span> slow_query_log_file <span class="token operator">|</span> <span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>mysql<span class="token operator">/</span><span class="token number">7b32a384231d</span><span class="token operator">-</span>slow<span class="token punctuation">.</span>log <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------+--------------------------------------+</span>
<span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span>

<span class="token comment" spellcheck="true">-- 不使用索引查询日志</span>
mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%log_que%'</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------+-------+</span>
<span class="token operator">|</span> Variable_name                 <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------+-------+</span>
<span class="token operator">|</span> log_queries_not_using_indexes <span class="token operator">|</span> <span class="token keyword">OFF</span>   <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------+-------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span>

<span class="token comment" spellcheck="true">-- 查询时间设置,查询超过多少秒才记录</span>
mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%long_que%'</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------+-----------+</span>
<span class="token operator">|</span> Variable_name   <span class="token operator">|</span> <span class="token keyword">Value</span>     <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------+-----------+</span>
<span class="token operator">|</span> long_query_time <span class="token operator">|</span> <span class="token number">10.000000</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------+-----------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>开启慢查询日志</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 方法一</span>
<span class="token keyword">set</span> <span class="token keyword">global</span>  slow_query_log<span class="token operator">=</span><span class="token keyword">ON</span><span class="token punctuation">;</span>
<span class="token keyword">set</span> <span class="token keyword">global</span>  log_queries_not_using_indexes<span class="token operator">=</span><span class="token keyword">ON</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">-- 方法二，修改配置文件my.cnf</span>
slow_query_log <span class="token operator">=</span> <span class="token keyword">ON</span>
slow_query_log_file <span class="token operator">=</span> <span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>mysql<span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>slow<span class="token punctuation">.</span>log
long_query_time <span class="token operator">=</span> <span class="token number">1</span>
<span class="token comment" spellcheck="true">-- 方法二需要重启</span>
service mysqld restart
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>慢查询分析工具</p>
<pre class="line-numbers language-bash"><code class="language-bash">mysqldumpslow

pt-query-digest
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql【日志类型】</title>
    <url>/mysql-ri-zhi-lei-xing/</url>
    <content><![CDATA[<h3 id="mysql日志类型"><a href="#mysql日志类型" class="headerlink" title="mysql日志类型"></a>mysql日志类型</h3><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><code>redo log</code></td>
<td>重做日志</td>
<td>确保事务的持久性</td>
</tr>
<tr>
<td><code>undo log</code></td>
<td>回滚日志</td>
<td>用于回滚</td>
</tr>
<tr>
<td><code>bin log</code></td>
<td>二进制日志</td>
<td>主从复制</td>
</tr>
<tr>
<td><code>relay log</code></td>
<td>中继日志</td>
<td>主从复制</td>
</tr>
<tr>
<td><code>error log</code></td>
<td>错误日志</td>
<td></td>
</tr>
<tr>
<td><code>slow query log</code></td>
<td>慢查询日志</td>
<td></td>
</tr>
<tr>
<td><code>general log</code></td>
<td>一般查询日志</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql【监控指标采集mysqld-exporter】</title>
    <url>/mysql-jian-kong-zhi-biao-cai-ji-mysqld-exporter/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p><code>prometheus</code>监控插件<code>mysqld_exporter</code>可以采集<code>mysql</code>指标并告警展示.</p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>本文使用<code>docker</code>部署的方式</p>
<ol>
<li>创建用户并授权</li>
</ol>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'exporter'</span>@'<span class="token operator">%</span><span class="token string">' IDENTIFIED BY '</span>exporter<span class="token comment" spellcheck="true">#2020';</span>
<span class="token keyword">GRANT</span> PROCESS<span class="token punctuation">,</span> <span class="token keyword">REPLICATION</span> CLIENT <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'exporter'</span>@'<span class="token operator">%</span><span class="token string">';
GRANT SELECT ON performance_schema.* TO '</span>exporter<span class="token string">'@'</span><span class="token operator">%</span>'<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- GRANT ALL ON *.* TO 'exporter'@'%';</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>运行<code>mysqld_exporter</code></li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash">docker run -d \
  --name mysql_exporter \
  --restart always \
  -p 9104:9104 \
  -e DATA_SOURCE_NAME<span class="token operator">=</span><span class="token string">"exporter:123456@(192.168.41.141:3306)/"</span> \
  prom/mysqld-exporter
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="3">
<li>查看指标</li>
</ol>
<ul>
<li><a href="http://192.168.41.141:9104/metrics">http://192.168.41.141:9104/metrics</a></li>
</ul>
<p>如果没有问题，可以将指标采集到<code>prometheus</code></p>
<ol start="4">
<li>修改<code>prometheus</code>配置文件，<code>scrape_configs</code>下面添加<br>ssh no<br>如果需要,部署<code>prometheus</code></li>
</ol>
<pre class="line-numbers language-yml"><code class="language-yml"># prometheus.yml
global:
  scrape_interval:     15s
  evaluation_interval: 15s

alerting:
  alertmanagers:
  - static_configs:
    - targets:
      # - alertmanager:9093
rule_files:
  # - "rules.yml"
  # - "second_rules.yml"
scrape_configs:
  - job_name: 'prometheus'
    static_configs:
    - targets: ['192.168.41.128:9090']
  - job_name: 'mysql'
    static_configs:
      - targets: ['192.168.41.141:9104']
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动</span>
docker run --name<span class="token operator">=</span>prometheus -d -p 9090:9090  -v /root/prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml hub.deri.org.cn/k8s_monitor/prometheus:latest
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># vim /usr/local/prometheus/prometheus.yml</span>
<span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'mysql'</span>
    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'192.168.41.141:9104'</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>注意：如果是采用<code>prometheus-operator</code>方式安装<code>prometheus</code>,新增<code>target</code>示例：<br>新增<code>mysql-exporter-endpoints.yaml</code>,引入外部<code>服务</code></p>
</blockquote>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Endpoints
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>exporter
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> monitoring
<span class="token key atrule">subsets</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token key atrule">addresses</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">ip</span><span class="token punctuation">:</span> 192.168.1.47
    <span class="token key atrule">targetRef</span><span class="token punctuation">:</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> huawei<span class="token punctuation">-</span>mysql
      <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> metrics
        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9104</span>
        <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>新增<code>mysql-exporter-service.yaml</code></p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>
    <span class="token key atrule">prometheus.io/scrape</span><span class="token punctuation">:</span> <span class="token string">"true"</span>
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">app</span><span class="token punctuation">:</span> prometheus<span class="token punctuation">-</span>mysql<span class="token punctuation">-</span>exporter
    <span class="token key atrule">chart</span><span class="token punctuation">:</span> prometheus<span class="token punctuation">-</span>mysql<span class="token punctuation">-</span>exporter
    <span class="token key atrule">heritage</span><span class="token punctuation">:</span> Tiller
    <span class="token key atrule">jobLabel</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>exporter
    <span class="token key atrule">release</span><span class="token punctuation">:</span> prometheus<span class="token punctuation">-</span>operator
  <span class="token comment" spellcheck="true"># name与endpoints name保持一致</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>exporter
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> monitoring
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">ports</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> metrics
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9104</span>
    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">9104</span>
    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP
  <span class="token key atrule">type</span><span class="token punctuation">:</span> ClusterIP
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>新增<code>mysql-exporter-ServiceMonitor.yaml</code></p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> monitoring.coreos.com/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceMonitor
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token comment" spellcheck="true"># 注意标签 当前版本prometheus-operator是通过release: prometheus-operator标签来发现ServiceMonitor的</span>
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">app</span><span class="token punctuation">:</span> prometheus<span class="token punctuation">-</span>operator<span class="token punctuation">-</span>mysql<span class="token punctuation">-</span>exporter
    <span class="token key atrule">chart</span><span class="token punctuation">:</span> prometheus<span class="token punctuation">-</span>operator<span class="token punctuation">-</span>8.2.4
    <span class="token key atrule">heritage</span><span class="token punctuation">:</span> Tiller
    <span class="token key atrule">release</span><span class="token punctuation">:</span> prometheus<span class="token punctuation">-</span>operator
  <span class="token key atrule">name</span><span class="token punctuation">:</span> prometheus<span class="token punctuation">-</span>operator<span class="token punctuation">-</span>mysql<span class="token punctuation">-</span>exporter
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> monitoring
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> metrics
  <span class="token key atrule">jobLabel</span><span class="token punctuation">:</span> jobLabel
  <span class="token key atrule">selector</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 通过标签发现service</span>
    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>
      <span class="token key atrule">app</span><span class="token punctuation">:</span> prometheus<span class="token punctuation">-</span>mysql<span class="token punctuation">-</span>exporter
      <span class="token key atrule">release</span><span class="token punctuation">:</span> prometheus<span class="token punctuation">-</span>operator
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash">kubectl apply -f <span class="token keyword">.</span>
<span class="token comment" spellcheck="true"># 新增上面三个服务之后,prometheus页面就可以发现新增的mysql-exporter.</span>
<span class="token comment" spellcheck="true"># prometheus数据库中也能查询到mysql指标数据</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ol start="5">
<li>设置报警规则</li>
</ol>
<ul>
<li><a href="https://github.com/prometheus/mysqld_exporter/blob/master/example.rules">参考示例</a></li>
</ul>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">groups</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> GaleraAlerts
  <span class="token key atrule">rules</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> MySQLGaleraNotReady
    <span class="token key atrule">expr</span><span class="token punctuation">:</span> mysql_global_status_wsrep_ready <span class="token tag">!=</span> 1
    <span class="token key atrule">for</span><span class="token punctuation">:</span> 5m
    <span class="token key atrule">labels</span><span class="token punctuation">:</span>
      <span class="token key atrule">severity</span><span class="token punctuation">:</span> warning
    <span class="token key atrule">annotations</span><span class="token punctuation">:</span>
      <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">'{{$labels.job}} on {{$labels.instance}} is not ready.'</span>
      <span class="token key atrule">summary</span><span class="token punctuation">:</span> Galera cluster node not ready
  <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> MySQLGaleraOutOfSync
    <span class="token key atrule">expr</span><span class="token punctuation">:</span> (mysql_global_status_wsrep_local_state <span class="token tag">!=</span> 4 and mysql_global_variables_wsrep_desync
      == 0)
    <span class="token key atrule">for</span><span class="token punctuation">:</span> 5m
    <span class="token key atrule">labels</span><span class="token punctuation">:</span>
      <span class="token key atrule">severity</span><span class="token punctuation">:</span> warning
    <span class="token key atrule">annotations</span><span class="token punctuation">:</span>
      <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">'{{$labels.job}} on {{$labels.instance}} is not in sync ({{$value}}
        != 4).'</span>
      <span class="token key atrule">summary</span><span class="token punctuation">:</span> Galera cluster node out of sync
  <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> MySQLGaleraDonorFallingBehind
    <span class="token key atrule">expr</span><span class="token punctuation">:</span> (mysql_global_status_wsrep_local_state == 2 and mysql_global_status_wsrep_local_recv_queue
      <span class="token punctuation">></span> 100)
    <span class="token key atrule">for</span><span class="token punctuation">:</span> 5m
    <span class="token key atrule">labels</span><span class="token punctuation">:</span>
      <span class="token key atrule">severity</span><span class="token punctuation">:</span> warning
    <span class="token key atrule">annotations</span><span class="token punctuation">:</span>
      <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">'{{$labels.job}} on {{$labels.instance}} is a donor (hotbackup)
        and is falling behind (queue size {{$value}}).'</span>
      <span class="token key atrule">summary</span><span class="token punctuation">:</span> xtradb cluster donor node falling behind
  <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> MySQLReplicationNotRunning
    <span class="token key atrule">expr</span><span class="token punctuation">:</span> mysql_slave_status_slave_io_running == 0 or mysql_slave_status_slave_sql_running
      == 0
    <span class="token key atrule">for</span><span class="token punctuation">:</span> 2m
    <span class="token key atrule">labels</span><span class="token punctuation">:</span>
      <span class="token key atrule">severity</span><span class="token punctuation">:</span> critical
    <span class="token key atrule">annotations</span><span class="token punctuation">:</span>
      <span class="token key atrule">description</span><span class="token punctuation">:</span> Slave replication (IO or SQL) has been down for more than 2 minutes.
      <span class="token key atrule">summary</span><span class="token punctuation">:</span> Slave replication is not running
  <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> MySQLReplicationLag
    <span class="token key atrule">expr</span><span class="token punctuation">:</span> (mysql_slave_lag_seconds <span class="token punctuation">></span> 30) and on(instance) (predict_linear(mysql_slave_lag_seconds<span class="token punctuation">[</span>5m<span class="token punctuation">]</span><span class="token punctuation">,</span>
      60 * 2) <span class="token punctuation">></span> 0)
    <span class="token key atrule">for</span><span class="token punctuation">:</span> 1m
    <span class="token key atrule">labels</span><span class="token punctuation">:</span>
      <span class="token key atrule">severity</span><span class="token punctuation">:</span> critical
    <span class="token key atrule">annotations</span><span class="token punctuation">:</span>
      <span class="token key atrule">description</span><span class="token punctuation">:</span> The mysql slave replication has fallen behind and is not recovering
      <span class="token key atrule">summary</span><span class="token punctuation">:</span> MySQL slave replication is lagging
  <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> MySQLReplicationLag
    <span class="token key atrule">expr</span><span class="token punctuation">:</span> (mysql_heartbeat_lag_seconds <span class="token punctuation">></span> 30) and on(instance) (predict_linear(mysql_heartbeat_lag_seconds<span class="token punctuation">[</span>5m<span class="token punctuation">]</span><span class="token punctuation">,</span>
      60 * 2) <span class="token punctuation">></span> 0)
    <span class="token key atrule">for</span><span class="token punctuation">:</span> 1m
    <span class="token key atrule">labels</span><span class="token punctuation">:</span>
      <span class="token key atrule">severity</span><span class="token punctuation">:</span> critical
    <span class="token key atrule">annotations</span><span class="token punctuation">:</span>
      <span class="token key atrule">description</span><span class="token punctuation">:</span> The mysql slave replication has fallen behind and is not recovering
      <span class="token key atrule">summary</span><span class="token punctuation">:</span> MySQL slave replication is lagging
  <span class="token punctuation">-</span> <span class="token key atrule">alert</span><span class="token punctuation">:</span> MySQLInnoDBLogWaits
    <span class="token key atrule">expr</span><span class="token punctuation">:</span> rate(mysql_global_status_innodb_log_waits<span class="token punctuation">[</span>15m<span class="token punctuation">]</span>) <span class="token punctuation">></span> 10
    <span class="token key atrule">labels</span><span class="token punctuation">:</span>
      <span class="token key atrule">severity</span><span class="token punctuation">:</span> warning
    <span class="token key atrule">annotations</span><span class="token punctuation">:</span>
      <span class="token key atrule">description</span><span class="token punctuation">:</span> The innodb logs are waiting for disk at a rate of <span class="token punctuation">{</span><span class="token punctuation">{</span>$value<span class="token punctuation">}</span><span class="token punctuation">}</span> /
        second
      <span class="token key atrule">summary</span><span class="token punctuation">:</span> MySQL innodb log writes stalling
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-yml"><code class="language-yml"># 告警规则示例
groups:
- name: MySQLStatsAlert
  rules:
  - alert: MySQL is down
    expr: mysql_up == 0
    for: 1m
    labels:
      severity: critical
    annotations:
      summary: "Instance {{ $labels.instance }} MySQL is down"
      description: "MySQL database is down. This requires immediate action!"
  - alert: open files high
    expr: mysql_global_status_innodb_num_open_files > (mysql_global_variables_open_files_limit) * 0.75
    for: 1m
    labels:
      severity: warning
    annotations:
      summary: "Instance {{ $labels.instance }} open files high"
      description: "Open files is high. Please consider increasing open_files_limit."
  - alert: Read buffer size is bigger than max. allowed packet size
    expr: mysql_global_variables_read_buffer_size > mysql_global_variables_slave_max_allowed_packet 
    for: 1m
    labels:
      severity: warning
    annotations:
      summary: "Instance {{ $labels.instance }} Read buffer size is bigger than max. allowed packet size"
      description: "Read buffer size (read_buffer_size) is bigger than max. allowed packet size (max_allowed_packet).This can break your replication."
  - alert: Sort buffer possibly missconfigured
    expr: mysql_global_variables_innodb_sort_buffer_size <256*1024 or mysql_global_variables_read_buffer_size > 4*1024*1024 
    for: 1m
    labels:
      severity: warning
    annotations:
      summary: "Instance {{ $labels.instance }} Sort buffer possibly missconfigured"
      description: "Sort buffer size is either too big or too small. A good value for sort_buffer_size is between 256k and 4M."
  - alert: Thread stack size is too small
    expr: mysql_global_variables_thread_stack <196608
    for: 1m
    labels:
      severity: warning
    annotations:
      summary: "Instance {{ $labels.instance }} Thread stack size is too small"
      description: "Thread stack size is too small. This can cause problems when you use Stored Language constructs for example. A typical is 256k for thread_stack_size."
  - alert: Used more than 80% of max connections limited 
    expr: mysql_global_status_max_used_connections > mysql_global_variables_max_connections * 0.8
    for: 1m
    labels:
      severity: warning
    annotations:
      summary: "Instance {{ $labels.instance }} Used more than 80% of max connections limited"
      description: "Used more than 80% of max connections limited"
  - alert: InnoDB Force Recovery is enabled
    expr: mysql_global_variables_innodb_force_recovery != 0 
    for: 1m
    labels:
      severity: warning
    annotations:
      summary: "Instance {{ $labels.instance }} InnoDB Force Recovery is enabled"
      description: "InnoDB Force Recovery is enabled. This mode should be used for data recovery purposes only. It prohibits writing to the data."
  - alert: InnoDB Log File size is too small
    expr: mysql_global_variables_innodb_log_file_size < 16777216 
    for: 1m
    labels:
      severity: warning
    annotations:
      summary: "Instance {{ $labels.instance }} InnoDB Log File size is too small"
      description: "The InnoDB Log File size is possibly too small. Choosing a small InnoDB Log File size can have significant performance impacts."
  - alert: InnoDB Flush Log at Transaction Commit
    expr: mysql_global_variables_innodb_flush_log_at_trx_commit != 1
    for: 1m
    labels:
      severity: warning
    annotations:
      summary: "Instance {{ $labels.instance }} InnoDB Flush Log at Transaction Commit"
      description: "InnoDB Flush Log at Transaction Commit is set to a values != 1. This can lead to a loss of commited transactions in case of a power failure."
  - alert: Table definition cache too small
    expr: mysql_global_status_open_table_definitions > mysql_global_variables_table_definition_cache
    for: 1m
    labels:
      severity: page
    annotations:
      summary: "Instance {{ $labels.instance }} Table definition cache too small"
      description: "Your Table Definition Cache is possibly too small. If it is much too small this can have significant performance impacts!"
  - alert: Table open cache too small
    expr: mysql_global_status_open_tables >mysql_global_variables_table_open_cache * 99/100
    for: 1m
    labels:
      severity: page
    annotations:
      summary: "Instance {{ $labels.instance }} Table open cache too small"
      description: "Your Table Open Cache is possibly too small (old name Table Cache). If it is much too small this can have significant performance impacts!"
  - alert: Thread stack size is possibly too small
    expr: mysql_global_variables_thread_stack < 262144
    for: 1m
    labels:
      severity: page
    annotations:
      summary: "Instance {{ $labels.instance }} Thread stack size is possibly too small"
      description: "Thread stack size is possibly too small. This can cause problems when you use Stored Language constructs for example. A typical is 256k for thread_stack_size."
  - alert: InnoDB Buffer Pool Instances is too small
    expr: mysql_global_variables_innodb_buffer_pool_instances == 1
    for: 1m
    labels:
      severity: page
    annotations:
      summary: "Instance {{ $labels.instance }} InnoDB Buffer Pool Instances is too small"
      description: "If you are using MySQL 5.5 and higher you should use several InnoDB Buffer Pool Instances for performance reasons. Some rules are: InnoDB Buffer Pool Instance should be at least 1 Gbyte in size. InnoDB Buffer Pool Instances you can set equal to the number of cores of your machine."
  - alert: InnoDB Plugin is enabled
    expr: mysql_global_variables_ignore_builtin_innodb == 1
    for: 1m
    labels:
      severity: page
    annotations:
      summary: "Instance {{ $labels.instance }} InnoDB Plugin is enabled"
      description: "InnoDB Plugin is enabled"
  - alert: Binary Log is disabled
    expr: mysql_global_variables_log_bin != 1
    for: 1m
    labels:
      severity: warning
    annotations:
      summary: "Instance {{ $labels.instance }} Binary Log is disabled"
      description: "Binary Log is disabled. This prohibits you to do Point in Time Recovery (PiTR)."
  - alert: Binlog Cache size too small
    expr: mysql_global_variables_binlog_cache_size < 1048576
    for: 1m
    labels:
      severity: page
    annotations:
      summary: "Instance {{ $labels.instance }} Binlog Cache size too small"
      description: "Binlog Cache size is possibly to small. A value of 1 Mbyte or higher is OK."
  - alert: Binlog Statement Cache size too small
    expr: mysql_global_variables_binlog_stmt_cache_size <1048576 and mysql_global_variables_binlog_stmt_cache_size > 0
    for: 1m
    labels:
      severity: page
    annotations:
      summary: "Instance {{ $labels.instance }} Binlog Statement Cache size too small"
      description: "Binlog Statement Cache size is possibly to small. A value of 1 Mbyte or higher is typically OK."
  - alert: Binlog Transaction Cache size too small
    expr: mysql_global_variables_binlog_cache_size  <1048576
    for: 1m
    labels:
      severity: page
    annotations:
      summary: "Instance {{ $labels.instance }} Binlog Transaction Cache size too small"
      description: "Binlog Transaction Cache size is possibly to small. A value of 1 Mbyte or higher is typically OK."
  - alert: Sync Binlog is enabled
    expr: mysql_global_variables_sync_binlog == 1
    for: 1m
    labels:
      severity: page
    annotations:
      summary: "Instance {{ $labels.instance }} Sync Binlog is enabled"
      description: "Sync Binlog is enabled. This leads to higher data security but on the cost of write performance."
  - alert: IO thread stopped
    expr: mysql_slave_status_slave_io_running != 1
    for: 1m
    labels:
      severity: critical
    annotations:
      summary: "Instance {{ $labels.instance }} IO thread stopped"
      description: "IO thread has stopped. This is usually because it cannot connect to the Master any more."
  - alert: SQL thread stopped 
    expr: mysql_slave_status_slave_sql_running == 0
    for: 1m
    labels:
      severity: critical
    annotations:
      summary: "Instance {{ $labels.instance }} SQL thread stopped"
      description: "SQL thread has stopped. This is usually because it cannot apply a SQL statement received from the master."
  - alert: SQL thread stopped
    expr: mysql_slave_status_slave_sql_running != 1
    for: 1m
    labels:
      severity: critical
    annotations:
      summary: "Instance {{ $labels.instance }} Sync Binlog is enabled"
      description: "SQL thread has stopped. This is usually because it cannot apply a SQL statement received from the master."
  - alert: Slave lagging behind Master
    expr: rate(mysql_slave_status_seconds_behind_master[1m]) >30 
    for: 1m
    labels:
      severity: warning 
    annotations:
      summary: "Instance {{ $labels.instance }} Slave lagging behind Master"
      description: "Slave is lagging behind Master. Please check if Slave threads are running and if there are some performance issues!"
  - alert: Slave is NOT read only(Please ignore this warning indicator.)
    expr: mysql_global_variables_read_only != 0
    for: 1m
    labels:
      severity: page
    annotations:
      summary: "Instance {{ $labels.instance }} Slave is NOT read only"
      description: "Slave is NOT set to read only. You can accidentally manipulate data on the slave and get inconsistencies..."
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="6">
<li>监控展示</li>
</ol>
<p>如果需要,部署<code>grafana</code></p>
<pre class="line-numbers language-bash"><code class="language-bash">docker run -d -p 3000:3000 --name grafana hub.deri.org.cn/k8s_monitor/grafana:6.4.2
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><code>Grafana dashboard</code>一些可用的<code>ID</code>,可直接通过ID导入<code>dashboard</code>.</p>
<ul>
<li><code>6239</code></li>
<li><code>7362</code></li>
<li><code>11329</code></li>
<li><code>10654</code></li>
<li><code>11323</code></li>
</ul>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://hub.docker.com/r/prom/mysqld-exporter/">https://hub.docker.com/r/prom/mysqld-exporter/</a></li>
<li><a href="https://www.cnblogs.com/xiaobaozi-95/p/11453734.html">https://www.cnblogs.com/xiaobaozi-95/p/11453734.html</a></li>
<li><a href="https://www.kancloud.cn/willseecloud/prometheus_practice/1256759">https://www.kancloud.cn/willseecloud/prometheus_practice/1256759</a></li>
</ul>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>mysqld-exporter</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql全量备份和增量备份</title>
    <url>/mysql-quan-liang-bei-fen-he-zeng-liang-bei-fen/</url>
    <content><![CDATA[<h3 id="全量备份"><a href="#全量备份" class="headerlink" title="全量备份"></a>全量备份</h3><h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><p>在MySQL中提供了命令行导出数据库数据以及文件的一种方便的工具<code>mysqldump</code>,</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 备份全部数据库的数据和结构</span>
<span class="token comment" spellcheck="true">-- -d 备份全部数据库的结构</span>
<span class="token comment" spellcheck="true">-- -t 备份全部数据库的数据</span>
mysqldump <span class="token operator">-</span>uroot <span class="token operator">-</span>p123456 <span class="token operator">-</span>A <span class="token operator">></span> <span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>mysqlDump<span class="token operator">/</span>mydb<span class="token punctuation">.</span>sql

<span class="token comment" spellcheck="true">-- 备份单个或多个数据库的数据和结构</span>
mysqldump <span class="token operator">-</span>u root <span class="token operator">-</span>p <span class="token comment" spellcheck="true">--databases db1 db2 > xxx.sql</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="还原"><a href="#还原" class="headerlink" title="还原"></a>还原</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 方法一：在系统命令行中</span>
mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>p123456 <span class="token operator">&lt;</span> <span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>mysqlDump<span class="token operator">/</span>mydb<span class="token punctuation">.</span>sql
<span class="token comment" spellcheck="true">-- 方法二：登录进入mysql系统中</span>
mysql<span class="token operator">></span> source <span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>mysqlDump<span class="token operator">/</span>mydb<span class="token punctuation">.</span>sql
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="增量备份"><a href="#增量备份" class="headerlink" title="增量备份"></a>增量备份</h3><p>要做增量备份首先要开启<code>log_bin</code></p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查看log_bin开启状态</span>
<span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%log_bin%'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 开启后可以查看当前使用的日志文件</span>
<span class="token keyword">show</span> master <span class="token keyword">status</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 刷新使用的日志文件,如当前使用mysql-bin.00005,执行命令后变为mysql-bin.00006</span>
mysqladmin <span class="token operator">-</span>uroot <span class="token operator">-</span>p123456 flush<span class="token operator">-</span>logs
<span class="token comment" spellcheck="true">-- 保存mysql-bin日志文件</span>
<span class="token comment" spellcheck="true">-- 从mysql-bin恢复数据</span>
mysqlbinlog <span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>mysql<span class="token operator">/</span>mysql<span class="token operator">-</span>bin<span class="token number">.000015</span> <span class="token operator">|</span> mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>p123456 <span class="token number">db1</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>
<span class="token comment" spellcheck="true"># 备份当日的</span>
docker <span class="token function">exec</span> -it mysql mysqldump -uroot -p123456 -A <span class="token operator">></span> /root/mysql/bak/<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%F<span class="token variable">)</span></span>.sql
<span class="token comment" spellcheck="true"># 清除一周前的备份</span>
<span class="token function">rm</span> -rf /root/mysql/bak/<span class="token punctuation">$(</span>date -d <span class="token string">"-1 week "</span> +%Y-%m-%d<span class="token punctuation">)</span>.sql
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>注意：如果使用<code>crontab</code>去定时执行上面的脚本,需要把<code>-it</code>去掉,不然生成的<code>sql</code>文件为空.</p>
</blockquote>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql复制出现问题【GTID模式】</title>
    <url>/mysql-fu-zhi-chu-xian-wen-ti-gtid-mo-shi/</url>
    <content><![CDATA[<h3 id="非GTID模式下"><a href="#非GTID模式下" class="headerlink" title="非GTID模式下"></a>非GTID模式下</h3><p>当<code>BIN-LOG</code>里面出现错误导致主从不能同步的时候,</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 错误状态的部分截图</span>
mysql<span class="token operator">></span> <span class="token keyword">show</span> slave <span class="token keyword">status</span>\G
<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">.</span> <span class="token keyword">row</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
               Slave_IO_State: Waiting <span class="token keyword">for</span> master <span class="token keyword">to</span> send event
                  Master_Host: <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">41.141</span>
             Slave_IO_Running: Yes
            Slave_SQL_Running: <span class="token keyword">No</span>
              Replicate_Do_DB:  
                   Last_Errno: <span class="token number">1032</span>
                   Last_Error: Could <span class="token operator">not</span> <span class="token keyword">execute</span> Update_rows event <span class="token keyword">on</span> <span class="token keyword">table</span> test<span class="token punctuation">.</span>testttt<span class="token punctuation">;</span> Can<span class="token string">'t find record in '</span>testttt<span class="token string">', Error_code: 1032; handler error HA_ERR_END_OF_FILE; the event'</span>s master log mysql<span class="token operator">-</span>bin<span class="token number">.000004</span><span class="token punctuation">,</span> end_log_pos <span class="token number">404</span>
                 Skip_Counter: <span class="token number">0</span>
               Last_SQL_Errno: <span class="token number">1032</span>
               Last_SQL_Error: Could <span class="token operator">not</span> <span class="token keyword">execute</span> Update_rows event <span class="token keyword">on</span> <span class="token keyword">table</span> test<span class="token punctuation">.</span>testttt<span class="token punctuation">;</span> Can<span class="token string">'t find record in '</span>testttt<span class="token string">', Error_code: 1032; handler error HA_ERR_END_OF_FILE; the event'</span>s master log mysql<span class="token operator">-</span>bin<span class="token number">.000004</span><span class="token punctuation">,</span> end_log_pos <span class="token number">404</span>
  Replicate_Ignore_Server_Ids: 
           Retrieved_Gtid_Set: <span class="token number">69a5d660</span><span class="token operator">-</span><span class="token number">cfd9</span><span class="token operator">-</span><span class="token number">11ea</span><span class="token operator">-</span><span class="token number">8174</span><span class="token operator">-</span><span class="token number">00505626c27e</span>:<span class="token number">1</span><span class="token operator">-</span><span class="token number">5</span>
            Executed_Gtid_Set: <span class="token number">69a5d660</span><span class="token operator">-</span><span class="token number">cfd9</span><span class="token operator">-</span><span class="token number">11ea</span><span class="token operator">-</span><span class="token number">8174</span><span class="token operator">-</span><span class="token number">00505626c27e</span>:<span class="token number">4</span><span class="token punctuation">,</span>
<span class="token number">b3802ae3</span><span class="token operator">-</span><span class="token number">cfd8</span><span class="token operator">-</span><span class="token number">11ea</span><span class="token operator">-</span><span class="token number">85e8</span><span class="token operator">-</span><span class="token number">00505630c9f5</span>:<span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以用下面方法掠过该错误语句行,继续同步:</p>
<pre class="line-numbers language-sql"><code class="language-sql">stop slave<span class="token punctuation">;</span>
<span class="token keyword">set</span> <span class="token keyword">global</span> sql_slave_skip_counter<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">start</span> slave<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>当<code>set global sql_slave_skip_counter=1;</code>是可能会出现一下错误:不支持<code>GTID_MODE</code>模式运行的数据库</p>
<pre class="line-numbers language-log"><code class="language-log">ERROR 1858 (HY000): sql_slave_skip_counter can not be set when the server is running with GTID_MODE = ON. Instead, for each transaction that you want to skip, generate an empty transaction with the same GTID as the transaction
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="GTID模式下"><a href="#GTID模式下" class="headerlink" title="GTID模式下"></a>GTID模式下</h3><ol>
<li>找到错误点</li>
</ol>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">show</span> slave <span class="token keyword">status</span>\G
<span class="token comment" spellcheck="true">-- 找到这一行</span>
Executed_Gtid_Set: <span class="token number">69a5d660</span><span class="token operator">-</span><span class="token number">cfd9</span><span class="token operator">-</span><span class="token number">11ea</span><span class="token operator">-</span><span class="token number">8174</span><span class="token operator">-</span><span class="token number">00505626c27e</span>:<span class="token number">1</span><span class="token operator">-</span><span class="token number">5</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>重置master和slave</li>
</ol>
<pre class="line-numbers language-sql"><code class="language-sql">reset master<span class="token punctuation">;</span>
stop slave<span class="token punctuation">;</span>
reset slave<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ol start="3">
<li>设置跳过错误点</li>
</ol>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 1-5 可能出错,ID加1,1-6</span>
<span class="token keyword">set</span> <span class="token keyword">global</span> gtid_purged<span class="token operator">=</span><span class="token string">'69a5d660-cfd9-11ea-8174-00505626c27e:1-6'</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p><code>set global gtid_purged='xxxxx';</code>要求<code>GTID_EXECUTED</code>为空,所以需要第二部重置操作.</p>
</blockquote>
<ol start="4">
<li>重启复制</li>
</ol>
<pre class="line-numbers language-sql"><code class="language-sql">change master <span class="token keyword">to</span> master_host<span class="token operator">=</span><span class="token string">'192.168.41.141'</span><span class="token punctuation">,</span>master_port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>master_user<span class="token operator">=</span><span class="token string">'slave'</span><span class="token punctuation">,</span>master_password<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">,</span>master_auto_position<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">start</span> slave<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ol start="5">
<li>查看</li>
</ol>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 确认Slave_IO_Running,Slave_SQL_Running,Last_Error,Last_SQL_Error等是否有错</span>
<span class="token comment" spellcheck="true">-- 如果还有错但和上面的错误ID不一样,需要重复1~4</span>
<span class="token keyword">show</span> slave <span class="token keyword">status</span>\G
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p><code>双主</code>模式更麻烦,需要两边都要做<code>1~4</code>操作,确认没有错误.</p>
</blockquote>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql定时删除表数据</title>
    <url>/mysql-ding-shi-shan-chu-biao-shu-ju/</url>
    <content><![CDATA[<h3 id="查看mysql是否开启定时任务"><a href="#查看mysql是否开启定时任务" class="headerlink" title="查看mysql是否开启定时任务"></a>查看mysql是否开启定时任务</h3><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%scheduler%'</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------+-------+</span>
<span class="token operator">|</span> Variable_name   <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------+-------+</span>
<span class="token operator">|</span> event_scheduler <span class="token operator">|</span> <span class="token keyword">OFF</span>   <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------+-------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="开启mysql定时任务"><a href="#开启mysql定时任务" class="headerlink" title="开启mysql定时任务"></a>开启mysql定时任务</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 临时开启</span>
<span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> event_scheduler <span class="token operator">=</span> <span class="token keyword">ON</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">-- 永久开启,my.cnf中[mysqld]添加,并重启服务</span>
event_scheduler<span class="token operator">=</span><span class="token keyword">on</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="删除某表2天前的数据SQL"><a href="#删除某表2天前的数据SQL" class="headerlink" title="删除某表2天前的数据SQL"></a>删除某表2天前的数据SQL</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- task_history:表名,start_time:日期字段</span>
<span class="token keyword">delete</span> <span class="token keyword">From</span> task_history <span class="token keyword">where</span> <span class="token keyword">DATE</span><span class="token punctuation">(</span>start_time<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token keyword">DATE</span><span class="token punctuation">(</span>DATE_SUB<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>INTERVAL <span class="token number">2</span> day<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="创建event"><a href="#创建event" class="headerlink" title="创建event"></a>创建event</h3><ul>
<li>方法一：直接创建删除数据event</li>
</ul>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> event del_task_history <span class="token keyword">on</span> SCHEDULE every <span class="token number">1</span> DAY <span class="token keyword">do</span> <span class="token keyword">delete</span> <span class="token keyword">from</span> compare<span class="token punctuation">.</span>task_history <span class="token keyword">where</span> <span class="token keyword">DATE</span><span class="token punctuation">(</span>start_time<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token keyword">DATE</span><span class="token punctuation">(</span>DATE_SUB<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>INTERVAL <span class="token number">2</span> day<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>方法二：先创建删除数据的存储过程</li>
</ul>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建存储过程,先use database_name;</span>
<span class="token keyword">DELIMITER</span> <span class="token comment" spellcheck="true">// </span>
<span class="token keyword">create</span> <span class="token keyword">procedure</span> del_task_history<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
    <span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> task_history <span class="token keyword">WHERE</span> <span class="token keyword">DATE</span><span class="token punctuation">(</span>start_time<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token keyword">DATE</span><span class="token punctuation">(</span>DATE_SUB<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>INTERVAL <span class="token number">2</span> day<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">END</span><span class="token comment" spellcheck="true">//</span>
<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 查看存储过程</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> mysql<span class="token punctuation">.</span><span class="token keyword">proc</span> <span class="token keyword">where</span> <span class="token number">db</span><span class="token operator">=</span><span class="token string">'数据库名'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 调用存储过程</span>
<span class="token keyword">call</span> del_task_history<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 删除存储过程</span>
<span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> del_task_history<span class="token punctuation">;</span>


<span class="token comment" spellcheck="true">-- 创建event</span>
<span class="token keyword">create</span> event del_task_history  
<span class="token keyword">on</span> schedule 
EVERY <span class="token number">1</span> DAY  
STARTS <span class="token string">'2020-10-01 00:00:00'</span>  
<span class="token keyword">ON</span> COMPLETION <span class="token operator">NOT</span> PRESERVE <span class="token keyword">ENABLE</span> <span class="token keyword">DO</span> <span class="token keyword">CALL</span> del_task_history<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="开启和关闭event"><a href="#开启和关闭event" class="headerlink" title="开启和关闭event"></a>开启和关闭event</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--  开启某事件</span>
<span class="token keyword">ALTER</span> EVENT del_task_history <span class="token keyword">ON</span> COMPLETION PRESERVE <span class="token keyword">ENABLE</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">--  关闭某事件</span>
<span class="token keyword">ALTER</span> EVENT del_task_history <span class="token keyword">ON</span> COMPLETION PRESERVE <span class="token keyword">DISABLE</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="查询event"><a href="#查询event" class="headerlink" title="查询event"></a>查询event</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询event列表</span>
<span class="token keyword">show</span> events<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 根据event名称查询</span>
<span class="token keyword">show</span> <span class="token keyword">create</span> event del_task_history<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">-- 查询执行记录</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>events<span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> mysql<span class="token punctuation">.</span>event<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="删除event"><a href="#删除event" class="headerlink" title="删除event"></a>删除event</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DROP</span> EVENT <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> del_task_history<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="写一个带参数的存储过程"><a href="#写一个带参数的存储过程" class="headerlink" title="写一个带参数的存储过程"></a>写一个带参数的存储过程</h3><blockquote>
<p>存储过程一般不能以表名作为参数，不然会报错，所以采用<code>prepare</code>方式.</p>
<ul>
<li><code>prepare</code>: 预处理</li>
<li><code>execute</code>: 执行</li>
<li><code>deallocate</code>: 释放资源</li>
</ul>
</blockquote>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 参数1：要删除的表, 参数2：时间戳列名, 参数3：删除多少天前的数据</span>
<span class="token keyword">DELIMITER</span> <span class="token comment" spellcheck="true">// </span>
<span class="token keyword">create</span> <span class="token keyword">procedure</span> delete_table_data<span class="token punctuation">(</span><span class="token operator">IN</span> table_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">IN</span> column_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">IN</span> interval_day <span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
    <span class="token keyword">set</span> <span class="token variable">@statements</span> <span class="token operator">=</span> concat<span class="token punctuation">(</span><span class="token string">'DELETE FROM '</span><span class="token punctuation">,</span>table_name<span class="token punctuation">,</span> <span class="token string">' WHERE DATE('</span><span class="token punctuation">,</span>column_name<span class="token punctuation">,</span><span class="token string">') &lt;= DATE(DATE_SUB(NOW(),INTERVAL '</span><span class="token punctuation">,</span>interval_day<span class="token punctuation">,</span><span class="token string">' day))'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    prepare stmt <span class="token keyword">from</span> <span class="token variable">@statements</span><span class="token punctuation">;</span>
    <span class="token keyword">execute</span> stmt<span class="token punctuation">;</span>
    <span class="token keyword">deallocate</span> prepare stmt<span class="token punctuation">;</span>
<span class="token keyword">END</span><span class="token comment" spellcheck="true">//</span>
<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">-- 调用</span>
<span class="token keyword">call</span> delete_table_data<span class="token punctuation">(</span><span class="token string">'t_test'</span><span class="token punctuation">,</span><span class="token string">'create_time'</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>procedure</tag>
        <tag>event</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql密码安全策略</title>
    <url>/mysql-mi-ma-an-quan-ce-lue/</url>
    <content><![CDATA[<h3 id="密码复杂度校验"><a href="#密码复杂度校验" class="headerlink" title="密码复杂度校验"></a>密码复杂度校验</h3><p><code>MySQL5.6.6</code>版本之后增加了密码强度验证插件<code>validate_password</code>.</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查看插件是否安装</span>
mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> PLUGIN_NAME<span class="token punctuation">,</span> PLUGIN_STATUS <span class="token keyword">FROM</span> INFORMATION_SCHEMA<span class="token punctuation">.</span>PLUGINS  <span class="token keyword">WHERE</span> PLUGIN_NAME <span class="token operator">LIKE</span> <span class="token string">'validate_password'</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------+---------------+</span>
<span class="token operator">|</span> PLUGIN_NAME       <span class="token operator">|</span> PLUGIN_STATUS <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------+---------------+</span>
<span class="token operator">|</span> validate_password <span class="token operator">|</span> ACTIVE        <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------+---------------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span>

<span class="token comment" spellcheck="true">-- 如果没有安装</span>
INSTALL PLUGIN validate_password <span class="token keyword">SONAME</span> <span class="token string">'validate_password.so'</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">-- 卸载</span>
UNINSTALL PLUGIN validate_password<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查看密码校验相关参数</span>
mysql<span class="token operator">></span> <span class="token keyword">show</span>  variables <span class="token operator">like</span> <span class="token string">'%validate_password%'</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------+--------+</span>
<span class="token operator">|</span> Variable_name                        <span class="token operator">|</span> <span class="token keyword">Value</span>  <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------+--------+</span>
<span class="token operator">|</span> validate_password_check_user_name    <span class="token operator">|</span> <span class="token keyword">OFF</span>    <span class="token operator">|</span>
<span class="token operator">|</span> validate_password_dictionary_file    <span class="token operator">|</span>        <span class="token operator">|</span>
<span class="token operator">|</span> validate_password_length             <span class="token operator">|</span> <span class="token number">8</span>      <span class="token operator">|</span>
<span class="token operator">|</span> validate_password_mixed_case_count   <span class="token operator">|</span> <span class="token number">1</span>      <span class="token operator">|</span>
<span class="token operator">|</span> validate_password_number_count       <span class="token operator">|</span> <span class="token number">1</span>      <span class="token operator">|</span>
<span class="token operator">|</span> validate_password_policy             <span class="token operator">|</span> MEDIUM <span class="token operator">|</span>
<span class="token operator">|</span> validate_password_special_char_count <span class="token operator">|</span> <span class="token number">1</span>      <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------+--------+</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>参数名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>validate_password_check_user_name</code></td>
<td>用户名检测，设置为ON的时候表示能将密码设置成当前用户名</td>
</tr>
<tr>
<td><code>validate_password_dictionary_file</code></td>
<td>字典文件</td>
</tr>
<tr>
<td><code>validate_password_length</code></td>
<td>密码的长度要求</td>
</tr>
<tr>
<td><code>validate_password_mixed_case_count</code></td>
<td>密码中至少有1个大写小字母</td>
</tr>
<tr>
<td><code>validate_password_number_count</code></td>
<td>密码中至少1个数字</td>
</tr>
<tr>
<td><code>validate_password_policy</code></td>
<td>密码的安全策略,参数可选值：<code>MEDIUM</code>、<code>LOW</code>、<code>STRONG</code>.  <code>LOW</code>:策略仅测试密码长度。<code>MEDIUM</code>:策略添加了密码必须至少包含数字、大小写和特殊字符的条件。<code>STRONG</code>：策略除了<code>MEDIUM</code>外,还不能匹配字典文件中的字词.</td>
</tr>
<tr>
<td><code>validate_password_special_char_count</code></td>
<td>密码中至少1个特殊字符</td>
</tr>
</tbody></table>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 密码规范测试,评分达到100才能使用</span>
<span class="token keyword">select</span> VALIDATE_PASSWORD_STRENGTH<span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">-- 另一种方法测试</span>
mysql<span class="token operator">></span> <span class="token keyword">select</span> password<span class="token punctuation">(</span><span class="token string">'1234'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mysql<span class="token operator">></span> <span class="token keyword">select</span> password<span class="token punctuation">(</span>'<span class="token number">1234</span><span class="token comment" spellcheck="true">#Qsss');</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------------------+</span>
<span class="token operator">|</span> password<span class="token punctuation">(</span>'<span class="token number">1234</span><span class="token comment" spellcheck="true">#Qsss')                     |</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------------------+</span>
<span class="token operator">|</span> <span class="token operator">*</span>F7BE83BBADD1FA159B1028170433FE7CBA5C0D01 <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------------------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>字典文件的使用:</p>
<ol>
<li>设置策略为<code>STRONG</code></li>
</ol>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token keyword">global</span> validate_password_policy<span class="token operator">=</span>STRONG<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="2">
<li>创建字典文件</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@ ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /tmp/validate_password_dictionary_file </span>
admin 
root 
love 
password 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="3">
<li>配置字典文件路径</li>
</ol>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 配置</span>
mysql<span class="token operator">></span> <span class="token keyword">set</span> <span class="token keyword">global</span> validate_password_dictionary_file<span class="token operator">=</span><span class="token string">"/tmp/validate_password_dictionary_file"</span><span class="token punctuation">;</span> 
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span> 
<span class="token comment" spellcheck="true">-- 查看</span>
mysql<span class="token operator">></span> <span class="token keyword">SHOW</span> <span class="token keyword">STATUS</span> <span class="token operator">LIKE</span> <span class="token string">'validate%'</span><span class="token punctuation">;</span> 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>在<code>MySQL 5.7.8</code>之前，服务器运行时对字典文件的更改需要重新启动才能使服务器识别更改; 而在<code>5.7.9</code>后可动态设置并生效</p>
</blockquote>
<h3 id="密码过期"><a href="#密码过期" class="headerlink" title="密码过期"></a>密码过期</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
<span class="token comment" spellcheck="true"># 设置默认过期时间,单位天,默认永不过期0</span>
default_password_lifetime<span class="token operator">=</span>90
<span class="token comment" spellcheck="true"># 默认ON,密码过期会断开连接</span>
disconnect_on_expired_password<span class="token operator">=</span>ON
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 运行时修改, 重启失效</span>
<span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> default_password_lifetime <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 针对特定用户设置过期策略</span>
<span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'user'</span>@'localhost<span class="token string">' PASSWORD EXPIRE;
ALTER USER '</span><span class="token keyword">user</span><span class="token string">'@'</span>localhost<span class="token string">' PASSWORD EXPIRE INTERVAL 30 DAY;
ALTER USER '</span><span class="token keyword">user</span><span class="token string">'@'</span>localhost<span class="token string">' PASSWORD EXPIRE NEVER;
ALTER USER '</span><span class="token keyword">user</span><span class="token string">'@'</span>localhost' PASSWORD EXPIRE <span class="token keyword">DEFAULT</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="账户锁定"><a href="#账户锁定" class="headerlink" title="账户锁定"></a>账户锁定</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 5.7.8版本之后,新增锁定账户功能</span>
<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'furrywall'</span>@'localhost<span class="token string">' IDENTIFIED BY '</span>71m32ch4n6317<span class="token string">' ACCOUNT LOCK;
ALTER USER '</span>furrywall<span class="token string">'@'</span>localhost<span class="token string">' ACCOUNT LOCK;
ALTER USER '</span>furrywall<span class="token string">'@'</span>localhost' ACCOUNT UNLOCK<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/validate-password-options-variables.html">更多参数说明参考官网</a></li>
</ul>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql慢查询日志总结</title>
    <url>/mysql-man-cha-xun-ri-zhi-zong-jie/</url>
    <content><![CDATA[<h3 id="开启慢查询日志"><a href="#开启慢查询日志" class="headerlink" title="开启慢查询日志"></a>开启慢查询日志</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询慢查询日志开启状态</span>
mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'slow_query%'</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------+-------------------------------+</span>
<span class="token operator">|</span> Variable_name       <span class="token operator">|</span> <span class="token keyword">Value</span>                         <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------+-------------------------------+</span>
<span class="token operator">|</span> slow_query_log      <span class="token operator">|</span> <span class="token keyword">ON</span>                            <span class="token operator">|</span>
<span class="token operator">|</span> slow_query_log_file <span class="token operator">|</span> <span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>mysql<span class="token operator">/</span>data3<span class="token operator">-</span>slow<span class="token punctuation">.</span>log <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------+-------------------------------+</span>
<span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span>
<span class="token comment" spellcheck="true">-- 开启慢查询日志记录</span>
<span class="token keyword">set</span> <span class="token keyword">global</span> slow_query_log<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 查询慢查询时间</span>
mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'long_query_time%'</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------+-----------+</span>
<span class="token operator">|</span> Variable_name   <span class="token operator">|</span> <span class="token keyword">Value</span>     <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------+-----------+</span>
<span class="token operator">|</span> long_query_time <span class="token operator">|</span> <span class="token number">10.000000</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------+-----------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">-- 修改慢查询时间,修改后需要重新建立会话才能看到最新设置的值</span>
<span class="token keyword">set</span> <span class="token keyword">global</span> long_query_time<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="慢查询输出"><a href="#慢查询输出" class="headerlink" title="慢查询输出"></a>慢查询输出</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查看默认输出,默认输出到文件,性能较高</span>
mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%log_output%'</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">---------------+-------+</span>
<span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">---------------+-------+</span>
<span class="token operator">|</span> log_output    <span class="token operator">|</span> <span class="token keyword">FILE</span>  <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">---------------+-------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span>
<span class="token comment" spellcheck="true">-- 可以设置输出到表</span>
<span class="token keyword">set</span> <span class="token keyword">global</span> log_output<span class="token operator">=</span><span class="token string">'TABLE'</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> mysql<span class="token punctuation">.</span>slow_log<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="其它配置"><a href="#其它配置" class="headerlink" title="其它配置"></a>其它配置</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 开启这个配置,可以将未使用索引的查询也记录到日志</span>
mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'log_queries_not_using_indexes'</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------+-------+</span>
<span class="token operator">|</span> Variable_name                 <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------+-------+</span>
<span class="token operator">|</span> log_queries_not_using_indexes <span class="token operator">|</span> <span class="token keyword">OFF</span>   <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------+-------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">-- 开启配置</span>
mysql<span class="token operator">></span> <span class="token keyword">set</span> <span class="token keyword">global</span> log_queries_not_using_indexes<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>慢查询</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql最大连接数设置</title>
    <url>/mysql-zui-da-lian-jie-shu-she-zhi/</url>
    <content><![CDATA[<h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%max_connections%'</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>数值过小会经常出现<code>ERROR 1040: Too many connections</code>错误</p>
</blockquote>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">global</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'Max_used_connections'</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">-- Threads_connected： 打开的连接数，Threads_running:激活的 正在使用的连接数</span>
<span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'Threads%'</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">-- 查看最大缓存的连接数量，可以适当增加</span>
<span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'thread_cache_size'</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><ol>
<li>临时设置</li>
</ol>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token keyword">global</span> max_connections<span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>重启失效.</p>
<ol start="2">
<li>永久设置</li>
</ol>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 修改mysql配置文件my.cnf，在[mysqld]段中添加或修改max_connections值：</span>
max_connections<span class="token operator">=</span><span class="token number">512</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>重启生效.</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql查询</title>
    <url>/mysql-cha-xun/</url>
    <content><![CDATA[<h3 id="多条件模糊查询"><a href="#多条件模糊查询" class="headerlink" title="多条件模糊查询"></a>多条件模糊查询</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_log <span class="token keyword">where</span> <span class="token punctuation">(</span>LOCATE<span class="token punctuation">(</span><span class="token string">'wu'</span><span class="token punctuation">,</span> user_name<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">or</span>  LOCATE<span class="token punctuation">(</span><span class="token string">'wu'</span><span class="token punctuation">,</span> params <span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">and</span>  <span class="token punctuation">(</span>method<span class="token operator">=</span><span class="token string">'POST'</span> <span class="token operator">or</span> method<span class="token operator">=</span><span class="token string">'GET'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="查询id在列表中的所有结果"><a href="#查询id在列表中的所有结果" class="headerlink" title="查询id在列表中的所有结果"></a>查询id在列表中的所有结果</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_user <span class="token keyword">where</span> tenant_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql查询最近的数据</title>
    <url>/mysql-cha-xun-zui-jin-de-shu-ju/</url>
    <content><![CDATA[<h3 id="DATE-SUB-函数"><a href="#DATE-SUB-函数" class="headerlink" title="DATE_SUB() 函数"></a>DATE_SUB() 函数</h3><pre class="line-numbers language-sql"><code class="language-sql">DATE_SUB<span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">,</span>INTERVAL expr <span class="token keyword">type</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>type 值</th>
</tr>
</thead>
<tbody><tr>
<td>MICROSECOND</td>
</tr>
<tr>
<td>SECOND</td>
</tr>
<tr>
<td>MINUTE</td>
</tr>
<tr>
<td>HOUR</td>
</tr>
<tr>
<td>DAY</td>
</tr>
<tr>
<td>WEEK</td>
</tr>
<tr>
<td>MONTH</td>
</tr>
<tr>
<td>QUARTER</td>
</tr>
<tr>
<td>YEAR</td>
</tr>
</tbody></table>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> xxx_table <span class="token keyword">where</span> create_time <span class="token operator">></span> DATE_SUB<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>INTERVAL <span class="token number">1</span> HOUR<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
  </entry>
  <entry>
    <title>mysql几种模糊查询方法</title>
    <url>/mysql-mo-hu-cha-xun/</url>
    <content><![CDATA[<h3 id="like"><a href="#like" class="headerlink" title="like"></a>like</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 没有用到索引</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_user <span class="token keyword">where</span> user_name <span class="token operator">like</span> <span class="token string">'%test%'</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 用到索引但是不通用</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_user <span class="token keyword">where</span> user_name <span class="token operator">like</span> <span class="token string">'test%'</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- LOCATE('substr',str,pos)</span>
<span class="token comment" spellcheck="true">-- pos不填:返回substr在str中第一次出现的位置，如果不存在，返回值为0</span>
<span class="token comment" spellcheck="true">-- pos存在:返回pos之后第一次出现的位置</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_user <span class="token keyword">where</span> locate<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span>user_name<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="position"><a href="#position" class="headerlink" title="position"></a>position</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 同locate</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_user <span class="token keyword">where</span> position<span class="token punctuation">(</span><span class="token string">'test'</span> <span class="token operator">in</span> user_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="instr"><a href="#instr" class="headerlink" title="instr"></a>instr</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查找一个字符串在另一个字符串中首次出现的位置</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_user <span class="token keyword">where</span> instr<span class="token punctuation">(</span>user_name<span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="find-in-set"><a href="#find-in-set" class="headerlink" title="find_in_set"></a>find_in_set</h3><p><code>FIND_IN_SET(str,strList)</code></p>
<ul>
<li><code>str</code> 要查询的字符串</li>
<li><code>strList</code> 字段名，参数以 <code>,</code> 分隔，如 <code>(1,2,6,8)</code></li>
</ul>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 测试及结果</span>
mysql<span class="token operator">></span> <span class="token keyword">select</span> find_in_set<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'1,2,3,4,5,6'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------+</span>
<span class="token operator">|</span> find_in_set<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'1,2,3,4,5,6'</span><span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------+</span>
<span class="token operator">|</span>                              <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span>

mysql<span class="token operator">></span> <span class="token keyword">select</span> find_in_set<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'1,2,3,4,5,6'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------+</span>
<span class="token operator">|</span> find_in_set<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'1,2,3,4,5,6'</span><span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------+</span>
<span class="token operator">|</span>                              <span class="token number">2</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span>

mysql<span class="token operator">></span> <span class="token keyword">select</span> find_in_set<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">'1,2,3,4,5,6'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------+</span>
<span class="token operator">|</span> find_in_set<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">'1,2,3,4,5,6'</span><span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------+</span>
<span class="token operator">|</span>                             <span class="token number">0</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span>

mysql<span class="token operator">></span> <span class="token keyword">select</span> find_in_set<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------+</span>
<span class="token operator">|</span> find_in_set<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------+</span>
<span class="token operator">|</span>                   <span class="token number">0</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span>

mysql<span class="token operator">></span> <span class="token keyword">select</span> find_in_set<span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">,</span><span class="token string">'1,2,3,4,5,6'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------+</span>
<span class="token operator">|</span> find_in_set<span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">,</span><span class="token string">'1,2,3,4,5,6'</span><span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------+</span>
<span class="token operator">|</span>                              <span class="token number">0</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span>

mysql<span class="token operator">></span> <span class="token keyword">select</span> find_in_set<span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'1,2,3,4,5,6'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------------+</span>
<span class="token operator">|</span> find_in_set<span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'1,2,3,4,5,6'</span><span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------------+</span>
<span class="token operator">|</span> <span class="token boolean">NULL</span>                            <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span>

mysql<span class="token operator">></span> <span class="token keyword">select</span> find_in_set<span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------+</span>
<span class="token operator">|</span> find_in_set<span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------+</span>
<span class="token operator">|</span> <span class="token boolean">NULL</span>                  <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql索引</title>
    <url>/mysql-suo-yin/</url>
    <content><![CDATA[<h3 id="索引结构——B-树"><a href="#索引结构——B-树" class="headerlink" title="索引结构——B+树"></a>索引结构——B+树</h3><h3 id="回表查询"><a href="#回表查询" class="headerlink" title="回表查询"></a>回表查询</h3><p>InnoDB 引擎中使用的是聚簇索引，其主索引的实现树中的叶子结点存储的是完整的数据记录，而辅助索引中存储的则只是辅助键和主键的值。</p>
<h3 id="索引覆盖"><a href="#索引覆盖" class="headerlink" title="索引覆盖"></a>索引覆盖</h3><p>如果索引已经包含了所有满足查询需要的数据，这时我们称之为覆盖索引（Covering Index），这时就不再需要回表操作。</p>
<h3 id="最左匹配"><a href="#最左匹配" class="headerlink" title="最左匹配"></a>最左匹配</h3><p>一个查询可以只使用索引中的一部分，更准确地说是最左侧部分（最左优先），这就是传说中的最左匹配原则。</p>
<p>即最左优先，如：</p>
<ul>
<li>如果有一个 2 列的索引 (col1,col2)，则相当于已经对 (col1)、(col1,col2) 上建立了索引；</li>
<li>如果有一个 3 列索引 (col1,col2,col3)，则相当于已经对 (col1)、(col1,col2)、(col1,col2,col3) 上建立了索引；但是 (col2,col3) 上并没有。</li>
</ul>
<h3 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h3><p>对索引中包含的字段先做判断，过滤掉不符合条件的记录，减少回表字数。</p>
<h3 id="建立索引原则"><a href="#建立索引原则" class="headerlink" title="建立索引原则"></a>建立索引原则</h3><ul>
<li><a href="https://tech.meituan.com/2014/06/30/mysql-index.html">原文链接</a></li>
<li>最左前缀匹配原则，非常重要的原则，mysql会一直向右匹配直到遇到范围查询(<code>&gt;、&lt;、between、like</code>)就停止匹配，比如<code>a = 1 and b = 2 and c &gt; 3 and d = 4</code>如果建立(<code>a,b,c,d</code>)顺序的索引，d是用不到索引的，如果建立(<code>a,b,d,c</code>)的索引则都可以用到，<code>a,b,d</code>的顺序可以任意调整。</li>
<li><code>=</code>和<code>in</code>可以乱序，比如<code>a = 1 and b = 2 and c = 3</code> 建立(<code>a,b,c</code>)索引可以任意顺序，<code>mysql</code>的查询优化器会帮你优化成索引可以识别的形式。</li>
<li>尽量选择区分度高的列作为索引，区分度的公式是<code>count(distinct col)/count(*)</code>，表示字段不重复的比例，比例越大我们扫描的记录数越少，<code>唯一键</code>的区分度是1，而一些<code>状态、性别</code>字段可能在大数据面前区分度就是0;</li>
<li>索引列不能参与计算，保持列<code>干净</code>，比如<code>from_unixtime(create_time) = ’2014-05-29’</code>就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。所以语句应该写成<code>create_time = unix_timestamp(’2014-05-29’)</code></li>
<li>尽量的扩展索引，不要新建索引。比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可。</li>
</ul>
<h3 id="查询优化神器-explain命令"><a href="#查询优化神器-explain命令" class="headerlink" title="查询优化神器 - explain命令"></a>查询优化神器 - explain命令</h3><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://www.jianshu.com/p/d0d3de6832b9">https://www.jianshu.com/p/d0d3de6832b9</a></li>
<li><a href="https://hoxis.github.io/mysql-zhuanlan-05-high-performance-index.html">https://hoxis.github.io/mysql-zhuanlan-05-high-performance-index.html</a></li>
</ul>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>索引</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql建立索引选择合适的长度</title>
    <url>/mysql-suo-yin-chang-du/</url>
    <content><![CDATA[<blockquote>
<p>在varchar字段上建立索引时，没必要对全字段建立索引，根据实际文本区分度决定索引长度。</p>
</blockquote>
<h3 id="区分度"><a href="#区分度" class="headerlink" title="区分度"></a>区分度</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 长度20</span>
mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">left</span><span class="token punctuation">(</span><span class="token punctuation">`</span>column_name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> table_name<span class="token punctuation">;</span>

<span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------------------------+</span>

<span class="token operator">|</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">left</span><span class="token punctuation">(</span><span class="token punctuation">`</span>column_name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">|</span>

<span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------------------------+</span>

<span class="token operator">|</span>                                          <span class="token number">0.8288</span> <span class="token operator">|</span> <span class="token comment" spellcheck="true">-- 区分度</span>

<span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------------------------+</span>

<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>长度越长,区分度越大,选择最合适的长度,一般90%左右即可.</p>
</blockquote>
<h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> table_name <span class="token keyword">add</span> <span class="token keyword">index</span> index_column<span class="token punctuation">(</span><span class="token punctuation">`</span>column_name<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
  </entry>
  <entry>
    <title>mysql表结构查询</title>
    <url>/mysql-biao-jie-gou-cha-xun/</url>
    <content><![CDATA[<h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p>这种方法能够查询到一些表信息，但是不够详细</p>
<pre class="line-numbers language-java"><code class="language-java">PreparedStatement pst <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">"select * from t_gateway_logs where 1=2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ResultSet rs <span class="token operator">=</span> pst<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ResultSetMetaData rsd <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rsd<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"java类型："</span><span class="token operator">+</span>rsd<span class="token punctuation">.</span><span class="token function">getColumnClassName</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"  数据库类型:"</span><span class="token operator">+</span>rsd<span class="token punctuation">.</span><span class="token function">getColumnTypeName</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"  字段名称:"</span><span class="token operator">+</span>rsd<span class="token punctuation">.</span><span class="token function">getColumnName</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"  字段长度:"</span><span class="token operator">+</span>rsd<span class="token punctuation">.</span><span class="token function">getColumnDisplaySize</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"  是否为空:"</span><span class="token operator">+</span>rsd<span class="token punctuation">.</span><span class="token function">isNullable</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"  是否自增:"</span><span class="token operator">+</span>rsd<span class="token punctuation">.</span><span class="token function">isAutoIncrement</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>查询出来的内容非常多。</p>
<h4 id="查询出库中所有表"><a href="#查询出库中所有表" class="headerlink" title="查询出库中所有表"></a>查询出库中所有表</h4><pre class="line-numbers language-java"><code class="language-java">ResultSet tableRet <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTables</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"%"</span><span class="token punctuation">,</span><span class="token string">"%"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"TABLE"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>tableRet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tableRet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"TABLE_NAME"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="查询某个表的主键信息"><a href="#查询某个表的主键信息" class="headerlink" title="查询某个表的主键信息"></a>查询某个表的主键信息</h4><pre class="line-numbers language-java"><code class="language-java">ResultSet pkInfo <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrimaryKeys</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"%"</span><span class="token punctuation">,</span> <span class="token string">"test_table"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>pkInfo<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TABLE_CAT:"</span> <span class="token operator">+</span> pkInfo<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"TABLE_CAT"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TABLE_NAME:"</span> <span class="token operator">+</span> pkInfo<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"TABLE_NAME"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"COLUMN_NAME:"</span> <span class="token operator">+</span> pkInfo<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"COLUMN_NAME"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"PK_NAME:"</span> <span class="token operator">+</span> pkInfo<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"PK_NAME"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TABLE_SCHEM:"</span> <span class="token operator">+</span> pkInfo<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"TABLE_SCHEM"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"KEY_SEQ:"</span> <span class="token operator">+</span> pkInfo<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"KEY_SEQ"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="查询某个表的详细信息"><a href="#查询某个表的详细信息" class="headerlink" title="查询某个表的详细信息"></a>查询某个表的详细信息</h4><pre class="line-numbers language-java"><code class="language-java">ResultSet colRet <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getColumns</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"%"</span><span class="token punctuation">,</span> <span class="token string">"test_table"</span><span class="token punctuation">,</span> <span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>colRet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>colRet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"TABLE_CAT"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>colRet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"TABLE_SCHEM"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>colRet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"TABLE_NAME"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>colRet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"COLUMN_NAME"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>colRet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"DATA_TYPE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>colRet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"TYPE_NAME"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>colRet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"COLUMN_SIZE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>colRet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"BUFFER_LENGTH"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>colRet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"DECIMAL_DIGITS"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>colRet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"NUM_PREC_RADIX"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>colRet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"NULLABLE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>colRet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"REMARKS"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>colRet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"COLUMN_DEF"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>colRet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"SQL_DATA_TYPE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>colRet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"SQL_DATETIME_SUB"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>colRet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"CHAR_OCTET_LENGTH"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>colRet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"ORDINAL_POSITION"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>colRet<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">"IS_NULLABLE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>colRet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"SCOPE_CATALOG"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>colRet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"SCOPE_SCHEMA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>colRet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"SCOPE_TABLE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>colRet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"SOURCE_DATA_TYPE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>colRet<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">"IS_AUTOINCREMENT"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>colRet<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">"IS_GENERATEDCOLUMN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>schema</tag>
        <tag>jdbc</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql部署【用rpm方式】</title>
    <url>/mysql-bu-shu-yong-rpm-fang-shi/</url>
    <content><![CDATA[<h3 id="部署说明"><a href="#部署说明" class="headerlink" title="部署说明"></a>部署说明</h3><p><code>Linux</code>上安装软件常见的几种方式：</p>
<ul>
<li>源码编译</li>
<li>压缩包解压（一般为<code>tar.gz</code>）</li>
<li>编译好的安装包（<code>RPM</code>、<code>DPKG</code>等）</li>
<li>在线安装（<code>YUM</code>、<code>APT</code>等）</li>
</ul>
<blockquote>
<p>部署方式简单程度：<code>YUM</code> &gt; <code>RPM</code> &gt; <code>tar.gz</code> &gt; 源码，本文介绍<code>RPM</code>方式.</p>
</blockquote>
<h3 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h3><ol>
<li>删除旧包</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查找</span>
rpm -qa <span class="token operator">|</span> <span class="token function">grep</span> -i mysql
<span class="token comment" spellcheck="true"># 删除</span>
rpm -ev mysql-libs-* --nodeps
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li><p>下载<code>RPM</code>包<a href="https://mirrors.huaweicloud.com/mysql/Downloads/MySQL-5.7/mysql-5.7.31-1.el7.x86_64.rpm-bundle.tar">mysql-5.7.31-1.el7.x86_64.rpm-bundle.tar</a></p>
<blockquote>
<p>由于国外资源下载缓慢，可以使用<a href="https://mirrors.huaweicloud.com/">华为开源镜像</a></p>
</blockquote>
</li>
<li><p>解压压缩包</p>
</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@mysql03 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tar -xvf mysql-5.7.31-1.el7.x86_64.rpm-bundle.tar </span>
mysql-community-embedded-devel-5.7.31-1.el7.x86_64.rpm
mysql-community-libs-5.7.31-1.el7.x86_64.rpm
mysql-community-client-5.7.31-1.el7.x86_64.rpm
mysql-community-server-5.7.31-1.el7.x86_64.rpm
mysql-community-embedded-5.7.31-1.el7.x86_64.rpm
mysql-community-embedded-compat-5.7.31-1.el7.x86_64.rpm
mysql-community-common-5.7.31-1.el7.x86_64.rpm
mysql-community-libs-compat-5.7.31-1.el7.x86_64.rpm
mysql-community-devel-5.7.31-1.el7.x86_64.rpm
mysql-community-test-5.7.31-1.el7.x86_64.rpm
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="4">
<li>安装<br>只需要安装以下四个</li>
</ol>
<pre><code>mysql-community-libs-5.7.31-1.el7.x86_64.rpm
mysql-community-client-5.7.31-1.el7.x86_64.rpm
mysql-community-server-5.7.31-1.el7.x86_64.rpm
mysql-community-common-5.7.31-1.el7.x86_64.rpm
</code></pre>
<p>四个包有依赖关系。安装有先后顺序要求。</p>
<pre><code>shell&gt; rpm -ivh mysql-community-common-5.7.31-1.el7.x86_64.rpm
shell&gt; rpm -ivh mysql-community-libs-5.7.31-1.el7.x86_64.rpm
shell&gt; rpm -ivh mysql-community-client-5.7.31-1.el7.x86_64.rpm
shell&gt; rpm -ivh mysql-community-server-5.7.31-1.el7.x86_64.rpm
</code></pre>
<p>更简单的安装命令</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 这样，包之间会自动处理依赖和先后顺序</span>
yum <span class="token function">install</span> mysql-community-<span class="token punctuation">{</span>server,client,common,libs<span class="token punctuation">}</span>-*
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>注意上面命令要求在解压后的目录里执行，不然<code>yum</code>找不到包就会到公网下载，速度非常慢.</p>
</blockquote>
<ol start="5">
<li>启动服务</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">service</span> mysqld start
<span class="token function">service</span> mysqld stop
<span class="token function">service</span> mysqld status
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ol start="6">
<li>登录修改默认密码</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 获取root用户临时密码</span>
<span class="token function">cat</span> /var/log/mysqld.log <span class="token operator">|</span> <span class="token function">more</span>

<span class="token comment" spellcheck="true"># mysqld.log 临时密码</span>
2020-07-28T01:23:53.588166Z 1 <span class="token punctuation">[</span>Note<span class="token punctuation">]</span> A temporary password is generated <span class="token keyword">for</span> root@localhost: dDO<span class="token operator">></span>*a4<span class="token operator">!</span>uA+o

<span class="token comment" spellcheck="true"># 登录, 使用初始化生成的临时密码登录</span>
mysql -u root -p

<span class="token comment" spellcheck="true"># 修改密码</span>
<span class="token keyword">set</span> password <span class="token keyword">for</span> root@localhost <span class="token operator">=</span> password<span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true"># 开放远程连接</span>
use mysql<span class="token punctuation">;</span>
update user <span class="token keyword">set</span> user.Host<span class="token operator">=</span><span class="token string">'%'</span> where user.User<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span>
flush privileges<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>修改密码时会报错<code>ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</code>,意思是密码强度不符合要求.<br>可以修改<code>/etc/my.cnf</code>, 添加<code>validate_password=OFF</code>, 关闭密码强度校验, 然后重启<code>service mysqld restart</code>.</p>
</blockquote>
<blockquote>
<p><code>mysql</code>安装<code>RPM</code>方式比<code>tar.gz</code>方式简单不少.</p>
</blockquote>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://juejin.im/post/5d07cf13f265da1bd522cfb6#heading-37">CentOS安装MySQL详解</a></li>
<li><a href="https://www.cnblogs.com/jintheway/p/6542059.html">linux MySQL5.7 rpm安装</a></li>
</ul>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql部署【用tar.gz方式】</title>
    <url>/mysql-bu-shu-yong-tar-gz-fang-shi/</url>
    <content><![CDATA[<h3 id="部署说明"><a href="#部署说明" class="headerlink" title="部署说明"></a>部署说明</h3><p><code>Linux</code>上安装软件常见的几种方式：</p>
<ul>
<li>源码编译</li>
<li>压缩包解压（一般为<code>tar.gz</code>）</li>
<li>编译好的安装包（<code>RPM</code>、<code>DPKG</code>等）</li>
<li>在线安装（<code>YUM</code>、<code>APT</code>等）</li>
</ul>
<blockquote>
<p>部署方式简单程度：<code>YUM</code> &gt; <code>RPM</code> &gt; <code>tar.gz</code> &gt; 源码，本文介绍<code>tar.gz</code>方式.</p>
</blockquote>
<h3 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h3><ol>
<li>卸载已有</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 通过rpm方式安装的</span>
rpm -qa<span class="token operator">|</span><span class="token function">grep</span> mysql
<span class="token comment" spellcheck="true"># 如果有, 卸载</span>
rpm -e --nodeps xxx

<span class="token comment" spellcheck="true"># 查找mysql文件夹</span>
<span class="token function">whereis</span> mysql
<span class="token function">find</span> / -name mysql
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li><p>下载<code>tar.gz</code>文件, <a href="https://mirrors.huaweicloud.com/mysql/Downloads/MySQL-5.7/mysql-5.7.31-linux-glibc2.12-x86_64.tar.gz">mysql-5.7.31-linux-glibc2.12-x86_64.tar.gz</a></p>
<blockquote>
<p>由于国外资源下载缓慢，可以使用<a href="https://mirrors.huaweicloud.com/">华为开源镜像</a></p>
</blockquote>
</li>
<li><p>安装依赖包</p>
</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash">yum -y <span class="token function">install</span> <span class="token function">make</span> gcc-c++ cmake bison-devel ncurses-devel numactl libaio
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="4">
<li>创建系统用户和组</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建组</span>
<span class="token function">groupadd</span> mysql
<span class="token comment" spellcheck="true"># 创建不需要登录的系统账号，启动MySQL服务时会使用该账号</span>
<span class="token function">useradd</span> -s /sbin/nologin -g mysql -M mysql
<span class="token comment" spellcheck="true"># useradd -r -g mysql -s /bin/false mysql</span>
<span class="token comment" spellcheck="true"># useradd -r -g mysql mysql</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="5">
<li>解压到<code>/usr/local/</code></li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 解压</span>
<span class="token function">tar</span> -zxvf mysql-5.7.31-linux-glibc2.12-x86_64.tar.gz

<span class="token comment" spellcheck="true"># 重命名</span>
<span class="token function">mv</span> mysql-5.7.31-linux-glibc2.12-x86_64 mysql

<span class="token comment" spellcheck="true"># 移动到/usr/local/下</span>
<span class="token function">mv</span> mysql /usr/local/

<span class="token comment" spellcheck="true"># mysql目录下创建data文件夹</span>
<span class="token function">cd</span> /usr/local/mysql/
<span class="token function">mkdir</span> data

<span class="token comment" spellcheck="true"># 设置权限</span>
<span class="token function">chown</span> -R mysql:mysql /usr/local/mysql
<span class="token function">chmod</span> -R 755 /usr/local/mysql
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="6">
<li>初始化</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 注意打印日志最后返回的root用户临时密码，登录时用到</span>
bin/mysqld --initialize --user<span class="token operator">=</span>mysql --datadir<span class="token operator">=</span>/usr/local/mysql/data --basedir<span class="token operator">=</span>/usr/local/mysql

<span class="token comment" spellcheck="true"># 初始化日志</span>
2020-07-27T07:13:42.627407Z 1 <span class="token punctuation">[</span>Note<span class="token punctuation">]</span> A temporary password is generated <span class="token keyword">for</span> root@localhost: 4Mt4Zka<span class="token operator">&lt;</span>6j<span class="token punctuation">)</span><span class="token operator">&amp;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>编辑配置文件<code>/etc/my.cnf</code></li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 如果有这个文件，先清空</span>
<span class="token punctuation">[</span>root@localhost bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#  vi /etc/my.cnf</span>

<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
datadir<span class="token operator">=</span>/usr/local/mysql/data
port<span class="token operator">=</span>3306
sql_mode<span class="token operator">=</span>NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES
symbolic-links<span class="token operator">=</span>0
max_connections<span class="token operator">=</span>600
innodb_file_per_table<span class="token operator">=</span>1
lower_case_table_names<span class="token operator">=</span>1
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="8">
<li>启动</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash">/usr/local/mysql/support-files/mysql.server start
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="9">
<li>添加软链接</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ln</span> -s /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql 
<span class="token function">ln</span> -s /usr/local/mysql/bin/mysql /usr/bin/mysql
<span class="token comment" spellcheck="true"># 重启mysql: service mysqld start|stop|restart|status</span>
<span class="token function">service</span> mysql restart

<span class="token comment" spellcheck="true"># 添加环境变量,可选</span>
<span class="token keyword">echo</span> <span class="token string">"PATH=<span class="token variable">$PATH</span>:/usr/local/mysql/bin  "</span> <span class="token operator">>></span> /etc/profile  
<span class="token function">source</span> /etc/profile
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="10">
<li>设置开机启动</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 将服务文件拷贝到init.d下，并重命名为mysql</span>
<span class="token function">cp</span> /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld
<span class="token comment" spellcheck="true"># 赋予可执行权限</span>
<span class="token function">chmod</span> +x /etc/init.d/mysqld
<span class="token comment" spellcheck="true"># 添加服务</span>
<span class="token function">chkconfig</span> --add mysqld
<span class="token comment" spellcheck="true"># 显示服务列表</span>
<span class="token function">chkconfig</span> --list
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="11">
<li>登录并修改<code>root</code>密码</li>
</ol>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 使用初始化生成的临时密码登录</span>
mysql <span class="token operator">-</span>u root <span class="token operator">-</span>p

<span class="token comment" spellcheck="true">-- 修改密码</span>
<span class="token keyword">set</span> password <span class="token keyword">for</span> root<span class="token variable">@localhost</span> <span class="token operator">=</span> password<span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">--  ALTER USER 'root'@'localhost' IDENTIFIED BY '123456';</span>

<span class="token comment" spellcheck="true">-- 开放远程连接</span>
<span class="token keyword">use</span> mysql<span class="token punctuation">;</span>
<span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> <span class="token keyword">user</span><span class="token punctuation">.</span>Host<span class="token operator">=</span><span class="token string">'%'</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token punctuation">.</span><span class="token keyword">User</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span>
flush <span class="token keyword">privileges</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://www.jianshu.com/p/276d59cbc529">Linux下安装mysql-5.7.24</a></li>
<li><a href="https://juejin.im/post/5d07cf13f265da1bd522cfb6#heading-37">CentOS安装MySQL详解</a></li>
</ul>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>nfs-client安装</title>
    <url>/nfs-client-an-zhuang/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p><code>nfs-client</code>的chart已经迁移到<code>https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner/</code>，但是该chart对应的镜像都放在<code>k8s.gcr.io</code>，国内不方便下载.</p>
<p>本文继续使用以前的<a href="https://github.com/kubernetes-retired/external-storage/tree/master/nfs-client">chart</a>.</p>
<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ol>
<li>添加repo</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash">helm repo add stable https://charts.helm.sh/stable
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="2">
<li>更新repo</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash">helm repo update
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="3">
<li>安装nfs-client</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 这里nfs server参考centos nfs安装</span>
helm <span class="token function">install</span> nfs  stable/nfs-client-provisioner  --set nfs.server<span class="token operator">=</span>172.16.100.13 --set nfs.path<span class="token operator">=</span>/data/nfs
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ol start="4">
<li>设置nfs为默认存储</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get sc</span>
NAME         PROVISIONER                                RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE
nfs-client   cluster.local/nfs-nfs-client-provisioner   Delete          Immediate           <span class="token boolean">true</span>                   30s
<span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl patch storageclass nfs-client -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'</span>
storageclass.storage.k8s.io/nfs-client patched
<span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get sc</span>
NAME                   PROVISIONER                                RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE
nfs-client <span class="token punctuation">(</span>default<span class="token punctuation">)</span>   cluster.local/nfs-nfs-client-provisioner   Delete          Immediate           <span class="token boolean">true</span>                   118s
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p><code>k8s-v1.21.5</code>版本安装完<code>nfs-client</code>，创建pvc会一直在pending状态,<code>kubectl logs nfs-client-provisioner</code>后台有报错</p>
<pre class="line-numbers language-log"><code class="language-log">unexpected error getting claim reference: selfLink was empty, can't make reference
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol>
<li>临时解决方法：<br>编辑<code>/etc/kubernetes/manifests/kube-apiserver.yaml</code>,在这里：</li>
</ol>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">containers</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">command</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> kube<span class="token punctuation">-</span>apiserver
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>添加这一行：<br><code>- --feature-gates=RemoveSelfLink=false</code></p>
<p>然后应用它，即可</p>
<pre class="line-numbers language-bash"><code class="language-bash">kubectl apply -f /etc/kubernetes/manifests/kube-apiserver.yaml
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol>
<li>解决方案<br>参考<a href="https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner/issues/25">issue</a>，升级<code>nfs-client-provisioner</code>镜像到<code>v4.0</code>以上版本.</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 一个可用的版本</span>
easzlab/nfs-subdir-external-provisioner:v4.0.1
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>nfs-client</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx【单机版部署】</title>
    <url>/nginx-dan-ji-ban-bu-shu/</url>
    <content><![CDATA[<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># ccentos 7</span>
yum <span class="token function">install</span> nginx
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><pre class="line-numbers language-bash"><code class="language-bash">systemctl start/stop/restart nginx

<span class="token comment" spellcheck="true"># 通过status查看nginx.conf配置文件位置</span>
systemctl status nginx
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><pre class="line-numbers language-bash"><code class="language-bash">vim /etc/nginx/nginx.conf
<span class="token comment" spellcheck="true"># 修改默认端口80 -> 8080</span>
listen       8080 default_server<span class="token punctuation">;</span>
listen       <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:8080 default_server<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true"># 检查配置是否正确,有successful表示可用</span>
nginx -t 

<span class="token comment" spellcheck="true"># 重新加载配置文件</span>
nginx -s reload
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="配置详解"><a href="#配置详解" class="headerlink" title="配置详解"></a>配置详解</h3><ul>
<li><a href="https://www.runoob.com/w3cnote/nginx-setup-intro.html">Nginx配置详解</a></li>
</ul>
<pre class="line-numbers language-json"><code class="language-json">...              // 全局块

events <span class="token punctuation">{</span>         // events块
   ...
<span class="token punctuation">}</span>

http      // http块
<span class="token punctuation">{</span>
    ...   // http全局块
    server        // server块
    <span class="token punctuation">{</span> 
        ...       // server全局块
        location <span class="token punctuation">[</span>PATTERN<span class="token punctuation">]</span>   // location块
        <span class="token punctuation">{</span>
            ...
        <span class="token punctuation">}</span>
        location <span class="token punctuation">[</span>PATTERN<span class="token punctuation">]</span> 
        <span class="token punctuation">{</span>
            ...
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    server
    <span class="token punctuation">{</span>
      ...
    <span class="token punctuation">}</span>
    ...     // http全局块
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>全局块：配置影响<code>nginx</code>全局的指令。一般有运行<code>nginx</code>服务器的用户组，<code>nginx</code>进程<code>pid</code>存放路径，日志存放路径，配置文件引入，允许生成<code>worker process</code>数等。</li>
<li><code>events</code>块：配置影响<code>nginx</code>服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</li>
<li><code>http</code>块：可以嵌套多个<code>server</code>，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，<code>mime-type</code>定义，日志自定义，是否使用<code>sendfile</code>传输文件，连接超时时间，单连接请求数等。</li>
<li><code>server</code>块：配置虚拟主机的相关参数，一个<code>http</code>中可以有多个<code>server</code>。</li>
<li><code>location</code>块：配置请求的路由，以及各种页面的处理情况。</li>
</ol>
<h3 id="nginx变量使用"><a href="#nginx变量使用" class="headerlink" title="nginx变量使用"></a>nginx变量使用</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 变量申明</span>
<span class="token keyword">set</span> $变量名 变量值

<span class="token comment" spellcheck="true"># 变量的引用</span>
$变量名
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h3><h4 id="常用变量"><a href="#常用变量" class="headerlink" title="常用变量"></a>常用变量</h4><table>
<thead>
<tr>
<th>变量</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>arg_参数名</code></td>
<td>URL中某个具体参数的值</td>
</tr>
<tr>
<td><code>query_string</code></td>
<td>与args变量完全相同</td>
</tr>
<tr>
<td><code>args</code></td>
<td>全部URL参数</td>
</tr>
<tr>
<td><code>is_args</code></td>
<td>如果请求的URL中有参数则返回？否则返回空</td>
</tr>
<tr>
<td><code>content_length</code></td>
<td>HTTP 请求中标识包体长度的Content-Length头部的值，头部没有这个则为空</td>
</tr>
<tr>
<td><code>content_type</code></td>
<td>标识请求包体类型的Content-Type 头部的值</td>
</tr>
<tr>
<td><code>uri</code></td>
<td>请求的URI（不包含，不包含?后的参数）</td>
</tr>
<tr>
<td><code>document_uri</code></td>
<td>与uri完全相同</td>
</tr>
<tr>
<td><code>request_uri</code></td>
<td>请求的URL（包含?后的参数）</td>
</tr>
<tr>
<td><code>scheme</code></td>
<td>协议名 HTTP 或者 HTTPS</td>
</tr>
<tr>
<td><code>request_method</code></td>
<td>请求的方法GET 或者 POST</td>
</tr>
<tr>
<td><code>request_length</code></td>
<td>所有请求内容的大小，包括请求行，头部，包体等</td>
</tr>
<tr>
<td><code>remote_user</code></td>
<td>有HTTP Basic Authentication 协议传入的用户名</td>
</tr>
<tr>
<td><code>request</code></td>
<td>原始的url请求，含有方法和协议版本</td>
</tr>
<tr>
<td><code>cookie_COOKIE</code></td>
<td>cookie COOKIE的值</td>
</tr>
<tr>
<td><code>http_HEADER</code></td>
<td>HTTP请求头中的内容，HEADER为HTTP请求中的内容转为小写，-变为_(破折号变为下划线)，例如：$http_user_agent(Uaer-Agent的值)</td>
</tr>
<tr>
<td><code>sent_http_HEADER</code></td>
<td>HTTP响应头中的内容，HEADER为HTTP响应中的内容转为小写，-变为_(破折号变为下划线)，例如： $sent_http_cache_control, $sent_http_content_type…;</td>
</tr>
</tbody></table>
<h4 id="TCP相关的变量"><a href="#TCP相关的变量" class="headerlink" title="TCP相关的变量"></a>TCP相关的变量</h4><table>
<thead>
<tr>
<th>变量</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>binary_remote_addr</code></td>
<td>客户端地质的整型格式，对于IPv4是4字节</td>
</tr>
<tr>
<td><code>remote_addr</code></td>
<td>客户端地址</td>
</tr>
<tr>
<td><code>remote_port</code></td>
<td>客户端端口</td>
</tr>
<tr>
<td><code>connection</code></td>
<td>递增的连接序号</td>
</tr>
<tr>
<td><code>connection_requests</code></td>
<td>当前连接上执行过的请求数，对keepalive 有意义</td>
</tr>
<tr>
<td><code>proxy_protocol_addr</code></td>
<td>若使用了proxy_protocol 协议则返回协议中的地址</td>
</tr>
<tr>
<td><code>proxy_protocol_port</code></td>
<td>若使用了proxy_protocol 协议则返回协议中的端口</td>
</tr>
<tr>
<td><code>server_addr</code></td>
<td>服务器端地址(本端地址)</td>
</tr>
<tr>
<td><code>server_port</code></td>
<td>服务器端端口</td>
</tr>
<tr>
<td><code>TCP_INFO</code></td>
<td>tcp内核层参数（$tcpinfo_rtt,$tcpinfo_rttvar,$tcpinfo_snd_cwnd,$tcpinfo_rcv_space）</td>
</tr>
<tr>
<td><code>server_protocol</code></td>
<td>服务端协议，例如 HTTP</td>
</tr>
</tbody></table>
<h4 id="Nginx处理请求过程中产生的变量"><a href="#Nginx处理请求过程中产生的变量" class="headerlink" title="Nginx处理请求过程中产生的变量"></a>Nginx处理请求过程中产生的变量</h4><table>
<thead>
<tr>
<th>变量</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>request_time</code></td>
<td>请求处理到现在的耗时</td>
</tr>
<tr>
<td><code>server_name</code></td>
<td>匹配上的请求server_name</td>
</tr>
<tr>
<td><code>request_completion</code></td>
<td>若请求处理完则返回OK，否则为空</td>
</tr>
<tr>
<td><code>request_id</code></td>
<td>以16禁止输出的请求标识id，随即生成</td>
</tr>
</tbody></table>
<h4 id="Nginx系统变量"><a href="#Nginx系统变量" class="headerlink" title="Nginx系统变量"></a>Nginx系统变量</h4><table>
<thead>
<tr>
<th>变量</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>time_local</code></td>
<td>以本地时间的标准输出</td>
</tr>
<tr>
<td><code>pid</code></td>
<td>所属worker进程的id</td>
</tr>
<tr>
<td><code>hostname</code></td>
<td>与系统上输出hostname 一致</td>
</tr>
</tbody></table>
<ul>
<li><a href="https://www.jianshu.com/p/4a2d05978f1c">参考链接</a></li>
</ul>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx添加basic认证</title>
    <url>/nginx-tian-jia-basic-ren-zheng/</url>
    <content><![CDATA[<h3 id="nginx-配置"><a href="#nginx-配置" class="headerlink" title="nginx 配置"></a>nginx 配置</h3><p>默认情况下 nginx 已经安装了 ngx_http_auth_basic_module 模块.</p>
<pre class="line-numbers language-conf"><code class="language-conf">server {
    #监听端口号
    listen       8081;
    auth_basic "config Auth";
    #用户密码文件地址
    auth_basic_user_file    /etc/nginx/passwd.db;
    location / {
    　　 #代理地址
        proxy_pass http://192.168.31.1:8080/;
        proxy_redirect default;
    }
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>auth_basic_user_file 和 auth_basic 也可以放到 server -&gt; location 内.</p>
</blockquote>
<blockquote>
<p>其中 auth_basic_user_file 可以使用 htpasswd 在linux生成.</p>
</blockquote>
<h3 id="htpasswd-使用"><a href="#htpasswd-使用" class="headerlink" title="htpasswd 使用"></a>htpasswd 使用</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 安装</span>
yum -y <span class="token function">install</span> httpd-tools
<span class="token comment" spellcheck="true"># 生成</span>
htpasswd -bc /etc/nginx/passwd.db admin Mima@123
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx使用upstream实现负载均衡</title>
    <url>/nginx-shi-yong-upstream-shi-xian-fu-zai-jun-heng/</url>
    <content><![CDATA[<h3 id="轮询（默认）"><a href="#轮询（默认）" class="headerlink" title="轮询（默认）"></a>轮询（默认）</h3><pre class="line-numbers language-js"><code class="language-js">upstream servername <span class="token punctuation">{</span> 
    server <span class="token number">10.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span> 
    server <span class="token number">10.0</span><span class="token punctuation">.</span><span class="token number">0.2</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h3><blockquote>
<p><code>weight</code> 默认为<code>1</code>,<code>weight</code>越大,负载的权重就越大</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js">upstream servername <span class="token punctuation">{</span> 
    server <span class="token number">10.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">8080</span> weight<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span> 
    server <span class="token number">10.0</span><span class="token punctuation">.</span><span class="token number">0.2</span><span class="token punctuation">:</span><span class="token number">8080</span> weight<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="IP哈希"><a href="#IP哈希" class="headerlink" title="IP哈希"></a>IP哈希</h3><blockquote>
<p>请求按访问ip的hash结果分配</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js">upstream servername <span class="token punctuation">{</span> 
    ip_hash<span class="token punctuation">;</span> 
    server <span class="token number">10.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span> 
    server <span class="token number">10.0</span><span class="token punctuation">.</span><span class="token number">0.2</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h3><blockquote>
<p>按后端服务器的响应时间来分配请求,响应时间短的优先分配</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js">upstream servername <span class="token punctuation">{</span> 
    fair<span class="token punctuation">;</span>
    server <span class="token number">10.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span> 
    server <span class="token number">10.0</span><span class="token punctuation">.</span><span class="token number">0.2</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="其它哈希"><a href="#其它哈希" class="headerlink" title="其它哈希"></a>其它哈希</h3><blockquote>
<p>如：根据请求路径哈希,<code>hash_method</code>是使用的<code>hash</code>算法</p>
</blockquote>
<pre class="line-numbers language-js"><code class="language-js">upstream servername <span class="token punctuation">{</span> 
    fair<span class="token punctuation">;</span>
    server <span class="token number">10.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span> 
    server <span class="token number">10.0</span><span class="token punctuation">.</span><span class="token number">0.2</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span>
    hash $request_uri<span class="token punctuation">;</span> 
    hash_method crc32<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="down-x2F-backup"><a href="#down-x2F-backup" class="headerlink" title="down/backup"></a>down/backup</h3><pre class="line-numbers language-js"><code class="language-js">upstream servername <span class="token punctuation">{</span> 
    <span class="token comment" spellcheck="true">// down 表示单前的server暂时不参与负载.</span>
    server <span class="token number">10.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">8080</span> down<span class="token punctuation">;</span> 
    server <span class="token number">10.0</span><span class="token punctuation">.</span><span class="token number">0.2</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span> 
    server <span class="token number">10.0</span><span class="token punctuation">.</span><span class="token number">0.3</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span> 
    <span class="token comment" spellcheck="true">// 其它所有的非backup机器down或者忙的时候请求backup机器.</span>
    server <span class="token number">10.0</span><span class="token punctuation">.</span><span class="token number">0.4</span><span class="token punctuation">:</span><span class="token number">8080</span> backup<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://www.cnblogs.com/muhy/p/10528449.html">https://www.cnblogs.com/muhy/p/10528449.html</a></li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx配置路由转发</title>
    <url>/nginx-pei-zhi-lu-you-zhuan-fa/</url>
    <content><![CDATA[<h3 id="获取ngxin"><a href="#获取ngxin" class="headerlink" title="获取ngxin"></a>获取ngxin</h3><pre class="line-numbers language-sh"><code class="language-sh">docker pull hub.deri.org.cn/library/nginx
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="编写nginx-conf"><a href="#编写nginx-conf" class="headerlink" title="编写nginx.conf"></a>编写nginx.conf</h3><pre><code>user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;
    
    upstream taskservice{
        server 172.16.0.9:28080;
    }

    upstream authservice{
        server 172.16.0.9:25050;
    }

    upstream dbcservice{
        server 172.16.0.9:28082;
    }

    upstream hbcservice{
        server 172.16.0.9:26060;
    }

    upstream graphservice{
        server 172.16.0.9:29090;
    }

    server {
        listen	80 default_server;
        server_name _;
    location /ts {
        proxy_pass	http://taskservice;
    }
        location /auth {
            proxy_pass  http://authservice;
        }
        location /dbc {
            proxy_pass  http://dbcservice;
        }
        location /hbc {
            proxy_pass  http://hbcservice;
        }
        location /graph {
            proxy_pass  http://graphservice;
        }
    }
}
</code></pre>
<h3 id="启动nginx容器"><a href="#启动nginx容器" class="headerlink" title="启动nginx容器"></a>启动nginx容器</h3><pre class="line-numbers language-sh"><code class="language-sh">docker run -d --name nginx  -p 8080:80 -v /root/nginx/nginx.conf:/etc/nginx/nginx.conf  nginx
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>opentsdb搭建</title>
    <url>/opentsdb-da-jian/</url>
    <content><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ul>
<li>已搭建hbase集群</li>
<li>GnuPlot 4.2+</li>
</ul>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>安装GnuPlot</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> -y gnuplot
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="2">
<li>下载opentsdb.rpm</li>
</ol>
<ul>
<li><a href="https://github.com/OpenTSDB/opentsdb/releases">https://github.com/OpenTSDB/opentsdb/releases</a></li>
</ul>
<ol start="3">
<li>安装opentsdb</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash">rpm -ivh opentsdb-2.4.0.noarch.rpm
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="4">
<li>修改opentsdb.conf</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash">vim /etc/opentsdb/opentsdb.conf

tsd.network.port <span class="token operator">=</span> 4242
tsd.core.auto_create_metrics <span class="token operator">=</span> <span class="token boolean">true</span>
tsd.storage.hbase.zk_quorum <span class="token operator">=</span> 192.168.3.17:2181,192.168.3.19:2181,192.168.3.20:2181
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="5">
<li>在HBase中创建表结构</li>
</ol>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token string">'tsdb'</span><span class="token punctuation">,</span>{NAME <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'t'</span><span class="token punctuation">,</span> VERSIONS <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">,</span> BLOOMFILTER <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'ROW'</span>}
<span class="token keyword">create</span> <span class="token string">'tsdb-uid'</span><span class="token punctuation">,</span>{NAME <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'id'</span><span class="token punctuation">,</span> BLOOMFILTER <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'ROW'</span>}<span class="token punctuation">,</span>{NAME <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'name'</span><span class="token punctuation">,</span> BLOOMFILTER <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'ROW'</span>}
<span class="token keyword">create</span> <span class="token string">'tsdb-tree'</span><span class="token punctuation">,</span>{NAME <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'t'</span><span class="token punctuation">,</span> VERSIONS <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">,</span> BLOOMFILTER <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'ROW'</span>}
<span class="token keyword">create</span> <span class="token string">'tsdb-meta'</span><span class="token punctuation">,</span>{NAME <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'name'</span><span class="token punctuation">,</span> BLOOMFILTER <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'ROW'</span>}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>压缩(COMPRESSION)类型有NONE, LZO, GZIP , SNAPPY. 如使用SNAPPY</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token string">'tsdb'</span><span class="token punctuation">,</span>{NAME <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'t'</span><span class="token punctuation">,</span> VERSIONS <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">,</span> BLOOMFILTER <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'ROW'</span><span class="token punctuation">,</span> COMPRESSION <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'SNAPPY'</span>}
<span class="token keyword">create</span> <span class="token string">'tsdb-uid'</span><span class="token punctuation">,</span>{NAME <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'id'</span><span class="token punctuation">,</span> BLOOMFILTER <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'ROW'</span><span class="token punctuation">,</span> COMPRESSION <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'SNAPPY'</span>}<span class="token punctuation">,</span>{NAME <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'name'</span><span class="token punctuation">,</span> BLOOMFILTER <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'ROW'</span><span class="token punctuation">,</span> COMPRESSION <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'SNAPPY'</span>}
<span class="token keyword">create</span> <span class="token string">'tsdb-tree'</span><span class="token punctuation">,</span>{NAME <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'t'</span><span class="token punctuation">,</span> VERSIONS <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">,</span> BLOOMFILTER <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'ROW'</span><span class="token punctuation">,</span> COMPRESSION <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'SNAPPY'</span>}
<span class="token keyword">create</span> <span class="token string">'tsdb-meta'</span><span class="token punctuation">,</span>{NAME <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'name'</span><span class="token punctuation">,</span> BLOOMFILTER <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'ROW'</span><span class="token punctuation">,</span> COMPRESSION <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'SNAPPY'</span>}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="6">
<li>创建opentsdb服务</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@data1 opentsdb<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat opentsdb.service</span>
<span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>
Description<span class="token operator">=</span>OpenTSDB Service
<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>
Type<span class="token operator">=</span>forking
PrivateTmp<span class="token operator">=</span>yes
ExecStart<span class="token operator">=</span>/usr/share/opentsdb/etc/init.d/opentsdb start
ExecStop<span class="token operator">=</span>/usr/share/opentsdb/etc/init.d/opentsdb stop
Restart<span class="token operator">=</span>on-abort
<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>
WantedBy<span class="token operator">=</span>multi-user.target

<span class="token comment" spellcheck="true"># </span>
<span class="token function">chmod</span> +x opentsdb.service 
<span class="token function">cp</span> opentsdb.service /etc/systemd/system/
systemctl <span class="token function">enable</span> opentsdb.service
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="7">
<li>启动</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash">systemctl status/start/stop/restart opentsdb
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p>/var/log/opentsdb</p>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><pre class="line-numbers language-log"><code class="language-log">2020-10-13 12:21:31,740 WARN  [AsyncHBase I/O Worker #1] HBaseClient: Probe Exists(table="tsdb-uid", key=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 65, 115, 121, 110, 99, 72, 66, 97, 115, 101, 126, 112, 114, 111, 98, 101, 126, 60, 59, 95, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 65, 115, 121, 110, 99, 72, 66, 97, 115, 101, 126, 112, 114, 111, 98, 101, 126, 60, 59, 95, 60], family=null, qualifiers=null, attempt=0, region=RegionInfo(table="tsdb-uid", region_name="tsdb-uid,,1542978859652.665eaacf411c9f82e13e35a62cfff831.", stop_key="")) failed
org.hbase.async.NonRecoverableException: Too many attempts: Exists(table="tsdb-uid", key=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 65, 115, 121, 110, 99, 72, 66, 97, 115, 101, 126, 112, 114, 111, 98, 101, 126, 60, 59, 95, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 65, 115, 121, 110, 99, 72, 66, 97, 115, 101, 126, 112, 114, 111, 98, 101, 126, 60, 59, 95, 60], family=null, qualifiers=null, attempt=11, region=RegionInfo(table="tsdb-uid", region_name="tsdb-uid,,1542978859652.665eaacf411c9f82e13e35a62cfff831.", stop_key=""))
    at org.hbase.async.HBaseClient.tooManyAttempts(HBaseClient.java:2056) [asynchbase-1.7.2.jar:na]
    at org.hbase.async.HBaseClient.sendRpcToRegion(HBaseClient.java:1920) [asynchbase-1.7.2.jar:na]
    at org.hbase.async.HBaseClient$1RetryRpc.call(HBaseClient.java:1944) [asynchbase-1.7.2.jar:na]
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>原因可能是由于hbase压缩算法不支持，创建的表有问题。</p>
]]></content>
      <categories>
        <category>opentsdb</category>
      </categories>
  </entry>
  <entry>
    <title>openvpn证书过期</title>
    <url>/openvpn-zheng-shu-guo-qi/</url>
    <content><![CDATA[<h3 id="查看crt证书有效期"><a href="#查看crt证书有效期" class="headerlink" title="查看crt证书有效期"></a>查看crt证书有效期</h3><pre class="line-numbers language-bash"><code class="language-bash">openssl x509 -in cert.crt -noout -text
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="重签服务端证书"><a href="#重签服务端证书" class="headerlink" title="重签服务端证书"></a>重签服务端证书</h3><pre class="line-numbers language-bash"><code class="language-bash">./easyrsa build-server-full server_name nopass
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后用新签的证书(<code>./pki/issue/</code> 和 <code>./pki/private/</code> 目录下)替换在用的 <code>server.crt</code> 和 <code>server.key</code>.</p>
<h3 id="重签客户端证书"><a href="#重签客户端证书" class="headerlink" title="重签客户端证书"></a>重签客户端证书</h3><pre class="line-numbers language-bash"><code class="language-bash">./easyrsa build-client-full client_name nopass
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="修改证书有效期时间"><a href="#修改证书有效期时间" class="headerlink" title="修改证书有效期时间"></a>修改证书有效期时间</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 修改 easy-rsa 目录下 vars 模板文件参数</span>
<span class="token comment" spellcheck="true"># /usr/share/doc/easy-rsa-3.0.8/vars.example 默认所有参数, 注意修改版本号</span>
set_var EASYRSA_CERT_EXPIRE   3650
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>openvpn</category>
      </categories>
  </entry>
  <entry>
    <title>podman安装使用</title>
    <url>/podman-an-zhuang-shi-yong/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>作为 <code>Docker</code> 的替代品，<code>Podman</code> 的操作和 <code>Docker</code> 高度兼容，在运行方式上， <code>Docker</code> 依赖于守护进程，<code>Podman</code> 不需要守护进程。</p>
<h3 id="CentOS安装"><a href="#CentOS安装" class="headerlink" title="CentOS安装"></a>CentOS安装</h3><pre class="line-numbers language-bash"><code class="language-bash">yum -y <span class="token function">install</span> podman
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建一个容器</span>
podman run --rm -p 80:80 --name nginx nginx:alpine
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="设置容器开机启动"><a href="#设置容器开机启动" class="headerlink" title="设置容器开机启动"></a>设置容器开机启动</h3><p>由于<code>Podman</code>没有守护进程,所以自身无法实现开机自启功能，需要配合系统本身实现.</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 为刚刚的容器创建一个服务配置</span>
podman generate systemd nginx <span class="token operator">></span> nginx.service
<span class="token comment" spellcheck="true"># 修改文件权限</span>
<span class="token function">chmod</span> +x nginx.service
<span class="token comment" spellcheck="true"># 服务移动到系统目录下</span>
<span class="token function">mv</span> nginx.service /usr/lib/systemd/system/
systemctl daemon-reload
<span class="token comment" spellcheck="true"># 通过 systemctl 命令来管理这个容器开机自启动</span>
systemctl enable/disable nginx
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>podman</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>podman</tag>
      </tags>
  </entry>
  <entry>
    <title>prometheus-operator使用【prometheus配置说明】</title>
    <url>/prometheus-operator-shi-yong-prometheus-pei-zhi-shuo-ming/</url>
    <content><![CDATA[<h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><p>参考官网：<code>https://prometheus.io/docs/prometheus/latest/configuration/configuration/#kubernetes_sd_config</code></p>
<pre class="line-numbers language-yml"><code class="language-yml">global:
  # How frequently to scrape targets by default.
  [ scrape_interval: <duration> | default = 1m ]
 
  # How long until a scrape request times out.
  [ scrape_timeout: <duration> | default = 10s ]
 
  # How frequently to evaluate rules.
  [ evaluation_interval: <duration> | default = 1m ]
 
  # The labels to add to any time series or alerts when communicating with
  # external systems (federation, remote storage, Alertmanager).
  external_labels:
    [ <labelname>: <labelvalue> ... ]
 
# Rule files specifies a list of globs. Rules and alerts are read from
# all matching files.
rule_files:
  [ - <filepath_glob> ... ]
 
# A list of scrape configurations.
scrape_configs:
  [ - <scrape_config> ... ]
 
# Alerting specifies settings related to the Alertmanager.
alerting:
  alert_relabel_configs:
    [ - <relabel_config> ... ]
  alertmanagers:
    [ - <alertmanager_config> ... ]
 
# Settings related to the remote write feature.
remote_write:
  [ - <remote_write> ... ]
 
# Settings related to the remote read feature.
remote_read:
  [ - <remote_read> ... ]
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="更改指标标签"><a href="#更改指标标签" class="headerlink" title="更改指标标签"></a>更改指标标签</h2><p>更改标签的时机：抓取前修改、抓取后修改、告警时修改</p>
<ul>
<li>采集数据之前，通过<code>relabel_config</code>；</li>
<li>采集数据之后，写入存储之前，通过<code>metric_relabel_configs</code></li>
<li>在告警前修改标签，通过<code>alert_relabel_configs</code></li>
</ul>
<h2 id="JOB配置"><a href="#JOB配置" class="headerlink" title="JOB配置"></a>JOB配置</h2><pre class="line-numbers language-yml"><code class="language-yml">- job_name: prometheus
  honor_labels: false
  kubernetes_sd_configs:
  - role: endpoints
    namespaces:
      names:
      - monitoring
  scrape_interval: 30s
  relabel_configs:
  - action: keep
    source_labels:
    - __meta_kubernetes_service_label_prometheus
    regex: k8s
  - source_labels:
    - __meta_kubernetes_endpoint_address_target_kind
    - __meta_kubernetes_endpoint_address_target_name
    separator: ;
    regex: Pod;(.*)
    replacement: ${1}
    target_label: pod
  - source_labels:
    - __meta_kubernetes_namespace
    target_label: namespace
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>kubernetes_sd_configs</code>：使用这个配置可以自动发现 k8s 中 node、service、pod、endpoint、ingress，并为其添加监控，更多的内容可以直接查看官方文档。__meta_kubernetes_xxxxx具体什么意思都可以在官网找到。</li>
<li><code>endpoints</code>:采用endpoints方式采集，每创建一个 service 就会创建一个对应的 endpoint，通过endpoint方式可以将service下所有的pod都采集到。</li>
<li>下面配置的意思是只有 service 的标签包含 prometheus=k8s，k8s 才会对其对应的 endpoint 进行采集。所以我们后面要为 Prometheus 创建一个 service，并且要为这个 service 加上 prometheus: k8s 这样的标签。</li>
</ul>
<pre class="line-numbers language-yml"><code class="language-yml">  - action: keep
    source_labels:
    - __meta_kubernetes_service_label_prometheus
    regex: k8s
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>下面配置意识是如果 __meta_kubernetes_endpoint_address_target_kind 的值为 Pod，__meta_kubernetes_endpoint_address_target_name 的值为 prometheus-0，在它们之间加上一个 ; 之后，它们合起来就是 Pod;prometheus-0。使用正则表达式 Pod;(.*) 对其进行匹配，那么 ${1} 就是取第一个分组，它值就是 prometheus-0，最后将这个值交给 pod 这个标签。因此这一段配置就是为所有采集到的监控指标增加一个 pod=prometheus-0 的标签。如果&nbsp;__meta_kubernetes_endpoint_address_target_kind&nbsp;的值不是 Pod，那么不会添加任何标签。</li>
</ul>
<pre class="line-numbers language-yml"><code class="language-yml">- source_labels:
    - __meta_kubernetes_endpoint_address_target_kind
    - __meta_kubernetes_endpoint_address_target_name
  separator: ;
  regex: Pod;(.*)
  replacement: ${1}
  target_label: pod
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>没有指定 url，Prometheus 会采集默认的 url <code>/metrics</code>。</li>
</ul>
<h2 id="定义告警规则"><a href="#定义告警规则" class="headerlink" title="定义告警规则"></a>定义告警规则</h2><pre class="line-numbers language-yml"><code class="language-yml">groups:
- name: example
  rules:
  - alert: HighRequestLatency
    expr: job:request_latency_seconds:mean5m{job="myjob"} > 0.5
    for: 10m
    labels:
      severity: page
    annotations:
      summary: High request latency
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>参考官网： <code>https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/</code></p>
<ul>
<li><code>for</code>：Prometheus将在每次发出警报之前检查警报在10分钟内是否继续处于活动状态</li>
<li><code>labels</code>：允许指定一组附加标签来附加到警报。任何现有的冲突标签都将被覆盖。标签值可以模板化。</li>
<li><code>annotations</code>：指定了一组信息标签，可用于存储更长的附加信息，例如警报说明或运行手册链接。注释值可以模板化。</li>
</ul>
<h2 id="模板化"><a href="#模板化" class="headerlink" title="模板化"></a>模板化</h2><p>标签和注释值可以使用<a href="https://prometheus.io/docs/visualization/consoles/">控制台模板进行模板化</a>。该<code>$labels</code> 变量保存警报实例的标签键/值对。可以通过<code>$externalLabels</code>变量访问已组态的外部标签。该 <code>$value</code>变量保存警报实例的评估值。</p>
<pre class="line-numbers language-yml"><code class="language-yml"># To insert a firing element's label values:
{{ $labels.<labelname> }}
# To insert the numeric expression value of the firing element:
{{ $value }}
</labelname><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>例子：</p>
<pre class="line-numbers language-yml"><code class="language-yml">groups:
- name: example
  rules:
 
  # Alert for any instance that is unreachable for >5 minutes.
  - alert: InstanceDown
    expr: up == 0
    for: 5m
    labels:
      severity: page
    annotations:
      summary: "Instance {{ $labels.instance }} down"
      description: "{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 5 minutes."
 
  # Alert for any instance that has a median request latency >1s.
  - alert: APIHighRequestLatency
    expr: api_http_request_latencies_second{quantile="0.5"} > 1
    for: 10m
    annotations:
      summary: "High request latency on {{ $labels.instance }}"
      description: "{{ $labels.instance }} has a median request latency above 1s (current value: {{ $value }}s)"
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>prometheus-operator使用【了解Alertmanager通知机制】</title>
    <url>/prometheus-operator-shi-yong-liao-jie-alertmanager-tong-zhi-ji-zhi/</url>
    <content><![CDATA[<h2 id="Alertmanager简介及机制"><a href="#Alertmanager简介及机制" class="headerlink" title="Alertmanager简介及机制"></a>Alertmanager简介及机制</h2><p>Alertmanager处理由例如Prometheus服务器等客户端发来的警报。它负责删除重复数据、分组，并将警报通过路由发送到正确的接收器，比如电子邮件、Slack等。Alertmanager还支持groups,silencing和警报抑制的机制。</p>
<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>分组是指将同一类型的警报分类为单个通知。当许多系统同时宕机时，很有可能成百上千的警报会同时生成，这种机制特别有用。</p>
<h3 id="抑制-Inhibition"><a href="#抑制-Inhibition" class="headerlink" title="抑制(Inhibition)"></a>抑制(Inhibition)</h3><p>抑制是指当警报发出后，停止重复发送由此警报引发其他错误的警报的机制。(比如网络不可达，导致其他服务连接相关警报)</p>
<h3 id="沉默-Silences"><a href="#沉默-Silences" class="headerlink" title="沉默(Silences)"></a>沉默(Silences)</h3><p>Silences是一种简单的特定时间不告警的机制。</p>
<h3 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h3><p>打开Alertmanager的页面，选择status页面，可以查看到当前的Config。这是使用Helm安装prometheus-operator时默认的配置，如何修改呢？</p>
<pre class="line-numbers language-yml"><code class="language-yml">global:
  resolve_timeout: 4m
  http_config: {}
  smtp_hello: localhost
  smtp_require_tls: true
  pagerduty_url: https://events.pagerduty.com/v2/enqueue
  hipchat_api_url: https://api.hipchat.com/
  opsgenie_api_url: https://api.opsgenie.com/
  wechat_api_url: https://qyapi.weixin.qq.com/cgi-bin/
  victorops_api_url: https://alert.victorops.com/integrations/generic/20131114/alert/
route:
  receiver: "null"
  group_by:
  - job
  routes:
  - receiver: "null"
    match:
      severity: info
  group_wait: 30s
  group_interval: 5m
  repeat_interval: 12h
receivers:
- name: "null"
templates: []
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Alertmanager配置说明"><a href="#Alertmanager配置说明" class="headerlink" title="Alertmanager配置说明"></a>Alertmanager配置说明</h2><p>参考<code>https://www.jianshu.com/p/239b145e2acc</code></p>
<h2 id="修改默认配置"><a href="#修改默认配置" class="headerlink" title="修改默认配置"></a>修改默认配置</h2><p>默认配置由同命名空间下<code>Secret</code>挂载到<code>POD</code>中，所以只要修改了这个<code>Secret</code>就可以修改默认配置了。</p>
<p><code>alertmanager-prometheus-operator-alertmanager</code>内容主要是<code>alertmanager.yaml</code> 经过<code>Base64加密</code>的。可以通过命令查看</p>
<pre><code>kubectl edit  secret alertmanager-prometheus-operator-alertmanager -n monitoring
</code></pre>
<p>复制其中的<code>alertmanager.yaml</code>后面的字符串，然后使用命令查看原始值。</p>
<pre class="line-numbers language-log"><code class="language-log">echo "Imdsb2JhbCI6IAogICJyZXNvbHZlX3RpbWVvdXQiOiAiNW0iCiJyZWNlaXZlcnMiOiAKLSAibmFtZSI6ICJudWxsIgoicm91dGUiOiAKICAiZ3JvdXBfYnkiOiAKICAtICJqb2IiCiAgImdyb3VwX2ludGVydmFsIjogIjVtIgogICJncm91cF93YWl0IjogIjMwcyIKICAicmVjZWl2ZXIiOiAibnVsbCIKICAicmVwZWF0X2ludGVydmFsIjogIjEyaCIKICAicm91dGVzIjogCiAgLSAibWF0Y2giOiAKICAgICAgImFsZXJ0bmFtZSI6ICJEZWFkTWFuc1N3aXRjaCIKICAgICJyZWNlaXZlciI6ICJudWxsIg==" | base64 -d
"global":
  "resolve_timeout": "5m"
"receivers":
- "name": "null"
"route":
  "group_by":
  - "job"
  "group_interval": "5m"
  "group_wait": "30s"
  "receiver": "null"
  "repeat_interval": "12h"
  "routes":
  - "match":
      "alertname": "DeadMansSwitch"
    "receiver": "null"
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>创建一个新的<code>alertmanager.yaml</code>文件，内容</p>
<pre class="line-numbers language-yml"><code class="language-yml">global:
  resolve_timeout: 4m
receivers:
- name: webhook_alert
  webhook_configs:
  - send_resolved: true
    url: http://dingtalkservice:8060/dingtalk/webhook1/send 
route:
  group_by:
  - job
  - alertname
  - cluster
  - service
  group_interval: 5m
  group_wait: 30s
  receiver: webhook_alert
  repeat_interval: 12h
  routes:
  - match:
      severity: info
    receiver: webhook_alert
  - match:
      severity: warning
    receiver: webhook_alert
templates:
- '*.tmpl'
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中我们增加了<code>webhook</code>方式报警，配置最后增加了模板，所以我们还需要创建一个模板，如<code>template_1.tmpl</code></p>
<pre class="line-numbers language-go"><code class="language-go"><span class="token punctuation">{</span><span class="token punctuation">{</span> define <span class="token string">"cluster"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
    <span class="token punctuation">[</span>错误订阅信息<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token builtin">len</span> <span class="token punctuation">.</span>Alerts <span class="token punctuation">}</span><span class="token punctuation">}</span>条 <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">.</span>GroupLabels<span class="token punctuation">.</span>appid<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">.</span>GroupLabels<span class="token punctuation">.</span>service<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span> 时间
    <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token keyword">range</span> $i<span class="token punctuation">,</span> $alert <span class="token operator">:=</span> <span class="token punctuation">.</span>Alerts <span class="token punctuation">}</span><span class="token punctuation">}</span>
        <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">if</span> eq $i <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span> 
            <span class="token punctuation">{</span><span class="token punctuation">{</span> $alert<span class="token punctuation">.</span>StartsAt <span class="token punctuation">}</span><span class="token punctuation">}</span>
        <span class="token punctuation">{</span><span class="token punctuation">{</span> end <span class="token punctuation">}</span><span class="token punctuation">}</span>
    <span class="token punctuation">{</span><span class="token punctuation">{</span> end <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> end <span class="token punctuation">}</span><span class="token punctuation">}</span>
 
<span class="token punctuation">{</span><span class="token punctuation">{</span> define <span class="token string">"alertemp.html"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
    <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token keyword">range</span> $i<span class="token punctuation">,</span> $alert <span class="token operator">:=</span> <span class="token punctuation">.</span>Alerts <span class="token punctuation">}</span><span class="token punctuation">}</span>
        <span class="token operator">*</span>报警名称<span class="token punctuation">:</span><span class="token operator">*</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> $alert<span class="token punctuation">.</span>Labels<span class="token punctuation">.</span>alertname <span class="token punctuation">}</span><span class="token punctuation">}</span>
        <span class="token operator">*</span>开始时间<span class="token punctuation">:</span><span class="token operator">*</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> $alert<span class="token punctuation">.</span>StartsAt <span class="token punctuation">}</span><span class="token punctuation">}</span>
        <span class="token operator">*</span>错误信息<span class="token punctuation">:</span><span class="token operator">*</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> $alert<span class="token punctuation">.</span>Annotations<span class="token punctuation">.</span>errormessage <span class="token punctuation">}</span><span class="token punctuation">}</span>
    <span class="token punctuation">{</span><span class="token punctuation">{</span> end <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> end <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上述模板参考：<code>http://blog.microservice4.net/2018/12/05/alertmanager/</code></p>
<p>先删除原来的Secret</p>
<pre><code>kubectl delete secret alertmanager-prometheus-operator-alertmanager -n monitoring
</code></pre>
<p>从刚刚文件创建新的Secret</p>
<pre><code>kubectl create secret generic alertmanager-prometheus-operator-alertmanager -n monitoring --from-file=alertmanager.yaml --from-file=template_1.tmpl
</code></pre>
<p>创建完之后可以通过log命令查看后台有没有报错。</p>
<pre><code>kubectl log alertmanager-prometheus-operator-alertmanager-0 alertmanager -n monitoring
</code></pre>
<p>也可以在Dashboard中查看日志。还可以在Alertmanager容器中查看<br><img data-src="/images/k8s6.png" alt="altermanager"></p>
<p>最后在Alertmanager页面中查看Config是否更新。<br><img data-src="/images/k8s7.png" alt="altermanager"></p>
<p>到此，已经完成Alertmanager默认配置的更新。</p>
<p>以上参考<code>https://www.qikqiak.com/post/prometheus-operator-custom-alert/</code>.</p>
<h2 id="上述配置Webhook使用的钉钉来做通知"><a href="#上述配置Webhook使用的钉钉来做通知" class="headerlink" title="上述配置Webhook使用的钉钉来做通知"></a>上述配置Webhook使用的钉钉来做通知</h2><h3 id="webhook通知机制"><a href="#webhook通知机制" class="headerlink" title="webhook通知机制"></a>webhook通知机制</h3><p>在Alertmanager中可以使用如下配置定义基于webhook的告警接收器receiver。一个receiver可以对应一组webhook配置。</p>
<pre class="line-numbers language-yml"><code class="language-yml">name: <string>
webhook_configs:
  [ - <webhook_config>, ... ]
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>每一项webhook_config的具体配置格式如下：</p>
<pre class="line-numbers language-yml"><code class="language-yml"># Whether or not to notify about resolved alerts.
[ send_resolved: <boolean> | default = true ]
 
# The endpoint to send HTTP POST requests to.
url: <string>
 
# The HTTP client's configuration.
[ http_config: <http_config> | default = global.http_config ]
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>send_resolved用于指定是否在告警消除时发送回执消息。url则是用于接收webhook请求的地址。http_configs则是在需要对请求进行SSL配置时使用。</p>
<p>当用户定义webhook用于接收告警信息后，当告警被触发时，Alertmanager会按照以下格式向这些url地址发送HTTP Post请求，请求内容如下：</p>
<pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"4"</span><span class="token punctuation">,</span>
  <span class="token property">"groupKey"</span><span class="token operator">:</span> &lt;string><span class="token punctuation">,</span>    // key identifying the group of alerts (e.g. to deduplicate<span class="token punctuation">)</span>
  <span class="token property">"status"</span><span class="token operator">:</span> "&lt;resolved|firing>"<span class="token punctuation">,</span>
  <span class="token property">"receiver"</span><span class="token operator">:</span> &lt;string><span class="token punctuation">,</span>
  <span class="token property">"groupLabels"</span><span class="token operator">:</span> &lt;object><span class="token punctuation">,</span>
  <span class="token property">"commonLabels"</span><span class="token operator">:</span> &lt;object><span class="token punctuation">,</span>
  <span class="token property">"commonAnnotations"</span><span class="token operator">:</span> &lt;object><span class="token punctuation">,</span>
  <span class="token property">"externalURL"</span><span class="token operator">:</span> &lt;string><span class="token punctuation">,</span>  // backlink to the Alertmanager.
  <span class="token property">"alerts"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">"labels"</span><span class="token operator">:</span> &lt;object><span class="token punctuation">,</span>
      <span class="token property">"annotations"</span><span class="token operator">:</span> &lt;object><span class="token punctuation">,</span>
      <span class="token property">"startsAt"</span><span class="token operator">:</span> <span class="token string">"&lt;rfc3339>"</span><span class="token punctuation">,</span>
      <span class="token property">"endsAt"</span><span class="token operator">:</span> <span class="token string">"&lt;rfc3339>"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="钉钉机器人"><a href="#钉钉机器人" class="headerlink" title="钉钉机器人"></a>钉钉机器人</h3><p>webhook机器人创建成功后，用户就可以使用任何方式向该地址发起HTTP POST请求，即可实现向该群主发送消息。目前自定义机器人支持文本(text)，连接(link)，markdown三种消息类型。</p>
<p>例如，可以向webhook地址以POST形式发送以下</p>
<pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>
     <span class="token property">"msgtype"</span><span class="token operator">:</span> <span class="token string">"markdown"</span><span class="token punctuation">,</span>
     <span class="token property">"markdown"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
         <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"Prometheus告警信息"</span><span class="token punctuation">,</span>
         <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"#### 监控指标\n"</span> +
                 <span class="token string">"> 监控描述信息\n\n"</span> +
                 <span class="token string">"> ###### 告警时间 \n"</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">"at"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"atMobiles"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token string">"156xxxx8827"</span><span class="token punctuation">,</span>
            <span class="token string">"189xxxx8325"</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span> 
        <span class="token property">"isAtAll"</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以使用curl验证钉钉webhook是否能够成功调用：</p>
<pre class="line-numbers language-sh"><code class="language-sh">$ curl -l -H "Content-type: application/json" -X POST -d '{"msgtype": "markdown","markdown": {"title":"Prometheus告警信息","text": "#### 监控指标\n> 监控描述信息\n\n> ###### 告警时间 \n"},"at": {"isAtAll": false}}' https://oapi.dingtalk.com/robot/send?access_token=xxxx
{"errcode":0,"errmsg":"ok"}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>如果想把Alertmanager信息转到钉钉上去，需要做一个转换器。<br>转化器部署：可以在k8s中部署一个Deployment，然后创建一个Service给Alert manager使用。</p>
</blockquote>
<h2 id="整个报警链路"><a href="#整个报警链路" class="headerlink" title="整个报警链路"></a>整个报警链路</h2><ol>
<li>首先是Prometheus根据告警规则告警，如果增删改规则参考PrometheusRule</li>
<li>Prometheus的告警经过Alertmanager静默、抑制、分组等配置到达Alertmanager</li>
<li>AlterManager通过配置webhook，地址填钉钉转换器的地址。</li>
<li>钉钉转换器中webhook地址填写钉钉机器人webhook的地址。</li>
</ol>
<h2 id="Prometheus-Alert-告警状态"><a href="#Prometheus-Alert-告警状态" class="headerlink" title="Prometheus Alert 告警状态"></a>Prometheus Alert 告警状态</h2><p>这里说明一下 Prometheus Alert 告警状态有三种状态：<code>Inactive</code>、<code>Pending</code>、<code>Firing</code>。</p>
<ul>
<li><strong>Inactive</strong>：非活动状态，表示正在监控，但是还未有任何警报触发。</li>
<li><strong>Pending</strong>：表示这个警报必须被触发。由于警报可以被分组、压抑/抑制或静默/静音，所以等待验证，一旦所有的验证都通过，则将转到 Firing 状态。</li>
<li><strong>Firing</strong>：将警报发送到 AlertManager，它将按照配置将警报的发送给所有接收者。一旦警报解除，则将状态转到 Inactive，如此循环。</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/alert/alert-manager-use-receiver/alert-manager-extension-with-webhook#shi-yong-golang-chuang-jian-webhook-fu-wu">Alert manager集成钉钉</a></li>
<li><a href="https://developer.aliyun.com/article/705415">创建一个转化器镜像</a></li>
<li><a href="https://theo.im/blog/2017/10/16/release-prometheus-alertmanager-webhook-for-dingtalk/">转化器如何使用</a></li>
<li><a href="https://mp.weixin.qq.com/s/2yKB3aqeYgna2GupM6SiGA">Alertmanager何时报警</a></li>
</ul>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>prometheus-operator使用【创建Alertmanager的Webhook】</title>
    <url>/prometheus-operator-shi-yong-chuang-jian-alertmanager-de-webhook/</url>
    <content><![CDATA[<blockquote>
<p>上文介绍了<strong>Alertmanager集成钉钉</strong>，我们还可以自己写一个webhook，用于接收Alertmanager的通知服务。</p>
</blockquote>
<h3 id="获取Alertmanager的请求内容"><a href="#获取Alertmanager的请求内容" class="headerlink" title="获取Alertmanager的请求内容"></a>获取Alertmanager的请求内容</h3><p>参考前文，我们知道Alertmanager会向配置的webhook地址发送一个POST请求，这里我们先编写一个简单的controller，用于接收Alertmanager的请求，如下：</p>
<pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">watcher</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        BufferedReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
        String wholeStr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>str <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            wholeStr <span class="token operator">+=</span> str<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"body:"</span> <span class="token operator">+</span> wholeStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>写好上面的服务之后，修改Alertmanager中webhook地址，然后将上面打印的body分析分析。如下：</p>
<pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"receiver"</span><span class="token operator">:</span><span class="token string">"webhook_alert"</span><span class="token punctuation">,</span>
  <span class="token property">"status"</span><span class="token operator">:</span><span class="token string">"resolved"</span><span class="token punctuation">,</span>
  <span class="token property">"alerts"</span><span class="token operator">:</span><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">"status"</span><span class="token operator">:</span><span class="token string">"resolved"</span><span class="token punctuation">,</span>
      <span class="token property">"labels"</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">"alertname"</span><span class="token operator">:</span><span class="token string">"curl test"</span><span class="token punctuation">,</span>
        <span class="token property">"severity"</span><span class="token operator">:</span><span class="token string">"warning"</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">"annotations"</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">"description"</span><span class="token operator">:</span><span class="token string">"this is a test alert from curl"</span><span class="token punctuation">,</span>
        <span class="token property">"summary"</span><span class="token operator">:</span><span class="token string">"test alert from curl"</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">"startsAt"</span><span class="token operator">:</span><span class="token string">"2019-12-03T03:22:50.430372292Z"</span><span class="token punctuation">,</span>
      <span class="token property">"endsAt"</span><span class="token operator">:</span><span class="token string">"2019-12-03T03:26:50.430372292Z"</span><span class="token punctuation">,</span>
      <span class="token property">"generatorURL"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span>
      <span class="token property">"fingerprint"</span><span class="token operator">:</span><span class="token string">"960077177807fca5"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"groupLabels"</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token property">"alertname"</span><span class="token operator">:</span><span class="token string">"curl test"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">"commonLabels"</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token property">"alertname"</span><span class="token operator">:</span><span class="token string">"curl test"</span><span class="token punctuation">,</span>
    <span class="token property">"severity"</span><span class="token operator">:</span><span class="token string">"warning"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">"commonAnnotations"</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token property">"description"</span><span class="token operator">:</span><span class="token string">"this is a test alert from curl"</span><span class="token punctuation">,</span>
    <span class="token property">"summary"</span><span class="token operator">:</span><span class="token string">"test alert from curl"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">"externalURL"</span><span class="token operator">:</span><span class="token string">"http://alertmanager-prometheus-operator-alertmanager-test-0:9093"</span><span class="token punctuation">,</span>
  <span class="token property">"version"</span><span class="token operator">:</span><span class="token string">"4"</span><span class="token punctuation">,</span>
  <span class="token property">"groupKey"</span><span class="token operator">:</span><span class="token string">"{}/{severity="</span>warning<span class="token string">"}:{alertname="</span>curl test<span class="token string">"}"</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>所有接收到的请求内容格式基本不变，标准的<code>JSON格式</code>，我们编写一个<code>实体类</code>用于接收。</p>
<h3 id="编写实体类"><a href="#编写实体类" class="headerlink" title="编写实体类"></a>编写实体类</h3><p>编写内层实体类<code>Alert.java</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * @ClassName: Alert
 * @Description: TODO
 * @Author: wuzhiyong
 * @Time: 2019/12/3 11:39
 * @Version: v1.0
 **/</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Alert</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * 状态：firing / resolved
     */</span>
    <span class="token keyword">private</span> String status<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
     * 标签
     */</span>
    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> labels<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
     * 携带的其它信息
     */</span>
    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> annotations<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
     * 开始时间
     */</span>
    <span class="token keyword">private</span> String startsAt<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String endsAt<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
     * 产生的alertmanager信息
     */</span>
    <span class="token keyword">private</span> String generatorURL<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String fingerprint<span class="token punctuation">;</span>
 
    <span class="token keyword">public</span> <span class="token function">Alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>编写外层实体类<code>Alerts.java</code></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * @ClassName: Alerts
 * @Description: Alertmanager发出的告警格式
 * @Author: wuzhiyong
 * @Time: 2019/12/3 11:49
 * @Version: v1.0
 **/</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Alerts</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> String externalURL<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String version<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String groupKey<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String receiver<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String status<span class="token punctuation">;</span>
    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Alert<span class="token operator">></span> alerts<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> groupLabels<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> commonLabels<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> commonAnnotations<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">Alerts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="编写webhook"><a href="#编写webhook" class="headerlink" title="编写webhook"></a>编写webhook</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/receive"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Alerts alerts<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"new alert: {}"</span><span class="token punctuation">,</span>alerts<span class="token punctuation">.</span><span class="token function">getCommonLabels</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"alertname"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面接收到<code>Alert manager</code>的请求，只是打印了<code>alert name</code>的日志，我们可以根据接收到告警，做更多的事。</p>
<p>可以根据自身业务自行发挥。</p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>prometheus</tag>
        <tag>alertmanager</tag>
      </tags>
  </entry>
  <entry>
    <title>prometheus-operator使用【创建新的Alertmanager】</title>
    <url>/prometheus-operator-shi-yong-chuang-jian-xin-de-alertmanager/</url>
    <content><![CDATA[<blockquote>
<p><code>Alertmanager</code>是安装<code>prometheus-operator</code>时默认新增的自定义资源类型（<code>CRD</code>），我们可以直接在K8s中创建这样的资源。</p>
</blockquote>
<h3 id="创建alert-test-yaml"><a href="#创建alert-test-yaml" class="headerlink" title="创建alert-test.yaml"></a>创建alert-test.yaml</h3><pre class="line-numbers language-yml"><code class="language-yml">apiVersion: monitoring.coreos.com/v1
kind: Alertmanager
metadata:
  generation: 1
  labels:
    app: prometheus-operator-alertmanager
    chart: prometheus-operator-8.2.4
    heritage: Tiller
    release: prometheus-operator
  name: prometheus-operator-alertmanager-test
  namespace: monitoring
spec:
  baseImage: quay.io/prometheus/alertmanager
  version: v0.19.0
  portName: web
  replicas: 1
  retention: 120h
  routePrefix: /
  serviceAccountName: prometheus-operator-alertmanager
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - topologyKey: kubernetes.io/hostname
        labelSelector:
          matchLabels:
            app: alertmanager
            alertmanager: prometheus-operator-alertmanager-test
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          topologyKey: kubernetes.io/hostname
          labelSelector:
            matchLabels:
              app: alertmanager
              alertmanager: prometheus-operator-alertmanager-test
  storage:
    volumeClaimTemplate:
      selector: {}
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
        storageClassName: nfs-client
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="针对以上配置文件简要说明："><a href="#针对以上配置文件简要说明：" class="headerlink" title="针对以上配置文件简要说明："></a>针对以上配置文件简要说明：</h4><ul>
<li>所有配置项可以从<code>stable/prometheus-operator/templates/alertmanager/alertmanager.yaml</code>获取，参考前文，<code>prometheus-operator</code>环境是使用<code>helm</code>安装的，可以通过命令<code>helm fetch stable/prometheus-operator</code>将所有配置下载到本地，然后参考。helm安装会默认安装一个<code>Alertmanager</code>服务，也是通过<code>alertmanager.yaml</code>安装的。</li>
<li><code>kind</code>类型写Alertmanager，无需多言。</li>
<li><code>metadata.name</code>指定你这个Alertmanager名称，可以通过命令查询</li>
</ul>
<pre><code>kubectl get alertmanager -n monitoring
</code></pre>
<ul>
<li><code>spec.baseImage/version</code>需要指定，不然默认使用的镜像版本可能跟helm安装时使用的版本不一致，导致你需要重新下载，部署就非常慢。</li>
<li><code>spec.storage</code>指定你新部署的Alertmanager存储，建议指定。</li>
<li><code>spec.affinity</code>需要指定一些label，Alertmanager对象本质还是一个StatefulSet对象，后面你为Alertmanager对象创建Service时需要通过Label选择。</li>
<li><code>spec.portName</code>指定你端口的名称，这个后面配置和Prometheus关联的时候需要。建议保持默认。</li>
<li><code>metadata.namespace</code>指定命名空间，这个后面配置和Prometheus关联的时候需要。建议保持默认。</li>
<li><code>spec.routePrefix</code>指定路径前缀，这个后面配置和Prometheus关联的时候需要。建议保持默认。</li>
</ul>
<h3 id="过命令或者dashborad创建Alertmanager"><a href="#过命令或者dashborad创建Alertmanager" class="headerlink" title="过命令或者dashborad创建Alertmanager"></a>过命令或者dashborad创建Alertmanager</h3><pre><code>kubectl create -f alert-test.yaml
</code></pre>
<h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>现在创建这个，肯定会报错，类似<code>MountVolume.SetUp failed for volume "config-volume" : secrets "alertmanager-XXXX-xX" not found</code></p>
<p>原因：（参考：<code>https://yunlzheng.gitbook.io/prometheus-book/part-iii-prometheus-shi-zhan/operator/use-operator-manage-monitor</code>）</p>
<p>这是由于<code>Prometheus Operator</code>通过<code>Statefulset</code>的方式创建的<code>Alertmanager</code>实例，在默认情况下，会通过<code>alertmanager-{ALERTMANAGER_NAME}</code>的命名规则去查找<code>Secret</code>配置并以文件挂载的方式，将<code>Secret</code>的内容作为配置文件挂载到<code>Alertmanager</code>实例当中。因此，需要提前为<code>Alertmanager</code>创建相应的配置内容。</p>
<h3 id="参考前文Alertmanager配置"><a href="#参考前文Alertmanager配置" class="headerlink" title="参考前文Alertmanager配置"></a>参考前文Alertmanager配置</h3><p>我们创建<code>alertmanager.yaml</code>，<code>template_1.tmpl</code></p>
<p>然后用命令创建<code>secret</code>，<code>secret</code>名称格式：<code>alertmanager-{ALERTMANAGER_NAME}</code>,例如我们前文指定的<code>Alertmanager</code>名称为<code>prometheus-operator-alertmanager-test</code>，那么这里<code>secret</code>名称为<code>alertmanager-prometheus-operator-alertmanager-test</code>。</p>
<pre><code>kubectl create secret generic alertmanager-prometheus-operator-alertmanager-test -n monitoring --from-file=alertmanager.yaml --from-file=template_1.tmpl
</code></pre>
<h3 id="最后创建Alertmanager"><a href="#最后创建Alertmanager" class="headerlink" title="最后创建Alertmanager"></a>最后创建Alertmanager</h3><h3 id="创建Alertmanager的service"><a href="#创建Alertmanager的service" class="headerlink" title="创建Alertmanager的service"></a>创建Alertmanager的service</h3><blockquote>
<p>这里直接指定Service类型是NodePort，便于我们访问，实际应通过Ingress来做。</p>
</blockquote>
<pre class="line-numbers language-yml"><code class="language-yml">apiVersion: v1
kind: Service
metadata:
  labels:
    app: prometheus-operator-alertmanager
    chart: prometheus-operator-8.2.4
    heritage: Tiller
    release: prometheus-operator
  name: prometheus-operator-alertmanager-test
  namespace: monitoring
spec:
  ports:
  - name: web
    port: 9093
    protocol: TCP
    targetPort: 9093
  selector:
    alertmanager: prometheus-operator-alertmanager-test
    app: alertmanager
  sessionAffinity: None
  type: NodePort
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>注意：这里通过<code>selector</code>来选择，和创建<code>Alertmanager</code>配置中保持一致。</p>
</blockquote>
<h3 id="通过命令查询Service的映射端口"><a href="#通过命令查询Service的映射端口" class="headerlink" title="通过命令查询Service的映射端口"></a>通过命令查询Service的映射端口</h3><pre><code>kubectl get svc -n monitoring
</code></pre>
<p>通过命令查询Service的映射端口，即可访问我们刚刚创建的Alertmanager.</p>
<p>现在Alertmanager上应该还没有任何通知，原因是还没有将我们创建的Alertmanager和Prometheus关联。</p>
<h3 id="关联Prometheus"><a href="#关联Prometheus" class="headerlink" title="关联Prometheus"></a>关联Prometheus</h3><p>如何关联Prometheus呢？首先查看下prometheus-operator创建的Prometheus的配置，prometheus-operator也是通过自定义资源类型（CRD）prometheus来创建prometheus server的，直接通过命令查看。</p>
<pre class="line-numbers language-yml"><code class="language-yml">kubectl get Prometheus prometheus-operator-prometheus  -n monitoring -o yaml
apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  creationTimestamp: "2019-11-28T02:42:48Z"
  generation: 1
  labels:
    app: prometheus-operator-prometheus
    chart: prometheus-operator-8.2.4
    heritage: Tiller
    release: prometheus-operator
  name: prometheus-operator-prometheus
  namespace: monitoring
  resourceVersion: "6316434"
  selfLink: /apis/monitoring.coreos.com/v1/namespaces/monitoring/prometheuses/prometheus-operator-prometheus
  uid: de60d68f-6818-484d-ba30-4f381e7cb016
spec:
  alerting:
    alertmanagers:
    - name: prometheus-operator-alertmanager
      namespace: monitoring
      pathPrefix: /
      port: web
  baseImage: quay.io/prometheus/prometheus
  enableAdminAPI: false
  externalUrl: http://prom.deri.com/
  listenLocal: false
  logFormat: logfmt
  logLevel: info
  paused: false
  podMonitorNamespaceSelector: {}
  podMonitorSelector:
    matchLabels:
      release: prometheus-operator
  portName: web
  replicas: 1
  retention: 10d
  routePrefix: /
  ruleNamespaceSelector: {}
  ruleSelector:
    matchLabels:
      app: prometheus-operator
      release: prometheus-operator
  securityContext:
    fsGroup: 2000
    runAsNonRoot: true
    runAsUser: 1000
  serviceAccountName: prometheus-operator-prometheus
  serviceMonitorNamespaceSelector: {}
  serviceMonitorSelector:
    matchLabels:
      release: prometheus-operator
  storage:
    volumeClaimTemplate:
      selector: {}
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 2Gi
        storageClassName: nfs-client
  version: v2.13.1
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="Prometheus配置"><a href="#Prometheus配置" class="headerlink" title="Prometheus配置"></a>Prometheus配置</h4><ul>
<li><code>spec.alerting.alertmanagers</code>就是指定Prometheus将告警发给哪些alertmanagers。</li>
<li><code>spec.ruleSelector.matchLabels</code>通过标签关联用户创建的自定义PrometheusRule。</li>
<li><code>spec.serviceMonitorSelector.matchLabels</code>通过标签关联用户创建的自定义ServiceMonitor</li>
</ul>
<p>使用命令编辑已有的Prometheus服务配置</p>
<pre><code>kubectl edit Prometheus prometheus-operator-prometheus  -n monitoring
</code></pre>
<p>增加一个<code>Alertmanager</code>的<code>Endpoint</code>，其中<code>name</code>、<code>namespace</code>、<code>pathPrefix</code>、<code>port</code>和创建<code>Alertmanager</code>配置保持一致。</p>
<pre class="line-numbers language-yml"><code class="language-yml">spec:
  alerting:
    alertmanagers:
    - name: prometheus-operator-alertmanager
      namespace: monitoring
      pathPrefix: /
      port: web
    - name: prometheus-operator-alertmanager-test
      namespace: monitoring
      pathPrefix: /
      port: web
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>prometheus</tag>
        <tag>Alertmanager</tag>
      </tags>
  </entry>
  <entry>
    <title>prometheus-operator使用【自定义PrometheusRule】</title>
    <url>/prometheus-operator-shi-yong-zi-ding-yi-prometheusrule/</url>
    <content><![CDATA[<h3 id="PrometheusRule介绍"><a href="#PrometheusRule介绍" class="headerlink" title="PrometheusRule介绍"></a>PrometheusRule介绍</h3><blockquote>
<p><code>PrometheusRule</code>是安装<code>prometheus-operator</code>时默认安装的自定义资源对象（<code>CRD</code>），用来管理<code>Prometheus</code>上的<code>告警规则</code>，后面增删改查规则都可以通过这个资源对象查询。</p>
</blockquote>
<p>例如查询默认加入的规则，通过下面的命令可以查询。</p>
<pre class="line-numbers language-sh"><code class="language-sh">[root@k8s-master prometheus-operator]# kubectl get PrometheusRule -n monitoring
NAME                                                       AGE
prometheus-operator-alertmanager.rules                     28m
prometheus-operator-etcd                                   28m
prometheus-operator-general.rules                          28m
prometheus-operator-k8s.rules                              28m
prometheus-operator-kube-apiserver.rules                   28m
prometheus-operator-kube-prometheus-node-recording.rules   28m
prometheus-operator-kube-scheduler.rules                   28m
prometheus-operator-kubernetes-absent                      28m
prometheus-operator-kubernetes-apps                        28m
prometheus-operator-kubernetes-resources                   28m
prometheus-operator-kubernetes-storage                     28m
prometheus-operator-kubernetes-system                      28m
prometheus-operator-kubernetes-system-apiserver            28m
prometheus-operator-kubernetes-system-controller-manager   28m
prometheus-operator-kubernetes-system-kubelet              28m
prometheus-operator-kubernetes-system-scheduler            28m
prometheus-operator-node-exporter                          28m
prometheus-operator-node-exporter.rules                    28m
prometheus-operator-node-network                           28m
prometheus-operator-node-time                              28m
prometheus-operator-node.rules                             28m
prometheus-operator-prometheus                             28m
prometheus-operator-prometheus-operator                    28m
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>也可以在<code>Prometheus -&gt; Dashboard -&gt; Status -&gt; Rules</code>中查看<br><img data-src="/images/k8s4.png" alt="prometheusRules"></p>
<h3 id="Prometheus怎么识别这个资源对象"><a href="#Prometheus怎么识别这个资源对象" class="headerlink" title="Prometheus怎么识别这个资源对象"></a>Prometheus怎么识别这个资源对象</h3><p>简单来说，类似标签选择器，定义的<code>PrometheusRule</code>资源对象，需要带有一些<code>Labels</code>，具体哪些可以参考默认生成的<code>PrometheusRule</code>，然后新建的也给加上。</p>
<p><img data-src="/images/k8s5.png" alt="prometheusRules"></p>
<p>参考链接：<code>https://www.qikqiak.com/post/prometheus-operator-custom-alert/</code>。</p>
<p>所有的Rules都有对应的文件，默认生成在<code>prometheus容器内</code>的</p>
<pre><code>/etc/prometheus/rules/prometheus-prometheus-operator-prometheus-rulefiles-0/
</code></pre>
<p>目录下，新增一个<code>PrometheusRule资源</code>，也会在该目录下自动生成一个<code>YAML文件</code>。</p>
<p>因此我们可以不用管理配置文件，只需要管理<code>PrometheusRule</code>，<code>prometheus-operator</code>使得<code>prometheus</code>监控更加<code>K8s</code>.</p>
<h3 id="创建新的PrometheusRule资源"><a href="#创建新的PrometheusRule资源" class="headerlink" title="创建新的PrometheusRule资源"></a>创建新的PrometheusRule资源</h3><p><code>myrule.yaml</code></p>
<pre class="line-numbers language-yml"><code class="language-yml">apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: myrule
  labels:
    app: prometheus-operator
    chart: prometheus-operator-8.2.4
    heritage: Tiller
    release: prometheus-operator
spec:
  groups:
  - name: my-node-time
    rules:
    - alert: myClockSkewDetected
      annotations:
        message: myClock skew detected on node-exporter {{`{{ $labels.namespace }}`}}/{{`{{ $labels.pod }}`}}. Ensure NTP is configured correctly on this host.
      expr: abs(node_timex_offset_seconds{job="node-exporter"}) > 0.03
      for: 2m
      labels:
        severity: warning
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>注意：上面配置中具体的规则只是拷贝了一个默认规则中的内容。</p>
</blockquote>
<h3 id="使用命令或者在dashboard中贴上以上YAML，即可创建。"><a href="#使用命令或者在dashboard中贴上以上YAML，即可创建。" class="headerlink" title="使用命令或者在dashboard中贴上以上YAML，即可创建。"></a>使用命令或者在dashboard中贴上以上YAML，即可创建。</h3><pre><code>kubectl create -f myrule.yaml
</code></pre>
<p>创建完之后，可以通过命令查看</p>
<pre><code>kubectl get PrometheusRule -n monitoring
</code></pre>
<p>也可以在<code>Prometheus</code> -&gt; <code>Dashboard</code>中查看，最后在<code>Prometheus</code>容器<code>Rule</code>目录下确认是否新生成一个<code>myrule.yaml</code>的配置文件。</p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>prometheus</tag>
        <tag>PrometheusRule</tag>
      </tags>
  </entry>
  <entry>
    <title>prometheus【pushgateway部署使用】</title>
    <url>/prometheus-pushgateway-bu-shu-shi-yong/</url>
    <content><![CDATA[<h3 id="PushGateway使用说明"><a href="#PushGateway使用说明" class="headerlink" title="PushGateway使用说明"></a>PushGateway使用说明</h3><ul>
<li><code>Prometheus</code>采用定时<code>Pull</code>模式，可能由于子网络或者防火墙的原因，不能直接拉取各个<code>Target</code>的指标数据，此时可以采用各个<code>Target</code>往<code>PushGateway</code>上<code>Push</code>数据，然后<code>Prometheus</code>去<code>PushGateway</code>上定时<code>pull</code></li>
<li>其次在监控各个业务数据时，需要将各个不同的业务数据进行统一汇总，此时也可以采用<code>PushGateway</code>来统一收集，然后<code>Prometheus</code>来统一拉取</li>
<li><code>Prometheus</code>每次从<code>PushGateway</code>拉取的数据，并不是拉取周期内用户推送上来的所有数据，而是最后一次<code>Push</code>到<code>PushGateway</code>上的数据</li>
<li>指标值只能是数字类型，非数字类型报错</li>
<li>指标值支持最大长度为<code>16</code>位，超过<code>16</code>位后默认置为<code>0</code></li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 默认不持久化数据</span>
docker run -d -p 9091:9091 prom/PushGateway 

<span class="token comment" spellcheck="true"># 指定持久化文件和保留时间</span>
docker run -d -p 9091:9091 prom/pushgateway <span class="token string">"-persistence.file=pg_file –persistence.interval=5m"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 单条推送</span>
<span class="token keyword">echo</span> <span class="token string">"test_metric 123456"</span> <span class="token operator">|</span> curl --data-binary @- http://192.168.41.128:9091/metrics/job/test_job

<span class="token comment" spellcheck="true"># 多条推送</span>
<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span>EOF <span class="token operator">|</span> curl --data-binary @- http://192.168.41.128:9091/metrics/job/test_job/instance/test_instance
<span class="token comment" spellcheck="true"># TYPE test_metrics counter</span>
test_metrics<span class="token punctuation">{</span>label<span class="token operator">=</span><span class="token string">"app1"</span>,name<span class="token operator">=</span><span class="token string">"demo"</span><span class="token punctuation">}</span> 100.00
<span class="token comment" spellcheck="true"># TYPE another_test_metrics gauge</span>
<span class="token comment" spellcheck="true"># HELP another_test_metrics Just an example.</span>
another_test_metrics 123.45
EOF

<span class="token comment" spellcheck="true"># 通过文件</span>
vim pg.txt
<span class="token comment" spellcheck="true"># TYPE http_request_total counter</span>
<span class="token comment" spellcheck="true"># HELP http_request_total get interface request count with different code.</span>
http_request_total<span class="token punctuation">{</span>code<span class="token operator">=</span><span class="token string">"200"</span>,interface<span class="token operator">=</span><span class="token string">"/v1/save"</span><span class="token punctuation">}</span> 276
http_request_total<span class="token punctuation">{</span>code<span class="token operator">=</span><span class="token string">"404"</span>,interface<span class="token operator">=</span><span class="token string">"/v1/delete"</span><span class="token punctuation">}</span> 0
http_request_total<span class="token punctuation">{</span>code<span class="token operator">=</span><span class="token string">"500"</span>,interface<span class="token operator">=</span><span class="token string">"/v1/save"</span><span class="token punctuation">}</span> 1
<span class="token comment" spellcheck="true"># TYPE http_request_time gauge</span>
<span class="token comment" spellcheck="true"># HELP http_request_time get core interface http request time.</span>
http_request_time<span class="token punctuation">{</span>code<span class="token operator">=</span><span class="token string">"200"</span>,interface<span class="token operator">=</span><span class="token string">"/v1/core"</span><span class="token punctuation">}</span> 0.122

curl -XPOST --data-binary @pg.txt http://192.168.41.128:9091/metrics/job/app/instance/app-192.168.41.128
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>删除指标,参考<a href="https://github.com/prometheus/pushgateway/blob/master/README.md">官方</a></p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># {job="some_job",instance="some_instance"}</span>
curl -X DELETE http://192.168.41.128:9091/metrics/job/some_job/instance/some_instance

<span class="token comment" spellcheck="true"># {job="some_job"}</span>
curl -X DELETE http://192.168.41.128:9091/metrics/job/some_job

<span class="token comment" spellcheck="true"># 删除所有, 需要开启--web.enable-admin-api</span>
curl -X PUT http://192.168.41.128:9091/api/v1/admin/wipe
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过<code>SDK</code>上传：</p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.prometheus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>simpleclient_pushgateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span><span class="token punctuation">{</span>
        String url <span class="token operator">=</span> <span class="token string">"192.168.41.128:9091"</span><span class="token punctuation">;</span>
        CollectorRegistry registry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CollectorRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Gauge guage <span class="token operator">=</span> Gauge<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token string">"my_custom_metric"</span><span class="token punctuation">,</span> <span class="token string">"This is my custom metric."</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        guage<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">23.12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        guage<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
        PushGateway pg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PushGateway</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> groupingKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        groupingKey<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"instance"</span><span class="token punctuation">,</span> <span class="token string">"my_instance"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pg<span class="token punctuation">.</span><span class="token function">pushAdd</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token string">"my_job"</span><span class="token punctuation">,</span> groupingKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span><span class="token punctuation">{</span>
        String url <span class="token operator">=</span> <span class="token string">"172.30.12.167:9091"</span><span class="token punctuation">;</span>
        CollectorRegistry registry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CollectorRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Gauge guage <span class="token operator">=</span> Gauge<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token string">"my_custom_metric"</span><span class="token punctuation">,</span> <span class="token string">"This is my custom metric."</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">labelNames</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">,</span> <span class="token string">"date"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-mm-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        guage<span class="token punctuation">.</span><span class="token function">labels</span><span class="token punctuation">(</span><span class="token string">"my-pushgateway-test-0"</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        guage<span class="token punctuation">.</span><span class="token function">labels</span><span class="token punctuation">(</span><span class="token string">"my-pushgateway-test-1"</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        guage<span class="token punctuation">.</span><span class="token function">labels</span><span class="token punctuation">(</span><span class="token string">"my-pushgateway-test-2"</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dec</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        guage<span class="token punctuation">.</span><span class="token function">labels</span><span class="token punctuation">(</span><span class="token string">"my-pushgateway-test-3"</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        guage<span class="token punctuation">.</span><span class="token function">labels</span><span class="token punctuation">(</span><span class="token string">"my-pushgateway-test-4"</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inc</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        guage<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
        PushGateway pg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PushGateway</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> groupingKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        groupingKey<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"instance"</span><span class="token punctuation">,</span> <span class="token string">"my_instance"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pg<span class="token punctuation">.</span><span class="token function">pushAdd</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token string">"my_job"</span><span class="token punctuation">,</span> groupingKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><ul>
<li><a href="http://192.168.41.128:9091/">pushgateway UI - http://192.168.41.128:9091</a></li>
</ul>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://www.freesion.com/article/8444169827/">PROMETHEUS 使用 PUSHGATEWAY 进行数据上报采集</a></li>
<li><a href="https://github.com/prometheus/pushgateway/blob/master/README.md">官方说明</a></li>
</ul>
]]></content>
      <categories>
        <category>prometheus</category>
      </categories>
      <tags>
        <tag>prometheus</tag>
        <tag>pushgateway</tag>
      </tags>
  </entry>
  <entry>
    <title>prometheus四种数据类型</title>
    <url>/prometheus-si-chong-shu-ju-lei-xing/</url>
    <content><![CDATA[<p>Prometheus 定义了 4 中不同的指标类型 (metric type)：Counter（计数器）、Gauge（仪表盘）、Histogram（直方图）、Summary（摘要）.</p>
<h3 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h3><ul>
<li>Counter 用于累计值，例如 记录 请求次数、任务完成数、错误发生次数</li>
<li>一直增加，不会减少</li>
<li>重启进程后，会被重置</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># http响应总数</span>
http_response_total<span class="token punctuation">{</span>method<span class="token operator">=</span><span class="token string">"GET"</span>,endpoint<span class="token operator">=</span><span class="token string">"/api/tracks"</span><span class="token punctuation">}</span> 100
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="Gauge"><a href="#Gauge" class="headerlink" title="Gauge"></a>Gauge</h3><ul>
<li>Gauge 常规数值，例如 温度变化、内存使用变化</li>
<li>可增可减的仪表盘</li>
<li>重启进程后，会被重置</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 如cpu、内存使用量</span>
memory_usage_bytes<span class="token punctuation">{</span>host<span class="token operator">=</span><span class="token string">"master-01"</span><span class="token punctuation">}</span> 80
cpu_usage<span class="token punctuation">{</span>host<span class="token operator">=</span><span class="token string">"master-01"</span><span class="token punctuation">}</span> 60
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="Histogram"><a href="#Histogram" class="headerlink" title="Histogram"></a>Histogram</h3><ul>
<li>对记录的内容进行分组，提供 count 和 sum 全部值</li>
<li>直接反应了在不同区间内样本的个数</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 如：prometheus_tsdb_compaction_chunk_range_bucket 指标</span>
<span class="token comment" spellcheck="true"># HELP prometheus_tsdb_compaction_chunk_range Final time range of chunks on their first compaction</span>
<span class="token comment" spellcheck="true"># TYPE prometheus_tsdb_compaction_chunk_range histogram</span>
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">"100"</span><span class="token punctuation">}</span> 0
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">"400"</span><span class="token punctuation">}</span> 0
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">"1600"</span><span class="token punctuation">}</span> 0
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">"6400"</span><span class="token punctuation">}</span> 0
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">"25600"</span><span class="token punctuation">}</span> 0
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">"102400"</span><span class="token punctuation">}</span> 0
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">"409600"</span><span class="token punctuation">}</span> 0
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">"1.6384e+06"</span><span class="token punctuation">}</span> 260
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">"6.5536e+06"</span><span class="token punctuation">}</span> 780
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">"2.62144e+07"</span><span class="token punctuation">}</span> 780
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">"+Inf"</span><span class="token punctuation">}</span> 780
prometheus_tsdb_compaction_chunk_range_sum 1.1540798e+09
prometheus_tsdb_compaction_chunk_range_count 780
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><ul>
<li>提供 count 和 sum 全部值</li>
<li>提供一个 quantiles 的功能，可以按%比划分跟踪的结果</li>
<li>例如：quantile 取值 0.95，表示取采样值里面的 95% 数据</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># HELP prometheus_tsdb_wal_fsync_duration_seconds Duration of WAL fsync.</span>
<span class="token comment" spellcheck="true"># TYPE prometheus_tsdb_wal_fsync_duration_seconds summary</span>
prometheus_tsdb_wal_fsync_duration_seconds<span class="token punctuation">{</span>quantile<span class="token operator">=</span><span class="token string">"0.5"</span><span class="token punctuation">}</span> 0.012352463
prometheus_tsdb_wal_fsync_duration_seconds<span class="token punctuation">{</span>quantile<span class="token operator">=</span><span class="token string">"0.9"</span><span class="token punctuation">}</span> 0.014458005
prometheus_tsdb_wal_fsync_duration_seconds<span class="token punctuation">{</span>quantile<span class="token operator">=</span><span class="token string">"0.99"</span><span class="token punctuation">}</span> 0.017316173
prometheus_tsdb_wal_fsync_duration_seconds_sum 2.888716127000002
prometheus_tsdb_wal_fsync_duration_seconds_count 216
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>从上面的样本中可以得知当前 Prometheus Server 进行 wal_fsync 操作的总次数为 216 次，耗时 2.888716127000002s。其中中位数（quantile=0.5）的耗时为 0.012352463，9 分位数（quantile=0.9）的耗时为 0.014458005s。</p>
</blockquote>
]]></content>
      <categories>
        <category>prometheus</category>
      </categories>
      <tags>
        <tag>prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>redis【是单线程吗?】</title>
    <url>/redis-shi-dan-xian-cheng-ma/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul>
<li><p>Redis基于Reactor模式开发了网络事件处理器，这个处理器被称为文件事件处理器。它的组成结构为4部分：多个套接字、IO多路复用程序、文件事件分派器、事件处理器。因为文件事件分派器队列的消费是单线程的，所以Redis才叫单线程模型。</p>
</li>
<li><p>Redis 4.0 开始就有多线程的概念了，比如 Redis 通过多线程方式在后台删除对象、以及通过 Redis 模块实现的阻塞命令等。</p>
</li>
<li><p>Redis 6.0 网络处理多线程，指的是在网络 IO 处理方面上了多线程，如网络数据的读写和协议解析等，需要注意的是，执行命令的核心模块还是单线程的。</p>
</li>
<li><p>Redis 的瓶颈并不在 CPU，而在内存和网络。内存不够的话，可以加内存或者做数据结构优化和其他优化等，但网络的性能优化才是大头，网络 IO 的读写在 Redis 整个执行期间占用了大部分的 CPU 时间，如果把网络处理这部分做成多线程处理方式，那对整个 Redis 的性能会有很大的提升。</p>
</li>
</ul>
<h3 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h3><p>- </p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis主从模式部署</title>
    <url>/redis-zhu-cong-mo-shi-bu-shu/</url>
    <content><![CDATA[<h3 id="启动参数"><a href="#启动参数" class="headerlink" title="启动参数"></a>启动参数</h3><ul>
<li><code>--requirepass 123456</code>:设置客户端连接redis的认证信息</li>
<li><code>--masterauth 123456</code>:设置从节点连接redis的认证信息</li>
</ul>
<h3 id="一主一从"><a href="#一主一从" class="headerlink" title="一主一从"></a>一主一从</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动主节点</span>
docker run -d -p 6379:6379 --name redis-server redis:6.2.5 redis-server

<span class="token comment" spellcheck="true"># 启动从节点,可以启动多个</span>
docker run -d -p 6378:6379 --name redis-slave redis:6.2.5 redis-server --slaveof 192.168.41.128 6379

<span class="token comment" spellcheck="true"># 查看主从状态</span>
docker <span class="token function">exec</span> -it redis-server <span class="token function">bash</span>
root@2057712d5b24:/data<span class="token comment" spellcheck="true"># redis-cli </span>
127.0.0.1:6379<span class="token operator">></span> info replication
<span class="token comment" spellcheck="true"># Replication</span>
role:master
connected_slaves:1
slave0:ip<span class="token operator">=</span>172.17.0.1,port<span class="token operator">=</span>6379,state<span class="token operator">=</span>online,offset<span class="token operator">=</span>844,lag<span class="token operator">=</span>0
master_failover_state:no-failover
master_replid:a7c3448b15070b13848c48139b99016a67cb5b9e
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:844
second_repl_offset:-1
repl_backlog_active:1
repl_backlog_size:1048576
repl_backlog_first_byte_offset:1
repl_backlog_histlen:844


<span class="token comment" spellcheck="true"># 测试</span>
<span class="token comment" spellcheck="true"># 主节点set,从节点可以get</span>
<span class="token comment" spellcheck="true"># 从节点只支持读操作,不支持写</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>主从</tag>
      </tags>
  </entry>
  <entry>
    <title>redis哨兵模式部署</title>
    <url>/redis-shao-bing-mo-shi-bu-shu/</url>
    <content><![CDATA[<h3 id="配置文件sentinel-conf"><a href="#配置文件sentinel-conf" class="headerlink" title="配置文件sentinel.conf"></a>配置文件sentinel.conf</h3><pre class="line-numbers language-bash"><code class="language-bash">port 26379
sentinel monitor mymaster 192.168.41.128 6379 2
sentinel down-after-milliseconds mymaster 30000
sentinel parallel-syncs mymaster 1
sentinel failover-timeout mymaster 10000
sentinel deny-scripts-reconfig <span class="token function">yes</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="启动1主2从"><a href="#启动1主2从" class="headerlink" title="启动1主2从"></a>启动1主2从</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动主节点</span>
docker run -d --net host --name redis-server redis:6.2.5 redis-server --port 6379
<span class="token comment" spellcheck="true"># 启动从节点</span>
docker run -d --net host --name redis-slave1 redis:6.2.5 redis-server --slaveof 192.168.41.128 6379  --port 6378
docker run -d --net host --name redis-slave2 redis:6.2.5 redis-server --slaveof 192.168.41.128 6379  --port 6377
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="启动哨兵"><a href="#启动哨兵" class="headerlink" title="启动哨兵"></a>启动哨兵</h3><pre class="line-numbers language-bash"><code class="language-bash">docker run -d -p 26379:26379 --name redis-sentinel1 -v <span class="token variable">$PWD</span>/sentinel1.conf:/sentinel/sentinel.conf redis:6.2.5 redis-sentinel /sentinel/sentinel.conf
docker run -d -p 26378:26379 --name redis-sentinel2 -v <span class="token variable">$PWD</span>/sentinel2.conf:/sentinel/sentinel.conf redis:6.2.5 redis-sentinel /sentinel/sentinel.conf
docker run -d -p 26377:26379 --name redis-sentinel3 -v <span class="token variable">$PWD</span>/sentinel2.conf:/sentinel/sentinel.conf redis:6.2.5 redis-sentinel /sentinel/sentinel.conf
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@node1 redis<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker exec -it redis-sentinel1 bash</span>
root@be853924137f:/data<span class="token comment" spellcheck="true"># redis-cli -p 26379</span>
127.0.0.1:26379<span class="token operator">></span> info sentinel
<span class="token comment" spellcheck="true"># Sentinel</span>
sentinel_masters:1
sentinel_tilt:0
sentinel_running_scripts:0
sentinel_scripts_queue_length:0
sentinel_simulate_failure_flags:0
master0:name<span class="token operator">=</span>mymaster,status<span class="token operator">=</span>sdown,address<span class="token operator">=</span>192.168.41.128:6379,slaves<span class="token operator">=</span>1,sentinels<span class="token operator">=</span>3

<span class="token comment" spellcheck="true"># 查看masters</span>
127.0.0.1:26379<span class="token operator">></span> SENTINEL masters

<span class="token comment" spellcheck="true"># 查看slaves</span>
127.0.0.1:26379<span class="token operator">></span> SENTINEL slaves mymaster

<span class="token comment" spellcheck="true"># 关闭redis-server</span>
docker stop redis-server
<span class="token comment" spellcheck="true"># 刷新查看master节点是否更换</span>
docker <span class="token function">exec</span> -it  redis-sentinel1 redis-cli -p 26379 sentinel masters
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>哨兵</tag>
      </tags>
  </entry>
  <entry>
    <title>redis总结</title>
    <url>/redis-zong-jie/</url>
    <content><![CDATA[<h1 id="redis高可用"><a href="#redis高可用" class="headerlink" title="redis高可用"></a>redis高可用</h1><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p><img data-src="/images/redis1.png" alt="主从复制"></p>
<ul>
<li>一个master可以拥有多个slave，一个slave又可以拥有多个slave，如此下去，形成了强大的多级服务器集群架构</li>
<li>master用来写数据，slave用来读数据，经统计：网站的读写比率是10:1</li>
<li>通过主从配置可以实现读写分离</li>
<li>master和slave都是一个redis实例(redis服务)</li>
</ul>
<h3 id="全量同步过程"><a href="#全量同步过程" class="headerlink" title="全量同步过程"></a>全量同步过程</h3><p><img data-src="/images/redis2.png" alt="主从复制"></p>
<ol>
<li>当一个从数据库启动时，会向主数据库发送sync命令</li>
<li>主数据库接收到sync命令后会开始在后台保存快照（执行rdb操作），并用缓存区记录后续的所有写操作</li>
<li>当主服务器快照保存完成后，redis会将快照文件发送给从数据库。</li>
<li>从数据库收到快照文件后，会丢弃所有旧数据，载入收到的快照。</li>
<li>主服务器快照发送完毕后开始向从服务器发送缓冲区中的写命令。</li>
<li>从服务器完成对快照的载入，开始接收命令请求，并执行来自主服务器缓冲区的写命令。</li>
</ol>
<p>&nbsp;</p>
<h3 id="增量同步的过程"><a href="#增量同步的过程" class="headerlink" title="增量同步的过程"></a>增量同步的过程</h3><p>Redis增量复制是指slave初始化后开始正常工作时主服务器发生的写操作同步到从服务器的过程。&nbsp;</p>
<p>增量复制的过程主要是主服务器每执行一个写命令就会向从服务器发送相同的写命令，从服务器接收并执行收到的写命令。</p>
<p>&nbsp;</p>
<h3 id="Redis主从复制全量与增量同步的选择"><a href="#Redis主从复制全量与增量同步的选择" class="headerlink" title="Redis主从复制全量与增量同步的选择"></a>Redis主从复制全量与增量同步的选择</h3><p>主从服务器刚刚连接的时候，会先进行全量同步；全同步结束后，再进行增量同步。当然，如果有需要，slave 在任何时候都可以发起全量同步。redis 策略是，无论如何，首先会尝试进行增量同步，如不成功，要求从机进行全量同步。</p>
<h3 id="主从复制优缺点："><a href="#主从复制优缺点：" class="headerlink" title="主从复制优缺点："></a>主从复制优缺点：</h3><p><strong>优点：</strong></p>
<ul>
<li>支持主从复制，主机会自动将数据同步到从机，可以进行读写分离</li>
<li>为了分载Master的读操作压力，Slave服务器可以为客户端提供只读操作的服务，写服务仍然必须由Master来完成</li>
<li>Slave同样可以接受其它Slaves的连接和同步请求，这样可以有效的分载Master的同步压力。</li>
<li>Master Server是以非阻塞的方式为Slaves提供服务。所以在Master-Slave同步期间，客户端仍然可以提交查询或修改请求。</li>
<li>Slave Server同样是以非阻塞的方式完成数据同步。在同步期间，如果有客户端提交查询请求，Redis则返回同步之前的数据</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>Redis不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的IP才能恢复。</li>
<li>主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题，降低了系统的可用性。</li>
<li>Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。</li>
</ul>
<h2 id="哨兵模式（Redis-Sentinel）"><a href="#哨兵模式（Redis-Sentinel）" class="headerlink" title="哨兵模式（Redis Sentinel）"></a>哨兵模式（Redis Sentinel）</h2><p><img data-src="/images/redis3.png" alt="哨兵模式"></p>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>Sentinel 的主要功能包括 主节点存活检测、主从运行情况检测、自动故障转移 （failover）、主从切换。Redis 的 Sentinel 最小配置是 一主一从。<br>Redis 的 Sentinel 系统可以用来管理多个 Redis 服务器，该系统可以执行以下四个任务：</p>
<ul>
<li><p>监控</p>
<blockquote>
<p>Sentinel 会不断的检查 主服务器 和 从服务器 是否正常运行。</p>
</blockquote>
</li>
<li><p>通知</p>
<blockquote>
<p>当被监控的某个 Redis 服务器出现问题，Sentinel 通过 API 脚本 向 管理员 或者其他的 应用程序 发送通知。</p>
</blockquote>
</li>
</ul>
<p>-自动故障转移</p>
<blockquote>
<p>当 主节点 不能正常工作时，Sentinel 会开始一次 自动的 故障转移操作，它会将与 失效主节点 是 主从关系 的其中一个 从节点 升级为新的 主节点，并且将其他的 从节点 指向 新的主节点。</p>
</blockquote>
<ul>
<li>配置提供者<blockquote>
<p>在 Redis Sentinel 模式下，客户端应用 在初始化时连接的是 Sentinel 节点集合，从中获取 主节点 的信息。</p>
</blockquote>
</li>
</ul>
<h3 id="主观下线和客观下线"><a href="#主观下线和客观下线" class="headerlink" title="主观下线和客观下线"></a>主观下线和客观下线</h3><p>默认情况下，每个 Sentinel 节点会以 每秒一次 的频率对 Redis 节点和 其它 的 Sentinel 节点发送 PING 命令，并通过节点的 回复 来判断节点是否在线。</p>
<h4 id="主观下线"><a href="#主观下线" class="headerlink" title="主观下线"></a>主观下线</h4><p>主观下线 适用于所有 主节点 和 从节点。如果在 down-after-milliseconds 毫秒内，Sentinel 没有收到 目标节点 的有效回复，则会判定 该节点 为 主观下线。</p>
<h4 id="客观下线"><a href="#客观下线" class="headerlink" title="客观下线"></a>客观下线</h4><p>客观下线 只适用于 主节点。如果 主节点 出现故障，Sentinel 节点会通过 sentinel is-master-down-by-addr 命令，向其它 Sentinel 节点询问对该节点的 状态判断。如果超过 <quorum> 个数的节点判定 主节点 不可达，则该 Sentinel 节点会判断 主节点 为 客观下线。</quorum></p>
<p><a href="https://juejin.im/post/5b7d226a6fb9a01a1e01ff64">更多参考</a></p>
<h3 id="哨兵模式的优缺点"><a href="#哨兵模式的优缺点" class="headerlink" title="哨兵模式的优缺点"></a>哨兵模式的优缺点</h3><p><strong>优点</strong></p>
<ul>
<li>哨兵模式是基于主从模式的，所有主从的优点，哨兵模式都具有。</li>
<li>主从可以自动切换，系统更健壮，可用性更高。</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。</li>
</ul>
<h2 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h2><p>在 <code>Redis 3.0</code> 之前，使用 哨兵（<code>sentinel</code>）机制来监控各个节点之间的状态。Redis Cluster 是 Redis 的 分布式解决方案，在 3.0 版本正式推出，有效地解决了 Redis 在 分布式 方面的需求。当遇到 单机内存、并发、流量 等瓶颈时，可以采用 Cluster 架构方案达到 负载均衡 的目的。</p>
<h3 id="数据分区"><a href="#数据分区" class="headerlink" title="数据分区"></a>数据分区</h3><p><img data-src="/images/redis4.png" alt="虚拟槽分区"></p>
<p>redis集群中数据是和槽（slot）挂钩的，其总共定义了16384个槽，所有的数据根据一致哈希算法会被映射到这16384个槽中的某个槽中；</p>
<p>另一方面，这16384个槽是按照设置被分配到不同的redis节点上的，比如启动了三个redis实例：cluster-A，cluster-B和cluster-C，这里将0-5460号槽分配给cluster-A，将5461-10922号槽分配给cluster-B，将10923-16383号槽分配给cluster-C（总共有16384个槽，但是其标号类似数组下标，是从0到16383）。也就是说数据的存储只和槽有关，并且槽的数量是一定的，由于一致hash算法是一定的，因而将这16384个槽分配给无论多少个redis实例，对于确认的数据其都将被分配到确定的槽位上。redis集群通过这种方式来达到redis的高效和高可用性目的。</p>
<p><a href="https://juejin.im/post/5b8fc5536fb9a05d2d01fb11#heading-4">更多参考</a></p>
<h3 id="Redis虚拟槽分区的特点"><a href="#Redis虚拟槽分区的特点" class="headerlink" title="Redis虚拟槽分区的特点"></a>Redis虚拟槽分区的特点</h3><ul>
<li>解耦数据和节点之间的关系，简化了节点扩容和收缩难度。</li>
<li>节点自身维护槽的映射关系，不需要客户端或者代理服务维护槽分区元数据。</li>
<li>支持节点、槽、键 之间的映射查询，用于数据路由、在线伸缩等场景</li>
</ul>
<h3 id="Redis集群的功能限制"><a href="#Redis集群的功能限制" class="headerlink" title="Redis集群的功能限制"></a>Redis集群的功能限制</h3><p>Redis 集群相对单机在功能上存在一些限制。</p>
<ul>
<li><p>key批量操作支持有限。</p>
<blockquote>
<p>类似mset、mget操作，目前只支持对具有相同slot值的key执行 批量操作。对于映射为不同slot值的key由于执行mget、mget等操作可能存在于多个节点上，因此不被支持。</p>
</blockquote>
</li>
<li><p>key事务操作支持有限。</p>
<blockquote>
<p>只支持多key在同一节点上的事务操作，当多个key分布在不同的节点上时无法使用事务功能。</p>
</blockquote>
</li>
<li><p>key作为数据分区的最小粒度</p>
<blockquote>
<p>不能将一个大的键值对象如hash、list等映射到不同的节点。</p>
</blockquote>
</li>
<li><p>不支持多数据库空间</p>
<blockquote>
<p>单机下的<code>Redis</code>可以支持<code>16</code>个数据库（db0 ~ db15），集群模式 下只能使用一个数据库空间，即<code>db0</code>。</p>
</blockquote>
</li>
<li><p>复制结构只支持一层</p>
<blockquote>
<p>从节点只能复制主节点，不支持<code>嵌套树状复制</code>结构。</p>
</blockquote>
</li>
</ul>
<h1 id="redis常见问题"><a href="#redis常见问题" class="headerlink" title="redis常见问题"></a>redis常见问题</h1><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p>缓存雪崩我们可以简单的理解为：由于原有缓存失效，新缓存未到期间(例如：我们设置缓存时采用了相同的过期时间，在同一时刻出现大面积的缓存过期)，所有原本应该访问缓存的请求都去查询数据库了，而对数据库CPU和内存造成巨大压力，严重的会造成数据库宕机。从而形成一系列连锁反应，造成整个系统崩溃。</p>
<p>解决方案：</p>
<ul>
<li>排队加锁</li>
<li>缓存增加标记，过期前就更新</li>
<li>缓存时间增加随机属性，错开同一时间过期</li>
</ul>
<h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p>缓存穿透是指用户查询数据，在数据库没有，自然在缓存中也不会有。这样就导致用户查询的时候，在缓存中找不到，每次都要去数据库再查询一遍，然后返回空（相当于进行了两次无用的查询）。这样请求就绕过缓存直接查数据库，这也是经常提的缓存命中率问题。</p>
<p>解决方案：</p>
<ul>
<li>采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被这个bitmap拦截掉，从而避免了对底层存储系统的查询压力。</li>
<li>如果一个查询返回的数据为空（不管是数据不存在，还是系统故障），我们仍然把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。通过这个直接设置的默认值存放到缓存，这样第二次到缓存中获取就有值了，而不会继续访问数据库，这种办法最简单粗暴！</li>
</ul>
<h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p>对于一些设置了过期时间的key，如果这些key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑一个问题：缓存被“击穿”的问题，这个和缓存雪崩的区别在于这里针对某一key缓存，前者则是很多key。</p>
<p>缓存在某个时间点过期的时候，恰好在这个时间点对这个Key有大量的并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。</p>
<p>解决方案：</p>
<ul>
<li>使用互斥锁(mutex key)</li>
<li>“设置永不过期”，<a href="https://blog.csdn.net/zeb_perfect/article/details/54135506">参考</a></li>
</ul>
<h2 id="缓存预热"><a href="#缓存预热" class="headerlink" title="缓存预热"></a>缓存预热</h2><p>缓存预热就是系统上线后，提前将相关的缓存数据直接加载到缓存系统。避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据！</p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis集群模式部署</title>
    <url>/redis-ji-qun-mo-shi-bu-shu/</url>
    <content><![CDATA[<h3 id="一些重要参数"><a href="#一些重要参数" class="headerlink" title="一些重要参数"></a>一些重要参数</h3><ul>
<li><code>--cluster-enabled</code>：是否启动集群，选值：yes 、no</li>
<li><code>--cluster-config-file</code> 配置文件.conf ：指定节点信息，自动生成</li>
<li><code>--cluster-node-timeout</code> 毫秒值： 配置节点连接超时时间</li>
<li><code>--appendonly</code>：是否开启持久化，选值：yes、no</li>
</ul>
<h3 id="最简单3主模式"><a href="#最简单3主模式" class="headerlink" title="最简单3主模式"></a>最简单3主模式</h3><p>方便测试，使用<code>host</code>网络模式启动docker,且并没有将持久化映射出来.</p>
<blockquote>
<p>持久化启动参数<code>-v /data/redis-data/node1:/data</code>.</p>
</blockquote>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 节点1</span>
docker run -d --name redis-node1 --net host redis:6.2.5 --cluster-enabled <span class="token function">yes</span> --cluster-config-file node-1.conf --port 6379
<span class="token comment" spellcheck="true"># 节点2</span>
docker run -d --name redis-node2 --net host redis:6.2.5 --cluster-enabled <span class="token function">yes</span> --cluster-config-file node-2.conf --port 6380
<span class="token comment" spellcheck="true"># 节点3</span>
docker run -d --name redis-node3 --net host redis:6.2.5 --cluster-enabled <span class="token function">yes</span> --cluster-config-file node-3.conf --port 6381

<span class="token comment" spellcheck="true"># 进入一个容器执行创建集群的命令</span>
docker <span class="token function">exec</span> -it redis-node1 /bin/bash
<span class="token comment" spellcheck="true"># 创建集群,只有三个节点,所有指定副本数为0</span>
redis-cli --cluster create 192.168.41.128:6379  192.168.41.128:6380  192.168.41.128:6381 --cluster-replicas 0
<span class="token operator">>></span><span class="token operator">></span> Performing <span class="token function">hash</span> slots allocation on 3 nodes<span class="token punctuation">..</span>.
Master<span class="token punctuation">[</span>0<span class="token punctuation">]</span> -<span class="token operator">></span> Slots 0 - 5460
Master<span class="token punctuation">[</span>1<span class="token punctuation">]</span> -<span class="token operator">></span> Slots 5461 - 10922
Master<span class="token punctuation">[</span>2<span class="token punctuation">]</span> -<span class="token operator">></span> Slots 10923 - 16383
M: 699e2ff7c0098cc1cee1ddae640b4bbb66747c72 192.168.41.128:6379
   slots:<span class="token punctuation">[</span>0-5460<span class="token punctuation">]</span> <span class="token punctuation">(</span>5461 slots<span class="token punctuation">)</span> master
M: ee2f07166809df6a56a57454470d65944ab8051f 192.168.41.128:6380
   slots:<span class="token punctuation">[</span>5461-10922<span class="token punctuation">]</span> <span class="token punctuation">(</span>5462 slots<span class="token punctuation">)</span> master
M: 043f76013aec2600396c4e92c50d0861f01a0dde 192.168.41.128:6381
   slots:<span class="token punctuation">[</span>10923-16383<span class="token punctuation">]</span> <span class="token punctuation">(</span>5461 slots<span class="token punctuation">)</span> master
Can I <span class="token keyword">set</span> the above configuration? <span class="token punctuation">(</span>type <span class="token string">'yes'</span> to accept<span class="token punctuation">)</span>: <span class="token function">yes</span>
<span class="token operator">>></span><span class="token operator">></span> Nodes configuration updated
<span class="token operator">>></span><span class="token operator">></span> Assign a different config epoch to each node
<span class="token operator">>></span><span class="token operator">></span> Sending CLUSTER MEET messages to <span class="token function">join</span> the cluster
Waiting <span class="token keyword">for</span> the cluster to <span class="token function">join</span>
<span class="token keyword">.</span>
<span class="token operator">>></span><span class="token operator">></span> Performing Cluster Check <span class="token punctuation">(</span>using node 192.168.41.128:6379<span class="token punctuation">)</span>
M: 699e2ff7c0098cc1cee1ddae640b4bbb66747c72 192.168.41.128:6379
   slots:<span class="token punctuation">[</span>0-5460<span class="token punctuation">]</span> <span class="token punctuation">(</span>5461 slots<span class="token punctuation">)</span> master
M: ee2f07166809df6a56a57454470d65944ab8051f 192.168.41.128:6380
   slots:<span class="token punctuation">[</span>5461-10922<span class="token punctuation">]</span> <span class="token punctuation">(</span>5462 slots<span class="token punctuation">)</span> master
M: 043f76013aec2600396c4e92c50d0861f01a0dde 192.168.41.128:6381
   slots:<span class="token punctuation">[</span>10923-16383<span class="token punctuation">]</span> <span class="token punctuation">(</span>5461 slots<span class="token punctuation">)</span> master
<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All nodes agree about slots configuration.
<span class="token operator">>></span><span class="token operator">></span> Check <span class="token keyword">for</span> <span class="token function">open</span> slots<span class="token punctuation">..</span>.
<span class="token operator">>></span><span class="token operator">></span> Check slots coverage<span class="token punctuation">..</span>.
<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All 16384 slots covered.

<span class="token comment" spellcheck="true"># 查看集群状态</span>
root@node1:/data<span class="token comment" spellcheck="true"># redis-cli </span>
127.0.0.1:6379<span class="token operator">></span> cluster nodes
ee2f07166809df6a56a57454470d65944ab8051f 192.168.41.128:6380@16380 master - 0 1629358092049 2 connected 5461-10922
043f76013aec2600396c4e92c50d0861f01a0dde 192.168.41.128:6381@16381 master - 0 1629358091025 3 connected 10923-16383
699e2ff7c0098cc1cee1ddae640b4bbb66747c72 192.168.41.128:6379@16379 myself,master - 0 1629358091000 1 connected 0-5460

<span class="token comment" spellcheck="true"># 测试,连接集群,set数据,别的节点可以get到数据</span>
root@node1:/data<span class="token comment" spellcheck="true"># redis-cli -c</span>
127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> hello world
OK
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="3主3从模式"><a href="#3主3从模式" class="headerlink" title="3主3从模式"></a>3主3从模式</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 主备6个redis节点</span>
docker run -d --name redis-node1 --net host redis:6.2.5 --cluster-enabled <span class="token function">yes</span> --cluster-config-file node-1.conf --port 6379
docker run -d --name redis-node2 --net host redis:6.2.5 --cluster-enabled <span class="token function">yes</span> --cluster-config-file node-2.conf --port 6380
docker run -d --name redis-node3 --net host redis:6.2.5 --cluster-enabled <span class="token function">yes</span> --cluster-config-file node-3.conf --port 6381
docker run -d --name redis-node4 --net host redis:6.2.5 --cluster-enabled <span class="token function">yes</span> --cluster-config-file node-4.conf --port 6382
docker run -d --name redis-node5 --net host redis:6.2.5 --cluster-enabled <span class="token function">yes</span> --cluster-config-file node-5.conf --port 6383
docker run -d --name redis-node6 --net host redis:6.2.5 --cluster-enabled <span class="token function">yes</span> --cluster-config-file node-6.conf --port 6384

<span class="token comment" spellcheck="true"># 进入任一节点</span>
docker <span class="token function">exec</span> -it redis-node1 /bin/bash

<span class="token comment" spellcheck="true"># 创建集群</span>
redis-cli --cluster create 192.168.41.128:6379 192.168.41.128:6380 192.168.41.128:6381 192.168.41.128:6382 192.168.41.128:6383 192.168.41.128:6384 --cluster-replicas 1

<span class="token comment" spellcheck="true"># 查看集群状态</span>
root@node1:/data<span class="token comment" spellcheck="true"># redis-cli </span>
127.0.0.1:6379<span class="token operator">></span> cluster nodes
95b197193ee57fb0f331ee03df671b0e50d293c2 192.168.41.128:6380@16380 master - 0 1629359633234 2 connected 5461-10922
10678b7ed61dbcd923472a272b6d365222fdad95 192.168.41.128:6384@16384 slave 345dd13e0bbf74a09ebe0011302f0ba8a011c726 0 1629359633000 3 connected
34e4d85bbdebc619ed4e9a183a0939db0ad82d9a 192.168.41.128:6382@16382 slave 75325c54ff09715263c514bde71d6582fde2b8a8 0 1629359632000 1 connected
345dd13e0bbf74a09ebe0011302f0ba8a011c726 192.168.41.128:6381@16381 master - 0 1629359635272 3 connected 10923-16383
75325c54ff09715263c514bde71d6582fde2b8a8 192.168.41.128:6379@16379 myself,master - 0 1629359634000 1 connected 0-5460
98b18508d3248973c3d28930b7a571d4564c8e2a 192.168.41.128:6383@16383 slave 95b197193ee57fb0f331ee03df671b0e50d293c2 0 1629359635000 2 connected
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>集群</tag>
      </tags>
  </entry>
  <entry>
    <title>rook-ceph安装使用</title>
    <url>/rook-ceph-an-zhuang-shi-yong/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li><a href="https://rook.github.io/docs/rook/master/ceph-quickstart.html">官网</a></li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 1. 检查磁盘是否满足条件</span>
lsblk -f

<span class="token comment" spellcheck="true"># 2. clone相关配置</span>
<span class="token function">git</span> clone --single-branch --branch master https://github.com/rook/rook.git

<span class="token comment" spellcheck="true"># 3. 进入rook ceph目录</span>
<span class="token function">cd</span> rook/cluster/examples/kubernetes/ceph

<span class="token comment" spellcheck="true"># 4. 安装crd,operator</span>
kubectl create -f crds.yaml -f common.yaml -f operator.yaml

<span class="token comment" spellcheck="true"># 5. 检查pod运行情况</span>
kubectl -n rook-ceph get pod

<span class="token comment" spellcheck="true"># 6. 安装ceph cluster</span>
kubectl create -f cluster.yaml

<span class="token comment" spellcheck="true"># 7. 检查pod运行情况</span>
kubectl -n rook-ceph get pod
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="安装ceph-tool"><a href="#安装ceph-tool" class="headerlink" title="安装ceph tool"></a>安装ceph tool</h3><p>保存<code>toolbox.yaml</code></p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> rook<span class="token punctuation">-</span>ceph<span class="token punctuation">-</span>tools
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> rook<span class="token punctuation">-</span>ceph
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">app</span><span class="token punctuation">:</span> rook<span class="token punctuation">-</span>ceph<span class="token punctuation">-</span>tools
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">selector</span><span class="token punctuation">:</span>
    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>
      <span class="token key atrule">app</span><span class="token punctuation">:</span> rook<span class="token punctuation">-</span>ceph<span class="token punctuation">-</span>tools
  <span class="token key atrule">template</span><span class="token punctuation">:</span>
    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>
      <span class="token key atrule">labels</span><span class="token punctuation">:</span>
        <span class="token key atrule">app</span><span class="token punctuation">:</span> rook<span class="token punctuation">-</span>ceph<span class="token punctuation">-</span>tools
    <span class="token key atrule">spec</span><span class="token punctuation">:</span>
      <span class="token key atrule">dnsPolicy</span><span class="token punctuation">:</span> ClusterFirstWithHostNet
      <span class="token key atrule">containers</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> rook<span class="token punctuation">-</span>ceph<span class="token punctuation">-</span>tools
        <span class="token key atrule">image</span><span class="token punctuation">:</span> rook/ceph<span class="token punctuation">:</span>master
        <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/tini"</span><span class="token punctuation">]</span>
        <span class="token key atrule">args</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"-g"</span><span class="token punctuation">,</span> <span class="token string">"--"</span><span class="token punctuation">,</span> <span class="token string">"/usr/local/bin/toolbox.sh"</span><span class="token punctuation">]</span>
        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent
        <span class="token key atrule">env</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ROOK_CEPH_USERNAME
            <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>
              <span class="token key atrule">secretKeyRef</span><span class="token punctuation">:</span>
                <span class="token key atrule">name</span><span class="token punctuation">:</span> rook<span class="token punctuation">-</span>ceph<span class="token punctuation">-</span>mon
                <span class="token key atrule">key</span><span class="token punctuation">:</span> ceph<span class="token punctuation">-</span>username
          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ROOK_CEPH_SECRET
            <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>
              <span class="token key atrule">secretKeyRef</span><span class="token punctuation">:</span>
                <span class="token key atrule">name</span><span class="token punctuation">:</span> rook<span class="token punctuation">-</span>ceph<span class="token punctuation">-</span>mon
                <span class="token key atrule">key</span><span class="token punctuation">:</span> ceph<span class="token punctuation">-</span>secret
        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /etc/ceph
            <span class="token key atrule">name</span><span class="token punctuation">:</span> ceph<span class="token punctuation">-</span>config
          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mon<span class="token punctuation">-</span>endpoint<span class="token punctuation">-</span>volume
            <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /etc/rook
      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mon<span class="token punctuation">-</span>endpoint<span class="token punctuation">-</span>volume
          <span class="token key atrule">configMap</span><span class="token punctuation">:</span>
            <span class="token key atrule">name</span><span class="token punctuation">:</span> rook<span class="token punctuation">-</span>ceph<span class="token punctuation">-</span>mon<span class="token punctuation">-</span>endpoints
            <span class="token key atrule">items</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> data
              <span class="token key atrule">path</span><span class="token punctuation">:</span> mon<span class="token punctuation">-</span>endpoints
        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ceph<span class="token punctuation">-</span>config
          <span class="token key atrule">emptyDir</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
      <span class="token key atrule">tolerations</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">"node.kubernetes.io/unreachable"</span>
          <span class="token key atrule">operator</span><span class="token punctuation">:</span> <span class="token string">"Exists"</span>
          <span class="token key atrule">effect</span><span class="token punctuation">:</span> <span class="token string">"NoExecute"</span>
          <span class="token key atrule">tolerationSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 1. 安装</span>
kubectl create -f toolbox.yaml

<span class="token comment" spellcheck="true"># 2. 进入容器</span>
kubectl -n rook-ceph <span class="token function">exec</span> -it deploy/rook-ceph-tools -- <span class="token function">bash</span>

<span class="token comment" spellcheck="true"># 3. 执行相关命令</span>
ceph status
ceph osd status
ceph <span class="token function">df</span>
rados <span class="token function">df</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="block存储-被单个pod使用"><a href="#block存储-被单个pod使用" class="headerlink" title="block存储(被单个pod使用)"></a>block存储(被单个pod使用)</h3><pre class="line-numbers language-bash"><code class="language-bash">kubectl create -f cluster/examples/kubernetes/ceph/csi/rbd/storageclass.yaml
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="Shared-Filesystem存储-被多个pod共享使用"><a href="#Shared-Filesystem存储-被多个pod共享使用" class="headerlink" title="Shared Filesystem存储(被多个pod共享使用)"></a>Shared Filesystem存储(被多个pod共享使用)</h3><ul>
<li><code>filesystem.yaml</code></li>
</ul>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> ceph.rook.io/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> CephFilesystem
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> myfs
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> rook<span class="token punctuation">-</span>ceph
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">metadataPool</span><span class="token punctuation">:</span>
    <span class="token key atrule">replicated</span><span class="token punctuation">:</span>
      <span class="token key atrule">size</span><span class="token punctuation">:</span> <span class="token number">3</span>
  <span class="token key atrule">dataPools</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">replicated</span><span class="token punctuation">:</span>
        <span class="token key atrule">size</span><span class="token punctuation">:</span> <span class="token number">3</span>
  <span class="token key atrule">preserveFilesystemOnDelete</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">metadataServer</span><span class="token punctuation">:</span>
    <span class="token key atrule">activeCount</span><span class="token punctuation">:</span> <span class="token number">1</span>
    <span class="token key atrule">activeStandby</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 1. </span>
kubectl create -f filesystem.yaml

<span class="token comment" spellcheck="true"># 2. </span>
kubectl create -f cluster/examples/kubernetes/ceph/csi/cephfs/storageclass.yaml
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="配置自动扩容"><a href="#配置自动扩容" class="headerlink" title="配置自动扩容"></a>配置自动扩容</h3><blockquote>
<p>新增一块设备后能被自动发现</p>
</blockquote>
<pre class="line-numbers language-yml"><code class="language-yml"># 开启自动发现磁盘
# vim operator.yaml
ROOK_ENABLE_DISCOVERY_DAEMON: "true"
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>rook</tag>
        <tag>ceph</tag>
      </tags>
  </entry>
  <entry>
    <title>route命令</title>
    <url>/route-ming-ling/</url>
    <content><![CDATA[<h3 id="route命令"><a href="#route命令" class="headerlink" title="route命令"></a>route命令</h3><p><code>route</code>命令用来显示并设置<code>Linux</code>内核中的<code>网络路由表</code>，<code>route</code>命令设置的路由主要是<code>静态路由</code>。要实现两个不同的子网之间的通信，需要一台连接两个网络的路由器，或者同时位于两个网络的网关来实现。</p>
<p>在Linux系统中设置路由通常是为了解决以下问题：</p>
<ul>
<li>该Linux系统在一个局域网中，局域网中有一个网关，能够让机器访问Internet，那么就需要将这台机器的ip地址设置为Linux机器的默认路由。</li>
<li>直接在命令行下执行route命令来添加路由，不会永久保存，当网卡重启或者机器重启之后，该路由就失效了</li>
<li>可以在<code>/etc/rc.local</code>中添加<code>route</code>命令来保证该路由设置永久有效，这个方法只能在重启电脑的时候生效，重启网络不生效；</li>
<li>推荐在<code>/etc/sysconfig/static-routes</code>编写路由，重启网络或服务器都能生效；</li>
</ul>
<pre class="line-numbers language-sh"><code class="language-sh"># vim /etc/sysconfig/static-routes
# 这个文件默认不存在
any net 192.168.11.0 gw 192.168.21.1 netmask 255.255.255.0 metric 1 dev eth0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>注意，如果本机安装了docker,添加路由后重启网络，会导致docker服务启动添加的路由失效，导致docker服务调用失败，创建新的docker服务会报以下错误,重启docker服务可以解决。<code>systemctl restart docker</code></p>
</blockquote>
<pre><code>[root@localhost ~]# docker run -d -p 9000:80 centos:httpd /bin/sh -c /usr/local/bin/start.sh
d5b2bd5a7bc4895a973fe61efd051847047d26385f65c278aaa09e4fa31c4d76
docker: Error response from daemon: driver failed programming external connectivity on endpoint quirky_allen (6bda693d1143657e46bee0300276aa05820da2b21a3d89441e820d1a274c48b6): (iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d 0/0 --dport 9000 -j DNAT --to-destination 172.17.0.2:80 ! -i docker0: iptables: No chain/target/match by that name.
(exit status 1)).
</code></pre>
<h3 id="route语法"><a href="#route语法" class="headerlink" title="route语法"></a>route语法</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 设置和查看路由表都可以用 route 命令，设置内核路由表的命令格式是：</span>
route  <span class="token punctuation">[</span>add<span class="token operator">|</span>del<span class="token punctuation">]</span> <span class="token punctuation">[</span>-net<span class="token operator">|</span>-host<span class="token punctuation">]</span> target <span class="token punctuation">[</span>netmask Nm<span class="token punctuation">]</span> <span class="token punctuation">[</span>gw Gw<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>dev<span class="token punctuation">]</span> If<span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ol>
<li>方法</li>
</ol>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>add</td>
<td>增加指定的路由记录；</td>
</tr>
<tr>
<td>del</td>
<td>删除指定的路由记录；</td>
</tr>
<tr>
<td>target</td>
<td>目的网络或目的主机；</td>
</tr>
<tr>
<td>gw</td>
<td>设置默认网关；</td>
</tr>
<tr>
<td>mss</td>
<td>设置TCP的最大区块长度（MSS），单位MB；</td>
</tr>
<tr>
<td>netmask</td>
<td>目的地址的网络掩码</td>
</tr>
<tr>
<td>window</td>
<td>指定通过路由表的TCP连接的TCP窗口大小；</td>
</tr>
<tr>
<td>dev</td>
<td>路由记录所表示的网络接口。</td>
</tr>
</tbody></table>
<ol start="2">
<li>选项</li>
</ol>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-A</td>
<td>设置地址类型；</td>
</tr>
<tr>
<td>-C</td>
<td>打印将Linux核心的路由缓存；</td>
</tr>
<tr>
<td>-v</td>
<td>详细信息模式；</td>
</tr>
<tr>
<td>-n</td>
<td>不执行DNS反向查找，直接显示数字形式的IP地址；</td>
</tr>
<tr>
<td>-e</td>
<td>netstat格式显示路由表；</td>
</tr>
<tr>
<td>-net</td>
<td>到一个网络的路由表；</td>
</tr>
<tr>
<td>-host</td>
<td>到一个主机的路由表。</td>
</tr>
</tbody></table>
<ol start="3">
<li>Flags标志说明</li>
</ol>
<table>
<thead>
<tr>
<th>flag</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>U</td>
<td>Up表示此路由当前为启动状态。</td>
</tr>
<tr>
<td>H</td>
<td>Host，表示此网关为一主机。</td>
</tr>
<tr>
<td>G</td>
<td>Gateway，表示此网关为一路由器。</td>
</tr>
<tr>
<td>R</td>
<td>Reinstate Route，使用动态路由重新初始化的路由。</td>
</tr>
<tr>
<td>D</td>
<td>Dynamically,此路由是动态性地写入。</td>
</tr>
<tr>
<td>M</td>
<td>Modified，此路由是由路由守护程序或导向器动态修改。</td>
</tr>
<tr>
<td>!</td>
<td>表示此路由当前为关闭状态。</td>
</tr>
</tbody></table>
<ol start="4">
<li>route命令输出说明</li>
</ol>
<table>
<thead>
<tr>
<th>输出列</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Destination</td>
<td>目标网段或者主机</td>
</tr>
<tr>
<td>Gateway</td>
<td>网关地址，<code>*</code>表示目标是本主机所属的网络，不需要路由</td>
</tr>
<tr>
<td>Genmask</td>
<td>网络掩码</td>
</tr>
<tr>
<td>Flags</td>
<td>标记。</td>
</tr>
<tr>
<td>Metric</td>
<td>路由距离，到达指定网络所需的中转数</td>
</tr>
<tr>
<td>Ref</td>
<td>路由项引用次数</td>
</tr>
<tr>
<td>Use</td>
<td>此路由项被路由软件查找的次数</td>
</tr>
<tr>
<td>Iface</td>
<td>该路由表项对应的输出接口</td>
</tr>
</tbody></table>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 显示当前路由</span>
<span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># route </span>
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
default         gateway         0.0.0.0         UG    0      0        0 ens33
link-local      0.0.0.0         255.255.0.0     U     1002   0        0 ens33
172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0
172.18.0.0      0.0.0.0         255.255.0.0     U     0      0        0 br-caa257c6f76d
192.168.41.0    0.0.0.0         255.255.255.0   U     0      0        0 ens33
192.168.122.0   0.0.0.0         255.255.255.0   U     0      0        0 virbr0
<span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># route -n</span>
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.41.2    0.0.0.0         UG    0      0        0 ens33
169.254.0.0     0.0.0.0         255.255.0.0     U     1002   0        0 ens33
172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0
172.18.0.0      0.0.0.0         255.255.0.0     U     0      0        0 br-caa257c6f76d
192.168.41.0    0.0.0.0         255.255.255.0   U     0      0        0 ens33
192.168.122.0   0.0.0.0         255.255.255.0   U     0      0        0 virbr0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 增加一条到达244.0.0.0的路由。</span>
route add -net 224.0.0.0 netmask 240.0.0.0 dev eth0

<span class="token comment" spellcheck="true"># 添加到主机的路由</span>
route add -host 192.168.1.2 dev eth0
<span class="token comment" spellcheck="true"># 添加到10.20.30.148的网关</span>
route add -host 10.20.30.148 gw 10.20.30.40
<span class="token comment" spellcheck="true"># 添加10.20.30.40的网络</span>
route add -net 10.20.30.40 netmask 255.255.255.248 eth0
<span class="token comment" spellcheck="true"># 网络掩码 255.255.255.0简写</span>
route add -net 192.168.1.0/24 eth1
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 增加一条屏蔽的路由，目的地址为224.x.x.x将被拒绝。</span>
route add -net 224.0.0.0 netmask 240.0.0.0 reject
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 删除路由记录</span>
route del -net 224.0.0.0 netmask 240.0.0.0
route del -net 224.0.0.0 netmask 240.0.0.0 reject
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 删除和添加设置默认网关</span>
route del default gw 192.168.120.240
route add default gw 192.168.120.240
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="设置包转发"><a href="#设置包转发" class="headerlink" title="设置包转发"></a>设置包转发</h3><p>在 <code>CentOS</code> 中默认的内核配置已经包含了路由功能，但默认并没有在系统启动时启用此功能。开启 <code>Linux</code> 的路由功能可以通过调整内核的网络参数来实现。要配置和调整内核参数可以使用 <code>sysctl</code> 命令。例如：要开启 <code>Linux</code> 内核的数据包转发功能可以使用如下的命令。</p>
<pre class="line-numbers language-bash"><code class="language-bash">sysctl -w net.ipv4.ip_forward<span class="token operator">=</span>1
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这样设置之后，当前系统就能实现包转发，但下次启动计算机时将失效。为了使在下次启动计算机时仍然有效，需要将下面的行写入配置文件<code>/etc/sysctl.conf</code>。</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># vi /etc/sysctl.conf</span>
net.ipv4.ip_forward <span class="token operator">=</span> 1
<span class="token comment" spellcheck="true"># 或者 使用下面的命令</span>
<span class="token keyword">echo</span> net.ipv4.ip_forward<span class="token operator">=</span>1 <span class="token operator">>></span> /etc/sysctl.conf
<span class="token comment" spellcheck="true"># 使上面配置生效</span>
sysctl -p 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>用户还可以使用如下的命令查看当前系统是否支持包转发。</p>
<pre class="line-numbers language-bash"><code class="language-bash">sysctl net.ipv4.ip_forward

<span class="token comment" spellcheck="true"># 或者下面命令 输出1 证明已生效</span>
<span class="token function">cat</span> /proc/sys/net/ipv4/ip_forward
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="iptables-SNAT-x2F-DNAT服务"><a href="#iptables-SNAT-x2F-DNAT服务" class="headerlink" title="iptables SNAT/DNAT服务"></a>iptables SNAT/DNAT服务</h3><ul>
<li><code>SNAT</code> : <code>source network address translation</code>, 修改网络包源IP</li>
<li><code>DNAT</code> : <code>destination network address translation</code>, 修改网络包目的IP</li>
<li>修改源IP目的是这个包还能返回到自己这里，在<code>iptables</code>中，SNAT是在出口<code>POSTROUTING</code>链中发挥作用</li>
<li>修改目的IP目的是这个包能够发送出去，让包传递下去，在<code>iptables</code>中，DNAT是在入口<code>PREROUTING</code>链中发挥作用,以便让包进入<code>FORWARD</code>表.</li>
</ul>
<h3 id="iptables-SNAT-x2F-DNAT服务使用场景"><a href="#iptables-SNAT-x2F-DNAT服务使用场景" class="headerlink" title="iptables SNAT/DNAT服务使用场景"></a>iptables SNAT/DNAT服务使用场景</h3><ul>
<li>云上虚拟机作为客户端访问外网服务器, <code>SNAT</code>类似于代理的作用, 客户端通过<code>SNAT</code>服务可以访问外网.</li>
<li>云上虚拟机作为服务端为外网提供服务, <code>DNAT</code>类似于反向代理, 外网请求通过<code>DNAT</code>服务可以将包传到内网服务端.</li>
</ul>
<p><img data-src="/images/nat.png" alt="SNAT/DNAT"></p>
<pre class="line-numbers language-bash"><code class="language-bash">lsmod<span class="token operator">|</span><span class="token function">grep</span> ^ip <span class="token comment" spellcheck="true">#查看nat模块</span>
<span class="token comment" spellcheck="true"># 载入：modprobe iptable-nat</span>
<span class="token comment" spellcheck="true"># 开启上网命令</span>
iptables -t nat -A POSTROUTING -s 192.168.1.0/24 -o eth0 -j SNAT --to-source 192.168.1.202
iptables -t nat -A POSTROUTING -s 192.168.1.0/24 -o eth0 -j SNAT --to 192.168.1.202

<span class="token comment" spellcheck="true"># 确认查看</span>
iptables -t nat -nL
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>rowkey字典排序</title>
    <url>/rowkey-zi-dian-pai-xu/</url>
    <content><![CDATA[<h3 id="排序规则"><a href="#排序规则" class="headerlink" title="排序规则"></a>排序规则</h3><ul>
<li><code>rowkey</code>从高位到低位依照<code>ASCII</code>码表排序;如<code>A</code>排在<code>a</code>前面,<code>a</code>排在<code>aa</code> <code>ab</code>前面;</li>
<li>如果<code>rowkey</code>一样,按照<code>column family:qualifier</code>排序;</li>
<li>如果<code>column family:qualifier</code>一样,按照<code>时间戳</code>排序;</li>
</ul>
<h3 id="充分利用rowkey会排序特性"><a href="#充分利用rowkey会排序特性" class="headerlink" title="充分利用rowkey会排序特性"></a>充分利用<code>rowkey</code>会排序特性</h3><ol>
<li>如果热点数据的<code>rowkey</code>前缀一样，则很容易被存储在同一<code>RegionServer</code>上，这样就会造成访问的性能瓶颈;</li>
<li><code>rowkey</code>前缀提供一个随机字符串,可以更好的分布在集群中，但是失去了排序特性;</li>
<li><code>rowkey</code>应该设计的精简，过长会加长硬盘和网络IO的开销.</li>
</ol>
<h3 id="rowkey排序"><a href="#rowkey排序" class="headerlink" title="rowkey排序"></a><code>rowkey</code>排序</h3><ol>
<li><code>scan</code>返回的数据是按照<code>rowkey</code>排序;</li>
<li><code>API</code>可以设置<code>StartRow</code>、<code>StopRow</code>查询范围内数据;</li>
</ol>
<p>如<code>rowkey</code>是时间日期格式,以下可以查询<code>2020</code>年的数据:</p>
<pre class="line-numbers language-java"><code class="language-java">Scan scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
scan<span class="token punctuation">.</span><span class="token function">setStartRow</span><span class="token punctuation">(</span>Bytes<span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"20200101"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
scan<span class="token punctuation">.</span><span class="token function">setStopRow</span><span class="token punctuation">(</span>Bytes<span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"20210101"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>注意[<code>StartRow</code>,<code>StopRow</code>)左闭右开.</p>
</blockquote>
<h3 id="ASCII编码"><a href="#ASCII编码" class="headerlink" title="ASCII编码"></a><code>ASCII</code>编码</h3><p><img data-src="/images/asc.png" alt="ASCII"></p>
]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
      <tags>
        <tag>hbase</tag>
        <tag>rowkey</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot利用系统变量和配置文件实现灵活配置</title>
    <url>/spring-boot-li-yong-xi-tong-bian-liang-he-pei-zhi-wen-jian-shi-xian-ling-huo-pei-zhi/</url>
    <content><![CDATA[<h3 id="静态方式"><a href="#静态方式" class="headerlink" title="静态方式"></a>静态方式</h3><p>直接在<code>bootstrap.yml</code>或者<code>application.yml</code>中写死；</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token comment" spellcheck="true">#mysql数据配置</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.41.128<span class="token punctuation">:</span>3306/gw<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=utf8<span class="token important">&amp;useSSL</span>=false
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>缺点是参数需要改变时，需要重新改写配置，再打包。特别docker部署时，环境变化了，配置改动麻烦。</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>在<code>yml</code>文件中，通过<code>${Envirment_variable}</code>的方式可以获取系统环境变量中的值；如上面的配置改写成：</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token comment" spellcheck="true">#mysql数据配置</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver
    <span class="token key atrule">username</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>USER_NAME<span class="token punctuation">:</span>root<span class="token punctuation">}</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>PASSWORD<span class="token punctuation">:</span><span class="token number">123456</span><span class="token punctuation">}</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//$<span class="token punctuation">{</span>IP<span class="token punctuation">:</span>192.168.41.128<span class="token punctuation">:</span><span class="token number">3306</span><span class="token punctuation">}</span>/gw<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=utf8<span class="token important">&amp;useSSL</span>=false
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以上配置，优先设置系统环境变量（USER_NAME、PASSWORD、IP）的值，如果没有，才会使用默认值。</p>
<h3 id="docker部署传入环境变量"><a href="#docker部署传入环境变量" class="headerlink" title="docker部署传入环境变量"></a>docker部署传入环境变量</h3><ul>
<li>通过<code>-e</code>可以传入环境变量;</li>
<li><code>docker-compose</code>可以通过<code>environment</code>传入系统环境变量;</li>
</ul>
]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>semaphore信号量使用</title>
    <url>/semaphore-xin-hao-liang-shi-yong/</url>
    <content><![CDATA[<h3 id="锁的说明"><a href="#锁的说明" class="headerlink" title="锁的说明"></a>锁的说明</h3><p><code>java</code>中锁有<code>Synchronized</code>、<code>ReentrantLock</code>,但是这两种锁一次只能允许一个线程访问资源,而信号量<code>semaphore</code>可以控制多个线程同时获取资源，实现更高级别的<code>限流</code>.</p>
<h3 id="semaphore使用"><a href="#semaphore使用" class="headerlink" title="semaphore使用"></a>semaphore使用</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建信号量,permits表示许可证数量</span>
Semaphore semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span>permits<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 获取一个许可证</span>
semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 获取多个许可证</span>
semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 归还一个许可证</span>
semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 归还多个许可证</span>
semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>如一个停车场有10个停车位,小型车辆进入需要获取一个许可证,大型车辆进入需要获取多个许可证,车辆驶出时归还许可证.</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>semaphore</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot定时任务从配置文件中获取cron表达式</title>
    <url>/spring-boot-ding-shi-ren-wu-cong-pei-zhi-wen-jian-zhong-huo-qu-cron-biao-da-shi/</url>
    <content><![CDATA[<h3 id="Scheduled"><a href="#Scheduled" class="headerlink" title="@Scheduled"></a>@Scheduled</h3><p>实现cron表达式从application.yml文件中获取</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">dbc</span><span class="token punctuation">:</span>
  <span class="token key atrule">cron</span><span class="token punctuation">:</span> 0/5 * * * * <span class="token punctuation">?</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@EnableScheduling</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompareSchedule</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"${dbc.cron}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="cron表达式含义"><a href="#cron表达式含义" class="headerlink" title="cron表达式含义"></a>cron表达式含义</h3><p>cron一共有7位，但是最后一位是年，可以留空，所以我们可以写6位：</p>
<ul>
<li>第一位，表示秒，取值0-59</li>
<li>第二位，表示分，取值0-59&nbsp;</li>
<li>第三位，表示小时，取值0-23&nbsp;</li>
<li>第四位，日期天/日，取值1-31</li>
<li>第五位，日期月份，取值1-12&nbsp;</li>
<li>第六位，星期，取值1-7，星期一，星期二…，注：不是第1周，第二周的意思 另外：1表示星期天，2表示星期一。</li>
<li>第七位，年份，可以留空，取值1970-2099</li>
</ul>
<p>&nbsp;</p>
<p>cron中，还有一些特殊的符号，含义如下：</p>
<ul>
<li>(*)星号：可以理解为每的意思，每秒，每分，每天，每月，每年…&nbsp;</li>
<li>(?)问号：问号只能出现在日期和星期这两个位置，表示这个位置的值不确定，每天3点执行，所以第六位星期的位置，我们是不需要关注的，就是不确定的值。同时：日期和星期是两个相互排斥的元素，通过问号来表明不指定值。比如，1月10日，比如是星期1，如果在星期的位置是另指定星期二，就前后冲突矛盾了。</li>
<li>(-)减号：表达一个范围，如在小时字段中使用“10-12”，则表示从10到12点，即10,11,12&nbsp;</li>
<li>(,)逗号：表达一个列表值，如在星期字段中使用“1,2,4”，则表示星期一，星期二，星期四&nbsp;</li>
<li>(/)斜杠：如：x/y，x是开始值，y是步长，比如在第一位（秒） 0/15就是，从0秒开始，每15秒，最后就是0，15，30，45，60 另：*/y，等同于0/y</li>
</ul>
<p>&nbsp;</p>
<p>下面列举几个例子供大家来验证：</p>
<ul>
<li>0 0 3 * * ? 每天3点执行&nbsp;</li>
<li>0 5 3 * * ? 每天3点5分执行&nbsp;</li>
<li>0 5 3 ? * * 每天3点5分执行，与上面作用相同</li>
<li>0 5/10 3 * * ? 每天3点的 5分，15分，25分，35分，45分，55分这几个时间点执行&nbsp;</li>
<li>0 10 3 ? * 1 每周星期天，3点10分 执行，注：1表示星期天&nbsp;</li>
<li>0 10 3 ? * 1&nbsp;#3 每个月的第三个星期，星期天 执行，#号只能出现在星期的位置</li>
</ul>
<p>&nbsp;</p>
]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
        <tag>schedule</tag>
        <tag>cron</tag>
      </tags>
  </entry>
  <entry>
    <title>spring boot自定义配置Boolean属性不能生效问题</title>
    <url>/spring-boot-zi-ding-yi-pei-zhi-boolean-shu-xing-bu-neng-sheng-xiao-wen-ti/</url>
    <content><![CDATA[<p>有时候我们需要在 <code>application.yaml</code>文件中自定义配置，在程序中通过属性名映射过去，但是有时候定义错误的属性名会导致配置不生效。<br>属性名<font color="red"><strong>不能</strong>是<code>is</code>开头</font>，例如属性名为<code>isLog</code>，你在配置文件中不管怎么给这个属性设值都不会生效，需要改成log即可。</p>
<p>我使用<code>spring boot</code>版本：</p>
<pre><code>&lt;parent&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
    &lt;version&gt;2.0.6.RELEASE&lt;/version&gt;
    &lt;relativePath/&gt;
&lt;/parent&gt;
</code></pre>
]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>spring cloud gateway中redis一直打印重连日志问题</title>
    <url>/spring-cloud-gateway-zhong-redis-yi-zhi-da-yin-chong-lian-ri-zhi-wen-ti/</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p><code>spring cloud gateway</code>集成了<code>redis</code>后，一直出现重连的日志，如下：</p>
<pre class="line-numbers language-log"><code class="language-log">gateway        | 2020-06-28 10:56:11.133  INFO 1 --- [xecutorLoop-2-2] i.l.core.protocol.ConnectionWatchdog     : Reconnecting, last destination was 192.171.0.9/192.171.0.9:6379
gateway        | 2020-06-28 10:56:11.148  INFO 1 --- [llEventLoop-4-6] i.l.core.protocol.ReconnectionHandler    : Reconnected to 192.171.0.9:6379
gateway        | 2020-06-28 11:01:12.431  INFO 1 --- [xecutorLoop-2-3] i.l.core.protocol.ConnectionWatchdog     : Reconnecting, last destination was 192.171.0.9/192.171.0.9:6379
gateway        | 2020-06-28 11:01:12.441  INFO 1 --- [llEventLoop-4-8] i.l.core.protocol.ReconnectionHandler    : Reconnected to 192.171.0.9:6379
gateway        | 2020-06-28 11:06:13.231  INFO 1 --- [xecutorLoop-2-4] i.l.core.protocol.ConnectionWatchdog     : Reconnecting, last destination was 192.171.0.9/192.171.0.9:6379
gateway        | 2020-06-28 11:06:13.237  INFO 1 --- [llEventLoop-4-2] i.l.core.protocol.ReconnectionHandler    : Reconnected to 192.171.0.9:6379
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><code>spring boot 2.0</code>之后<code>spring-boot-starter-data-redis</code>默认不再使用<code>jedis</code>连接<code>redis</code>，而是<code>lettuce</code>.</p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 排除lettuce包，使用jedis代替--></span>
    <span class="token comment" spellcheck="true">&lt;!--&lt;exclusions>--></span>
        <span class="token comment" spellcheck="true">&lt;!--&lt;exclusion>--></span>
            <span class="token comment" spellcheck="true">&lt;!--&lt;groupId>io.lettuce&lt;/groupId>--></span>
            <span class="token comment" spellcheck="true">&lt;!--&lt;artifactId>lettuce-core&lt;/artifactId>--></span>
        <span class="token comment" spellcheck="true">&lt;!--&lt;/exclusion>--></span>
    <span class="token comment" spellcheck="true">&lt;!--&lt;/exclusions>--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- jedis --></span>
<span class="token comment" spellcheck="true">&lt;!--&lt;dependency>--></span>
    <span class="token comment" spellcheck="true">&lt;!--&lt;groupId>redis.clients&lt;/groupId>--></span>
    <span class="token comment" spellcheck="true">&lt;!--&lt;artifactId>jedis&lt;/artifactId>--></span>
    <span class="token comment" spellcheck="true">&lt;!--&lt;version>2.9.0&lt;/version>--></span>
<span class="token comment" spellcheck="true">&lt;!--&lt;/dependency>--></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>考虑是不是程序长时间没有使用<code>redis</code>,而导致连接断开.修改连接池最小空闲连接数:</p>
<pre class="line-numbers language-yml"><code class="language-yml">spring.redis.host=localhost
spring.redis.password=
# 连接超时时间（毫秒）
spring.redis.timeout=10000
# Redis默认情况下有16个分片，这里配置具体使用的分片，默认是0
spring.redis.database=0
# 连接池最大连接数（使用负值表示没有限制） 默认 8
spring.redis.lettuce.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1
spring.redis.lettuce.pool.max-wait=-1
# 连接池中的最大空闲连接 默认 8
spring.redis.lettuce.pool.max-idle=8
# 连接池中的最小空闲连接 默认 0, 修改为1
spring.redis.lettuce.pool.min-idle=1
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>注意修改完之后需要增加新的依赖包,不然会报错</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--配置lettuce.pool.min-idle需要增加的依赖--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>重启完程序之后，发现每5分钟打印重连日志依然存在.</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ul>
<li>这个不是错误，只是一个<code>INFO</code>级别的日志,可以日志级别调高，例如：</li>
</ul>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>io.lettuce.core.protocol<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ERROR<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ERROR_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>原因：这是<code>lettuce-core</code>的实现里，有类似心跳机制的保持长连接方式，不过心跳机制是不停的来回发心跳包直到连接不可用再去被动重新连接，而<code>lettuce</code>的方案是将连接池里处于空闲（<code>idle</code>）状态的<code>client</code>每隔一段时间就主动断开，然后再重新连接。</li>
</ul>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://github.com/lettuce-io/lettuce-core/issues/861">why lettuce client keep reconnecting</a></li>
<li><a href="https://www.cnblogs.com/diffx/p/11000101.html">io.lettuce.core.protocol.ConnectionWatchdog - Reconnecting, last destination was ***</a></li>
</ul>
]]></content>
      <categories>
        <category>spring cloud</category>
      </categories>
      <tags>
        <tag>spring cloud gateway</tag>
        <tag>redis</tag>
        <tag>lettuce</tag>
      </tags>
  </entry>
  <entry>
    <title>spring cloud gateway部署到k8s上UrlEncode问题</title>
    <url>/spring-cloud-gateway-bu-shu-dao-k8s-shang-urlencode-wen-ti/</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><blockquote>
<p><code>k8s</code>中<code>ingress</code>使用的是<code>ingress-nginx</code>.</p>
</blockquote>
<p>项目中用到了<code>spring cloud gateway</code>做<code>API</code>网关，部署环境有<code>docker</code>、<code>k8s</code>等. 测试出现一个问题：<br>请求的<code>URL</code>路径中如果出现了<code>中文</code>参数,如<code>http://localhost:8080/test?param=你好</code>,如果部署在<code>docker</code>或者<code>裸机</code>上，<code>后台</code>服务接收到的参数<code>param</code>是<code>你好</code>，但是如果部署在<code>k8s</code>上，后台接收到的参数可能是<code>UrlEncode</code>之后的<code>%E4%BD%A0%E5%A5%BD</code>,这不是后台需要的. 虽然可以在后台通过<code>URLDecoder.decode(name, "UTF-8")</code>强制解码，不过比较麻烦.</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>测试中发现，</p>
<ul>
<li>如果直接将<code>后台</code>服务部署到<code>k8s</code>上，通过<code>service -&gt; ingress</code>暴露出来，不管是通过<code>k8s</code>中<code>ClusterIP</code>，如<code>http://10.96.240.18:8080/test?param=你好</code>, 还是通过<code>ingress</code>域名<code>http://local.com/test?param=你好</code>请求后台服务，后台能够正确接收到参数为<code>你好</code>,证明问题可能不是因为部署在<code>k8s</code>上造成的,只可能是<code>spring cloud gateway</code>做<code>API</code>网关原因;</li>
<li>但是部署在<code>docker</code>或者<code>裸机</code>上,通过<code>spring cloud gateway</code>网关请求<code>后台</code>服务，后台能够正确接收到参数为<code>你好</code>,证明网关也是没有问题的，问题只可能是部署环境<code>k8s</code>的原因;</li>
<li>如果将网关服务部署到<code>k8s</code>上，又有两种情况：<ul>
<li>通过<code>ingress</code>域名请求<code>网关 -&gt; 后台</code>，后台接收到的参数是<code>%E4%BD%A0%E5%A5%BD</code>，看似是网关的问题;</li>
<li>通过<code>ClusterIP</code>请求<code>网关 -&gt; 后台</code>，后台接收到的参数是<code>你好</code>,这又证明网关没问题，看似是<code>ingress</code>的问题,但前面也证明了<code>ingress</code>可以正确传递<code>中文</code>字符，非常的奇怪!</li>
</ul>
</li>
<li>将<code>spring cloud gateway</code>中所有的<code>Filter</code>全部注释掉,发现通过<code>ingress</code>域名请求<code>网关 -&gt; 后台</code>,后台也能正确的接收到<code>中文</code>参数,证明还是<code>网关</code>的问题，而且这个问题只有部署在<code>k8s</code>中搭配<code>ingress-nginx</code>使用时才会暴露.</li>
</ul>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>依次将注释掉的<code>Filter</code>加回去，证明问题出现在<code>class XXXX extends ForwardedHeaderFilter</code>这个类上.这个类用于设置网关<code>跨域访问</code>和网关本身<code>接口权限验证</code>.</p>
<p>测试发现，即使只注释成下面这样，还是会有问题，但是注释掉<code>@Component</code>,就没有问题.应该是<code>super.filter(exchange, chain)</code>父类这个方法有问题.</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthTokenFilter</span> <span class="token keyword">extends</span> <span class="token class-name">ForwardedHeaderFilter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">filter</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">,</span> WebFilterChain chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//跨域问题 接口权限验证 TODO</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>改成下面这样测试可以解决问题.</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthTokenFilter</span> <span class="token keyword">extends</span> <span class="token class-name">ForwardedHeaderFilter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">filter</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">,</span> WebFilterChain chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//跨域问题 接口权限验证 TODO</span>
        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>spring cloud</tag>
        <tag>ingress-nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot中conditional的使用</title>
    <url>/springboot-zhong-conditional-de-shi-yong/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>在 springboot 中一个接口有多个实现，我们希望通过配置来控制<code>运行时</code>实例化哪个对象，springboot 中 @Conditional 注解可以帮助我们细粒度控制 bean 的实例化。</p>
<p><code>Spring Boot</code> 在 <code>org.springframework.boot.autoconfigure.condition</code> 包下定义了以下注解:</p>
<table>
<thead>
<tr>
<th>注解名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>@ConditionalOnJava</code></td>
<td>基于JVM版本作为判断条件.</td>
</tr>
<tr>
<td><code>@ConditionalOnBean</code></td>
<td>当容器中有指定的Bean的条件下.</td>
</tr>
<tr>
<td><code>@ConditionalOnClass</code></td>
<td>当类路径下游指定的类的条件下.</td>
</tr>
<tr>
<td><code>@ConditionalOnExpression</code></td>
<td>基于SpEL表达式作为判断条件.</td>
</tr>
<tr>
<td><code>@ConditionalOnJndi</code></td>
<td>在JNDI存在的条件下查找指定的位置.</td>
</tr>
<tr>
<td><code>@ConditionalOnMissingBean</code></td>
<td>当容器中没有指定Bean的情况下.</td>
</tr>
<tr>
<td><code>@ConditionalOnMissingClass</code></td>
<td>当类路径下没有指定的类的情况下.</td>
</tr>
<tr>
<td><code>@ConditionalOnNotWebApplication</code></td>
<td>当前项目不是web项目的条件下.</td>
</tr>
<tr>
<td><code>@ConditionalOnProperty</code></td>
<td>指定的属性是否有指定的值.</td>
</tr>
<tr>
<td><code>@ConditionalOnResource</code></td>
<td>类路径是否有指定的值.</td>
</tr>
<tr>
<td><code>@ConditionalOnSingleCandidate</code></td>
<td>当指定Bean在容器中只有一个,或者虽然有多个但是指定首选的Bean.</td>
</tr>
<tr>
<td><code>@ConditionalOnWebApplication</code></td>
<td>当前项目是web项目的条件下.</td>
</tr>
</tbody></table>
<h3 id="ConditionalOnExpression"><a href="#ConditionalOnExpression" class="headerlink" title="@ConditionalOnExpression"></a>@ConditionalOnExpression</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token comment" spellcheck="true">// user.label 属性等于 user2 创建TestBean</span>
<span class="token comment" spellcheck="true">// @ConditionalOnExpression("'${user.label}'.equals('user2')")</span>

<span class="token comment" spellcheck="true">// 可以使用 &amp;&amp; || 等运算符</span>
<span class="token comment" spellcheck="true">// @ConditionalOnExpression("'${user.label}'.equals('user3') &amp;&amp; '${xxx}'.equals('xx')")</span>
<span class="token comment" spellcheck="true">// @ConditionalOnExpression("'${user.label}'.equals('${xxx}')")</span>

<span class="token comment" spellcheck="true">// 当环境变量 user.label=user2 创建TestBean, 注意: 这个环境变量可以通过 application.yml 传入</span>
<span class="token annotation punctuation">@ConditionalOnExpression</span><span class="token punctuation">(</span><span class="token string">"#{'user2'.equals(environment['user.label'])}"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestBean</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="ConditionalOnProperty"><a href="#ConditionalOnProperty" class="headerlink" title="@ConditionalOnProperty"></a>@ConditionalOnProperty</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token comment" spellcheck="true">// 当有 user.label 这个属性时创建 TestBean</span>
<span class="token comment" spellcheck="true">// @ConditionalOnProperty(name = "user.label")</span>
<span class="token comment" spellcheck="true">// 当有 user.label 和 xxx 两个属性时创建 TestBean</span>
<span class="token comment" spellcheck="true">// @ConditionalOnProperty(name = {"user.label", "xxx"})</span>
<span class="token comment" spellcheck="true">// 当有 user.label 这个属性且值为 user2 时创建 TestBean</span>
<span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"user.label"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"user2"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestBean</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="自定义-Conditional"><a href="#自定义-Conditional" class="headerlink" title="自定义 Conditional"></a>自定义 Conditional</h3><h4 id="Bean对象"><a href="#Bean对象" class="headerlink" title="Bean对象"></a>Bean对象</h4><ul>
<li>两个 User Bean</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User1</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User2</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><ul>
<li>为每类对象创建一个 Conditional，如下为 User1和User2分别创建一个</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConditional1</span> <span class="token keyword">implements</span> <span class="token class-name">Condition</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span>ConditionContext context<span class="token punctuation">,</span> AnnotatedTypeMetadata metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String v <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.label"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConditional2</span> <span class="token keyword">implements</span> <span class="token class-name">Condition</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span>ConditionContext context<span class="token punctuation">,</span> AnnotatedTypeMetadata metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String v <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.label"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>springboot 实例化 bean</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span>MyConditional1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> User <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span>MyConditional2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> User2 <span class="token function">init2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>application.propeties</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 如果 label 匹配 bean 的label，该 bean 就会被实例化</span>
user.label<span class="token operator">=</span>user1
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><ul>
<li>新增注解给要实例化的对象打上标签</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span>MyConditional<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">MyConditionalAnnotation</span> <span class="token punctuation">{</span>
    String <span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>MyConditional.java</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConditional</span> <span class="token keyword">extends</span> <span class="token class-name">SpringBootCondition</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> ConditionOutcome <span class="token function">getMatchOutcome</span><span class="token punctuation">(</span>ConditionContext context<span class="token punctuation">,</span> AnnotatedTypeMetadata metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> annotationAttributes <span class="token operator">=</span> metadata<span class="token punctuation">.</span><span class="token function">getAnnotationAttributes</span><span class="token punctuation">(</span>MyConditionalAnnotation<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 获取注解所传入的 label</span>
        Object value <span class="token operator">=</span> annotationAttributes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"label"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment" spellcheck="true">//            return new ConditionOutcome(false, "ERROR");</span>
            <span class="token keyword">return</span> ConditionOutcome<span class="token punctuation">.</span><span class="token function">noMatch</span><span class="token punctuation">(</span><span class="token string">"ERROR"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// user.label 的值是通过application.propeties传入</span>
        String v <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.label"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 如果匹配就实例化该 bean</span>
            <span class="token keyword">return</span> ConditionOutcome<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ConditionOutcome<span class="token punctuation">.</span><span class="token function">noMatch</span><span class="token punctuation">(</span><span class="token string">"ERROR"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>注意：代码中通过 <code>application.propeties</code> 传入配置优先级比较高，所以通过context可以获取到，如果通过别的配置文件可能无法获取则需要手动加载。</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java">Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>conditionContext<span class="token punctuation">.</span><span class="token function">getResourceLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"test.properties"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
String v <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.label"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>springboot 创建bean</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 通过自定义注解设置 label</span>
<span class="token annotation punctuation">@MyConditionalAnnotation</span><span class="token punctuation">(</span>label <span class="token operator">=</span> <span class="token string">"MyUserLabel1"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> User1 <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@MyConditionalAnnotation</span><span class="token punctuation">(</span>label <span class="token operator">=</span> <span class="token string">"MyUserLabel2"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> User2 <span class="token function">init2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>application.propeties</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 如果 label 匹配 bean 的label，该 bean 就会被实例化</span>
user.label<span class="token operator">=</span>MyUserLabel2
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
  </entry>
  <entry>
    <title>springboot使用RestTemplate</title>
    <url>/springboot-shi-yong-resttemplate/</url>
    <content><![CDATA[<h3 id="开发带参数的restful接口"><a href="#开发带参数的restful接口" class="headerlink" title="开发带参数的restful接口"></a>开发带参数的restful接口</h3><h4 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// URL路径格式: /trigger?taskId=xxxxxxxxxx</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/trigger"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"taskId"</span><span class="token punctuation">)</span> String taskId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tableCompareService<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>taskId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// URL路径格式: /trigger/taskxxxxxxxxxx</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/trigger/{taskId}"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"taskId"</span><span class="token punctuation">)</span> String taskId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"taskId="</span> <span class="token operator">+</span> taskId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 请求内容转化成对象</span>
<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/demo"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Person person<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="RestTemplateConfig-java类"><a href="#RestTemplateConfig-java类" class="headerlink" title="RestTemplateConfig.java类"></a>RestTemplateConfig.java类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestTemplateConfig</span> <span class="token punctuation">{</span>
 
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> RestTemplate <span class="token function">restTemplate</span><span class="token punctuation">(</span>ClientHttpRequestFactory factory<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token comment" spellcheck="true">// 超时时间自定义</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> ClientHttpRequestFactory <span class="token function">simpleClientHttpRequestFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        SimpleClientHttpRequestFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleClientHttpRequestFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setConnectTimeout</span><span class="token punctuation">(</span><span class="token number">15000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setReadTimeout</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="使用RestTemplate调用其它接口样例"><a href="#使用RestTemplate调用其它接口样例" class="headerlink" title="使用RestTemplate调用其它接口样例"></a>使用RestTemplate调用其它接口样例</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">demoService</span> <span class="token punctuation">{</span>
 
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> RestTemplate restTemplate<span class="token punctuation">;</span>
 
    <span class="token keyword">public</span> String <span class="token function">get</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/user?userId=id"</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"getForEntity/{id}"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> User <span class="token function">getById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span> String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ResponseEntity<span class="token operator">&lt;</span>User<span class="token operator">></span> response <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForEntity</span><span class="token punctuation">(</span><span class="token string">"http://localhost/get/{id}"</span><span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    User user <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> user<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"saveUser"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">save</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ResponseEntity<span class="token operator">&lt;</span>String<span class="token operator">></span> response <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForEntity</span><span class="token punctuation">(</span><span class="token string">"http://localhost/save"</span><span class="token punctuation">,</span> user<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    String body <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> body<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>针对<code>delete</code> <code>put</code>等一些方法没有返回值或者其它问题，可以使用<code>restTemplate.exchange()</code>方法解决.</p>
</blockquote>
]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot分层打包docker镜像</title>
    <url>/springboot-fen-ceng-da-bao-docker-jing-xiang/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>springboot默认的打包插件</p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>及对应的Dockerfile文件</p>
<pre class="line-numbers language-conf"><code class="language-conf">FROM openjdk:8-jdk-alpine
MAINTAINER happywzy
WORKDIR application
EXPOSE 8080
ADD ./target/*.jar ./app.jar
CMD java  -jar app.jar
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>打包命令</p>
<pre class="line-numbers language-bash"><code class="language-bash">mvn clean package
docker build -t test:1.0.0 <span class="token keyword">.</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>这种方式打包 <code>springboot</code> 缺点是每次打包 docker 镜像都是全量上传 ja r包，如果 jar 很大会严重影响拉取镜像的速度.</p>
<h3 id="springboot-分层打包"><a href="#springboot-分层打包" class="headerlink" title="springboot 分层打包"></a>springboot 分层打包</h3><p>springboot 分层打包需要 springboot 版本大于 <code>2.3.0.RELEASE</code>.</p>
<h4 id="开启"><a href="#开启" class="headerlink" title="开启"></a>开启</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layers</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layers</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>再次使用 <code>mvn clean package</code> 命令打包,可以使用 java 包分析工具查看</p>
<pre class="line-numbers language-bash"><code class="language-bash">java -Djarmode<span class="token operator">=</span>layertools -jar target/test-0.0.1-SNAPSHOT.jar list
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>改造原有的 Dockerfile</p>
<pre class="line-numbers language-conf"><code class="language-conf">FROM openjdk:8-jdk-alpine as builder
WORKDIR application
ADD ./target/*.jar ./app.jar
RUN java -Djarmode=layertools -jar app.jar extract

FROM openjdk:8-jdk-alpine
MAINTAINER happywzy

WORKDIR application

COPY --from=builder application/dependencies/ ./
COPY --from=builder application/spring-boot-loader/ ./
COPY --from=builder application/snapshot-dependencies/ ./
COPY --from=builder application/application/ ./

EXPOSE 8080

ENTRYPOINT ["java", "org.springframework.boot.loader.JarLauncher"]
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个 dockerfile 表示先进行一次临时镜像构建标记为 builder，并加载一次全量 jar 包，然后执行 <code>java -Djarmode=layertools -jar app.jar extract</code> 命令将 jar 包分解为分层打包目录，再次构建一个新镜像，按照list 的目录顺序分批将分层目录加载到 docker 镜像中. 再次执行构建命令</p>
<pre class="line-numbers language-bash"><code class="language-bash">docker build -t test:1.0.0 <span class="token keyword">.</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="docker镜像分析"><a href="#docker镜像分析" class="headerlink" title="docker镜像分析"></a>docker镜像分析</h3><p>可以使用 <code>docker inspect</code> 、<code>docker history</code> 或 <code>dive</code> 等工具对比全量打包和分层打包的区别. </p>
]]></content>
      <categories>
        <category>docker</category>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>layers</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot动态定时任务</title>
    <url>/springboot-dong-tai-ding-shi-ren-wu/</url>
    <content><![CDATA[<blockquote>
<p><code>spring boot</code>通过注解<code>@EnableScheduling</code>和<code>@Scheduled</code>实现的是静态定时任务，不能动态添加、停止、修改等.<br>本文通过<code>ThreadPoolTaskScheduler</code>实现定时任务动态增删改.</p>
</blockquote>
<ul>
<li><a href="/spring-boot-ding-shi-ren-wu-cong-pei-zhi-wen-jian-zhong-huo-qu-cron-biao-da-shi/">静态定时任务参考</a></li>
</ul>
<ol>
<li>创建<code>ThreadPoolTaskScheduler</code></li>
</ol>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> ThreadPoolTaskScheduler <span class="token function">threadPoolTaskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ThreadPoolTaskScheduler threadPoolTaskScheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    threadPoolTaskScheduler<span class="token punctuation">.</span><span class="token function">setPoolSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    threadPoolTaskScheduler<span class="token punctuation">.</span><span class="token function">setRemoveOnCancelPolicy</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> threadPoolTaskScheduler<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>创建一个全局任务记录表</li>
</ol>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tasks</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="3">
<li>创建一个任务类</li>
</ol>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">MyRunnable</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token string">" - "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="4">
<li>通过接口启动/删除/修改定时任务<blockquote>
<p>任务的元数据信息可以保存在数据库中.</p>
</blockquote>
</li>
</ol>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicTask</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> ThreadPoolTaskScheduler threadPoolTaskScheduler<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 增加一个带id的定时任务</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/start"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">startCron</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Tasks<span class="token punctuation">.</span>tasks<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">"exist"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> future <span class="token operator">=</span> threadPoolTaskScheduler<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CronTrigger</span><span class="token punctuation">(</span><span class="token string">"0/5 * * * * *"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Tasks<span class="token punctuation">.</span>tasks<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> future<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"start"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//根据id删除一个定时任务</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/stop"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">stopCron</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Tasks<span class="token punctuation">.</span>tasks<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">"not exist"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        Tasks<span class="token punctuation">.</span>tasks<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Tasks<span class="token punctuation">.</span>tasks<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"stop"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//根据id修改定时任务</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/changeCron10"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">startCron10</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">stopCron</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 先停止，在开启.</span>
        ScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> future <span class="token operator">=</span> threadPoolTaskScheduler<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CronTrigger</span><span class="token punctuation">(</span><span class="token string">"*/10 * * * * *"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Tasks<span class="token punctuation">.</span>tasks<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> future<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"change"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot多数据源配置使用</title>
    <url>/springboot-duo-shu-ju-yuan-pei-zhi-shi-yong/</url>
    <content><![CDATA[<h3 id="配置application-yml"><a href="#配置application-yml" class="headerlink" title="配置application.yml"></a>配置application.yml</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
<span class="token comment" spellcheck="true">#   第一个数据源</span>
    <span class="token key atrule">first</span><span class="token punctuation">:</span>
      <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver
      <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.41.128<span class="token punctuation">:</span>3306/first<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=utf8<span class="token important">&amp;useSSL</span>=false
      <span class="token key atrule">username</span><span class="token punctuation">:</span> root
      <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
    <span class="token comment" spellcheck="true">#   第二个数据源</span>
    <span class="token key atrule">second</span><span class="token punctuation">:</span>
      <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver
      <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//172.16.0.9<span class="token punctuation">:</span>3306/second<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=utf8<span class="token important">&amp;useSSL</span>=false
      <span class="token key atrule">username</span><span class="token punctuation">:</span> root
      <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="获取DB配置"><a href="#获取DB配置" class="headerlink" title="获取DB配置"></a>获取DB配置</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource.first"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstDataBaseProperties</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String driverClassName<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource.second"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecondDataBaseProperties</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String driverClassName<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token comment" spellcheck="true">// 第一个数据源与Mapper接口绑定</span>
<span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.deri.task.dao.first"</span><span class="token punctuation">,</span>sqlSessionTemplateRef <span class="token operator">=</span><span class="token string">"firstSqlSessionTemplate"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstDataSourceConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    FirstDataBaseProperties firstDataBaseProperties<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"firstDS"</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">// 多数据源情况下需要指定主数据源</span>
    <span class="token annotation punctuation">@Primary</span>
    <span class="token keyword">public</span> DataSource <span class="token function">getFirstDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        DataSource build <span class="token operator">=</span>  DataSourceBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">driverClassName</span><span class="token punctuation">(</span>firstDataBaseProperties<span class="token punctuation">.</span><span class="token function">getDriverClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>firstDataBaseProperties<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span>firstDataBaseProperties<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span>firstDataBaseProperties<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> build<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"firstSqlSessionFactory"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Primary</span>
    <span class="token keyword">public</span> SqlSessionFactory <span class="token function">firstSqlSessionFactory</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"firstDS"</span><span class="token punctuation">)</span> DataSource dataSource<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        SqlSessionFactoryBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bean<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> bean<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"firstTransactionManger"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Primary</span>
    <span class="token keyword">public</span> DataSourceTransactionManager <span class="token function">firstTransactionManger</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"firstDS"</span><span class="token punctuation">)</span> DataSource dataSource<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 创建SqlSessionTemplate</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"firstSqlSessionTemplate"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Primary</span>
    <span class="token keyword">public</span> SqlSessionTemplate <span class="token function">firstSqlSessionTemplate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"firstSqlSessionFactory"</span><span class="token punctuation">)</span> SqlSessionFactory sqlSessionFactory<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">(</span>sqlSessionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token comment" spellcheck="true">// 第二个数据源与Mapper接口绑定</span>
<span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.deri.task.dao.second"</span><span class="token punctuation">,</span>sqlSessionTemplateRef <span class="token operator">=</span><span class="token string">"secondSqlSessionTemplate"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstDataSourceConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    SecondDataBaseProperties secondDataBaseProperties<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"secondDS"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> DataSource <span class="token function">getFirstDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        DataSource build <span class="token operator">=</span>  DataSourceBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">driverClassName</span><span class="token punctuation">(</span>secondDataBaseProperties<span class="token punctuation">.</span><span class="token function">getDriverClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>secondDataBaseProperties<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span>secondDataBaseProperties<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span>secondDataBaseProperties<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> build<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"secondSqlSessionFactory"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> SqlSessionFactory <span class="token function">firstSqlSessionFactory</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"secondDS"</span><span class="token punctuation">)</span> DataSource dataSource<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        SqlSessionFactoryBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bean<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> bean<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"secondTransactionManger"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> DataSourceTransactionManager <span class="token function">firstTransactionManger</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"secondDS"</span><span class="token punctuation">)</span> DataSource dataSource<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 创建SqlSessionTemplate</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"secondSqlSessionTemplate"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> SqlSessionTemplate <span class="token function">firstSqlSessionTemplate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"secondSqlSessionFactory"</span><span class="token punctuation">)</span> SqlSessionFactory sqlSessionFactory<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">(</span>sqlSessionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://www.cnblogs.com/zhoutao825638/p/10382261.html">https://www.cnblogs.com/zhoutao825638/p/10382261.html</a></li>
</ul>
<h3 id="已知问题"><a href="#已知问题" class="headerlink" title="已知问题"></a>已知问题</h3><ul>
<li>mybatis驼峰命名转换失效问题</li>
</ul>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 默认在application.yml中配置,但是在多数据源场景下该配置失效,需要在代码中显式指定.</span>
<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>
  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>
    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"secondSqlSessionFactory"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> SqlSessionFactory <span class="token function">firstSqlSessionFactory</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"secondDS"</span><span class="token punctuation">)</span> DataSource dataSource<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
    SqlSessionFactoryBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bean<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 指定驼峰转换</span>
    bean<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMapUnderscoreToCamelCase</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> bean<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="另一种配置方法"><a href="#另一种配置方法" class="headerlink" title="另一种配置方法"></a>另一种配置方法</h3><blockquote>
<p>不用创建<code>FirstDataBaseProperties</code>和<code>SecondDataBaseProperties</code>.其余保持一样.</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Primary</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"publicDataSourceProperties"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource.public"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> DataSourceProperties <span class="token function">publicDataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"publicDS"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Primary</span>
    <span class="token keyword">public</span> DataSource <span class="token function">getFirstDataSource</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"publicDataSourceProperties"</span><span class="token punctuation">)</span> DataSourceProperties dataSourceProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> dataSourceProperties<span class="token punctuation">.</span><span class="token function">initializeDataSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
        <tag>java</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot奇怪问题【1】—— HttpServletRequest和@Async搭配使用</title>
    <url>/springboot-qi-guai-wen-ti-1/</url>
    <content><![CDATA[<h3 id="HttpServletRequest和-Async搭配使用问题"><a href="#HttpServletRequest和-Async搭配使用问题" class="headerlink" title="HttpServletRequest和@Async搭配使用问题"></a>HttpServletRequest和@Async搭配使用问题</h3><p>问题描述：希望将<code>request</code>中参数传递到<code>service</code>中处理，同时<code>service</code>是使用异步<code>@Async</code>,此时通过<code>request.getParameterMap()</code>获取参数列表只能在程序启动<code>第一次</code>才能获取到，第二次及之后获取为空,测试如果去掉<code>@Async</code>注解则每次都能获取到参数.</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Controller层</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/call"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">callback</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 这是一个异步方法</span>
    service<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Service层</span>
<span class="token annotation punctuation">@Async</span>
<span class="token keyword">public</span> String <span class="token function">call</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span>extras<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//todo </span>
    <span class="token comment" spellcheck="true">// 对extras做处理</span>
    <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Controller层</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/call"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">callback</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 需要创建一个新的map，将request中参数导入，再传递到异步方法中</span>
    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> extras <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    extras<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    service<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>extras<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><ul>
<li><p><code>request.getParameterMap()</code>返回的是一个<code>Map类型</code>的值，该返回值记录着前端所提交请求中的请求参数和请求参数值的映射关系。这个返回值有个特别之处——<code>只能读</code>。不像普通的<code>Map</code>类型数据一样可以修改。这是因为服务器为了实现一定的安全规范，所作的限制。</p>
</li>
<li><p>如果实在有必要在取得此值以后做修改的话，要新建一个map对象，将返回值复制到此新map对象中进行修改，用新的map对象代替使用之前的返回值。</p>
</li>
<li><p>源码分析</p>
</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Collections.unmodifiableMap()方法使得集合为只读。</span>
<span class="token keyword">public</span> Map <span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Map result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>paramsSnapshot<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>paramsSnapshot<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    result<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Collections<span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot开发grpc接口</title>
    <url>/springboot-kai-fa-grpc-jie-kou/</url>
    <content><![CDATA[<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- grpc相关依赖 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.google.protobuf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>protobuf-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.grpc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>grpc-protobuf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.23.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.grpc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>grpc-stub<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.23.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.grpc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>grpc-netty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.23.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.grpc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>grpc-netty-shaded<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.23.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.grpc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>grpc-okhttp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.23.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>extensions</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>extension</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>kr.motd.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>os-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.0.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>extension</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>extensions</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.xolstice.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>protobuf-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>protocArtifact</span><span class="token punctuation">></span></span>com.google.protobuf:protoc:3.5.1-1:exe:${os.detected.classifier}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>protocArtifact</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginId</span><span class="token punctuation">></span></span>grpc-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginArtifact</span><span class="token punctuation">></span></span>io.grpc:protoc-gen-grpc-java:1.14.0:exe:${os.detected.classifier}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginArtifact</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>compile-custom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="设计proto"><a href="#设计proto" class="headerlink" title="设计proto"></a>设计proto</h3><blockquote>
<p>在<code>src/main</code>目录(<code>java</code>同级目录)下新建<code>proto</code>目录.<br>在<code>proto</code>目录下新建文件<code>hello.proto</code></p>
</blockquote>
<pre class="line-numbers language-go"><code class="language-go">syntax <span class="token operator">=</span> <span class="token string">"proto3"</span><span class="token punctuation">;</span>

option java_multiple_files <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
option java_package <span class="token operator">=</span> <span class="token string">"com.example.java.grpc"</span><span class="token punctuation">;</span>
option java_outer_classname <span class="token operator">=</span> <span class="token string">"HelloWorldProto"</span><span class="token punctuation">;</span>
option objc_class_prefix <span class="token operator">=</span> <span class="token string">"GRPC"</span><span class="token punctuation">;</span>

<span class="token keyword">package</span> common<span class="token punctuation">;</span>

service HelloService <span class="token punctuation">{</span>
    rpc <span class="token function">SayHello</span> <span class="token punctuation">(</span>Hello<span class="token punctuation">)</span> <span class="token function">returns</span> <span class="token punctuation">(</span>Response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

message Hello <span class="token punctuation">{</span>
    <span class="token builtin">string</span> name <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

message Response <span class="token punctuation">{</span>
    <span class="token builtin">string</span> content <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="生成Java文件"><a href="#生成Java文件" class="headerlink" title="生成Java文件"></a>生成Java文件</h3><pre class="line-numbers language-bash"><code class="language-bash">mvn protobuf:compile
mvn protobuf:compile-custom
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="编写服务端"><a href="#编写服务端" class="headerlink" title="编写服务端"></a>编写服务端</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">grpc</span><span class="token punctuation">:</span>
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9090</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GrpcServer</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 配置文件中定义端口号</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.grpc.port}"</span><span class="token punctuation">)</span>
    Integer port<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Server server<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
        server <span class="token operator">=</span> ServerBuilder<span class="token punctuation">.</span><span class="token function">forPort</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addService</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HelloServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Grpc Server started, listening on "</span> <span class="token operator">+</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addShutdownHook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"shutting down gRPC java server ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            GrpcServer<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>server <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            server<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">blockUntilShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>server <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            server<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">HelloServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">HelloServiceGrpc<span class="token punctuation">.</span>HelloServiceImplBase</span> <span class="token punctuation">{</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>Hello req<span class="token punctuation">,</span> StreamObserver<span class="token operator">&lt;</span>Response<span class="token operator">></span> responseObserver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Response reply <span class="token operator">=</span> Response<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Response Message from Java gRPC-Server: Hello "</span> <span class="token operator">+</span> req<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            responseObserver<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span><span class="token punctuation">;</span>
            responseObserver<span class="token punctuation">.</span><span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="编写客户端"><a href="#编写客户端" class="headerlink" title="编写客户端"></a>编写客户端</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GrpcClient</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> ManagedChannel channel<span class="token punctuation">;</span>
    <span class="token keyword">private</span> HelloServiceGrpc<span class="token punctuation">.</span>HelloServiceBlockingStub blockingStub<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">GrpcClient</span><span class="token punctuation">(</span>String host<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        channel <span class="token operator">=</span> ManagedChannelBuilder<span class="token punctuation">.</span><span class="token function">forAddress</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">usePlaintext</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        blockingStub <span class="token operator">=</span> HelloServiceGrpc<span class="token punctuation">.</span><span class="token function">newBlockingStub</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>
        channel<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Hello request <span class="token operator">=</span> Hello<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Response response<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            response <span class="token operator">=</span> blockingStub<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">StatusRuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"RPC failed: {}"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token string">"RPC failed"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>grpc</tag>
        <tag>protobuf</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot开发异步restful接口</title>
    <url>/springboot-kai-fa-yi-bu-restful-jie-kou/</url>
    <content><![CDATA[<h3 id="SpringBoot中异步调用的使用"><a href="#SpringBoot中异步调用的使用" class="headerlink" title="SpringBoot中异步调用的使用"></a>SpringBoot中异步调用的使用</h3><blockquote>
<p>同步请求是会一直等待服务端相应的，需要返回结果给客户端的；而异步调用服务端会马上返回给客户端响应，完成这次整个的请求，至于异步调用的任务服务端后台自己慢慢跑就行，客户端不会关心。</p>
</blockquote>
<ol>
<li>开启异步调用,在启动类增加<code>@EnableAsync</code>使异步调用<code>@Async</code>注解生效</li>
</ol>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableAsync</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DbCompareApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>DbCompareApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>在需要异步调用的方法，增加注解<code>@Async</code></li>
</ol>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSleep</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Async</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sleep"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="3">
<li>Controller调用异步方法</li>
</ol>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    TestSleep testSleep<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        testSleep<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="4">
<li>效果</li>
</ol>
<ul>
<li>如果不加<code>@Async</code>注解，客户端的调用，需要10秒才能返回结果;</li>
<li>加了<code>@Async</code>注解,客户端的调用立马返回结果，调用的方法在服务端后台运行.</li>
</ul>
<ol start="5">
<li>注意事项:部分情况下<code>@Async</code>注解失效</li>
</ol>
<ul>
<li>调用同一个类下注有<code>@Async</code>异步方法</li>
<li>调用的是静态(<code>static</code>)方法</li>
<li>调用(<code>private</code>)私有化方法</li>
</ul>
]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot集成hbase-client,解决包冲突问题</title>
    <url>/springboot-yin-ru-hbase-client-ri-zhi-bao-chong-tu/</url>
    <content><![CDATA[<h3 id="spring-boot集成hbase"><a href="#spring-boot集成hbase" class="headerlink" title="spring boot集成hbase"></a>spring boot集成hbase</h3><ul>
<li><a href="https://github.com/SpringForAll/spring-boot-starter-hbase">https://github.com/SpringForAll/spring-boot-starter-hbase</a></li>
<li><a href="https://juejin.im/post/5cf643186fb9a07eaa226908">https://juejin.im/post/5cf643186fb9a07eaa226908</a></li>
</ul>
<h4 id="关键配置"><a href="#关键配置" class="headerlink" title="关键配置"></a>关键配置</h4><p>参考源码：<code>HbaseProperties</code>,<code>HbaseAutoConfiguration</code>,缺少配置启动报错.</p>
<pre class="line-numbers language-yml"><code class="language-yml">spring:
  data:
    hbase:
      quorum: 192.168.41.128:2181
      rootDir: file:///root/hbase/rootdir
      nodeParent: /hbase
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> HbaseTemplate hbaseTemplate<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>默认pom配置会存在<code>日志</code>包和<code>servlet</code>包冲突问题：</p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.spring4all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-hbase<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.hbase<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hbase-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.spring4all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-hbase<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.hbase<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hbase-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-over-slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>
            <span class="token comment" spellcheck="true">&lt;!--&lt;exclusion>--></span>
                <span class="token comment" spellcheck="true">&lt;!--&lt;groupId>com.google.guava&lt;/groupId>--></span>
                <span class="token comment" spellcheck="true">&lt;!--&lt;artifactId>guava&lt;/artifactId>--></span>
            <span class="token comment" spellcheck="true">&lt;!--&lt;/exclusion>--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>


    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
        <tag>hbase-client</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot接收redis消息过期通知</title>
    <url>/springboot-jie-shou-redis-xiao-xi-guo-qi-tong-zhi/</url>
    <content><![CDATA[<p>redis连接配置：</p>
<pre class="line-numbers language-java"><code class="language-java"> <span class="token annotation punctuation">@Bean</span>
RedisMessageListenerContainer <span class="token function">container</span><span class="token punctuation">(</span>RedisConnectionFactory connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    RedisMessageListenerContainer container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisMessageListenerContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    container<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> container<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>消息监听器：</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisCallBack</span> <span class="token keyword">extends</span> <span class="token class-name">KeyExpirationEventMessageListener</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token function">RedisCallBack</span><span class="token punctuation">(</span>RedisMessageListenerContainer listenerContainer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>listenerContainer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"过期key:"</span> <span class="token operator">+</span> message<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>redis</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot转发重定向问题</title>
    <url>/springboot-zhuan-fa-chong-ding-xiang-wen-ti/</url>
    <content><![CDATA[<h3 id="浏览器地址显示问题"><a href="#浏览器地址显示问题" class="headerlink" title="浏览器地址显示问题"></a>浏览器地址显示问题</h3><ul>
<li><p><code>return "forward:/list";</code> 浏览器地址不变，是转发源地址;</p>
</li>
<li><p><code>return "redirect:/list";</code> 浏览器地址变成<code>list</code>地址.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot自定义banner</title>
    <url>/springboot-zi-ding-yi-banner/</url>
    <content><![CDATA[<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在 resources 目录下 (application.yml 同目录)创建 banner.txt 文件, springboot 启动时会自动加载这个文件替换原有的 spring boot banner.</p>
<h3 id="生成banner"><a href="#生成banner" class="headerlink" title="生成banner"></a>生成banner</h3><ul>
<li><a href="http://www.network-science.de/ascii/">http://www.network-science.de/ascii/</a></li>
<li><a href="http://patorjk.com/software/taag">http://patorjk.com/software/taag</a></li>
</ul>
<h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><ul>
<li>banner.txt 内配置</li>
</ul>
<pre class="line-numbers language-yml"><code class="language-yml">${AnsiColor.BRIGHT_RED}: 设置控制台中输出内容的颜色
${application.version}: 用来获取MANIFEST.MF文件中的版本号
${application.formatted-version}: 格式化后的${application.version}版本信息
${spring-boot.version}: Spring Boot的版本号
${spring-boot.formatted-version}: 格式化后的${spring-boot.version}版本信息
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>application.yml 配置</li>
</ul>
<pre class="line-numbers language-yml"><code class="language-yml">spring:
  banner:
    charset: UTF-8
    location: classpath:banner.txt
    image:
      location: classpath:banner.gif
      width: 76
      height:
      margin: 2
      invert: false
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>关闭 banner</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootBannerApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication springApplication <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span>SpringbootBannerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//Banner.Mode.OFF 关闭</span>
        springApplication<span class="token punctuation">.</span><span class="token function">setBannerMode</span><span class="token punctuation">(</span>Banner<span class="token punctuation">.</span>Mode<span class="token punctuation">.</span>OFF<span class="token punctuation">)</span><span class="token punctuation">;</span>
        springApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
  </entry>
  <entry>
    <title>springboot返回文件流</title>
    <url>/springboot-fan-hui-wen-jian-liu/</url>
    <content><![CDATA[<h3 id="返回文件流"><a href="#返回文件流" class="headerlink" title="返回文件流"></a>返回文件流</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileService</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * @param fileName 文件名
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getFile</span><span class="token punctuation">(</span>String fileName<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span>FileInputStream inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             OutputStream outputStream <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>inputStream<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 文件格式未知字节流</span>
            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/octet-stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Length"</span><span class="token punctuation">,</span> <span class="token string">""</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 设置文件名</span>
            response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span> <span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span><span class="token string">"attachment; filename="</span> <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            outputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"get File {} error, {}"</span><span class="token punctuation">,</span> fileName<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    FileService fileService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/file"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getFile</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"fileName"</span><span class="token punctuation">)</span> String fileName<span class="token punctuation">,</span>
                           HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fileService<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot返回的时间时区不对</title>
    <url>/springboot-fan-hui-de-shi-jian-shi-qu-bu-dui/</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Timestamp<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//对象中属性为</span>
<span class="token keyword">private</span> Timestamp startTime<span class="token punctuation">;</span>
<span class="token keyword">private</span> Timestamp endTime<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过<code>spring boot restful</code>接口返回到前端，时区自动转换不对，晚八个小时:</p>
<pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>
    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">"startTime"</span><span class="token operator">:</span> <span class="token string">"2020-04-29T06:15:00.000+0000"</span><span class="token punctuation">,</span>
    <span class="token property">"endTime"</span><span class="token operator">:</span> <span class="token string">"2020-04-29T06:15:00.000+0000"</span><span class="token punctuation">,</span>
    <span class="token property">"taskResult"</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p><code>application.yml</code>中指定日期格式和时区</p>
<pre class="line-numbers language-yml"><code class="language-yml">spring:
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: Asia/Shanghai
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>再次测试:</p>
<pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>
    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">"startTime"</span><span class="token operator">:</span> <span class="token string">"2020-04-29 14:15:00"</span><span class="token punctuation">,</span>
    <span class="token property">"endTime"</span><span class="token operator">:</span> <span class="token string">"2020-04-29 14:15:00"</span><span class="token punctuation">,</span>
    <span class="token property">"taskResult"</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot集成Prometheus</title>
    <url>/springboot-ji-cheng-prometheus/</url>
    <content><![CDATA[<h3 id="接口说明"><a href="#接口说明" class="headerlink" title="接口说明"></a>接口说明</h3><p>springboot集成Prometheus需要开发的接口有：</p>
<ul>
<li>监控JVM、tomcat等相关的指标；</li>
<li>自定义监控程序相关指标;</li>
</ul>
<h3 id="监控JVM、tomcat等相关的指标"><a href="#监控JVM、tomcat等相关的指标" class="headerlink" title="监控JVM、tomcat等相关的指标"></a>监控JVM、tomcat等相关的指标</h3><p><code>micrometer</code>已经为我们做好了相关的接口，只需要引入依赖即可.</p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--集成Prometheus--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.micrometer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>micrometer-registry-prometheus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>设置<code>application.yml</code></p>
<pre class="line-numbers language-yml"><code class="language-yml">server:
  port: 9090

spring:
  application:
    name: application-name

management:
  endpoint:
  endpoints:
    web:
      exposure:
        include: '*'
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>
MeterRegistryCustomizer<span class="token operator">&lt;</span>MeterRegistry<span class="token operator">></span> <span class="token function">configurer</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.application.name}"</span><span class="token punctuation">)</span> String applicationName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> registry <span class="token operator">-</span><span class="token operator">></span> registry<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commonTags</span><span class="token punctuation">(</span><span class="token string">"application"</span><span class="token punctuation">,</span> applicationName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>启动程序后，访问<code>/actuator/prometheus</code>即可获取相关指标.</p>
<h3 id="使用Micrometer实现方法执行时间监控"><a href="#使用Micrometer实现方法执行时间监控" class="headerlink" title="使用Micrometer实现方法执行时间监控"></a>使用Micrometer实现方法执行时间监控</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> TimedAspect <span class="token function">timedAspect</span><span class="token punctuation">(</span>MeterRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TimedAspect</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 类上要开启@Aspect</span>
<span class="token comment" spellcheck="true">// 在方法上添加 @Timed 注解即可</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/log/warn"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Timed</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"warn_methord"</span><span class="token punctuation">,</span>description <span class="token operator">=</span> <span class="token string">"健康检查接口"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">warn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"warn msg."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"warn"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>启动服务后，访问本地的<code>/actuator/prometheus</code>接口，就能看到如下的指标数据了，其中就有我们自定义的<code>warn_methord</code>的三个指标（count sum max）。</p>
<pre class="line-numbers language-conf"><code class="language-conf"># HELP warn_methord_seconds 健康检查接口
# TYPE warn_methord_seconds summary
warn_methord_seconds_count{application="ggis",exception="None",method="GET",status="200",uri="/log/warn",} 3.0
warn_methord_seconds_sum{application="ggis",exception="None",method="GET",status="200",uri="/log/warn",} 0.0208932
# HELP warn_methord_seconds_max 健康检查接口
# TYPE warn_methord_seconds_max gauge
warn_methord_seconds_max{application="ggis",exception="None",method="GET",status="200",uri="/log/warn",} 0.01753
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="自定义监控程序相关指标"><a href="#自定义监控程序相关指标" class="headerlink" title="自定义监控程序相关指标"></a>自定义监控程序相关指标</h3><p>如果上面的接口返回的指标不够用，需要自己开发，可以参考下面的：</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/metrics"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token string">"text/plain"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseBody</span>
String <span class="token function">metrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 这里产生的随机数,实际按需修改</span>
    <span class="token keyword">return</span> <span class="token string">"user_random{application=\"application\"} "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="然后配置到Prometheus的Targets中即可"><a href="#然后配置到Prometheus的Targets中即可" class="headerlink" title="然后配置到Prometheus的Targets中即可."></a>然后配置到Prometheus的Targets中即可.</h3>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
        <tag>prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot集成swagger</title>
    <url>/springboot-ji-cheng-swagger/</url>
    <content><![CDATA[<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableSwagger2</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Docket <span class="token function">createRestApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"Demo API Doc"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"This is a restful api document of Demo."</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="访问UI"><a href="#访问UI" class="headerlink" title="访问UI"></a>访问UI</h3><ul>
<li><a href="http://localhost:17070/swagger-ui.html">http://localhost:17070/swagger-ui.html</a></li>
</ul>
<h3 id="常用注解："><a href="#常用注解：" class="headerlink" title="常用注解："></a>常用注解：</h3><ul>
<li><code>@Api()</code>用于类；<br>表示标识这个类是swagger的资源 </li>
<li><code>@ApiOperation()</code>用于方法；<br>表示一个http请求的操作<br>-<code> @ApiParam()</code>用于方法，参数，字段说明；<br>表示对参数的添加元数据（说明或是否必填等）<br>-<code> @ApiModel()</code>用于类<br>表示对类进行说明，用于参数用实体类接收 </li>
<li><code>@ApiModelProperty()</code>用于方法，字段<br>表示对model属性的说明或者数据操作更改 </li>
<li><code>@ApiIgnore()</code>用于类，方法，方法参数<br>表示这个方法或者类被忽略 </li>
<li><code>@ApiImplicitParam()</code> 用于方法<br>表示单独的请求参数 </li>
<li><code>@ApiImplicitParams()</code>用于方法，包含多个 <code>@ApiImplicitParam</code></li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/xxtest"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">"这里修改大类的名字"</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">"这里修改大类的描述"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysRoleController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@ApiImplicitParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"Authorization"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"请求Header的名称"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token string">"String"</span><span class="token punctuation">,</span>paramType <span class="token operator">=</span> <span class="token string">"header"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"修改接口的描述"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Response <span class="token function">add</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"这里写参数名字"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> roleService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ApiImplicitParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"Authorization"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"认证Token"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token string">"String"</span><span class="token punctuation">,</span>paramType <span class="token operator">=</span> <span class="token string">"header"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"也可以在这里写参数的名称"</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token string">"integer"</span><span class="token punctuation">,</span>paramType <span class="token operator">=</span> <span class="token string">"query"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"修改接口的描述"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Response <span class="token function">add</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> roleService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"测试实体"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestEntity</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"名称"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"ID"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>spring boot2.0集成邮件发送功能</title>
    <url>/springboot-ji-cheng-you-jian-fa-song-gong-neng/</url>
    <content><![CDATA[<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 注意版本号，测试2.0.3版本有严重问题，启动失败 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="注册邮箱"><a href="#注册邮箱" class="headerlink" title="注册邮箱"></a>注册邮箱</h3><ul>
<li><code>163</code>,<code>126</code>,<code>qq</code>都行,这边测试<code>126</code>邮箱;</li>
<li>开启<code>IMAP/SMTP</code>服务;</li>
<li>获取<code>授权密码</code>,注意保存.</li>
</ul>
<h3 id="配置application-yaml"><a href="#配置application-yaml" class="headerlink" title="配置application.yaml"></a>配置application.yaml</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">mail</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 注册的邮箱</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> xxxxxx@126.com
    <span class="token comment" spellcheck="true"># 密码为授权码</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span> XXXXXXXXXXXXXXX
    <span class="token comment" spellcheck="true"># smtp服务器地址</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> smtp.126.com
    <span class="token comment" spellcheck="true"># 安全相关配置,非必须</span>
    <span class="token key atrule">properties</span><span class="token punctuation">:</span>
      <span class="token key atrule">mail</span><span class="token punctuation">:</span>
        <span class="token key atrule">smtp</span><span class="token punctuation">:</span>
          <span class="token key atrule">auth</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
          <span class="token key atrule">starttls</span><span class="token punctuation">:</span>
            <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
            <span class="token key atrule">required</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="测试发送"><a href="#测试发送" class="headerlink" title="测试发送"></a>测试发送</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailService</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 这个在IDEA中会提示没有bean，注入失败，不用管~</span>
    <span class="token annotation punctuation">@Autowired</span>
    JavaMailSender mailSender<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 普通文本邮件</span>
        SimpleMailMessage simpleMailMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMailMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//邮件发送方,需要写完整邮箱地址</span>
        simpleMailMessage<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token string">"XXXXX@126.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//邮件接收方邮箱</span>
        simpleMailMessage<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token string">"1154365135@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//邮件标题</span>
        simpleMailMessage<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"测试主题~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//邮件内容</span>
        simpleMailMessage<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"测试内容~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//发送邮件</span>
        mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>simpleMailMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendHtml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> MessagingException <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// html邮件</span>
        MimeMessage mimeMessage <span class="token operator">=</span> mailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        MimeMessageHelper helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//邮件发送方</span>
        helper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token string">"authservice@126.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//邮件接收方邮箱</span>
        helper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token string">"1154365135@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//邮件标题</span>
        helper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"测试HTML~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//邮件内容</span>
        helper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"&lt;html>\n"</span> <span class="token operator">+</span>
                <span class="token string">"&lt;head>\n"</span> <span class="token operator">+</span>
                <span class="token string">"&lt;meta charset=\"utf-8\">\n"</span> <span class="token operator">+</span>
                <span class="token string">"&lt;title>菜鸟教程(runoob.com)&lt;/title>\n"</span> <span class="token operator">+</span>
                <span class="token string">"&lt;/head>\n"</span> <span class="token operator">+</span>
                <span class="token string">"&lt;body>\n"</span> <span class="token operator">+</span>
                <span class="token string">"    &lt;h1>我的第一个标题&lt;/h1>\n"</span> <span class="token operator">+</span>
                <span class="token string">"    &lt;p style=\"color: blue;\">我的第一个段落。&lt;/p>\n"</span> <span class="token operator">+</span>
                <span class="token string">"&lt;/body>\n"</span> <span class="token operator">+</span>
                <span class="token string">"&lt;/html>"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//发送邮件</span>
        mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">//附件邮件, 未测试</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendAttachmentMail</span><span class="token punctuation">(</span>String to<span class="token punctuation">,</span>String subject<span class="token punctuation">,</span>String content<span class="token punctuation">,</span>String filePath<span class="token punctuation">)</span> <span class="token keyword">throws</span> MessagingException <span class="token punctuation">{</span>
        MimeMessage mimeMessage<span class="token operator">=</span>mailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        MimeMessageHelper helper<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        helper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>
        helper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>
        helper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        helper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span><span class="token punctuation">;</span>
        FileSystemResource file<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String fileName<span class="token operator">=</span>file<span class="token punctuation">.</span><span class="token function">getFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        helper<span class="token punctuation">.</span><span class="token function">addAttachment</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//helper.addAttachment(fileName+"02",file);  如果是多个附件的话，可以这样写。但是开发中一般都是把filepath做成一个数组，这样在这里遍历就可以了</span>
        <span class="token comment" spellcheck="true">//helper.addAttachment(fileName+"03",file);</span>

        mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//图片邮件,未测试</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendInlineResourceMail</span><span class="token punctuation">(</span>String to<span class="token punctuation">,</span>String subject<span class="token punctuation">,</span>String content<span class="token punctuation">,</span>String rscPath<span class="token punctuation">,</span>String rscId<span class="token punctuation">)</span> <span class="token keyword">throws</span> MessagingException <span class="token punctuation">{</span>
        MimeMessage mimeMessage<span class="token operator">=</span>mailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        MimeMessageHelper helper<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        helper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>
        helper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>
        helper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        helper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span><span class="token punctuation">;</span>
        FileSystemResource file<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>rscPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        helper<span class="token punctuation">.</span><span class="token function">addInline</span><span class="token punctuation">(</span>rscId<span class="token punctuation">,</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>

        mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
        <tag>mail</tag>
      </tags>
  </entry>
  <entry>
    <title>batik配合XPath解析svg文件</title>
    <url>/svg-jie-xi/</url>
    <content><![CDATA[<pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- SVG解析包 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.xmlgraphics<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>batik-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rect</span> <span class="token attr-name">x</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">y</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1198<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>598<span class="token punctuation">"</span></span>
        <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span> <span class="token attr-name">stroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span> <span class="token attr-name">stroke-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>M200,300 Q400,50 600,300 T1000,300<span class="token punctuation">"</span></span>
        <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span> <span class="token attr-name">stroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span> <span class="token attr-name">stroke-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>g</span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>black<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>circle</span> <span class="token attr-name">cx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token attr-name">cy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">r</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>circle</span> <span class="token attr-name">cx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>600<span class="token punctuation">"</span></span> <span class="token attr-name">cy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">r</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>circle</span> <span class="token attr-name">cx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span> <span class="token attr-name">cy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">r</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>g</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>g</span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#888888<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>circle</span> <span class="token attr-name">cx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span> <span class="token attr-name">cy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token attr-name">r</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>circle</span> <span class="token attr-name">cx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>800<span class="token punctuation">"</span></span> <span class="token attr-name">cy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>550<span class="token punctuation">"</span></span> <span class="token attr-name">r</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>g</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>M200,300 L400,50 L600,300 L800,550 L1000,300<span class="token punctuation">"</span></span>
        <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span> <span class="token attr-name">stroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#888888<span class="token punctuation">"</span></span> <span class="token attr-name">stroke-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//You first load the XML as a Document:</span>
DocumentBuilderFactory factory <span class="token operator">=</span> DocumentBuilderFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
DocumentBuilder builder <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newDocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Document document <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"image.svg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//Then you use XPath to select the desired nodes. The expression below selects the contents of the d attributes of all the path elements inside the file:</span>
String xpathExpression <span class="token operator">=</span> <span class="token string">"//path/@d"</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//Now we can instantiate the XPath processor and compile the expression:</span>
XPathFactory xpf <span class="token operator">=</span> XPathFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
XPath xpath <span class="token operator">=</span> xpf<span class="token punctuation">.</span><span class="token function">newXPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
XPathExpression expression <span class="token operator">=</span> xpath<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>xpathExpression<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//Since the expected result is a node-set (two strings), we evaluate the expression on the SVG document using XPathConstants.NODESET as the second parameter:</span>
NodeList svgPaths <span class="token operator">=</span> <span class="token punctuation">(</span>NodeList<span class="token punctuation">)</span>expression<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> XPathConstants<span class="token punctuation">.</span>NODESET<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//From there you can extract the first set of path data using:</span>
svgPaths<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>xpath</tag>
        <tag>svg</tag>
        <tag>batik</tag>
      </tags>
  </entry>
  <entry>
    <title>tarefik入门使用</title>
    <url>/traefik-ru-men-shi-yong/</url>
    <content><![CDATA[<h3 id="traefik概述"><a href="#traefik概述" class="headerlink" title="traefik概述"></a>traefik概述</h3><p><code>traefik</code> 与 <code>nginx</code> 一样，是一款优秀的反向代理工具，或者叫 <code>Edge Router</code>。具有以下优势:</p>
<ul>
<li>无须重启即可更新配置</li>
<li>自动的服务发现与负载均衡</li>
<li>与 <code>docker</code> 的完美集成，基于 <code>container label</code> 的配置</li>
<li>漂亮的 <code>dashboard</code> 界面</li>
<li><code>metrics</code> 的支持，对 <code>prometheus</code> 和 <code>k8s</code> 的集成</li>
</ul>
<blockquote>
<p><code>traefik</code>在<code>1.x</code>和<code>2.x</code>版本差异巨大,本文采用<code>2.4.1</code>版本.</p>
</blockquote>
<h3 id="traefik部署"><a href="#traefik部署" class="headerlink" title="traefik部署"></a>traefik部署</h3><p>本文采用<code>docker-compose</code>方式部署<code>traefik</code>.</p>
<pre class="line-numbers language-yml"><code class="language-yml">version: '3'
services:
  reverse-proxy:
    image: traefik:2.4.1
    # Enables the web UI and tells Traefik to listen to docker
    # 启用webUI 并告诉Traefile去监听docker的容器实例
    command: --api.insecure=true --providers.docker
    ports:
      # traefik暴露的http端口
      - "80:80"
      # webUI暴露的端口(必须制定--api.insecure=true才可以访问)
      - "8080:8080"
    volumes:
      # 指定docker的sock文件来让traefik获取docker的事件，从而实现动态负载均衡
      - /var/run/docker.sock:/var/run/docker.sock
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>访问 <a href="">http://192.168.41.128:8080</a> <code>traefik</code>的<code>dashboard</code>.</p>
<h3 id="traefik使用"><a href="#traefik使用" class="headerlink" title="traefik使用"></a>traefik使用</h3><p>新建个<code>whoami</code>服务.</p>
<pre class="line-numbers language-yml"><code class="language-yml"># ...
  whoami:
    # A container that exposes an API to show its IP address
    image: traefik/whoami
    labels:
      - "traefik.http.routers.whoami.rule=Host(`whoami.docker.localhost`)"
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>启动<code>whoami</code>服务：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动一个whoami实例</span>
docker-compose up -d <span class="token function">whoami</span>

<span class="token comment" spellcheck="true"># 测试</span>
curl -H Host:whoami.docker.localhost http://127.0.0.1
<span class="token comment" spellcheck="true"># 输出</span>
Hostname: a656c8ddca6c
IP: 172.27.0.3

<span class="token comment" spellcheck="true"># 启动多个whoami实例</span>
docker-compose up -d --scale whoami<span class="token operator">=</span>2

<span class="token comment" spellcheck="true"># 在测试</span>
curl -H Host:whoami.docker.localhost http://127.0.0.1
<span class="token comment" spellcheck="true"># 输出自动在两个实例中负载均衡</span>
IP: 172.18.0.4
IP: 172.18.0.3
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在<code>daskboard</code>上也可以看到<code>http service</code>中有两个<code>whoami</code>实例.</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://www.cnblogs.com/xiao987334176/p/12447783.html">Traefik-v2.x快速入门</a></li>
<li><a href="https://doc.traefik.io/traefik/">traefik官方文档</a></li>
</ul>
]]></content>
      <categories>
        <category>traefik</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>traefik</tag>
      </tags>
  </entry>
  <entry>
    <title>traefik配置</title>
    <url>/traefik-pei-zhi/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul>
<li><code>Entrypoints</code> -&gt; 入口</li>
<li><code>HTTP Router</code> -&gt; 路由规则</li>
<li><code>Service</code> -&gt; 可以理解为部署在<code>docker</code>中的容器、这里也可以是在配置文件中自定义的<code>service</code></li>
<li><code>TLS</code> -&gt; <code>https</code></li>
</ul>
<h3 id="toml配置文件"><a href="#toml配置文件" class="headerlink" title="toml配置文件"></a>toml配置文件</h3><p><code>traefik</code>支持通过<code>toml</code>配置文件手动配置<code>https</code>、自定义<code>Router</code>、<code>Service</code>;</p>
<ul>
<li><code>traefik.toml</code></li>
</ul>
<pre class="line-numbers language-conf"><code class="language-conf"># 全局配置
[global]
  checkNewVersion = false
  sendAnonymousUsage = false
# 入口
[entryPoints]
  # http 
  [entryPoints.web]
    address = ":80"
  # https "websecure"这个名字是自己定义的  
  [entryPoints.websecure]
    address = ":443"
  #  traefik web ui 
  [entryPoints.traefik]
    address = ":8080" 
# 免费Let's Encrypt 证书（注意：必须域名解析到的主机中才有效，traefik会把秘钥写入acme.json中）
[certificatesResolvers.bxtlschallenge.acme]
  # 自己的邮箱地址
  email = "xxxx@xx.com"
  # 秘钥写入地址，根据自己文件映射来配置
  storage = "/letsencrypt/acme.json"
  [certificatesResolvers.bxtlschallenge.acme.httpChallenge]
  entryPoint = "web"

# 自定义Router、Services（貌似必须定义在外部文件里面，坑了好久）
[providers.file]
  directory = "/etc/traefik/conf"
# traefik 需要开启的功能
[api]
  insecure = true
  dashboard = true
[ping]
[providers.docker]
  endpoint = "unix:///var/run/docker.sock"
  exposedByDefault = true
# 传输配置
[serversTransport]
  # 如果后端需要代理https自定义证书，可以使用这种方式就可以跳过验证，不然会报x509证书错误
  insecureSkipVerify = true
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>file.toml</code></li>
</ul>
<pre class="line-numbers language-conf"><code class="language-conf">[http]
  # 自定义 routers
  [http.routers]
    # http 方式
    [http.routers.routers-cnblogs]
      entryPoints = ["web"]
      rule = "Host(`cnblogs.fanxp.com`)"
      service = "cnblogs"
    # https 方式
    [http.routers.routers-cnblogs1]
      entryPoints = ["websecure"]
      rule = "Host(`cnblogs.fanxp.com`)"
      service = "cnblogs"
      [http.routers.routers-cnblogs1.tls]
        certResolver = "bxtlschallenge"
  # 自定义 services
  [http.services]
    [http.services.cnblogs]
      # 可以设置多个url traefik 根据算法做负载均衡
      [http.services.cnblogs.loadBalancer]
        [[http.services.cnblogs.loadBalancer.servers]]
          url = "https://www.cnblogs.com/fanxp/"
        [[http.services.cnblogs.loadBalancer.servers]]
          url = "https://github.com/fanxiaoping/grpc-test"
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>测试<code>traefik-compose.yml</code></li>
</ul>
<pre class="line-numbers language-yml"><code class="language-yml">version: '3'

services:
    traefik:
        image: traefik:v2.1
        container_name: traefik
        ports:
            # HTTP 端口
            - "80:80"
            # HTTPS 端口
            - "443:443"
            # Web UI 端口
            - "8080:8080"
        volumes:
            # 这样Traefik可以监听Docker事件
            - /var/run/docker.sock:/var/run/docker.sock:ro
            # 启动配置文件
            - ./traefik.toml:/etc/traefik/traefik.toml
            # 自定义routers、services
            - ./conf:/etc/traefik/conf
            # 存储证书秘钥
            - ./letsencrypt:/letsencrypt

    whoami:
        # 公开API以显示其IP地址的容器
        image: containous/whoami
        container_name: whoami
        labels:
            # 地址：whoami.fanxp.com
            - "traefik.http.routers.whoami.rule=Host(`whoami.fanxp.com`)"
            # 入口方式，这里采用https
            - "traefik.http.routers.whoami.entrypoints=websecure"
            # 指定证书
            - "traefik.http.routers.whoami.tls.certresolver=bxtlschallenge"

    whoami2:
        # 公开API以显示其IP地址的容器
        image: containous/whoami
        container_name: whoami2
        labels:
            # 地址：whoami.fanxp.com/v2
            - "traefik.http.routers.whoami2.rule=Host(`whoami.fanxp.com`) && PathPrefix(`/v2`)"
            # 默认代理使用http://172.0.0.4 配置方式用https://172.0.0.4
            # - "traefik.http.services.bx_resource_library.loadbalancer.server.scheme=https"
            # 定义中间件 规则
            - "traefik.http.routers.whoami2.middlewares=whoami2-stripprefix"
            # 代理：172.0.0.4/v2访问，这肯定不是我们想要的 写上规则后 代理：172.0.0.4
            - "traefik.http.middlewares.whoami2-stripprefix.stripprefix.prefixes=/v2"
            # 如果容器有多个端口 可以指定当前service暴露哪一个端口，默认第一个
            - "traefik.http.services.whoami2.loadbalancer.server.port=80"
            # 入口方式，这里采用https
            - "traefik.http.routers.whoami2.entrypoints=websecure"
            # 指定证书
            - "traefik.http.routers.whoami2.tls.certresolver=bxtlschallenge"
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://www.cnblogs.com/fanxp/p/12146045.html">原文链接</a></li>
</ul>
]]></content>
      <categories>
        <category>traefik</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>traefik</tag>
      </tags>
  </entry>
  <entry>
    <title>url路径中文参数乱码问题</title>
    <url>/url-lu-jing-zhong-wen-can-shu-luan-ma-wen-ti/</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p><code>http://localhost:8080/test?name=管理</code>这样参数存在中文情况，<code>spring boot</code>代码</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> RoleResponse <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> roleService<span class="token punctuation">.</span><span class="token function">selectByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><strong>可能存在</strong>接收到的<code>name</code>是<code>%E7%AE%A1%E7%90%86</code>这样的情况,这是浏览器自动为<code>URL</code>做了<code>UrlEncode</code>;</p>
<p>即使你的<code>application.yml</code>配置了<code>UTF-8</code>编码，也不一定能解决这样的问题:</p>
<pre class="line-numbers language-yml"><code class="language-yml"># application.properties
server:
  tomcat:
    uri-encoding: UTF-8
spring:
  http:
    encoding:
      charset: UTF-8
      enabled: true
      force: true
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>网上查找的方法一：【添加配置类】</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomMVCConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurerAdapter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> HttpMessageConverter<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">responseBodyConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        StringHttpMessageConverter converter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringHttpMessageConverter</span><span class="token punctuation">(</span>
                Charset<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> converter<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMessageConverters</span><span class="token punctuation">(</span>
            List<span class="token operator">&lt;</span>HttpMessageConverter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> converters<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">configureMessageConverters</span><span class="token punctuation">(</span>converters<span class="token punctuation">)</span><span class="token punctuation">;</span>
        converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">responseBodyConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureContentNegotiation</span><span class="token punctuation">(</span>
            ContentNegotiationConfigurer configurer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        configurer<span class="token punctuation">.</span><span class="token function">favorPathExtension</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>测试并未解决问题！</p>
<p>方法二：【强制解码】</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> RoleResponse <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> UnsupportedEncodingException <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
        name <span class="token operator">=</span> URLDecoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> roleService<span class="token punctuation">.</span><span class="token function">selectByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>测试可以解决问题！</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>vmware虚拟机意外关机后启动报错</title>
    <url>/vmware-xu-ni-ji-yi-wai-guan-ji-hou-qi-dong-bao-cuo/</url>
    <content><![CDATA[<h3 id="虚拟机意外关机后启动报错"><a href="#虚拟机意外关机后启动报错" class="headerlink" title="虚拟机意外关机后启动报错"></a>虚拟机意外关机后启动报错</h3><blockquote>
<p>以独占方式锁定此配置文件失败。可能其它正在运行VMware进程在使用此配置文件</p>
</blockquote>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><pre><code>任务管理器 -&gt; 启动 -&gt; VMware Tray Process -&gt; 禁用
</code></pre>
<pre><code>重启机器
</code></pre>
<pre><code>VMware Tray Process -&gt; 启用 -&gt; 重启打开虚拟机
</code></pre>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>vmware</tag>
      </tags>
  </entry>
  <entry>
    <title>vncserver安装使用</title>
    <url>/vncserver-an-zhuang-shi-yong/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 检查服务器是否安装了 VNC</span>
rpm -qa <span class="token operator">|</span> <span class="token function">grep</span> vnc
<span class="token comment" spellcheck="true"># 安装</span>
yum <span class="token function">install</span> tigervnc tigervnc-server -y
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动一个桌面</span>
<span class="token comment" spellcheck="true"># 启动完成默认监听的是5901端口</span>
<span class="token comment" spellcheck="true"># vncserver :1 -geometry 1920x1080 -SecurityTypes None</span>
vncserver :1

<span class="token comment" spellcheck="true"># 可以再启动一个桌面</span>
<span class="token comment" spellcheck="true"># 启动完成默认监听的是5902端口</span>
vncserver :1

<span class="token comment" spellcheck="true"># 查看桌面列表</span>
<span class="token punctuation">[</span>root@hadoop3 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vncserver -list</span>

TigerVNC server sessions:

X DISPLAY <span class="token comment" spellcheck="true">#	PROCESS ID</span>
:1		19243
:2      18722

<span class="token comment" spellcheck="true"># 删除一个桌面</span>
vncserver -kill :2

<span class="token comment" spellcheck="true"># 为当前用户创建vnc密码</span>
<span class="token punctuation">[</span>root@ ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vncpasswd</span>
Password:
Verify:

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果开通了防火墙，就需要手动开放相关端口</p>
<pre class="line-numbers language-bash"><code class="language-bash">iptables -I INPUT -p tcp --dport 5901 -j ACCEPT
iptables -I INPUT -p tcp --dport 5902 -j ACCEPT
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="测试VNC服务"><a href="#测试VNC服务" class="headerlink" title="测试VNC服务"></a>测试VNC服务</h3><ol>
<li>下载VNC Viewer</li>
<li>启动VNC Viewer软件</li>
<li>Server输入 <code>192.168.3.11:1</code></li>
<li>输入密码</li>
</ol>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><h4 id="vnc和anaconda冲突"><a href="#vnc和anaconda冲突" class="headerlink" title="vnc和anaconda冲突"></a>vnc和anaconda冲突</h4><pre class="line-numbers language-log"><code class="language-log"><!-- 报错日志 -->
Could not make bus activated clients aware of XDG_CURRENT_DESKTOP=GNOME envi
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>解决办法：  </p>
<ol>
<li>注释掉~/.bashrc中anaconda相关的环境变量设置</li>
<li>执行source ~/.bashrc</li>
<li>重启一个xshell连接，启动vnc</li>
<li>还原~/.bashrc中注释掉的anaconda相关的环境变量</li>
<li>执行source ~/.bashrc</li>
</ol>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://blog.csdn.net/llag_haveboy/article/details/84960479">https://blog.csdn.net/llag_haveboy/article/details/84960479</a></li>
<li><a href="https://blog.csdn.net/petercnmei/article/details/51627964/">https://blog.csdn.net/petercnmei/article/details/51627964/</a></li>
</ul>
]]></content>
      <tags>
        <tag>vncserver</tag>
      </tags>
  </entry>
  <entry>
    <title>xpath中*、text()和node()区别</title>
    <url>/xpath-zhong-text-he-node-qu-bie/</url>
    <content><![CDATA[<p>假设有这么一段html：</p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Subtitle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Goto<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    Bare text
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- this is html comment --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Bottom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="child"><a href="#child" class="headerlink" title="child::*"></a>child::*</h3><p>节点的所有子元素，如<code>//div[@class="post-content"]/*</code>，结果：</p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Subtitle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Goto<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Bottom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，这里只选择了有标签名的节点，不在标签内的Bare text和注释都被过滤了。</p>
<h3 id="child-text"><a href="#child-text" class="headerlink" title="child::text()"></a>child::text()</h3><p>节点的所有文本，如<code>//div[@class="post-content"]/text()</code>，结果：</p>
<pre><code>Bare text
</code></pre>
<h3 id="child-node"><a href="#child-node" class="headerlink" title="child::node()"></a>child::node()</h3><p>节点下的所有内容，不论是标签还是文本还是其他，<code>//div[@class="post-content"]/node()</code>，结果：</p>
<pre class="line-numbers language-XML"><code class="language-XML"><h1>Title</h1>
<p>Subtitle</p>
<img src="a.jpg">
<div>
    <a href="example.html">Goto</a>
</div>
Bare text
<br>
<!-- this is html comment -->
<p>Bottom</p> 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>原样输出了其下的所有内容。</p>
<h3 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h3><ul>
<li><a href="https://www.awaimai.com/2726.html">https://www.awaimai.com/2726.html</a></li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>xpath</tag>
        <tag>xml</tag>
      </tags>
  </entry>
  <entry>
    <title>zookeeper单机版部署</title>
    <url>/zookeeper-dan-ji-ban-bu-shu/</url>
    <content><![CDATA[<h1 id="下载压缩包"><a href="#下载压缩包" class="headerlink" title="下载压缩包"></a>下载压缩包</h1><pre class="line-numbers language-sh"><code class="language-sh">wget http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.5.7/apache-zookeeper-3.5.7-bin.tar.gz

tar -zxvf apache-zookeeper-3.5.7-bin.tar.gz 

cd apache-zookeeper-3.5.7-bin/
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>注意：<code>zookeeper</code>从<code>3.5.5</code>版本开始，需要下载<code>*-bin.tar.gz</code>的包才能运行，否则启动会报错，缺少类。</p>
</blockquote>
<h1 id="拷贝zoo-cfg"><a href="#拷贝zoo-cfg" class="headerlink" title="拷贝zoo.cfg"></a>拷贝zoo.cfg</h1><p>用默认配置即可</p>
<pre><code>cp conf/zoo_sample.cfg conf/zoo.cfg
</code></pre>
<h1 id="启动-amp-检查"><a href="#启动-amp-检查" class="headerlink" title="启动&amp;检查"></a>启动&amp;检查</h1><p>启动</p>
<pre><code>./bin/zkServer.sh start
</code></pre>
<p>检查</p>
<pre><code>./bin/zkServer.sh status
</code></pre>
<p>停止</p>
<pre><code>./bin/zkServer.sh stop
</code></pre>
<p>重启</p>
<pre><code>./bin/zkServer.sh restart
</code></pre>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>zookeeper集群部署</title>
    <url>/zookeeper-ji-qun-bu-shu/</url>
    <content><![CDATA[<h3 id="准备3台机器"><a href="#准备3台机器" class="headerlink" title="准备3台机器"></a>准备3台机器</h3><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 每台机器运行一条命令,注意ID和IP的对应</span>
docker run -d --name zookeeper --net host --restart always -e ZOO_MY_ID<span class="token operator">=</span>1 \
-e ZOO_SERVERS<span class="token operator">=</span><span class="token string">"server.1=192.168.3.17:2888:3888;2181 server.2=192.168.3.19:2888:3888;2181 server.3=192.168.3.20:2888:3888;2181"</span> \
-v /root/zookeeper/data:/data -v /root/zookeeper/datalog:/datalog zookeeper:3.7

docker run -d --name zookeeper --net host --restart always -e ZOO_MY_ID<span class="token operator">=</span>2 \
-e ZOO_SERVERS<span class="token operator">=</span><span class="token string">"server.1=192.168.3.17:2888:3888;2181 server.2=192.168.3.19:2888:3888;2181 server.3=192.168.3.20:2888:3888;2181"</span> \
-v /root/zookeeper/data:/data -v /root/zookeeper/datalog:/datalog zookeeper:3.7

docker run -d --name zookeeper --net host --restart always -e ZOO_MY_ID<span class="token operator">=</span>3 \
-e ZOO_SERVERS<span class="token operator">=</span><span class="token string">"server.1=192.168.3.17:2888:3888;2181 server.2=192.168.3.19:2888:3888;2181 server.3=192.168.3.20:2888:3888;2181"</span> \
-v /root/zookeeper/data:/data -v /root/zookeeper/datalog:/datalog zookeeper:3.7

<span class="token comment" spellcheck="true"># 测试</span>
docker <span class="token function">exec</span> -it  zookeeper <span class="token function">bash</span>
<span class="token comment" spellcheck="true"># 连接一个节点create</span>
zkCli.sh -server 192.168.3.17
create /mynode hello
<span class="token comment" spellcheck="true"># 连接另一个节点get</span>
get /mynode
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>二维码扫码登录流程</title>
    <url>/er-wei-ma-sao-ma-deng-lu-liu-cheng/</url>
    <content><![CDATA[<h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p><img data-src="/images/qrcode.png" alt="流程图"></p>
<ul>
<li>网页端生成随机<code>code</code>,携带<code>code</code>去请求一张二维码图片;</li>
<li>网页端轮询<code>code</code>是否登录成功状态;</li>
<li><code>APP</code>端扫描二维码,获取二维码内容;</li>
<li><code>APP</code>端验证二维码是否过期/无效;</li>
<li>如果二维码有效,展示确认登录/取消按钮;</li>
<li><code>APP</code>端携带登录信息<code>token</code>确认登陆;</li>
<li>后端为<code>code</code>绑定登录信息(<code>token</code>,<code>userName</code>),网页端轮询获得登录成功信息.</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>zxing</tag>
        <tag>二维码</tag>
      </tags>
  </entry>
  <entry>
    <title>云原生之容器安全实践</title>
    <url>/yun-yuan-sheng-zhi-rong-qi-an-quan-shi-jian/</url>
    <content><![CDATA[<h3 id="收藏链接"><a href="#收藏链接" class="headerlink" title="收藏链接"></a>收藏链接</h3><ul>
<li><a href="https://tech.meituan.com/2020/03/12/cloud-native-security.html">云原生之容器安全实践</a></li>
</ul>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>容器安全</tag>
      </tags>
  </entry>
  <entry>
    <title>使用canal监控mysql数据变化</title>
    <url>/shi-yong-canal-jian-kong-mysql-shu-ju-bian-hua/</url>
    <content><![CDATA[<h3 id="canal介绍"><a href="#canal介绍" class="headerlink" title="canal介绍"></a>canal介绍</h3><p>canal是阿里开源的数据库同步框架,采用非侵入式方式,解析mysql的<code>binary log</code>,再发送到目的地,目的地可是<code>mq</code>,<code>hbase</code>,<code>mysql</code>,<code>es</code>等.</p>
<h3 id="本章流程"><a href="#本章流程" class="headerlink" title="本章流程"></a>本章流程</h3><ol>
<li>开启mysql的bin-log日志</li>
<li>创建mysql用户获取bin-log日志</li>
<li>canal采集bin-log日志</li>
<li>canal-client获取mysql变化信息</li>
</ol>
<h4 id="开启bin-log日志"><a href="#开启bin-log日志" class="headerlink" title="开启bin-log日志"></a>开启bin-log日志</h4><p>只需要在<code>mysqld.cnf</code>新增配置</p>
<pre><code>server-id=1
log-bin=mysql-bin
</code></pre>
<h4 id="创建mysql用户"><a href="#创建mysql用户" class="headerlink" title="创建mysql用户"></a>创建mysql用户</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">user</span> canal@'<span class="token operator">%</span><span class="token string">' IDENTIFIED by '</span>canal<span class="token string">';
GRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT,SUPER ON *.* TO '</span>canal<span class="token string">'@'</span><span class="token operator">%</span>'<span class="token punctuation">;</span>
FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="配置canal"><a href="#配置canal" class="headerlink" title="配置canal"></a>配置canal</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 配置文件1：canal-server/conf/canal.properties</span>
<span class="token comment" spellcheck="true"># 端口</span>
canal.port <span class="token operator">=</span> 11111

<span class="token comment" spellcheck="true"># 配置文件2：canal-server/conf/example/instance.properties</span>
<span class="token comment" spellcheck="true"># 数据库连接信息</span>
canal.instance.master.address<span class="token operator">=</span>192.168.41.128:3307
canal.instance.dbUsername<span class="token operator">=</span>canal
canal.instance.dbPassword<span class="token operator">=</span>canal
<span class="token comment" spellcheck="true"># 监听的表(正则表达式)</span>
canal.instance.filter.regex<span class="token operator">=</span>.*\\<span class="token punctuation">..</span>*
<span class="token comment" spellcheck="true"># 主题</span>
canal.mq.topic<span class="token operator">=</span>example
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="启动mysql-x2F-canal"><a href="#启动mysql-x2F-canal" class="headerlink" title="启动mysql/canal"></a>启动mysql/canal</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 本地测试采用docker方式启动</span>
docker run -d --name mysql -p 3307:3306 -e MYSQL_ROOT_PASSWORD<span class="token operator">=</span>123456 -v <span class="token variable">$PWD</span>/mysqld.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf  hub.c.163.com/library/mysql:5.7

docker run -p 11111:11111 --name canal -d docker.io/canal/canal-server
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="编写canal-client"><a href="#编写canal-client" class="headerlink" title="编写canal-client"></a>编写canal-client</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>deri<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>canal<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>otter<span class="token punctuation">.</span>canal<span class="token punctuation">.</span>client<span class="token punctuation">.</span>CanalConnector<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>otter<span class="token punctuation">.</span>canal<span class="token punctuation">.</span>client<span class="token punctuation">.</span>CanalConnectors<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>otter<span class="token punctuation">.</span>canal<span class="token punctuation">.</span>protocol<span class="token punctuation">.</span>CanalEntry<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>otter<span class="token punctuation">.</span>canal<span class="token punctuation">.</span>protocol<span class="token punctuation">.</span>Message<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetSocketAddress<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @ClassName: Main
 * @Description: TODO
 * @Author: wuzhiyong
 * @Time: 2021/6/11 9:41
 * @Version: v1.0
 **/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>
        CanalConnector connector <span class="token operator">=</span> CanalConnectors<span class="token punctuation">.</span><span class="token function">newSingleConnector</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"192.168.41.128"</span><span class="token punctuation">,</span><span class="token number">11111</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"example"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> batchSize <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            connector<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            connector<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">".*\\..*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            connector<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                Message message <span class="token operator">=</span> connector<span class="token punctuation">.</span><span class="token function">getWithoutAck</span><span class="token punctuation">(</span>batchSize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取指定数量的数据</span>
                <span class="token keyword">long</span> batchId <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> size <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>batchId <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">// 没有变化,等一秒钟再去拉取数据</span>
                   Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token function">printEntry</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                connector<span class="token punctuation">.</span><span class="token function">ack</span><span class="token punctuation">(</span>batchId<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 提交确认</span>
                <span class="token comment" spellcheck="true">// connector.rollback(batchId); // 处理失败, 回滚数据</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            connector<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printEntry</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>CanalEntry<span class="token punctuation">.</span>Entry<span class="token operator">></span> entrys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>CanalEntry<span class="token punctuation">.</span>Entry entry <span class="token operator">:</span> entrys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getEntryType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> CanalEntry<span class="token punctuation">.</span>EntryType<span class="token punctuation">.</span>TRANSACTIONBEGIN <span class="token operator">||</span> entry<span class="token punctuation">.</span><span class="token function">getEntryType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> CanalEntry<span class="token punctuation">.</span>EntryType<span class="token punctuation">.</span>TRANSACTIONEND<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            CanalEntry<span class="token punctuation">.</span>RowChange rowChage <span class="token operator">=</span> null<span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                rowChage <span class="token operator">=</span> CanalEntry<span class="token punctuation">.</span>RowChange<span class="token punctuation">.</span><span class="token function">parseFrom</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getStoreValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"ERROR ## parser of eromanga-event has an error , data:"</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            CanalEntry<span class="token punctuation">.</span>EventType eventType <span class="token operator">=</span> rowChage<span class="token punctuation">.</span><span class="token function">getEventType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"================&amp;gt; binlog[%s:%s] , name[%s,%s] , eventType : %s"</span><span class="token punctuation">,</span>
                    entry<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLogfileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLogfileOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    entry<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSchemaName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    eventType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">for</span> <span class="token punctuation">(</span>CanalEntry<span class="token punctuation">.</span>RowData rowData <span class="token operator">:</span> rowChage<span class="token punctuation">.</span><span class="token function">getRowDatasList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>eventType <span class="token operator">==</span> CanalEntry<span class="token punctuation">.</span>EventType<span class="token punctuation">.</span>DELETE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">printColumn</span><span class="token punctuation">(</span>rowData<span class="token punctuation">.</span><span class="token function">getBeforeColumnsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>eventType <span class="token operator">==</span> CanalEntry<span class="token punctuation">.</span>EventType<span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">printColumn</span><span class="token punctuation">(</span>rowData<span class="token punctuation">.</span><span class="token function">getAfterColumnsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------&amp;gt; before"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">printColumn</span><span class="token punctuation">(</span>rowData<span class="token punctuation">.</span><span class="token function">getBeforeColumnsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------&amp;gt; after"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">printColumn</span><span class="token punctuation">(</span>rowData<span class="token punctuation">.</span><span class="token function">getAfterColumnsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printColumn</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>CanalEntry<span class="token punctuation">.</span>Column<span class="token operator">></span> columns<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>CanalEntry<span class="token punctuation">.</span>Column column <span class="token operator">:</span> columns<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>column<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> column<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"    update="</span> <span class="token operator">+</span> column<span class="token punctuation">.</span><span class="token function">getUpdated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h3><ul>
<li><a href="https://www.cnblogs.com/moris5013/p/12371549.html">https://www.cnblogs.com/moris5013/p/12371549.html</a></li>
<li><a href="https://blog.csdn.net/weixin_35852328/article/details/87600833">https://blog.csdn.net/weixin_35852328/article/details/87600833</a></li>
</ul>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>canal</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式存储</title>
    <url>/fen-bu-shi-cun-chu/</url>
    <content><![CDATA[<h3 id="CephFS"><a href="#CephFS" class="headerlink" title="CephFS"></a>CephFS</h3><h3 id="glusterfs"><a href="#glusterfs" class="headerlink" title="glusterfs"></a>glusterfs</h3><h3 id="rook"><a href="#rook" class="headerlink" title="rook"></a><a href="https://github.com/rook/rook">rook</a></h3>]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>分布式存储</tag>
      </tags>
  </entry>
  <entry>
    <title>内网穿透工具frp</title>
    <url>/nei-wang-chuan-tou-gong-ju-frp/</url>
    <content><![CDATA[<h3 id="内网穿透工具frp"><a href="#内网穿透工具frp" class="headerlink" title="内网穿透工具frp"></a>内网穿透工具frp</h3><p>通过在公网服务器部署 frp 服务端( <code>frps</code> )，内网部署 frp 客户端( <code>frpc</code> )，实现通过公网访问内网的服务.</p>
<h3 id="frp目录说明"><a href="#frp目录说明" class="headerlink" title="frp目录说明"></a>frp目录说明</h3><pre class="line-numbers language-conf"><code class="language-conf">├── frpc //客户端
├── frpc_full.ini
├── frpc.ini//客户端配置
├── frps//服务端
├── frps_full.ini
├── frps.ini//服务端配置
└── LICENSE
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul>
<li>frps.ini</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>common<span class="token punctuation">]</span>
<span class="token comment" spellcheck="true">#服务端口</span>
bind_port <span class="token operator">=</span> 7000
<span class="token comment" spellcheck="true">#监听地址</span>
<span class="token comment" spellcheck="true">#bind_addr = 0.0.0.0</span>

<span class="token comment" spellcheck="true">#认证token</span>
<span class="token comment" spellcheck="true">#token = big_cat</span>
<span class="token comment" spellcheck="true">#http服务端口</span>
vhost_http_port <span class="token operator">=</span> 7080
<span class="token comment" spellcheck="true">#https服务端口</span>
vhost_https_port <span class="token operator">=</span> 70443
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>frpc.ini</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>common<span class="token punctuation">]</span>
<span class="token comment" spellcheck="true">#frps的ip地址</span>
server_addr <span class="token operator">=</span> 114.114.114.114
<span class="token comment" spellcheck="true">#frps的端口</span>
server_port <span class="token operator">=</span> 7000
<span class="token comment" spellcheck="true">#认证token</span>
<span class="token comment" spellcheck="true">#token = big_cat</span>

<span class="token punctuation">[</span>web-01<span class="token punctuation">]</span>
<span class="token comment" spellcheck="true"># 远端服务器定义好了 http 服务的端口 这里不需要指定</span>
<span class="token comment" spellcheck="true"># 只需要指定 custom/sub_domains 用来做路由即可 </span>
<span class="token comment" spellcheck="true"># 如果只是代理一台 则指定服务端ip 使用ip访问即可</span>
<span class="token function">type</span> <span class="token operator">=</span> http
<span class="token comment" spellcheck="true">#本地http服务端口</span>
local_port <span class="token operator">=</span> 8081
<span class="token comment" spellcheck="true">#本地http服务地址</span>
local_ip <span class="token operator">=</span> 127.0.0.1
<span class="token comment" spellcheck="true"># 直接使用服务端的公网ip绑定（这样一个frps只能代理一个http客户端）</span>
<span class="token comment" spellcheck="true">#custom_domains = 118.118.118.118</span>
<span class="token comment" spellcheck="true"># 或者指定域名 可以使用其他域名继续绑定</span>
custom_domains <span class="token operator">=</span> frp1.com

<span class="token punctuation">[</span>web-02<span class="token punctuation">]</span>
<span class="token function">type</span> <span class="token operator">=</span> http
local_port <span class="token operator">=</span> 8082
<span class="token comment" spellcheck="true">#本地http服务地址</span>
local_ip <span class="token operator">=</span> 127.0.0.1
<span class="token comment" spellcheck="true"># 直接使用服务端的公网ip绑定（这样一个frps只能代理一个http客户端）</span>
<span class="token comment" spellcheck="true">#custom_domains = 118.118.118.118</span>
<span class="token comment" spellcheck="true"># 或者指定域名 可以使用其他域名继续绑定</span>
custom_domains <span class="token operator">=</span> frp2.com

<span class="token punctuation">[</span>ssh<span class="token punctuation">]</span>
<span class="token function">type</span> <span class="token operator">=</span> tcp
local_port <span class="token operator">=</span> 22
local_ip <span class="token operator">=</span> 127.0.0.1
<span class="token comment" spellcheck="true"># 在服务端注册端口 服务端将监听 7022 ssh root@118.118.118.118 -p 7022 即可代理到本机 ssh 登录</span>
remote_port <span class="token operator">=</span> 7022
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动服务端服务</span>
<span class="token function">nohup</span> ./frps -c ./frps.ini <span class="token operator">&amp;</span>
<span class="token comment" spellcheck="true"># 启动客户端服务</span>
<span class="token function">nohup</span> ./frpc -c ./frpc.ini <span class="token operator">&amp;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>注意: <code>http/https</code> 服务是在服务端配置中定义的端口，客户端指定协议后会自动关联，<code>ssh</code> 等使用 tcp 的则是在客户端定义好 <code>remote_port</code> ，服务端开放此端口即可。</p>
</blockquote>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>frp</tag>
      </tags>
  </entry>
  <entry>
    <title>加密数据如何进行模糊查询</title>
    <url>/jia-mi-shu-ju-ru-he-jin-xing-mo-hu-cha-xun/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>数据加密之后，如何进行模糊查询？</p>
<h2 id="解决办法-——-分词"><a href="#解决办法-——-分词" class="headerlink" title="解决办法 —— 分词"></a>解决办法 —— 分词</h2><p>如<code>abcdefghijklmn</code>按4个字符一组分词，则可分为</p>
<ul>
<li><code>abcd</code></li>
<li><code>bcde</code></li>
<li><code>cdef</code></li>
<li><code>defg</code></li>
<li><code>efgh</code></li>
<li><code>fghi</code></li>
<li>…</li>
</ul>
<p>分词后分别加密存储,模糊查询时就可以直接使用了.</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>华为云裸机k8s集群使用LoadBalancer</title>
    <url>/hua-wei-yun-luo-ji-k8s-ji-qun-shi-yong-loadbalancer/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>一般在机房或者云上使用<code>ECS</code>自建<code>Kubernetes</code>集群是无法使用<code>LoadBalancer</code>类型的<code>Service</code>。因为<code>Kubernetes</code>本身没有为裸机群集提供网络<code>负载均衡器</code>的实现。自建的<code>Kubernetes</code>集群暴露让外网访问，目前只能使用<code>NodePort</code>或<code>Ingress</code>等的方法进行服务暴露.<br>有没有方法，让自建的<code>Kubernetes</code>集群也能使用<code>LoadBalancer</code>类型的<code>Service</code>？这里使用<code>OPENELB</code>实现这个功能.</p>
<h3 id="OPENELB部署"><a href="#OPENELB部署" class="headerlink" title="OPENELB部署"></a>OPENELB部署</h3><ul>
<li><a href="https://porterlb.io/docs/getting-started/installation/">参考链接</a></li>
</ul>
<h3 id="OPENELB使用"><a href="#OPENELB使用" class="headerlink" title="OPENELB使用"></a>OPENELB使用</h3><ul>
<li><a href="https://porterlb.io/docs/getting-started/usage/">参考链接</a></li>
</ul>
<h3 id="两种模式"><a href="#两种模式" class="headerlink" title="两种模式"></a>两种模式</h3><ul>
<li>Layer 2 模式</li>
<li>BGP 模式</li>
</ul>
<h3 id="华为云使用"><a href="#华为云使用" class="headerlink" title="华为云使用"></a>华为云使用</h3><p><code>网络控制台</code> -&gt; <code>子网</code> -&gt; <code>选择自己的子网</code> -&gt; <code>IP地址管理</code> -&gt; <code>申请虚拟IP地址</code>.<br>申请好虚拟IP地址后,就可以在<code>OPENELB</code>创建<code>EIP池</code>时填上申请的<code>虚拟IP</code>.</p>
<blockquote>
<p>参考<code>Layer2</code>模式为<code>service</code>分配了IP后,在华为云上还只能在内网访问,如果想公网访问还需要为这个<code>虚拟IP</code>绑定<code>公网IP</code>并<code>绑定服务器网卡</code>.</p>
</blockquote>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>LoadBalancer</tag>
      </tags>
  </entry>
  <entry>
    <title>单选框表单提交</title>
    <url>/dan-xuan-kuang-biao-dan-ti-jiao/</url>
    <content><![CDATA[<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio-inline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>expire<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>checked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>6小时
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio-inline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>expire<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>12小时
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio-inline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>expire<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>1天
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio-inline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>expire<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>3天
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio-inline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>expire<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>7天
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>表单提交时如何获取用户选中了哪个单选框呢？</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> expire <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[name='expire']:checked"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>反向代理Nginx</title>
    <url>/fan-xiang-dai-li-nginx/</url>
    <content><![CDATA[<h3 id="正反代理"><a href="#正反代理" class="headerlink" title="正反代理"></a>正反代理</h3><p><code>正向代理</code>代理的是客户端，如国内访问国外网站，有防火墙限制，我们可以通过VPN去访问；</p>
<p><code>反向代理</code>代理的是服务器，如机房内多个后端服务，通过Nginx对外提供服务;</p>
<h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><ul>
<li>默认配置文件<code>nginx.conf</code></li>
</ul>
<h3 id="nginx单点问题"><a href="#nginx单点问题" class="headerlink" title="nginx单点问题"></a>nginx单点问题</h3><blockquote>
<p>可以结合<code>keepalived</code>解决单点问题</p>
</blockquote>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>国内提升github访问速度</title>
    <url>/guo-nei-ti-sheng-github-fang-wen-su-du/</url>
    <content><![CDATA[<h1 id="修改hosts文件"><a href="#修改hosts文件" class="headerlink" title="修改hosts文件"></a>修改hosts文件</h1><pre><code>151.101.72.133 assets-cdn.github.com
151.101.73.194 github.global.ssl.fastly.net
192.30.253.113 github.com
11.238.159.92 git.node5.mirror.et2sqa
</code></pre>
<blockquote>
<p>如果使用<code>Windows</code>系统，则是配置在<code>C:\Windows\System32\drivers\etc\hosts</code>文件中。<br>如果使用<code>Linux</code>系统，则是配置在的<code>/etc/hosts</code>文件中。</p>
</blockquote>
<h1 id="国内突然被墙了"><a href="#国内突然被墙了" class="headerlink" title="国内突然被墙了"></a>国内突然被墙了</h1><p><a href="https://github.com.ipaddress.com/www.github.com">https://github.com.ipaddress.com/www.github.com</a></p>
<p>返回上面的地址，获取<code>github.com</code>最新IP，填写到<code>hosts</code>文件中.</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><code>Domain</code></td>
<td><code>github.com</code></td>
</tr>
<tr>
<td><code>IP Address</code></td>
<td><code>140.82.112.4</code></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>中华人民共和国民法典</title>
    <url>/zhong-hua-ren-min-gong-he-guo-min-fa-dian/</url>
    <content><![CDATA[<h1 id="中华人民共和国民法典"><a href="#中华人民共和国民法典" class="headerlink" title="中华人民共和国民法典"></a>中华人民共和国民法典</h1><blockquote>
<p>2020年5月28日第十三届全国人民代表大会第三次会议通过</p>
</blockquote>
<h2 id="第一编-总则"><a href="#第一编-总则" class="headerlink" title="第一编　总则"></a>第一编　总则</h2><h4 id="第一章-基本规定"><a href="#第一章-基本规定" class="headerlink" title="第一章　基本规定"></a>第一章　基本规定</h4><ul>
<li>第一条　为了保护民事主体的合法权益，调整民事关系，维护社会和经济秩序，适应中国特色社会主义发展要求，弘扬社会主义核心价值观，根据宪法，制定本法。</li>
<li>第二条　民法调整平等主体的自然人、法人和非法人组织之间的人身关系和财产关系。</li>
<li>第三条　民事主体的人身权利、财产权利以及其他合法权益受法律保护，任何组织或者个人不得侵犯。</li>
<li>第四条　民事主体在民事活动中的法律地位一律平等。</li>
<li>第五条　民事主体从事民事活动，应当遵循自愿原则，按照自己的意思设立、变更、终止民事法律关系。</li>
<li>第六条　民事主体从事民事活动，应当遵循公平原则，合理确定各方的权利和义务。</li>
<li>第七条　民事主体从事民事活动，应当遵循诚信原则，秉持诚实，恪守承诺。</li>
<li>第八条　民事主体从事民事活动，不得违反法律，不得违背公序良俗。</li>
<li>第九条　民事主体从事民事活动，应当有利于节约资源、保护生态环境。</li>
<li>第十条　处理民事纠纷，应当依照法律；法律没有规定的，可以适用习惯，但是不得违背公序良俗。</li>
<li>第十一条　其他法律对民事关系有特别规定的，依照其规定。</li>
<li>第十二条　中华人民共和国领域内的民事活动，适用中华人民共和国法律。法律另有规定的，依照其规定。</li>
</ul>
<h4 id="第二章-自然人"><a href="#第二章-自然人" class="headerlink" title="第二章　自然人"></a>第二章　自然人</h4><p>第一节　民事权利能力和民事行为能力</p>
<ul>
<li>第十三条　自然人从出生时起到死亡时止，具有民事权利能力，依法享有民事权利，承担民事义务。</li>
<li>第十四条　自然人的民事权利能力一律平等。</li>
<li>第十五条　自然人的出生时间和死亡时间，以出生证明、死亡证明记载的时间为准；没有出生证明、死亡证明的，以户籍登记或者其他有效身份登记记载的时间为准。有其他证据足以推翻以上记载时间的，以该证据证明的时间为准。</li>
<li>第十六条　涉及遗产继承、接受赠与等胎儿利益保护的，胎儿视为具有民事权利能力。但是，胎儿娩出时为死体的，其民事权利能力自始不存在。</li>
<li>第十七条　十八周岁以上的自然人为成年人。不满十八周岁的自然人为未成年人。</li>
<li>第十八条　成年人为完全民事行为能力人，可以独立实施民事法律行为。<br>十六周岁以上的未成年人，以自己的劳动收入为主要生活来源的，视为完全民事行为能力人。</li>
<li>第十九条　八周岁以上的未成年人为限制民事行为能力人，实施民事法律行为由其法定代理人代理或者经其法定代理人同意、追认；但是，可以独立实施纯获利益的民事法律行为或者与其年龄、智力相适应的民事法律行为。</li>
<li>第二十条　不满八周岁的未成年人为无民事行为能力人，由其法定代理人代理实施民事法律行为。</li>
<li>第二十一条　不能辨认自己行为的成年人为无民事行为能力人，由其法定代理人代理实施民事法律行为。<br>八周岁以上的未成年人不能辨认自己行为的，适用前款规定。</li>
<li>第二十二条　不能完全辨认自己行为的成年人为限制民事行为能力人，实施民事法律行为由其法定代理人代理或者经其法定代理人同意、追认；但是，可以独立实施纯获利益的民事法律行为或者与其智力、精神健康状况相适应的民事法律行为。</li>
<li>第二十三条　无民事行为能力人、限制民事行为能力人的监护人是其法定代理人。</li>
<li>第二十四条　不能辨认或者不能完全辨认自己行为的成年人，其利害关系人或者有关组织，可以向人民法院申请认定该成年人为无民事行为能力人或者限制民事行为能力人。<br>被人民法院认定为无民事行为能力人或者限制民事行为能力人的，经本人、利害关系人或者有关组织申请，人民法院可以根据其智力、精神健康恢复的状况，认定该成年人恢复为限制民事行为能力人或者完全民事行为能力人。<br>本条规定的有关组织包括：居民委员会、村民委员会、学校、医疗机构、妇女联合会、残疾人联合会、依法设立的老年人组织、民政部门等。</li>
<li>第二十五条　自然人以户籍登记或者其他有效身份登记记载的居所为住所；经常居所与住所不一致的，经常居所视为住所。<br>第二节　监护</li>
<li>第二十六条　父母对未成年子女负有抚养、教育和保护的义务。<br>成年子女对父母负有赡养、扶助和保护的义务。</li>
<li>第二十七条　父母是未成年子女的监护人。<br>未成年人的父母已经死亡或者没有监护能力的，由下列有监护能力的人按顺序担任监护人：<blockquote>
<ul>
<li>（一）祖父母、外祖父母；</li>
<li>（二）兄、姐；</li>
<li>（三）其他愿意担任监护人的个人或者组织，但是须经未成年人住所地的居民委员会、村民委员会或者民政部门同意。</li>
</ul>
</blockquote>
</li>
<li>第二十八条　无民事行为能力或者限制民事行为能力的成年人，由下列有监护能力的人按顺序担任监护人：<blockquote>
<ul>
<li>（一）配偶；</li>
<li>（二）父母、子女；</li>
<li>（三）其他近亲属；</li>
<li>（四）其他愿意担任监护人的个人或者组织，但是须经被监护人住所地的居民委员会、村民委员会或者民政部门同意。</li>
</ul>
</blockquote>
</li>
<li>第二十九条　被监护人的父母担任监护人的，可以通过遗嘱指定监护人。</li>
<li>第三十条　依法具有监护资格的人之间可以协议确定监护人。协议确定监护人应当尊重被监护人的真实意愿。</li>
<li>第三十一条　对监护人的确定有争议的，由被监护人住所地的居民委员会、村民委员会或者民政部门指定监护人，有关当事人对指定不服的，可以向人民法院申请指定监护人；有关当事人也可以直接向人民法院申请指定监护人。<br>居民委员会、村民委员会、民政部门或者人民法院应当尊重被监护人的真实意愿，按照最有利于被监护人的原则在依法具有监护资格的人中指定监护人。<br>依据本条第一款规定指定监护人前，被监护人的人身权利、财产权利以及其他合法权益处于无人保护状态的，由被监护人住所地的居民委员会、村民委员会、法律规定的有关组织或者民政部门担任临时监护人。<br>监护人被指定后，不得擅自变更；擅自变更的，不免除被指定的监护人的责任。</li>
<li>第三十二条　没有依法具有监护资格的人的，监护人由民政部门担任，也可以由具备履行监护职责条件的被监护人住所地的居民委员会、村民委员会担任。</li>
<li>第三十三条　具有完全民事行为能力的成年人，可以与其近亲属、其他愿意担任监护人的个人或者组织事先协商，以书面形式确定自己的监护人，在自己丧失或者部分丧失民事行为能力时，由该监护人履行监护职责。</li>
<li>第三十四条　监护人的职责是代理被监护人实施民事法律行为，保护被监护人的人身权利、财产权利以及其他合法权益等。<br>监护人依法履行监护职责产生的权利，受法律保护。<br>监护人不履行监护职责或者侵害被监护人合法权益的，应当承担法律责任。<br>因发生突发事件等紧急情况，监护人暂时无法履行监护职责，被监护人的生活处于无人照料状态的，被监护人住所地的居民委员会、村民委员会或者民政部门应当为被监护人安排必要的临时生活照料措施。</li>
<li>第三十五条　监护人应当按照最有利于被监护人的原则履行监护职责。监护人除为维护被监护人利益外，不得处分被监护人的财产。<br>未成年人的监护人履行监护职责，在作出与被监护人利益有关的决定时，应当根据被监护人的年龄和智力状况，尊重被监护人的真实意愿。<br>成年人的监护人履行监护职责，应当最大程度地尊重被监护人的真实意愿，保障并协助被监护人实施与其智力、精神健康状况相适应的民事法律行为。对被监护人有能力独立处理的事务，监护人不得干涉。</li>
<li>第三十六条　监护人有下列情形之一的，人民法院根据有关个人或者组织的申请，撤销其监护人资格，安排必要的临时监护措施，并按照最有利于被监护人的原则依法指定监护人：<blockquote>
<ul>
<li>（一）实施严重损害被监护人身心健康的行为；</li>
<li>（二）怠于履行监护职责，或者无法履行监护职责且拒绝将监护职责部分或者全部委托给他人，导致被监护人处于危困状态；</li>
<li>（三）实施严重侵害被监护人合法权益的其他行为。<br>本条规定的有关个人、组织包括：其他依法具有监护资格的人，居民委员会、村民委员会、学校、医疗机构、妇女联合会、残疾人联合会、未成年人保护组织、依法设立的老年人组织、民政部门等。<br>前款规定的个人和民政部门以外的组织未及时向人民法院申请撤销监护人资格的，民政部门应当向人民法院申请。</li>
</ul>
</blockquote>
</li>
<li>第三十七条　依法负担被监护人抚养费、赡养费、扶养费的父母、子女、配偶等，被人民法院撤销监护人资格后，应当继续履行负担的义务。</li>
<li>第三十八条　被监护人的父母或者子女被人民法院撤销监护人资格后，除对被监护人实施故意犯罪的外，确有悔改表现的，经其申请，人民法院可以在尊重被监护人真实意愿的前提下，视情况恢复其监护人资格，人民法院指定的监护人与被监护人的监护关系同时终止。</li>
<li>第三十九条　有下列情形之一的，监护关系终止：<blockquote>
<ul>
<li>（一）被监护人取得或者恢复完全民事行为能力；</li>
<li>（二）监护人丧失监护能力；</li>
<li>（三）被监护人或者监护人死亡；</li>
<li>（四）人民法院认定监护关系终止的其他情形。<br>监护关系终止后，被监护人仍然需要监护的，应当依法另行确定监护人。<br>第三节　宣告失踪和宣告死亡</li>
</ul>
</blockquote>
</li>
<li>第四十条　自然人下落不明满二年的，利害关系人可以向人民法院申请宣告该自然人为失踪人。</li>
<li>第四十一条　自然人下落不明的时间自其失去音讯之日起计算。战争期间下落不明的，下落不明的时间自战争结束之日或者有关机关确定的下落不明之日起计算。</li>
<li>第四十二条　失踪人的财产由其配偶、成年子女、父母或者其他愿意担任财产代管人的人代管。<br>代管有争议，没有前款规定的人，或者前款规定的人无代管能力的，由人民法院指定的人代管。</li>
<li>第四十三条　财产代管人应当妥善管理失踪人的财产，维护其财产权益。<br>失踪人所欠税款、债务和应付的其他费用，由财产代管人从失踪人的财产中支付。<br>财产代管人因故意或者重大过失造成失踪人财产损失的，应当承担赔偿责任。</li>
<li>第四十四条　财产代管人不履行代管职责、侵害失踪人财产权益或者丧失代管能力的，失踪人的利害关系人可以向人民法院申请变更财产代管人。<br>财产代管人有正当理由的，可以向人民法院申请变更财产代管人。<br>人民法院变更财产代管人的，变更后的财产代管人有权请求原财产代管人及时移交有关财产并报告财产代管情况。</li>
<li>第四十五条　失踪人重新出现，经本人或者利害关系人申请，人民法院应当撤销失踪宣告。<br>失踪人重新出现，有权请求财产代管人及时移交有关财产并报告财产代管情况。</li>
<li>第四十六条　自然人有下列情形之一的，利害关系人可以向人民法院申请宣告该自然人死亡：<blockquote>
<ul>
<li>（一）下落不明满四年；</li>
<li>（二）因意外事件，下落不明满二年。<br>因意外事件下落不明，经有关机关证明该自然人不可能生存的，申请宣告死亡不受二年时间的限制。</li>
</ul>
</blockquote>
</li>
<li>第四十七条　对同一自然人，有的利害关系人申请宣告死亡，有的利害关系人申请宣告失踪，符合本法规定的宣告死亡条件的，人民法院应当宣告死亡。</li>
<li>第四十八条　被宣告死亡的人，人民法院宣告死亡的判决作出之日视为其死亡的日期；因意外事件下落不明宣告死亡的，意外事件发生之日视为其死亡的日期。</li>
<li>第四十九条　自然人被宣告死亡但是并未死亡的，不影响该自然人在被宣告死亡期间实施的民事法律行为的效力。</li>
<li>第五十条　被宣告死亡的人重新出现，经本人或者利害关系人申请，人民法院应当撤销死亡宣告。</li>
<li>第五十一条　被宣告死亡的人的婚姻关系，自死亡宣告之日起消除。死亡宣告被撤销的，婚姻关系自撤销死亡宣告之日起自行恢复。但是，其配偶再婚或者向婚姻登记机关书面声明不愿意恢复的除外。</li>
<li>第五十二条　被宣告死亡的人在被宣告死亡期间，其子女被他人依法收养的，在死亡宣告被撤销后，不得以未经本人同意为由主张收养行为无效。</li>
<li>第五十三条　被撤销死亡宣告的人有权请求依照本法第六编取得其财产的民事主体返还财产；无法返还的，应当给予适当补偿。<br>利害关系人隐瞒真实情况，致使他人被宣告死亡而取得其财产的，除应当返还财产外，还应当对由此造成的损失承担赔偿责任。<br>第四节　个体工商户和农村承包经营户</li>
<li>第五十四条　自然人从事工商业经营，经依法登记，为个体工商户。个体工商户可以起字号。</li>
<li>第五十五条　农村集体经济组织的成员，依法取得农村土地承包经营权，从事家庭承包经营的，为农村承包经营户。</li>
<li>第五十六条　个体工商户的债务，个人经营的，以个人财产承担；家庭经营的，以家庭财产承担；无法区分的，以家庭财产承担。<br>农村承包经营户的债务，以从事农村土地承包经营的农户财产承担；事实上由农户部分成员经营的，以该部分成员的财产承担。</li>
</ul>
<h4 id="第三章-法人"><a href="#第三章-法人" class="headerlink" title="第三章　法人"></a>第三章　法人</h4><p>第一节　一般规定</p>
<ul>
<li>第五十七条　法人是具有民事权利能力和民事行为能力，依法独立享有民事权利和承担民事义务的组织。</li>
<li>第五十八条　法人应当依法成立。<br>法人应当有自己的名称、组织机构、住所、财产或者经费。法人成立的具体条件和程序，依照法律、行政法规的规定。<br>设立法人，法律、行政法规规定须经有关机关批准的，依照其规定。</li>
<li>第五十九条　法人的民事权利能力和民事行为能力，从法人成立时产生，到法人终止时消灭。</li>
<li>第六十条　法人以其全部财产独立承担民事责任。</li>
<li>第六十一条　依照法律或者法人章程的规定，代表法人从事民事活动的负责人，为法人的法定代表人。<br>法定代表人以法人名义从事的民事活动，其法律后果由法人承受。<br>法人章程或者法人权力机构对法定代表人代表权的限制，不得对抗善意相对人。</li>
<li>第六十二条　法定代表人因执行职务造成他人损害的，由法人承担民事责任。<br>法人承担民事责任后，依照法律或者法人章程的规定，可以向有过错的法定代表人追偿。</li>
<li>第六十三条　法人以其主要办事机构所在地为住所。依法需要办理法人登记的，应当将主要办事机构所在地登记为住所。</li>
<li>第六十四条　法人存续期间登记事项发生变化的，应当依法向登记机关申请变更登记。</li>
<li>第六十五条　法人的实际情况与登记的事项不一致的，不得对抗善意相对人。</li>
<li>第六十六条　登记机关应当依法及时公示法人登记的有关信息。</li>
<li>第六十七条　法人合并的，其权利和义务由合并后的法人享有和承担。<br>法人分立的，其权利和义务由分立后的法人享有连带债权，承担连带债务，但是债权人和债务人另有约定的除外。</li>
<li>第六十八条　有下列原因之一并依法完成清算、注销登记的，法人终止：<blockquote>
<ul>
<li>（一）法人解散；</li>
<li>（二）法人被宣告破产；</li>
<li>（三）法律规定的其他原因。<br>法人终止，法律、行政法规规定须经有关机关批准的，依照其规定。</li>
</ul>
</blockquote>
</li>
<li>第六十九条　有下列情形之一的，法人解散：<blockquote>
<ul>
<li>（一）法人章程规定的存续期间届满或者法人章程规定的其他解散事由出现；</li>
<li>（二）法人的权力机构决议解散；</li>
<li>（三）因法人合并或者分立需要解散；</li>
<li>（四）法人依法被吊销营业执照、登记证书，被责令关闭或者被撤销；</li>
<li>（五）法律规定的其他情形。</li>
</ul>
</blockquote>
</li>
<li>第七十条　法人解散的，除合并或者分立的情形外，清算义务人应当及时组成清算组进行清算。<br>法人的董事、理事等执行机构或者决策机构的成员为清算义务人。法律、行政法规另有规定的，依照其规定。<br>清算义务人未及时履行清算义务，造成损害的，应当承担民事责任；主管机关或者利害关系人可以申请人民法院指定有关人员组成清算组进行清算。</li>
<li>第七十一条　法人的清算程序和清算组职权，依照有关法律的规定；没有规定的，参照适用公司法律的有关规定。</li>
<li>第七十二条　清算期间法人存续，但是不得从事与清算无关的活动。<br>法人清算后的剩余财产，按照法人章程的规定或者法人权力机构的决议处理。法律另有规定的，依照其规定。<br>清算结束并完成法人注销登记时，法人终止；依法不需要办理法人登记的，清算结束时，法人终止。</li>
<li>第七十三条　法人被宣告破产的，依法进行破产清算并完成法人注销登记时，法人终止。</li>
<li>第七十四条　法人可以依法设立分支机构。法律、行政法规规定分支机构应当登记的，依照其规定。<br>分支机构以自己的名义从事民事活动，产生的民事责任由法人承担；也可以先以该分支机构管理的财产承担，不足以承担的，由法人承担。</li>
<li>第七十五条　设立人为设立法人从事的民事活动，其法律后果由法人承受；法人未成立的，其法律后果由设立人承受，设立人为二人以上的，享有连带债权，承担连带债务。<br>设立人为设立法人以自己的名义从事民事活动产生的民事责任，第三人有权选择请求法人或者设立人承担。<br>第二节　营利法人</li>
<li>第七十六条　以取得利润并分配给股东等出资人为目的成立的法人，为营利法人。<br>营利法人包括有限责任公司、股份有限公司和其他企业法人等。</li>
<li>第七十七条　营利法人经依法登记成立。</li>
<li>第七十八条　依法设立的营利法人，由登记机关发给营利法人营业执照。营业执照签发日期为营利法人的成立日期。</li>
<li>第七十九条　设立营利法人应当依法制定法人章程。</li>
<li>第八十条　营利法人应当设权力机构。<br>权力机构行使修改法人章程，选举或者更换执行机构、监督机构成员，以及法人章程规定的其他职权。</li>
<li>第八十一条　营利法人应当设执行机构。<br>执行机构行使召集权力机构会议，决定法人的经营计划和投资方案，决定法人内部管理机构的设置，以及法人章程规定的其他职权。<br>执行机构为董事会或者执行董事的，董事长、执行董事或者经理按照法人章程的规定担任法定代表人；未设董事会或者执行董事的，法人章程规定的主要负责人为其执行机构和法定代表人。</li>
<li>第八十二条　营利法人设监事会或者监事等监督机构的，监督机构依法行使检查法人财务，监督执行机构成员、高级管理人员执行法人职务的行为，以及法人章程规定的其他职权。</li>
<li>第八十三条　营利法人的出资人不得滥用出资人权利损害法人或者其他出资人的利益；滥用出资人权利造成法人或者其他出资人损失的，应当依法承担民事责任。<br>营利法人的出资人不得滥用法人独立地位和出资人有限责任损害法人债权人的利益；滥用法人独立地位和出资人有限责任，逃避债务，严重损害法人债权人的利益的，应当对法人债务承担连带责任。</li>
<li>第八十四条　营利法人的控股出资人、实际控制人、董事、监事、高级管理人员不得利用其关联关系损害法人的利益；利用关联关系造成法人损失的，应当承担赔偿责任。</li>
<li>第八十五条　营利法人的权力机构、执行机构作出决议的会议召集程序、表决方式违反法律、行政法规、法人章程，或者决议内容违反法人章程的，营利法人的出资人可以请求人民法院撤销该决议。但是，营利法人依据该决议与善意相对人形成的民事法律关系不受影响。</li>
<li>第八十六条　营利法人从事经营活动，应当遵守商业道德，维护交易安全，接受政府和社会的监督，承担社会责任。<br>第三节　非营利法人</li>
<li>第八十七条　为公益目的或者其他非营利目的成立，不向出资人、设立人或者会员分配所取得利润的法人，为非营利法人。<br>非营利法人包括事业单位、社会团体、基金会、社会服务机构等。</li>
<li>第八十八条　具备法人条件，为适应经济社会发展需要，提供公益服务设立的事业单位，经依法登记成立，取得事业单位法人资格；依法不需要办理法人登记的，从成立之日起，具有事业单位法人资格。</li>
<li>第八十九条　事业单位法人设理事会的，除法律另有规定外，理事会为其决策机构。事业单位法人的法定代表人依照法律、行政法规或者法人章程的规定产生。</li>
<li>第九十条　具备法人条件，基于会员共同意愿，为公益目的或者会员共同利益等非营利目的设立的社会团体，经依法登记成立，取得社会团体法人资格；依法不需要办理法人登记的，从成立之日起，具有社会团体法人资格。</li>
<li>第九十一条　设立社会团体法人应当依法制定法人章程。<br>社会团体法人应当设会员大会或者会员代表大会等权力机构。<br>社会团体法人应当设理事会等执行机构。理事长或者会长等负责人按照法人章程的规定担任法定代表人。</li>
<li>第九十二条　具备法人条件，为公益目的以捐助财产设立的基金会、社会服务机构等，经依法登记成立，取得捐助法人资格。<br>依法设立的宗教活动场所，具备法人条件的，可以申请法人登记，取得捐助法人资格。法律、行政法规对宗教活动场所有规定的，依照其规定。</li>
<li>第九十三条　设立捐助法人应当依法制定法人章程。<br>捐助法人应当设理事会、民主管理组织等决策机构，并设执行机构。理事长等负责人按照法人章程的规定担任法定代表人。<br>捐助法人应当设监事会等监督机构。</li>
<li>第九十四条　捐助人有权向捐助法人查询捐助财产的使用、管理情况，并提出意见和建议，捐助法人应当及时、如实答复。<br>捐助法人的决策机构、执行机构或者法定代表人作出决定的程序违反法律、行政法规、法人章程，或者决定内容违反法人章程的，捐助人等利害关系人或者主管机关可以请求人民法院撤销该决定。但是，捐助法人依据该决定与善意相对人形成的民事法律关系不受影响。</li>
<li>第九十五条　为公益目的成立的非营利法人终止时，不得向出资人、设立人或者会员分配剩余财产。剩余财产应当按照法人章程的规定或者权力机构的决议用于公益目的；无法按照法人章程的规定或者权力机构的决议处理的，由主管机关主持转给宗旨相同或者相近的法人，并向社会公告。<br>第四节　特别法人</li>
<li>第九十六条　本节规定的机关法人、农村集体经济组织法人、城镇农村的合作经济组织法人、基层群众性自治组织法人，为特别法人。</li>
<li>第九十七条　有独立经费的机关和承担行政职能的法定机构从成立之日起，具有机关法人资格，可以从事为履行职能所需要的民事活动。</li>
<li>第九十八条　机关法人被撤销的，法人终止，其民事权利和义务由继任的机关法人享有和承担；没有继任的机关法人的，由作出撤销决定的机关法人享有和承担。</li>
<li>第九十九条　农村集体经济组织依法取得法人资格。<br>法律、行政法规对农村集体经济组织有规定的，依照其规定。</li>
<li>第一百条　城镇农村的合作经济组织依法取得法人资格。<br>法律、行政法规对城镇农村的合作经济组织有规定的，依照其规定。</li>
<li>第一百零一条　居民委员会、村民委员会具有基层群众性自治组织法人资格，可以从事为履行职能所需要的民事活动。<br>未设立村集体经济组织的，村民委员会可以依法代行村集体经济组织的职能。</li>
</ul>
<h4 id="第四章-非法人组织"><a href="#第四章-非法人组织" class="headerlink" title="第四章　非法人组织"></a>第四章　非法人组织</h4><ul>
<li>第一百零二条　非法人组织是不具有法人资格，但是能够依法以自己的名义从事民事活动的组织。<br>非法人组织包括个人独资企业、合伙企业、不具有法人资格的专业服务机构等。</li>
<li>第一百零三条　非法人组织应当依照法律的规定登记。<br>设立非法人组织，法律、行政法规规定须经有关机关批准的，依照其规定。</li>
<li>第一百零四条　非法人组织的财产不足以清偿债务的，其出资人或者设立人承担无限责任。法律另有规定的，依照其规定。</li>
<li>第一百零五条　非法人组织可以确定一人或者数人代表该组织从事民事活动。</li>
<li>第一百零六条　有下列情形之一的，非法人组织解散：<blockquote>
<ul>
<li>（一）章程规定的存续期间届满或者章程规定的其他解散事由出现；</li>
<li>（二）出资人或者设立人决定解散；</li>
<li>（三）法律规定的其他情形。</li>
</ul>
</blockquote>
</li>
<li>第一百零七条　非法人组织解散的，应当依法进行清算。</li>
<li>第一百零八条　非法人组织除适用本章规定外，参照适用本编第三章第一节的有关规定。</li>
</ul>
<h4 id="第五章-民事权利"><a href="#第五章-民事权利" class="headerlink" title="第五章　民事权利"></a>第五章　民事权利</h4><ul>
<li>第一百零九条　自然人的人身自由、人格尊严受法律保护。</li>
<li>第一百一十条　自然人享有生命权、身体权、健康权、姓名权、肖像权、名誉权、荣誉权、隐私权、婚姻自主权等权利。<br>法人、非法人组织享有名称权、名誉权和荣誉权。</li>
<li>第一百一十一条　自然人的个人信息受法律保护。任何组织或者个人需要获取他人个人信息的，应当依法取得并确保信息安全，不得非法收集、使用、加工、传输他人个人信息，不得非法买卖、提供或者公开他人个人信息。</li>
<li>第一百一十二条　自然人因婚姻家庭关系等产生的人身权利受法律保护。</li>
<li>第一百一十三条　民事主体的财产权利受法律平等保护。</li>
<li>第一百一十四条　民事主体依法享有物权。<br>物权是权利人依法对特定的物享有直接支配和排他的权利，包括所有权、用益物权和担保物权。</li>
<li>第一百一十五条　物包括不动产和动产。法律规定权利作为物权客体的，依照其规定。</li>
<li>第一百一十六条　物权的种类和内容，由法律规定。</li>
<li>第一百一十七条　为了公共利益的需要，依照法律规定的权限和程序征收、征用不动产或者动产的，应当给予公平、合理的补偿。</li>
<li>第一百一十八条　民事主体依法享有债权。<br>债权是因合同、侵权行为、无因管理、不当得利以及法律的其他规定，权利人请求特定义务人为或者不为一定行为的权利。</li>
<li>第一百一十九条　依法成立的合同，对当事人具有法律约束力。</li>
<li>第一百二十条　民事权益受到侵害的，被侵权人有权请求侵权人承担侵权责任。</li>
<li>第一百二十一条　没有法定的或者约定的义务，为避免他人利益受损失而进行管理的人，有权请求受益人偿还由此支出的必要费用。</li>
<li>第一百二十二条　因他人没有法律根据，取得不当利益，受损失的人有权请求其返还不当利益。</li>
<li>第一百二十三条　民事主体依法享有知识产权。<br>知识产权是权利人依法就下列客体享有的专有的权利：<blockquote>
<ul>
<li>（一）作品；</li>
<li>（二）发明、实用新型、外观设计；</li>
<li>（三）商标；</li>
<li>（四）地理标志；</li>
<li>（五）商业秘密；</li>
<li>（六）集成电路布图设计；</li>
<li>（七）植物新品种；</li>
<li>（八）法律规定的其他客体。</li>
</ul>
</blockquote>
</li>
<li>第一百二十四条　自然人依法享有继承权。<br>自然人合法的私有财产，可以依法继承。</li>
<li>第一百二十五条　民事主体依法享有股权和其他投资性权利。</li>
<li>第一百二十六条　民事主体享有法律规定的其他民事权利和利益。</li>
<li>第一百二十七条　法律对数据、网络虚拟财产的保护有规定的，依照其规定。</li>
<li>第一百二十八条　法律对未成年人、老年人、残疾人、妇女、消费者等的民事权利保护有特别规定的，依照其规定。</li>
<li>第一百二十九条　民事权利可以依据民事法律行为、事实行为、法律规定的事件或者法律规定的其他方式取得。</li>
<li>第一百三十条　民事主体按照自己的意愿依法行使民事权利，不受干涉。</li>
<li>第一百三十一条　民事主体行使权利时，应当履行法律规定的和当事人约定的义务。</li>
<li>第一百三十二条　民事主体不得滥用民事权利损害国家利益、社会公共利益或者他人合法权益。</li>
</ul>
<h4 id="第六章-民事法律行为"><a href="#第六章-民事法律行为" class="headerlink" title="第六章　民事法律行为"></a>第六章　民事法律行为</h4><p>第一节　一般规定</p>
<ul>
<li>第一百三十三条　民事法律行为是民事主体通过意思表示设立、变更、终止民事法律关系的行为。</li>
<li>第一百三十四条　民事法律行为可以基于双方或者多方的意思表示一致成立，也可以基于单方的意思表示成立。<br>法人、非法人组织依照法律或者章程规定的议事方式和表决程序作出决议的，该决议行为成立。</li>
<li>第一百三十五条　民事法律行为可以采用书面形式、口头形式或者其他形式；法律、行政法规规定或者当事人约定采用特定形式的，应当采用特定形式。</li>
<li>第一百三十六条　民事法律行为自成立时生效，但是法律另有规定或者当事人另有约定的除外。<br>行为人非依法律规定或者未经对方同意，不得擅自变更或者解除民事法律行为。<br>第二节　意思表示</li>
<li>第一百三十七条　以对话方式作出的意思表示，相对人知道其内容时生效。<br>以非对话方式作出的意思表示，到达相对人时生效。以非对话方式作出的采用数据电文形式的意思表示，相对人指定特定系统接收数据电文的，该数据电文进入该特定系统时生效；未指定特定系统的，相对人知道或者应当知道该数据电文进入其系统时生效。当事人对采用数据电文形式的意思表示的生效时间另有约定的，按照其约定。</li>
<li>第一百三十八条　无相对人的意思表示，表示完成时生效。法律另有规定的，依照其规定。</li>
<li>第一百三十九条　以公告方式作出的意思表示，公告发布时生效。</li>
<li>第一百四十条　行为人可以明示或者默示作出意思表示。<br>沉默只有在有法律规定、当事人约定或者符合当事人之间的交易习惯时，才可以视为意思表示。</li>
<li>第一百四十一条　行为人可以撤回意思表示。撤回意思表示的通知应当在意思表示到达相对人前或者与意思表示同时到达相对人。</li>
<li>第一百四十二条　有相对人的意思表示的解释，应当按照所使用的词句，结合相关条款、行为的性质和目的、习惯以及诚信原则，确定意思表示的含义。<br>无相对人的意思表示的解释，不能完全拘泥于所使用的词句，而应当结合相关条款、行为的性质和目的、习惯以及诚信原则，确定行为人的真实意思。<br>第三节　民事法律行为的效力</li>
<li>第一百四十三条　具备下列条件的民事法律行为有效：<blockquote>
<ul>
<li>（一）行为人具有相应的民事行为能力；</li>
<li>（二）意思表示真实；</li>
<li>（三）不违反法律、行政法规的强制性规定，不违背公序良俗。</li>
</ul>
</blockquote>
</li>
<li>第一百四十四条　无民事行为能力人实施的民事法律行为无效。</li>
<li>第一百四十五条　限制民事行为能力人实施的纯获利益的民事法律行为或者与其年龄、智力、精神健康状况相适应的民事法律行为有效；实施的其他民事法律行为经法定代理人同意或者追认后有效。<br>相对人可以催告法定代理人自收到通知之日起三十日内予以追认。法定代理人未作表示的，视为拒绝追认。民事法律行为被追认前，善意相对人有撤销的权利。撤销应当以通知的方式作出。</li>
<li>第一百四十六条　行为人与相对人以虚假的意思表示实施的民事法律行为无效。<br>以虚假的意思表示隐藏的民事法律行为的效力，依照有关法律规定处理。</li>
<li>第一百四十七条　基于重大误解实施的民事法律行为，行为人有权请求人民法院或者仲裁机构予以撤销。</li>
<li>第一百四十八条　一方以欺诈手段，使对方在违背真实意思的情况下实施的民事法律行为，受欺诈方有权请求人民法院或者仲裁机构予以撤销。</li>
<li>第一百四十九条　第三人实施欺诈行为，使一方在违背真实意思的情况下实施的民事法律行为，对方知道或者应当知道该欺诈行为的，受欺诈方有权请求人民法院或者仲裁机构予以撤销。</li>
<li>第一百五十条　一方或者第三人以胁迫手段，使对方在违背真实意思的情况下实施的民事法律行为，受胁迫方有权请求人民法院或者仲裁机构予以撤销。</li>
<li>第一百五十一条　一方利用对方处于危困状态、缺乏判断能力等情形，致使民事法律行为成立时显失公平的，受损害方有权请求人民法院或者仲裁机构予以撤销。</li>
<li>第一百五十二条　有下列情形之一的，撤销权消灭：<blockquote>
<ul>
<li>（一）当事人自知道或者应当知道撤销事由之日起一年内、重大误解的当事人自知道或者应当知道撤销事由之日起九十日内没有行使撤销权；</li>
<li>（二）当事人受胁迫，自胁迫行为终止之日起一年内没有行使撤销权；</li>
<li>（三）当事人知道撤销事由后明确表示或者以自己的行为表明放弃撤销权。<br>当事人自民事法律行为发生之日起五年内没有行使撤销权的，撤销权消灭。</li>
</ul>
</blockquote>
</li>
<li>第一百五十三条　违反法律、行政法规的强制性规定的民事法律行为无效。但是，该强制性规定不导致该民事法律行为无效的除外。<br>违背公序良俗的民事法律行为无效。</li>
<li>第一百五十四条　行为人与相对人恶意串通，损害他人合法权益的民事法律行为无效。</li>
<li>第一百五十五条　无效的或者被撤销的民事法律行为自始没有法律约束力。</li>
<li>第一百五十六条　民事法律行为部分无效，不影响其他部分效力的，其他部分仍然有效。</li>
<li>第一百五十七条　民事法律行为无效、被撤销或者确定不发生效力后，行为人因该行为取得的财产，应当予以返还；不能返还或者没有必要返还的，应当折价补偿。有过错的一方应当赔偿对方由此所受到的损失；各方都有过错的，应当各自承担相应的责任。法律另有规定的，依照其规定。<br>第四节　民事法律行为的附条件和附期限</li>
<li>第一百五十八条　民事法律行为可以附条件，但是根据其性质不得附条件的除外。附生效条件的民事法律行为，自条件成就时生效。附解除条件的民事法律行为，自条件成就时失效。</li>
<li>第一百五十九条　附条件的民事法律行为，当事人为自己的利益不正当地阻止条件成就的，视为条件已经成就；不正当地促成条件成就的，视为条件不成就。</li>
<li>第一百六十条　民事法律行为可以附期限，但是根据其性质不得附期限的除外。附生效期限的民事法律行为，自期限届至时生效。附终止期限的民事法律行为，自期限届满时失效。</li>
</ul>
<h4 id="第七章-代理"><a href="#第七章-代理" class="headerlink" title="第七章　代理"></a>第七章　代理</h4><p>第一节　一般规定</p>
<ul>
<li>第一百六十一条　民事主体可以通过代理人实施民事法律行为。<br>依照法律规定、当事人约定或者民事法律行为的性质，应当由本人亲自实施的民事法律行为，不得代理。</li>
<li>第一百六十二条　代理人在代理权限内，以被代理人名义实施的民事法律行为，对被代理人发生效力。</li>
<li>第一百六十三条　代理包括委托代理和法定代理。<br>委托代理人按照被代理人的委托行使代理权。法定代理人依照法律的规定行使代理权。</li>
<li>第一百六十四条　代理人不履行或者不完全履行职责，造成被代理人损害的，应当承担民事责任。<br>代理人和相对人恶意串通，损害被代理人合法权益的，代理人和相对人应当承担连带责任。<br>第二节　委托代理</li>
<li>第一百六十五条　委托代理授权采用书面形式的，授权委托书应当载明代理人的姓名或者名称、代理事项、权限和期限，并由被代理人签名或者盖章。</li>
<li>第一百六十六条　数人为同一代理事项的代理人的，应当共同行使代理权，但是当事人另有约定的除外。</li>
<li>第一百六十七条　代理人知道或者应当知道代理事项违法仍然实施代理行为，或者被代理人知道或者应当知道代理人的代理行为违法未作反对表示的，被代理人和代理人应当承担连带责任。</li>
<li>第一百六十八条　代理人不得以被代理人的名义与自己实施民事法律行为，但是被代理人同意或者追认的除外。<br>代理人不得以被代理人的名义与自己同时代理的其他人实施民事法律行为，但是被代理的双方同意或者追认的除外。</li>
<li>第一百六十九条　代理人需要转委托第三人代理的，应当取得被代理人的同意或者追认。<br>转委托代理经被代理人同意或者追认的，被代理人可以就代理事务直接指示转委托的第三人，代理人仅就第三人的选任以及对第三人的指示承担责任。<br>转委托代理未经被代理人同意或者追认的，代理人应当对转委托的第三人的行为承担责任；但是，在紧急情况下代理人为了维护被代理人的利益需要转委托第三人代理的除外。</li>
<li>第一百七十条　执行法人或者非法人组织工作任务的人员，就其职权范围内的事项，以法人或者非法人组织的名义实施的民事法律行为，对法人或者非法人组织发生效力。<br>法人或者非法人组织对执行其工作任务的人员职权范围的限制，不得对抗善意相对人。</li>
<li>第一百七十一条　行为人没有代理权、超越代理权或者代理权终止后，仍然实施代理行为，未经被代理人追认的，对被代理人不发生效力。<br>相对人可以催告被代理人自收到通知之日起三十日内予以追认。被代理人未作表示的，视为拒绝追认。行为人实施的行为被追认前，善意相对人有撤销的权利。撤销应当以通知的方式作出。<br>行为人实施的行为未被追认的，善意相对人有权请求行为人履行债务或者就其受到的损害请求行为人赔偿。但是，赔偿的范围不得超过被代理人追认时相对人所能获得的利益。<br>相对人知道或者应当知道行为人无权代理的，相对人和行为人按照各自的过错承担责任。</li>
<li>第一百七十二条　行为人没有代理权、超越代理权或者代理权终止后，仍然实施代理行为，相对人有理由相信行为人有代理权的，代理行为有效。<br>第三节　代理终止</li>
<li>第一百七十三条　有下列情形之一的，委托代理终止：<blockquote>
<ul>
<li>（一）代理期限届满或者代理事务完成；</li>
<li>（二）被代理人取消委托或者代理人辞去委托；</li>
<li>（三）代理人丧失民事行为能力；</li>
<li>（四）代理人或者被代理人死亡；</li>
<li>（五）作为代理人或者被代理人的法人、非法人组织终止。</li>
</ul>
</blockquote>
</li>
<li>第一百七十四条　被代理人死亡后，有下列情形之一的，委托代理人实施的代理行为有效：<blockquote>
<ul>
<li>（一）代理人不知道且不应当知道被代理人死亡；</li>
<li>（二）被代理人的继承人予以承认；</li>
<li>（三）授权中明确代理权在代理事务完成时终止；</li>
<li>（四）被代理人死亡前已经实施，为了被代理人的继承人的利益继续代理。<br>作为被代理人的法人、非法人组织终止的，参照适用前款规定。</li>
</ul>
</blockquote>
</li>
<li>第一百七十五条　有下列情形之一的，法定代理终止：<blockquote>
<ul>
<li>（一）被代理人取得或者恢复完全民事行为能力；</li>
<li>（二）代理人丧失民事行为能力；</li>
<li>（三）代理人或者被代理人死亡；</li>
<li>（四）法律规定的其他情形。</li>
</ul>
</blockquote>
</li>
</ul>
<h4 id="第八章-民事责任"><a href="#第八章-民事责任" class="headerlink" title="第八章　民事责任"></a>第八章　民事责任</h4><ul>
<li>第一百七十六条　民事主体依照法律规定或者按照当事人约定，履行民事义务，承担民事责任。</li>
<li>第一百七十七条　二人以上依法承担按份责任，能够确定责任大小的，各自承担相应的责任；难以确定责任大小的，平均承担责任。</li>
<li>第一百七十八条　二人以上依法承担连带责任的，权利人有权请求部分或者全部连带责任人承担责任。<br>连带责任人的责任份额根据各自责任大小确定；难以确定责任大小的，平均承担责任。实际承担责任超过自己责任份额的连带责任人，有权向其他连带责任人追偿。<br>连带责任，由法律规定或者当事人约定。</li>
<li>第一百七十九条　承担民事责任的方式主要有：<blockquote>
<ul>
<li>（一）停止侵害；</li>
<li>（二）排除妨碍；</li>
<li>（三）消除危险；</li>
<li>（四）返还财产；</li>
<li>（五）恢复原状；</li>
<li>（六）修理、重作、更换；</li>
<li>（七）继续履行；</li>
<li>（八）赔偿损失；</li>
<li>（九）支付违约金；</li>
<li>（十）消除影响、恢复名誉；</li>
<li>（十一）赔礼道歉。<br>法律规定惩罚性赔偿的，依照其规定。<br>本条规定的承担民事责任的方式，可以单独适用，也可以合并适用。</li>
</ul>
</blockquote>
</li>
<li>第一百八十条　因不可抗力不能履行民事义务的，不承担民事责任。法律另有规定的，依照其规定。<br>不可抗力是不能预见、不能避免且不能克服的客观情况。</li>
<li>第一百八十一条　因正当防卫造成损害的，不承担民事责任。<br>正当防卫超过必要的限度，造成不应有的损害的，正当防卫人应当承担适当的民事责任。</li>
<li>第一百八十二条　因紧急避险造成损害的，由引起险情发生的人承担民事责任。<br>危险由自然原因引起的，紧急避险人不承担民事责任，可以给予适当补偿。<br>紧急避险采取措施不当或者超过必要的限度，造成不应有的损害的，紧急避险人应当承担适当的民事责任。</li>
<li>第一百八十三条　因保护他人民事权益使自己受到损害的，由侵权人承担民事责任，受益人可以给予适当补偿。没有侵权人、侵权人逃逸或者无力承担民事责任，受害人请求补偿的，受益人应当给予适当补偿。</li>
<li>第一百八十四条　因自愿实施紧急救助行为造成受助人损害的，救助人不承担民事责任。</li>
<li>第一百八十五条　侵害英雄烈士等的姓名、肖像、名誉、荣誉，损害社会公共利益的，应当承担民事责任。</li>
<li>第一百八十六条　因当事人一方的违约行为，损害对方人身权益、财产权益的，受损害方有权选择请求其承担违约责任或者侵权责任。</li>
<li>第一百八十七条　民事主体因同一行为应当承担民事责任、行政责任和刑事责任的，承担行政责任或者刑事责任不影响承担民事责任；民事主体的财产不足以支付的，优先用于承担民事责任。</li>
</ul>
<h4 id="第九章-诉讼时效"><a href="#第九章-诉讼时效" class="headerlink" title="第九章　诉讼时效"></a>第九章　诉讼时效</h4><ul>
<li>第一百八十八条　向人民法院请求保护民事权利的诉讼时效期间为三年。法律另有规定的，依照其规定。<br>诉讼时效期间自权利人知道或者应当知道权利受到损害以及义务人之日起计算。法律另有规定的，依照其规定。但是，自权利受到损害之日起超过二十年的，人民法院不予保护，有特殊情况的，人民法院可以根据权利人的申请决定延长。</li>
<li>第一百八十九条　当事人约定同一债务分期履行的，诉讼时效期间自最后一期履行期限届满之日起计算。</li>
<li>第一百九十条　无民事行为能力人或者限制民事行为能力人对其法定代理人的请求权的诉讼时效期间，自该法定代理终止之日起计算。</li>
<li>第一百九十一条　未成年人遭受性侵害的损害赔偿请求权的诉讼时效期间，自受害人年满十八周岁之日起计算。</li>
<li>第一百九十二条　诉讼时效期间届满的，义务人可以提出不履行义务的抗辩。<br>诉讼时效期间届满后，义务人同意履行的，不得以诉讼时效期间届满为由抗辩；义务人已经自愿履行的，不得请求返还。</li>
<li>第一百九十三条　人民法院不得主动适用诉讼时效的规定。</li>
<li>第一百九十四条　在诉讼时效期间的最后六个月内，因下列障碍，不能行使请求权的，诉讼时效中止：<blockquote>
<ul>
<li>（一）不可抗力；</li>
<li>（二）无民事行为能力人或者限制民事行为能力人没有法定代理人，或者法定代理人死亡、丧失民事行为能力、丧失代理权；</li>
<li>（三）继承开始后未确定继承人或者遗产管理人；</li>
<li>（四）权利人被义务人或者其他人控制；</li>
<li>（五）其他导致权利人不能行使请求权的障碍。<br>自中止时效的原因消除之日起满六个月，诉讼时效期间届满。</li>
</ul>
</blockquote>
</li>
<li>第一百九十五条　有下列情形之一的，诉讼时效中断，从中断、有关程序终结时起，诉讼时效期间重新计算：<blockquote>
<ul>
<li>（一）权利人向义务人提出履行请求；</li>
<li>（二）义务人同意履行义务；</li>
<li>（三）权利人提起诉讼或者申请仲裁；</li>
<li>（四）与提起诉讼或者申请仲裁具有同等效力的其他情形。</li>
</ul>
</blockquote>
</li>
<li>第一百九十六条　下列请求权不适用诉讼时效的规定：<blockquote>
<ul>
<li>（一）请求停止侵害、排除妨碍、消除危险；</li>
<li>（二）不动产物权和登记的动产物权的权利人请求返还财产；</li>
<li>（三）请求支付抚养费、赡养费或者扶养费；</li>
<li>（四）依法不适用诉讼时效的其他请求权。</li>
</ul>
</blockquote>
</li>
<li>第一百九十七条　诉讼时效的期间、计算方法以及中止、中断的事由由法律规定，当事人约定无效。<br>当事人对诉讼时效利益的预先放弃无效。</li>
<li>第一百九十八条　法律对仲裁时效有规定的，依照其规定；没有规定的，适用诉讼时效的规定。</li>
<li>第一百九十九条　法律规定或者当事人约定的撤销权、解除权等权利的存续期间，除法律另有规定外，自权利人知道或者应当知道权利产生之日起计算，不适用有关诉讼时效中止、中断和延长的规定。存续期间届满，撤销权、解除权等权利消灭。</li>
</ul>
<h4 id="第十章-期间计算"><a href="#第十章-期间计算" class="headerlink" title="第十章　期间计算"></a>第十章　期间计算</h4><ul>
<li>第二百条　民法所称的期间按照公历年、月、日、小时计算。</li>
<li>第二百零一条　按照年、月、日计算期间的，开始的当日不计入，自下一日开始计算。<br>按照小时计算期间的，自法律规定或者当事人约定的时间开始计算。</li>
<li>第二百零二条　按照年、月计算期间的，到期月的对应日为期间的最后一日；没有对应日的，月末日为期间的最后一日。</li>
<li>第二百零三条　期间的最后一日是法定休假日的，以法定休假日结束的次日为期间的最后一日。<br>期间的最后一日的截止时间为二十四时；有业务时间的，停止业务活动的时间为截止时间。</li>
<li>第二百零四条　期间的计算方法依照本法的规定，但是法律另有规定或者当事人另有约定的除外。</li>
</ul>
<h2 id="第二编-物权"><a href="#第二编-物权" class="headerlink" title="第二编　物权"></a>第二编　物权</h2><h3 id="第一分编-通则"><a href="#第一分编-通则" class="headerlink" title="第一分编　通则"></a>第一分编　通则</h3><h4 id="第一章-一般规定"><a href="#第一章-一般规定" class="headerlink" title="第一章　一般规定"></a>第一章　一般规定</h4><ul>
<li>第二百零五条　本编调整因物的归属和利用产生的民事关系。</li>
<li>第二百零六条　国家坚持和完善公有制为主体、多种所有制经济共同发展，按劳分配为主体、多种分配方式并存，社会主义市场经济体制等社会主义基本经济制度。<br>国家巩固和发展公有制经济，鼓励、支持和引导非公有制经济的发展。<br>国家实行社会主义市场经济，保障一切市场主体的平等法律地位和发展权利。</li>
<li>第二百零七条　国家、集体、私人的物权和其他权利人的物权受法律平等保护，任何组织或者个人不得侵犯。</li>
<li>第二百零八条　不动产物权的设立、变更、转让和消灭，应当依照法律规定登记。动产物权的设立和转让，应当依照法律规定交付。</li>
</ul>
<h4 id="第二章-物权的设立、变更、转让和消灭"><a href="#第二章-物权的设立、变更、转让和消灭" class="headerlink" title="第二章　物权的设立、变更、转让和消灭"></a>第二章　物权的设立、变更、转让和消灭</h4><p>第一节　不动产登记</p>
<ul>
<li>第二百零九条　不动产物权的设立、变更、转让和消灭，经依法登记，发生效力；未经登记，不发生效力，但是法律另有规定的除外。<br>依法属于国家所有的自然资源，所有权可以不登记。</li>
<li>第二百一十条　不动产登记，由不动产所在地的登记机构办理。<br>国家对不动产实行统一登记制度。统一登记的范围、登记机构和登记办法，由法律、行政法规规定。</li>
<li>第二百一十一条　当事人申请登记，应当根据不同登记事项提供权属证明和不动产界址、面积等必要材料。</li>
<li>第二百一十二条　登记机构应当履行下列职责：<blockquote>
<ul>
<li>（一）查验申请人提供的权属证明和其他必要材料；</li>
<li>（二）就有关登记事项询问申请人；</li>
<li>（三）如实、及时登记有关事项；</li>
<li>（四）法律、行政法规规定的其他职责。<br>申请登记的不动产的有关情况需要进一步证明的，登记机构可以要求申请人补充材料，必要时可以实地查看。</li>
</ul>
</blockquote>
</li>
<li>第二百一十三条　登记机构不得有下列行为：<blockquote>
<ul>
<li>（一）要求对不动产进行评估；</li>
<li>（二）以年检等名义进行重复登记；</li>
<li>（三）超出登记职责范围的其他行为。</li>
</ul>
</blockquote>
</li>
<li>第二百一十四条　不动产物权的设立、变更、转让和消灭，依照法律规定应当登记的，自记载于不动产登记簿时发生效力。</li>
<li>第二百一十五条　当事人之间订立有关设立、变更、转让和消灭不动产物权的合同，除法律另有规定或者当事人另有约定外，自合同成立时生效；未办理物权登记的，不影响合同效力。</li>
<li>第二百一十六条　不动产登记簿是物权归属和内容的根据。<br>不动产登记簿由登记机构管理。</li>
<li>第二百一十七条　不动产权属证书是权利人享有该不动产物权的证明。不动产权属证书记载的事项，应当与不动产登记簿一致；记载不一致的，除有证据证明不动产登记簿确有错误外，以不动产登记簿为准。</li>
<li>第二百一十八条　权利人、利害关系人可以申请查询、复制不动产登记资料，登记机构应当提供。</li>
<li>第二百一十九条　利害关系人不得公开、非法使用权利人的不动产登记资料。</li>
<li>第二百二十条　权利人、利害关系人认为不动产登记簿记载的事项错误的，可以申请更正登记。不动产登记簿记载的权利人书面同意更正或者有证据证明登记确有错误的，登记机构应当予以更正。<br>不动产登记簿记载的权利人不同意更正的，利害关系人可以申请异议登记。登记机构予以异议登记，申请人自异议登记之日起十五日内不提起诉讼的，异议登记失效。异议登记不当，造成权利人损害的，权利人可以向申请人请求损害赔偿。</li>
<li>第二百二十一条　当事人签订买卖房屋的协议或者签订其他不动产物权的协议，为保障将来实现物权，按照约定可以向登记机构申请预告登记。预告登记后，未经预告登记的权利人同意，处分该不动产的，不发生物权效力。<br>预告登记后，债权消灭或者自能够进行不动产登记之日起九十日内未申请登记的，预告登记失效。</li>
<li>第二百二十二条　当事人提供虚假材料申请登记，造成他人损害的，应当承担赔偿责任。<br>因登记错误，造成他人损害的，登记机构应当承担赔偿责任。登记机构赔偿后，可以向造成登记错误的人追偿。</li>
<li>第二百二十三条　不动产登记费按件收取，不得按照不动产的面积、体积或者价款的比例收取。<br>第二节　动产交付</li>
<li>第二百二十四条　动产物权的设立和转让，自交付时发生效力，但是法律另有规定的除外。</li>
<li>第二百二十五条　船舶、航空器和机动车等的物权的设立、变更、转让和消灭，未经登记，不得对抗善意第三人。</li>
<li>第二百二十六条　动产物权设立和转让前，权利人已经占有该动产的，物权自民事法律行为生效时发生效力。</li>
<li>第二百二十七条　动产物权设立和转让前，第三人占有该动产的，负有交付义务的人可以通过转让请求第三人返还原物的权利代替交付。</li>
<li>第二百二十八条　动产物权转让时，当事人又约定由出让人继续占有该动产的，物权自该约定生效时发生效力。<br>第三节　其他规定</li>
<li>第二百二十九条　因人民法院、仲裁机构的法律文书或者人民政府的征收决定等，导致物权设立、变更、转让或者消灭的，自法律文书或者征收决定等生效时发生效力。</li>
<li>第二百三十条　因继承取得物权的，自继承开始时发生效力。</li>
<li>第二百三十一条　因合法建造、拆除房屋等事实行为设立或者消灭物权的，自事实行为成就时发生效力。</li>
<li>第二百三十二条　处分依照本节规定享有的不动产物权，依照法律规定需要办理登记的，未经登记，不发生物权效力。</li>
</ul>
<h4 id="第三章-物权的保护"><a href="#第三章-物权的保护" class="headerlink" title="第三章　物权的保护"></a>第三章　物权的保护</h4><ul>
<li>第二百三十三条　物权受到侵害的，权利人可以通过和解、调解、仲裁、诉讼等途径解决。</li>
<li>第二百三十四条　因物权的归属、内容发生争议的，利害关系人可以请求确认权利。</li>
<li>第二百三十五条　无权占有不动产或者动产的，权利人可以请求返还原物。</li>
<li>第二百三十六条　妨害物权或者可能妨害物权的，权利人可以请求排除妨害或者消除危险。</li>
<li>第二百三十七条　造成不动产或者动产毁损的，权利人可以依法请求修理、重作、更换或者恢复原状。</li>
<li>第二百三十八条　侵害物权，造成权利人损害的，权利人可以依法请求损害赔偿，也可以依法请求承担其他民事责任。</li>
<li>第二百三十九条　本章规定的物权保护方式，可以单独适用，也可以根据权利被侵害的情形合并适用。</li>
</ul>
<h3 id="第二分编-所有权"><a href="#第二分编-所有权" class="headerlink" title="第二分编　所有权"></a>第二分编　所有权</h3><h4 id="第四章-一般规定"><a href="#第四章-一般规定" class="headerlink" title="第四章　一般规定"></a>第四章　一般规定</h4><ul>
<li>第二百四十条　所有权人对自己的不动产或者动产，依法享有占有、使用、收益和处分的权利。</li>
<li>第二百四十一条　所有权人有权在自己的不动产或者动产上设立用益物权和担保物权。用益物权人、担保物权人行使权利，不得损害所有权人的权益。</li>
<li>第二百四十二条　法律规定专属于国家所有的不动产和动产，任何组织或者个人不能取得所有权。</li>
<li>第二百四十三条　为了公共利益的需要，依照法律规定的权限和程序可以征收集体所有的土地和组织、个人的房屋以及其他不动产。<br>征收集体所有的土地，应当依法及时足额支付土地补偿费、安置补助费以及农村村民住宅、其他地上附着物和青苗等的补偿费用，并安排被征地农民的社会保障费用，保障被征地农民的生活，维护被征地农民的合法权益。<br>征收组织、个人的房屋以及其他不动产，应当依法给予征收补偿，维护被征收人的合法权益；征收个人住宅的，还应当保障被征收人的居住条件。<br>任何组织或者个人不得贪污、挪用、私分、截留、拖欠征收补偿费等费用。</li>
<li>第二百四十四条　国家对耕地实行特殊保护，严格限制农用地转为建设用地，控制建设用地总量。不得违反法律规定的权限和程序征收集体所有的土地。</li>
<li>第二百四十五条　因抢险救灾、疫情防控等紧急需要，依照法律规定的权限和程序可以征用组织、个人的不动产或者动产。被征用的不动产或者动产使用后，应当返还被征用人。组织、个人的不动产或者动产被征用或者征用后毁损、灭失的，应当给予补偿。</li>
</ul>
<h4 id="第五章-国家所有权和集体所有权、私人所有权"><a href="#第五章-国家所有权和集体所有权、私人所有权" class="headerlink" title="第五章　国家所有权和集体所有权、私人所有权"></a>第五章　国家所有权和集体所有权、私人所有权</h4><ul>
<li>第二百四十六条　法律规定属于国家所有的财产，属于国家所有即全民所有。<br>国有财产由国务院代表国家行使所有权。法律另有规定的，依照其规定。</li>
<li>第二百四十七条　矿藏、水流、海域属于国家所有。</li>
<li>第二百四十八条　无居民海岛属于国家所有，国务院代表国家行使无居民海岛所有权。</li>
<li>第二百四十九条　城市的土地，属于国家所有。法律规定属于国家所有的农村和城市郊区的土地，属于国家所有。</li>
<li>第二百五十条　森林、山岭、草原、荒地、滩涂等自然资源，属于国家所有，但是法律规定属于集体所有的除外。</li>
<li>第二百五十一条　法律规定属于国家所有的野生动植物资源，属于国家所有。</li>
<li>第二百五十二条　无线电频谱资源属于国家所有。</li>
<li>第二百五十三条　法律规定属于国家所有的文物，属于国家所有。</li>
<li>第二百五十四条　国防资产属于国家所有。<br>铁路、公路、电力设施、电信设施和油气管道等基础设施，依照法律规定为国家所有的，属于国家所有。</li>
<li>第二百五十五条　国家机关对其直接支配的不动产和动产，享有占有、使用以及依照法律和国务院的有关规定处分的权利。</li>
<li>第二百五十六条　国家举办的事业单位对其直接支配的不动产和动产，享有占有、使用以及依照法律和国务院的有关规定收益、处分的权利。</li>
<li>第二百五十七条　国家出资的企业，由国务院、地方人民政府依照法律、行政法规规定分别代表国家履行出资人职责，享有出资人权益。</li>
<li>第二百五十八条　国家所有的财产受法律保护，禁止任何组织或者个人侵占、哄抢、私分、截留、破坏。</li>
<li>第二百五十九条　履行国有财产管理、监督职责的机构及其工作人员，应当依法加强对国有财产的管理、监督，促进国有财产保值增值，防止国有财产损失；滥用职权，玩忽职守，造成国有财产损失的，应当依法承担法律责任。<br>违反国有财产管理规定，在企业改制、合并分立、关联交易等过程中，低价转让、合谋私分、擅自担保或者以其他方式造成国有财产损失的，应当依法承担法律责任。</li>
<li>第二百六十条　集体所有的不动产和动产包括：<blockquote>
<ul>
<li>（一）法律规定属于集体所有的土地和森林、山岭、草原、荒地、滩涂；</li>
<li>（二）集体所有的建筑物、生产设施、农田水利设施；</li>
<li>（三）集体所有的教育、科学、文化、卫生、体育等设施；</li>
<li>（四）集体所有的其他不动产和动产。</li>
</ul>
</blockquote>
</li>
<li>第二百六十一条　农民集体所有的不动产和动产，属于本集体成员集体所有。<br>下列事项应当依照法定程序经本集体成员决定：<blockquote>
<ul>
<li>（一）土地承包方案以及将土地发包给本集体以外的组织或者个人承包；</li>
<li>（二）个别土地承包经营权人之间承包地的调整；</li>
<li>（三）土地补偿费等费用的使用、分配办法；</li>
<li>（四）集体出资的企业的所有权变动等事项；</li>
<li>（五）法律规定的其他事项。</li>
</ul>
</blockquote>
</li>
<li>第二百六十二条　对于集体所有的土地和森林、山岭、草原、荒地、滩涂等，依照下列规定行使所有权：<blockquote>
<ul>
<li>（一）属于村农民集体所有的，由村集体经济组织或者村民委员会依法代表集体行使所有权；</li>
<li>（二）分别属于村内两个以上农民集体所有的，由村内各该集体经济组织或者村民小组依法代表集体行使所有权；</li>
<li>（三）属于乡镇农民集体所有的，由乡镇集体经济组织代表集体行使所有权。</li>
</ul>
</blockquote>
</li>
<li>第二百六十三条　城镇集体所有的不动产和动产，依照法律、行政法规的规定由本集体享有占有、使用、收益和处分的权利。</li>
<li>第二百六十四条　农村集体经济组织或者村民委员会、村民小组应当依照法律、行政法规以及章程、村规民约向本集体成员公布集体财产的状况。集体成员有权查阅、复制相关资料。</li>
<li>第二百六十五条　集体所有的财产受法律保护，禁止任何组织或者个人侵占、哄抢、私分、破坏。<br>农村集体经济组织、村民委员会或者其负责人作出的决定侵害集体成员合法权益的，受侵害的集体成员可以请求人民法院予以撤销。</li>
<li>第二百六十六条　私人对其合法的收入、房屋、生活用品、生产工具、原材料等不动产和动产享有所有权。</li>
<li>第二百六十七条　私人的合法财产受法律保护，禁止任何组织或者个人侵占、哄抢、破坏。</li>
<li>第二百六十八条　国家、集体和私人依法可以出资设立有限责任公司、股份有限公司或者其他企业。国家、集体和私人所有的不动产或者动产投到企业的，由出资人按照约定或者出资比例享有资产收益、重大决策以及选择经营管理者等权利并履行义务。</li>
<li>第二百六十九条　营利法人对其不动产和动产依照法律、行政法规以及章程享有占有、使用、收益和处分的权利。<br>营利法人以外的法人，对其不动产和动产的权利，适用有关法律、行政法规以及章程的规定。</li>
<li>第二百七十条　社会团体法人、捐助法人依法所有的不动产和动产，受法律保护。</li>
</ul>
<h4 id="第六章-业主的建筑物区分所有权"><a href="#第六章-业主的建筑物区分所有权" class="headerlink" title="第六章　业主的建筑物区分所有权"></a>第六章　业主的建筑物区分所有权</h4><ul>
<li>第二百七十一条　业主对建筑物内的住宅、经营性用房等专有部分享有所有权，对专有部分以外的共有部分享有共有和共同管理的权利。</li>
<li>第二百七十二条　业主对其建筑物专有部分享有占有、使用、收益和处分的权利。业主行使权利不得危及建筑物的安全，不得损害其他业主的合法权益。</li>
<li>第二百七十三条　业主对建筑物专有部分以外的共有部分，享有权利，承担义务；不得以放弃权利为由不履行义务。<br>业主转让建筑物内的住宅、经营性用房，其对共有部分享有的共有和共同管理的权利一并转让。</li>
<li>第二百七十四条　建筑区划内的道路，属于业主共有，但是属于城镇公共道路的除外。建筑区划内的绿地，属于业主共有，但是属于城镇公共绿地或者明示属于个人的除外。建筑区划内的其他公共场所、公用设施和物业服务用房，属于业主共有。</li>
<li>第二百七十五条　建筑区划内，规划用于停放汽车的车位、车库的归属，由当事人通过出售、附赠或者出租等方式约定。<br>占用业主共有的道路或者其他场地用于停放汽车的车位，属于业主共有。</li>
<li>第二百七十六条　建筑区划内，规划用于停放汽车的车位、车库应当首先满足业主的需要。</li>
<li>第二百七十七条　业主可以设立业主大会，选举业主委员会。业主大会、业主委员会成立的具体条件和程序，依照法律、法规的规定。<br>地方人民政府有关部门、居民委员会应当对设立业主大会和选举业主委员会给予指导和协助。</li>
<li>第二百七十八条　下列事项由业主共同决定：<blockquote>
<ul>
<li>（一）制定和修改业主大会议事规则；</li>
<li>（二）制定和修改管理规约；</li>
<li>（三）选举业主委员会或者更换业主委员会成员；</li>
<li>（四）选聘和解聘物业服务企业或者其他管理人；</li>
<li>（五）使用建筑物及其附属设施的维修资金；</li>
<li>（六）筹集建筑物及其附属设施的维修资金；</li>
<li>（七）改建、重建建筑物及其附属设施；</li>
<li>（八）改变共有部分的用途或者利用共有部分从事经营活动；</li>
<li>（九）有关共有和共同管理权利的其他重大事项。<br>业主共同决定事项，应当由专有部分面积占比三分之二以上的业主且人数占比三分之二以上的业主参与表决。决定前款第六项至第八项规定的事项，应当经参与表决专有部分面积四分之三以上的业主且参与表决人数四分之三以上的业主同意。决定前款其他事项，应当经参与表决专有部分面积过半数的业主且参与表决人数过半数的业主同意。</li>
</ul>
</blockquote>
</li>
<li>第二百七十九条　业主不得违反法律、法规以及管理规约，将住宅改变为经营性用房。业主将住宅改变为经营性用房的，除遵守法律、法规以及管理规约外，应当经有利害关系的业主一致同意。</li>
<li>第二百八十条　业主大会或者业主委员会的决定，对业主具有法律约束力。<br>业主大会或者业主委员会作出的决定侵害业主合法权益的，受侵害的业主可以请求人民法院予以撤销。</li>
<li>第二百八十一条　建筑物及其附属设施的维修资金，属于业主共有。经业主共同决定，可以用于电梯、屋顶、外墙、无障碍设施等共有部分的维修、更新和改造。建筑物及其附属设施的维修资金的筹集、使用情况应当定期公布。<br>紧急情况下需要维修建筑物及其附属设施的，业主大会或者业主委员会可以依法申请使用建筑物及其附属设施的维修资金。</li>
<li>第二百八十二条　建设单位、物业服务企业或者其他管理人等利用业主的共有部分产生的收入，在扣除合理成本之后，属于业主共有。</li>
<li>第二百八十三条　建筑物及其附属设施的费用分摊、收益分配等事项，有约定的，按照约定；没有约定或者约定不明确的，按照业主专有部分面积所占比例确定。</li>
<li>第二百八十四条　业主可以自行管理建筑物及其附属设施，也可以委托物业服务企业或者其他管理人管理。<br>对建设单位聘请的物业服务企业或者其他管理人，业主有权依法更换。</li>
<li>第二百八十五条　物业服务企业或者其他管理人根据业主的委托，依照本法第三编有关物业服务合同的规定管理建筑区划内的建筑物及其附属设施，接受业主的监督，并及时答复业主对物业服务情况提出的询问。<br>物业服务企业或者其他管理人应当执行政府依法实施的应急处置措施和其他管理措施，积极配合开展相关工作。</li>
<li>第二百八十六条　业主应当遵守法律、法规以及管理规约，相关行为应当符合节约资源、保护生态环境的要求。对于物业服务企业或者其他管理人执行政府依法实施的应急处置措施和其他管理措施，业主应当依法予以配合。<br>业主大会或者业主委员会，对任意弃置垃圾、排放污染物或者噪声、违反规定饲养动物、违章搭建、侵占通道、拒付物业费等损害他人合法权益的行为，有权依照法律、法规以及管理规约，请求行为人停止侵害、排除妨碍、消除危险、恢复原状、赔偿损失。<br>业主或者其他行为人拒不履行相关义务的，有关当事人可以向有关行政主管部门报告或者投诉，有关行政主管部门应当依法处理。</li>
<li>第二百八十七条　业主对建设单位、物业服务企业或者其他管理人以及其他业主侵害自己合法权益的行为，有权请求其承担民事责任。</li>
</ul>
<h4 id="第七章-相邻关系"><a href="#第七章-相邻关系" class="headerlink" title="第七章　相邻关系"></a>第七章　相邻关系</h4><ul>
<li>第二百八十八条　不动产的相邻权利人应当按照有利生产、方便生活、团结互助、公平合理的原则，正确处理相邻关系。</li>
<li>第二百八十九条　法律、法规对处理相邻关系有规定的，依照其规定；法律、法规没有规定的，可以按照当地习惯。</li>
<li>第二百九十条　不动产权利人应当为相邻权利人用水、排水提供必要的便利。<br>对自然流水的利用，应当在不动产的相邻权利人之间合理分配。对自然流水的排放，应当尊重自然流向。</li>
<li>第二百九十一条　不动产权利人对相邻权利人因通行等必须利用其土地的，应当提供必要的便利。</li>
<li>第二百九十二条　不动产权利人因建造、修缮建筑物以及铺设电线、电缆、水管、暖气和燃气管线等必须利用相邻土地、建筑物的，该土地、建筑物的权利人应当提供必要的便利。</li>
<li>第二百九十三条　建造建筑物，不得违反国家有关工程建设标准，不得妨碍相邻建筑物的通风、采光和日照。</li>
<li>第二百九十四条　不动产权利人不得违反国家规定弃置固体废物，排放大气污染物、水污染物、土壤污染物、噪声、光辐射、电磁辐射等有害物质。</li>
<li>第二百九十五条　不动产权利人挖掘土地、建造建筑物、铺设管线以及安装设备等，不得危及相邻不动产的安全。</li>
<li>第二百九十六条　不动产权利人因用水、排水、通行、铺设管线等利用相邻不动产的，应当尽量避免对相邻的不动产权利人造成损害。</li>
</ul>
<h4 id="第八章-共有"><a href="#第八章-共有" class="headerlink" title="第八章　共有"></a>第八章　共有</h4><ul>
<li>第二百九十七条　不动产或者动产可以由两个以上组织、个人共有。共有包括按份共有和共同共有。</li>
<li>第二百九十八条　按份共有人对共有的不动产或者动产按照其份额享有所有权。</li>
<li>第二百九十九条　共同共有人对共有的不动产或者动产共同享有所有权。</li>
<li>第三百条　共有人按照约定管理共有的不动产或者动产；没有约定或者约定不明确的，各共有人都有管理的权利和义务。</li>
<li>第三百零一条　处分共有的不动产或者动产以及对共有的不动产或者动产作重大修缮、变更性质或者用途的，应当经占份额三分之二以上的按份共有人或者全体共同共有人同意，但是共有人之间另有约定的除外。</li>
<li>第三百零二条　共有人对共有物的管理费用以及其他负担，有约定的，按照其约定；没有约定或者约定不明确的，按份共有人按照其份额负担，共同共有人共同负担。</li>
<li>第三百零三条　共有人约定不得分割共有的不动产或者动产，以维持共有关系的，应当按照约定，但是共有人有重大理由需要分割的，可以请求分割；没有约定或者约定不明确的，按份共有人可以随时请求分割，共同共有人在共有的基础丧失或者有重大理由需要分割时可以请求分割。因分割造成其他共有人损害的，应当给予赔偿。</li>
<li>第三百零四条　共有人可以协商确定分割方式。达不成协议，共有的不动产或者动产可以分割且不会因分割减损价值的，应当对实物予以分割；难以分割或者因分割会减损价值的，应当对折价或者拍卖、变卖取得的价款予以分割。<br>共有人分割所得的不动产或者动产有瑕疵的，其他共有人应当分担损失。</li>
<li>第三百零五条　按份共有人可以转让其享有的共有的不动产或者动产份额。其他共有人在同等条件下享有优先购买的权利。</li>
<li>第三百零六条　按份共有人转让其享有的共有的不动产或者动产份额的，应当将转让条件及时通知其他共有人。其他共有人应当在合理期限内行使优先购买权。<br>两个以上其他共有人主张行使优先购买权的，协商确定各自的购买比例；协商不成的，按照转让时各自的共有份额比例行使优先购买权。</li>
<li>第三百零七条　因共有的不动产或者动产产生的债权债务，在对外关系上，共有人享有连带债权、承担连带债务，但是法律另有规定或者第三人知道共有人不具有连带债权债务关系的除外；在共有人内部关系上，除共有人另有约定外，按份共有人按照份额享有债权、承担债务，共同共有人共同享有债权、承担债务。偿还债务超过自己应当承担份额的按份共有人，有权向其他共有人追偿。</li>
<li>第三百零八条　共有人对共有的不动产或者动产没有约定为按份共有或者共同共有，或者约定不明确的，除共有人具有家庭关系等外，视为按份共有。</li>
<li>第三百零九条　按份共有人对共有的不动产或者动产享有的份额，没有约定或者约定不明确的，按照出资额确定；不能确定出资额的，视为等额享有。</li>
<li>第三百一十条　两个以上组织、个人共同享有用益物权、担保物权的，参照适用本章的有关规定。</li>
</ul>
<h4 id="第九章-所有权取得的特别规定"><a href="#第九章-所有权取得的特别规定" class="headerlink" title="第九章　所有权取得的特别规定"></a>第九章　所有权取得的特别规定</h4><ul>
<li>第三百一十一条　无处分权人将不动产或者动产转让给受让人的，所有权人有权追回；除法律另有规定外，符合下列情形的，受让人取得该不动产或者动产的所有权：<blockquote>
<ul>
<li>（一）受让人受让该不动产或者动产时是善意；</li>
<li>（二）以合理的价格转让；</li>
<li>（三）转让的不动产或者动产依照法律规定应当登记的已经登记，不需要登记的已经交付给受让人。<br>受让人依据前款规定取得不动产或者动产的所有权的，原所有权人有权向无处分权人请求损害赔偿。<br>当事人善意取得其他物权的，参照适用前两款规定。</li>
</ul>
</blockquote>
</li>
<li>第三百一十二条　所有权人或者其他权利人有权追回遗失物。该遗失物通过转让被他人占有的，权利人有权向无处分权人请求损害赔偿，或者自知道或者应当知道受让人之日起二年内向受让人请求返还原物；但是，受让人通过拍卖或者向具有经营资格的经营者购得该遗失物的，权利人请求返还原物时应当支付受让人所付的费用。权利人向受让人支付所付费用后，有权向无处分权人追偿。</li>
<li>第三百一十三条　善意受让人取得动产后，该动产上的原有权利消灭。但是，善意受让人在受让时知道或者应当知道该权利的除外。</li>
<li>第三百一十四条　拾得遗失物，应当返还权利人。拾得人应当及时通知权利人领取，或者送交公安等有关部门。</li>
<li>第三百一十五条　有关部门收到遗失物，知道权利人的，应当及时通知其领取；不知道的，应当及时发布招领公告。</li>
<li>第三百一十六条　拾得人在遗失物送交有关部门前，有关部门在遗失物被领取前，应当妥善保管遗失物。因故意或者重大过失致使遗失物毁损、灭失的，应当承担民事责任。</li>
<li>第三百一十七条　权利人领取遗失物时，应当向拾得人或者有关部门支付保管遗失物等支出的必要费用。<br>权利人悬赏寻找遗失物的，领取遗失物时应当按照承诺履行义务。<br>拾得人侵占遗失物的，无权请求保管遗失物等支出的费用，也无权请求权利人按照承诺履行义务。</li>
<li>第三百一十八条　遗失物自发布招领公告之日起一年内无人认领的，归国家所有。</li>
<li>第三百一十九条　拾得漂流物、发现埋藏物或者隐藏物的，参照适用拾得遗失物的有关规定。法律另有规定的，依照其规定。</li>
<li>第三百二十条　主物转让的，从物随主物转让，但是当事人另有约定的除外。</li>
<li>第三百二十一条　天然孳息，由所有权人取得；既有所有权人又有用益物权人的，由用益物权人取得。当事人另有约定的，按照其约定。<br>法定孳息，当事人有约定的，按照约定取得；没有约定或者约定不明确的，按照交易习惯取得。</li>
<li>第三百二十二条　因加工、附合、混合而产生的物的归属，有约定的，按照约定；没有约定或者约定不明确的，依照法律规定；法律没有规定的，按照充分发挥物的效用以及保护无过错当事人的原则确定。因一方当事人的过错或者确定物的归属造成另一方当事人损害的，应当给予赔偿或者补偿。</li>
</ul>
<h3 id="第三分编-用益物权"><a href="#第三分编-用益物权" class="headerlink" title="第三分编　用益物权"></a>第三分编　用益物权</h3><h4 id="第十章-一般规定"><a href="#第十章-一般规定" class="headerlink" title="第十章　一般规定"></a>第十章　一般规定</h4><ul>
<li>第三百二十三条　用益物权人对他人所有的不动产或者动产，依法享有占有、使用和收益的权利。</li>
<li>第三百二十四条　国家所有或者国家所有由集体使用以及法律规定属于集体所有的自然资源，组织、个人依法可以占有、使用和收益。</li>
<li>第三百二十五条　国家实行自然资源有偿使用制度，但是法律另有规定的除外。</li>
<li>第三百二十六条　用益物权人行使权利，应当遵守法律有关保护和合理开发利用资源、保护生态环境的规定。所有权人不得干涉用益物权人行使权利。</li>
<li>第三百二十七条　因不动产或者动产被征收、征用致使用益物权消灭或者影响用益物权行使的，用益物权人有权依据本法第二百四十三条、第二百四十五条的规定获得相应补偿。</li>
<li>第三百二十八条　依法取得的海域使用权受法律保护。</li>
<li>第三百二十九条　依法取得的探矿权、采矿权、取水权和使用水域、滩涂从事养殖、捕捞的权利受法律保护。</li>
</ul>
<h4 id="第十一章-土地承包经营权"><a href="#第十一章-土地承包经营权" class="headerlink" title="第十一章　土地承包经营权"></a>第十一章　土地承包经营权</h4><ul>
<li>第三百三十条　农村集体经济组织实行家庭承包经营为基础、统分结合的双层经营体制。<br>农民集体所有和国家所有由农民集体使用的耕地、林地、草地以及其他用于农业的土地，依法实行土地承包经营制度。</li>
<li>第三百三十一条　土地承包经营权人依法对其承包经营的耕地、林地、草地等享有占有、使用和收益的权利，有权从事种植业、林业、畜牧业等农业生产。</li>
<li>第三百三十二条　耕地的承包期为三十年。草地的承包期为三十年至五十年。林地的承包期为三十年至七十年。<br>前款规定的承包期限届满，由土地承包经营权人依照农村土地承包的法律规定继续承包。</li>
<li>第三百三十三条　土地承包经营权自土地承包经营权合同生效时设立。<br>登记机构应当向土地承包经营权人发放土地承包经营权证、林权证等证书，并登记造册，确认土地承包经营权。</li>
<li>第三百三十四条　土地承包经营权人依照法律规定，有权将土地承包经营权互换、转让。未经依法批准，不得将承包地用于非农建设。</li>
<li>第三百三十五条　土地承包经营权互换、转让的，当事人可以向登记机构申请登记；未经登记，不得对抗善意第三人。</li>
<li>第三百三十六条　承包期内发包人不得调整承包地。<br>因自然灾害严重毁损承包地等特殊情形，需要适当调整承包的耕地和草地的，应当依照农村土地承包的法律规定办理。</li>
<li>第三百三十七条　承包期内发包人不得收回承包地。法律另有规定的，依照其规定。</li>
<li>第三百三十八条　承包地被征收的，土地承包经营权人有权依据本法第二百四十三条的规定获得相应补偿。</li>
<li>第三百三十九条　土地承包经营权人可以自主决定依法采取出租、入股或者其他方式向他人流转土地经营权。</li>
<li>第三百四十条　土地经营权人有权在合同约定的期限内占有农村土地，自主开展农业生产经营并取得收益。</li>
<li>第三百四十一条　流转期限为五年以上的土地经营权，自流转合同生效时设立。当事人可以向登记机构申请土地经营权登记；未经登记，不得对抗善意第三人。</li>
<li>第三百四十二条　通过招标、拍卖、公开协商等方式承包农村土地，经依法登记取得权属证书的，可以依法采取出租、入股、抵押或者其他方式流转土地经营权。</li>
<li>第三百四十三条　国家所有的农用地实行承包经营的，参照适用本编的有关规定。</li>
</ul>
<h4 id="第十二章-建设用地使用权"><a href="#第十二章-建设用地使用权" class="headerlink" title="第十二章　建设用地使用权"></a>第十二章　建设用地使用权</h4><ul>
<li>第三百四十四条　建设用地使用权人依法对国家所有的土地享有占有、使用和收益的权利，有权利用该土地建造建筑物、构筑物及其附属设施。</li>
<li>第三百四十五条　建设用地使用权可以在土地的地表、地上或者地下分别设立。</li>
<li>第三百四十六条　设立建设用地使用权，应当符合节约资源、保护生态环境的要求，遵守法律、行政法规关于土地用途的规定，不得损害已经设立的用益物权。</li>
<li>第三百四十七条　设立建设用地使用权，可以采取出让或者划拨等方式。<br>工业、商业、旅游、娱乐和商品住宅等经营性用地以及同一土地有两个以上意向用地者的，应当采取招标、拍卖等公开竞价的方式出让。<br>严格限制以划拨方式设立建设用地使用权。</li>
<li>第三百四十八条　通过招标、拍卖、协议等出让方式设立建设用地使用权的，当事人应当采用书面形式订立建设用地使用权出让合同。<br>建设用地使用权出让合同一般包括下列条款：<blockquote>
<ul>
<li>（一）当事人的名称和住所；</li>
<li>（二）土地界址、面积等；</li>
<li>（三）建筑物、构筑物及其附属设施占用的空间；</li>
<li>（四）土地用途、规划条件；</li>
<li>（五）建设用地使用权期限；</li>
<li>（六）出让金等费用及其支付方式；</li>
<li>（七）解决争议的方法。</li>
</ul>
</blockquote>
</li>
<li>第三百四十九条　设立建设用地使用权的，应当向登记机构申请建设用地使用权登记。建设用地使用权自登记时设立。登记机构应当向建设用地使用权人发放权属证书。</li>
<li>第三百五十条　建设用地使用权人应当合理利用土地，不得改变土地用途；需要改变土地用途的，应当依法经有关行政主管部门批准。</li>
<li>第三百五十一条　建设用地使用权人应当依照法律规定以及合同约定支付出让金等费用。</li>
<li>第三百五十二条　建设用地使用权人建造的建筑物、构筑物及其附属设施的所有权属于建设用地使用权人，但是有相反证据证明的除外。</li>
<li>第三百五十三条　建设用地使用权人有权将建设用地使用权转让、互换、出资、赠与或者抵押，但是法律另有规定的除外。</li>
<li>第三百五十四条　建设用地使用权转让、互换、出资、赠与或者抵押的，当事人应当采用书面形式订立相应的合同。使用期限由当事人约定，但是不得超过建设用地使用权的剩余期限。</li>
<li>第三百五十五条　建设用地使用权转让、互换、出资或者赠与的，应当向登记机构申请变更登记。</li>
<li>第三百五十六条　建设用地使用权转让、互换、出资或者赠与的，附着于该土地上的建筑物、构筑物及其附属设施一并处分。</li>
<li>第三百五十七条　建筑物、构筑物及其附属设施转让、互换、出资或者赠与的，该建筑物、构筑物及其附属设施占用范围内的建设用地使用权一并处分。</li>
<li>第三百五十八条　建设用地使用权期限届满前，因公共利益需要提前收回该土地的，应当依据本法第二百四十三条的规定对该土地上的房屋以及其他不动产给予补偿，并退还相应的出让金。</li>
<li>第三百五十九条　住宅建设用地使用权期限届满的，自动续期。续期费用的缴纳或者减免，依照法律、行政法规的规定办理。<br>非住宅建设用地使用权期限届满后的续期，依照法律规定办理。该土地上的房屋以及其他不动产的归属，有约定的，按照约定；没有约定或者约定不明确的，依照法律、行政法规的规定办理。</li>
<li>第三百六十条　建设用地使用权消灭的，出让人应当及时办理注销登记。登记机构应当收回权属证书。</li>
<li>第三百六十一条　集体所有的土地作为建设用地的，应当依照土地管理的法律规定办理。</li>
</ul>
<h4 id="第十三章-宅基地使用权"><a href="#第十三章-宅基地使用权" class="headerlink" title="第十三章　宅基地使用权"></a>第十三章　宅基地使用权</h4><ul>
<li>第三百六十二条　宅基地使用权人依法对集体所有的土地享有占有和使用的权利，有权依法利用该土地建造住宅及其附属设施。</li>
<li>第三百六十三条　宅基地使用权的取得、行使和转让，适用土地管理的法律和国家有关规定。</li>
<li>第三百六十四条　宅基地因自然灾害等原因灭失的，宅基地使用权消灭。对失去宅基地的村民，应当依法重新分配宅基地。</li>
<li>第三百六十五条　已经登记的宅基地使用权转让或者消灭的，应当及时办理变更登记或者注销登记。</li>
</ul>
<h4 id="第十四章-居住权"><a href="#第十四章-居住权" class="headerlink" title="第十四章　居住权"></a>第十四章　居住权</h4><ul>
<li>第三百六十六条　居住权人有权按照合同约定，对他人的住宅享有占有、使用的用益物权，以满足生活居住的需要。</li>
<li>第三百六十七条　设立居住权，当事人应当采用书面形式订立居住权合同。<br>居住权合同一般包括下列条款：<blockquote>
<ul>
<li>（一）当事人的姓名或者名称和住所；</li>
<li>（二）住宅的位置；</li>
<li>（三）居住的条件和要求；</li>
<li>（四）居住权期限；</li>
<li>（五）解决争议的方法。</li>
</ul>
</blockquote>
</li>
<li>第三百六十八条　居住权无偿设立，但是当事人另有约定的除外。设立居住权的，应当向登记机构申请居住权登记。居住权自登记时设立。</li>
<li>第三百六十九条　居住权不得转让、继承。设立居住权的住宅不得出租，但是当事人另有约定的除外。</li>
<li>第三百七十条　居住权期限届满或者居住权人死亡的，居住权消灭。居住权消灭的，应当及时办理注销登记。</li>
<li>第三百七十一条　以遗嘱方式设立居住权的，参照适用本章的有关规定。</li>
</ul>
<h4 id="第十五章-地役权"><a href="#第十五章-地役权" class="headerlink" title="第十五章　地役权"></a>第十五章　地役权</h4><ul>
<li>第三百七十二条　地役权人有权按照合同约定，利用他人的不动产，以提高自己的不动产的效益。<br>前款所称他人的不动产为供役地，自己的不动产为需役地。</li>
<li>第三百七十三条　设立地役权，当事人应当采用书面形式订立地役权合同。<br>地役权合同一般包括下列条款：<blockquote>
<ul>
<li>（一）当事人的姓名或者名称和住所；</li>
<li>（二）供役地和需役地的位置；</li>
<li>（三）利用目的和方法；</li>
<li>（四）地役权期限；</li>
<li>（五）费用及其支付方式；</li>
<li>（六）解决争议的方法。</li>
</ul>
</blockquote>
</li>
<li>第三百七十四条　地役权自地役权合同生效时设立。当事人要求登记的，可以向登记机构申请地役权登记；未经登记，不得对抗善意第三人。</li>
<li>第三百七十五条　供役地权利人应当按照合同约定，允许地役权人利用其不动产，不得妨害地役权人行使权利。</li>
<li>第三百七十六条　地役权人应当按照合同约定的利用目的和方法利用供役地，尽量减少对供役地权利人物权的限制。</li>
<li>第三百七十七条　地役权期限由当事人约定；但是，不得超过土地承包经营权、建设用地使用权等用益物权的剩余期限。</li>
<li>第三百七十八条　土地所有权人享有地役权或者负担地役权的，设立土地承包经营权、宅基地使用权等用益物权时，该用益物权人继续享有或者负担已经设立的地役权。</li>
<li>第三百七十九条　土地上已经设立土地承包经营权、建设用地使用权、宅基地使用权等用益物权的，未经用益物权人同意，土地所有权人不得设立地役权。</li>
<li>第三百八十条　地役权不得单独转让。土地承包经营权、建设用地使用权等转让的，地役权一并转让，但是合同另有约定的除外。</li>
<li>第三百八十一条　地役权不得单独抵押。土地经营权、建设用地使用权等抵押的，在实现抵押权时，地役权一并转让。</li>
<li>第三百八十二条　需役地以及需役地上的土地承包经营权、建设用地使用权等部分转让时，转让部分涉及地役权的，受让人同时享有地役权。</li>
<li>第三百八十三条　供役地以及供役地上的土地承包经营权、建设用地使用权等部分转让时，转让部分涉及地役权的，地役权对受让人具有法律约束力。</li>
<li>第三百八十四条　地役权人有下列情形之一的，供役地权利人有权解除地役权合同，地役权消灭：<blockquote>
<ul>
<li>（一）违反法律规定或者合同约定，滥用地役权；</li>
<li>（二）有偿利用供役地，约定的付款期限届满后在合理期限内经两次催告未支付费用。</li>
</ul>
</blockquote>
</li>
<li>第三百八十五条　已经登记的地役权变更、转让或者消灭的，应当及时办理变更登记或者注销登记。</li>
</ul>
<h3 id="第四分编-担保物权"><a href="#第四分编-担保物权" class="headerlink" title="第四分编　担保物权"></a>第四分编　担保物权</h3><h4 id="第十六章-一般规定"><a href="#第十六章-一般规定" class="headerlink" title="第十六章　一般规定"></a>第十六章　一般规定</h4><ul>
<li>第三百八十六条　担保物权人在债务人不履行到期债务或者发生当事人约定的实现担保物权的情形，依法享有就担保财产优先受偿的权利，但是法律另有规定的除外。</li>
<li>第三百八十七条　债权人在借贷、买卖等民事活动中，为保障实现其债权，需要担保的，可以依照本法和其他法律的规定设立担保物权。<br>第三人为债务人向债权人提供担保的，可以要求债务人提供反担保。反担保适用本法和其他法律的规定。</li>
<li>第三百八十八条　设立担保物权，应当依照本法和其他法律的规定订立担保合同。担保合同包括抵押合同、质押合同和其他具有担保功能的合同。担保合同是主债权债务合同的从合同。主债权债务合同无效的，担保合同无效，但是法律另有规定的除外。<br>担保合同被确认无效后，债务人、担保人、债权人有过错的，应当根据其过错各自承担相应的民事责任。</li>
<li>第三百八十九条　担保物权的担保范围包括主债权及其利息、违约金、损害赔偿金、保管担保财产和实现担保物权的费用。当事人另有约定的，按照其约定。</li>
<li>第三百九十条　担保期间，担保财产毁损、灭失或者被征收等，担保物权人可以就获得的保险金、赔偿金或者补偿金等优先受偿。被担保债权的履行期限未届满的，也可以提存该保险金、赔偿金或者补偿金等。</li>
<li>第三百九十一条　第三人提供担保，未经其书面同意，债权人允许债务人转移全部或者部分债务的，担保人不再承担相应的担保责任。</li>
<li>第三百九十二条　被担保的债权既有物的担保又有人的担保的，债务人不履行到期债务或者发生当事人约定的实现担保物权的情形，债权人应当按照约定实现债权；没有约定或者约定不明确，债务人自己提供物的担保的，债权人应当先就该物的担保实现债权；第三人提供物的担保的，债权人可以就物的担保实现债权，也可以请求保证人承担保证责任。提供担保的第三人承担担保责任后，有权向债务人追偿。</li>
<li>第三百九十三条　有下列情形之一的，担保物权消灭：<blockquote>
<ul>
<li>（一）主债权消灭；</li>
<li>（二）担保物权实现；</li>
<li>（三）债权人放弃担保物权；</li>
<li>（四）法律规定担保物权消灭的其他情形。</li>
</ul>
</blockquote>
</li>
</ul>
<h4 id="第十七章-抵押权"><a href="#第十七章-抵押权" class="headerlink" title="第十七章　抵押权"></a>第十七章　抵押权</h4><p>第一节　一般抵押权</p>
<ul>
<li>第三百九十四条　为担保债务的履行，债务人或者第三人不转移财产的占有，将该财产抵押给债权人的，债务人不履行到期债务或者发生当事人约定的实现抵押权的情形，债权人有权就该财产优先受偿。<br>前款规定的债务人或者第三人为抵押人，债权人为抵押权人，提供担保的财产为抵押财产。</li>
<li>第三百九十五条　债务人或者第三人有权处分的下列财产可以抵押：<blockquote>
<ul>
<li>（一）建筑物和其他土地附着物；</li>
<li>（二）建设用地使用权；</li>
<li>（三）海域使用权；</li>
<li>（四）生产设备、原材料、半成品、产品；</li>
<li>（五）正在建造的建筑物、船舶、航空器；</li>
<li>（六）交通运输工具；</li>
<li>（七）法律、行政法规未禁止抵押的其他财产。<br>抵押人可以将前款所列财产一并抵押。</li>
</ul>
</blockquote>
</li>
<li>第三百九十六条　企业、个体工商户、农业生产经营者可以将现有的以及将有的生产设备、原材料、半成品、产品抵押，债务人不履行到期债务或者发生当事人约定的实现抵押权的情形，债权人有权就抵押财产确定时的动产优先受偿。</li>
<li>第三百九十七条　以建筑物抵押的，该建筑物占用范围内的建设用地使用权一并抵押。以建设用地使用权抵押的，该土地上的建筑物一并抵押。<br>抵押人未依据前款规定一并抵押的，未抵押的财产视为一并抵押。</li>
<li>第三百九十八条　乡镇、村企业的建设用地使用权不得单独抵押。以乡镇、村企业的厂房等建筑物抵押的，其占用范围内的建设用地使用权一并抵押。</li>
<li>第三百九十九条　下列财产不得抵押：<blockquote>
<ul>
<li>（一）土地所有权；</li>
<li>（二）宅基地、自留地、自留山等集体所有土地的使用权，但是法律规定可以抵押的除外；</li>
<li>（三）学校、幼儿园、医疗机构等为公益目的成立的非营利法人的教育设施、医疗卫生设施和其他公益设施；</li>
<li>（四）所有权、使用权不明或者有争议的财产；</li>
<li>（五）依法被查封、扣押、监管的财产；</li>
<li>（六）法律、行政法规规定不得抵押的其他财产。</li>
</ul>
</blockquote>
</li>
<li>第四百条　设立抵押权，当事人应当采用书面形式订立抵押合同。<br>抵押合同一般包括下列条款：<blockquote>
<ul>
<li>（一）被担保债权的种类和数额；</li>
<li>（二）债务人履行债务的期限；</li>
<li>（三）抵押财产的名称、数量等情况；</li>
<li>（四）担保的范围。</li>
</ul>
</blockquote>
</li>
<li>第四百零一条　抵押权人在债务履行期限届满前，与抵押人约定债务人不履行到期债务时抵押财产归债权人所有的，只能依法就抵押财产优先受偿。</li>
<li>第四百零二条　以本法第三百九十五条第一款第一项至第三项规定的财产或者第五项规定的正在建造的建筑物抵押的，应当办理抵押登记。抵押权自登记时设立。</li>
<li>第四百零三条　以动产抵押的，抵押权自抵押合同生效时设立；未经登记，不得对抗善意第三人。</li>
<li>第四百零四条　以动产抵押的，不得对抗正常经营活动中已经支付合理价款并取得抵押财产的买受人。</li>
<li>第四百零五条　抵押权设立前，抵押财产已经出租并转移占有的，原租赁关系不受该抵押权的影响。</li>
<li>第四百零六条　抵押期间，抵押人可以转让抵押财产。当事人另有约定的，按照其约定。抵押财产转让的，抵押权不受影响。<br>抵押人转让抵押财产的，应当及时通知抵押权人。抵押权人能够证明抵押财产转让可能损害抵押权的，可以请求抵押人将转让所得的价款向抵押权人提前清偿债务或者提存。转让的价款超过债权数额的部分归抵押人所有，不足部分由债务人清偿。</li>
<li>第四百零七条　抵押权不得与债权分离而单独转让或者作为其他债权的担保。债权转让的，担保该债权的抵押权一并转让，但是法律另有规定或者当事人另有约定的除外。</li>
<li>第四百零八条　抵押人的行为足以使抵押财产价值减少的，抵押权人有权请求抵押人停止其行为；抵押财产价值减少的，抵押权人有权请求恢复抵押财产的价值，或者提供与减少的价值相应的担保。抵押人不恢复抵押财产的价值，也不提供担保的，抵押权人有权请求债务人提前清偿债务。</li>
<li>第四百零九条　抵押权人可以放弃抵押权或者抵押权的顺位。抵押权人与抵押人可以协议变更抵押权顺位以及被担保的债权数额等内容。但是，抵押权的变更未经其他抵押权人书面同意的，不得对其他抵押权人产生不利影响。<br>债务人以自己的财产设定抵押，抵押权人放弃该抵押权、抵押权顺位或者变更抵押权的，其他担保人在抵押权人丧失优先受偿权益的范围内免除担保责任，但是其他担保人承诺仍然提供担保的除外。</li>
<li>第四百一十条　债务人不履行到期债务或者发生当事人约定的实现抵押权的情形，抵押权人可以与抵押人协议以抵押财产折价或者以拍卖、变卖该抵押财产所得的价款优先受偿。协议损害其他债权人利益的，其他债权人可以请求人民法院撤销该协议。<br>抵押权人与抵押人未就抵押权实现方式达成协议的，抵押权人可以请求人民法院拍卖、变卖抵押财产。<br>抵押财产折价或者变卖的，应当参照市场价格。</li>
<li>第四百一十一条　依据本法第三百九十六条规定设定抵押的，抵押财产自下列情形之一发生时确定：<blockquote>
<ul>
<li>（一）债务履行期限届满，债权未实现；</li>
<li>（二）抵押人被宣告破产或者解散；</li>
<li>（三）当事人约定的实现抵押权的情形；</li>
<li>（四）严重影响债权实现的其他情形。</li>
</ul>
</blockquote>
</li>
<li>第四百一十二条　债务人不履行到期债务或者发生当事人约定的实现抵押权的情形，致使抵押财产被人民法院依法扣押的，自扣押之日起，抵押权人有权收取该抵押财产的天然孳息或者法定孳息，但是抵押权人未通知应当清偿法定孳息义务人的除外。<br>前款规定的孳息应当先充抵收取孳息的费用。</li>
<li>第四百一十三条　抵押财产折价或者拍卖、变卖后，其价款超过债权数额的部分归抵押人所有，不足部分由债务人清偿。</li>
<li>第四百一十四条　同一财产向两个以上债权人抵押的，拍卖、变卖抵押财产所得的价款依照下列规定清偿：<blockquote>
<ul>
<li>（一）抵押权已经登记的，按照登记的时间先后确定清偿顺序；</li>
<li>（二）抵押权已经登记的先于未登记的受偿；</li>
<li>（三）抵押权未登记的，按照债权比例清偿。<br>其他可以登记的担保物权，清偿顺序参照适用前款规定。</li>
</ul>
</blockquote>
</li>
<li>第四百一十五条　同一财产既设立抵押权又设立质权的，拍卖、变卖该财产所得的价款按照登记、交付的时间先后确定清偿顺序。</li>
<li>第四百一十六条　动产抵押担保的主债权是抵押物的价款，标的物交付后十日内办理抵押登记的，该抵押权人优先于抵押物买受人的其他担保物权人受偿，但是留置权人除外。</li>
<li>第四百一十七条　建设用地使用权抵押后，该土地上新增的建筑物不属于抵押财产。该建设用地使用权实现抵押权时，应当将该土地上新增的建筑物与建设用地使用权一并处分。但是，新增建筑物所得的价款，抵押权人无权优先受偿。</li>
<li>第四百一十八条　以集体所有土地的使用权依法抵押的，实现抵押权后，未经法定程序，不得改变土地所有权的性质和土地用途。</li>
<li>第四百一十九条　抵押权人应当在主债权诉讼时效期间行使抵押权；未行使的，人民法院不予保护。<br>第二节　最高额抵押权</li>
<li>第四百二十条　为担保债务的履行，债务人或者第三人对一定期间内将要连续发生的债权提供担保财产的，债务人不履行到期债务或者发生当事人约定的实现抵押权的情形，抵押权人有权在最高债权额限度内就该担保财产优先受偿。<br>最高额抵押权设立前已经存在的债权，经当事人同意，可以转入最高额抵押担保的债权范围。</li>
<li>第四百二十一条　最高额抵押担保的债权确定前，部分债权转让的，最高额抵押权不得转让，但是当事人另有约定的除外。</li>
<li>第四百二十二条　最高额抵押担保的债权确定前，抵押权人与抵押人可以通过协议变更债权确定的期间、债权范围以及最高债权额。但是，变更的内容不得对其他抵押权人产生不利影响。</li>
<li>第四百二十三条　有下列情形之一的，抵押权人的债权确定：<blockquote>
<ul>
<li>（一）约定的债权确定期间届满；</li>
<li>（二）没有约定债权确定期间或者约定不明确，抵押权人或者抵押人自最高额抵押权设立之日起满二年后请求确定债权；</li>
<li>（三）新的债权不可能发生；</li>
<li>（四）抵押权人知道或者应当知道抵押财产被查封、扣押；</li>
<li>（五）债务人、抵押人被宣告破产或者解散；</li>
<li>（六）法律规定债权确定的其他情形。</li>
</ul>
</blockquote>
</li>
<li>第四百二十四条　最高额抵押权除适用本节规定外，适用本章第一节的有关规定。</li>
</ul>
<h4 id="第十八章-质权"><a href="#第十八章-质权" class="headerlink" title="第十八章　质权"></a>第十八章　质权</h4><p>第一节　动产质权</p>
<ul>
<li>第四百二十五条　为担保债务的履行，债务人或者第三人将其动产出质给债权人占有的，债务人不履行到期债务或者发生当事人约定的实现质权的情形，债权人有权就该动产优先受偿。<br>前款规定的债务人或者第三人为出质人，债权人为质权人，交付的动产为质押财产。</li>
<li>第四百二十六条　法律、行政法规禁止转让的动产不得出质。</li>
<li>第四百二十七条　设立质权，当事人应当采用书面形式订立质押合同。<br>质押合同一般包括下列条款：<blockquote>
<ul>
<li>（一）被担保债权的种类和数额；</li>
<li>（二）债务人履行债务的期限；</li>
<li>（三）质押财产的名称、数量等情况；</li>
<li>（四）担保的范围；</li>
<li>（五）质押财产交付的时间、方式。</li>
</ul>
</blockquote>
</li>
<li>第四百二十八条　质权人在债务履行期限届满前，与出质人约定债务人不履行到期债务时质押财产归债权人所有的，只能依法就质押财产优先受偿。</li>
<li>第四百二十九条　质权自出质人交付质押财产时设立。</li>
<li>第四百三十条　质权人有权收取质押财产的孳息，但是合同另有约定的除外。<br>前款规定的孳息应当先充抵收取孳息的费用。</li>
<li>第四百三十一条　质权人在质权存续期间，未经出质人同意，擅自使用、处分质押财产，造成出质人损害的，应当承担赔偿责任。</li>
<li>第四百三十二条　质权人负有妥善保管质押财产的义务；因保管不善致使质押财产毁损、灭失的，应当承担赔偿责任。<br>质权人的行为可能使质押财产毁损、灭失的，出质人可以请求质权人将质押财产提存，或者请求提前清偿债务并返还质押财产。</li>
<li>第四百三十三条　因不可归责于质权人的事由可能使质押财产毁损或者价值明显减少，足以危害质权人权利的，质权人有权请求出质人提供相应的担保；出质人不提供的，质权人可以拍卖、变卖质押财产，并与出质人协议将拍卖、变卖所得的价款提前清偿债务或者提存。</li>
<li>第四百三十四条　质权人在质权存续期间，未经出质人同意转质，造成质押财产毁损、灭失的，应当承担赔偿责任。</li>
<li>第四百三十五条　质权人可以放弃质权。债务人以自己的财产出质，质权人放弃该质权的，其他担保人在质权人丧失优先受偿权益的范围内免除担保责任，但是其他担保人承诺仍然提供担保的除外。</li>
<li>第四百三十六条　债务人履行债务或者出质人提前清偿所担保的债权的，质权人应当返还质押财产。<br>债务人不履行到期债务或者发生当事人约定的实现质权的情形，质权人可以与出质人协议以质押财产折价，也可以就拍卖、变卖质押财产所得的价款优先受偿。<br>质押财产折价或者变卖的，应当参照市场价格。</li>
<li>第四百三十七条　出质人可以请求质权人在债务履行期限届满后及时行使质权；质权人不行使的，出质人可以请求人民法院拍卖、变卖质押财产。<br>出质人请求质权人及时行使质权，因质权人怠于行使权利造成出质人损害的，由质权人承担赔偿责任。</li>
<li>第四百三十八条　质押财产折价或者拍卖、变卖后，其价款超过债权数额的部分归出质人所有，不足部分由债务人清偿。</li>
<li>第四百三十九条　出质人与质权人可以协议设立最高额质权。<br>最高额质权除适用本节有关规定外，参照适用本编第十七章第二节的有关规定。<br>第二节　权利质权</li>
<li>第四百四十条　债务人或者第三人有权处分的下列权利可以出质：<blockquote>
<ul>
<li>（一）汇票、本票、支票；</li>
<li>（二）债券、存款单；</li>
<li>（三）仓单、提单；</li>
<li>（四）可以转让的基金份额、股权；</li>
<li>（五）可以转让的注册商标专用权、专利权、著作权等知识产权中的财产权；</li>
<li>（六）现有的以及将有的应收账款；</li>
<li>（七）法律、行政法规规定可以出质的其他财产权利。</li>
</ul>
</blockquote>
</li>
<li>第四百四十一条　以汇票、本票、支票、债券、存款单、仓单、提单出质的，质权自权利凭证交付质权人时设立；没有权利凭证的，质权自办理出质登记时设立。法律另有规定的，依照其规定。</li>
<li>第四百四十二条　汇票、本票、支票、债券、存款单、仓单、提单的兑现日期或者提货日期先于主债权到期的，质权人可以兑现或者提货，并与出质人协议将兑现的价款或者提取的货物提前清偿债务或者提存。</li>
<li>第四百四十三条　以基金份额、股权出质的，质权自办理出质登记时设立。<br>基金份额、股权出质后，不得转让，但是出质人与质权人协商同意的除外。出质人转让基金份额、股权所得的价款，应当向质权人提前清偿债务或者提存。</li>
<li>第四百四十四条　以注册商标专用权、专利权、著作权等知识产权中的财产权出质的，质权自办理出质登记时设立。<br>知识产权中的财产权出质后，出质人不得转让或者许可他人使用，但是出质人与质权人协商同意的除外。出质人转让或者许可他人使用出质的知识产权中的财产权所得的价款，应当向质权人提前清偿债务或者提存。</li>
<li>第四百四十五条　以应收账款出质的，质权自办理出质登记时设立。<br>应收账款出质后，不得转让，但是出质人与质权人协商同意的除外。出质人转让应收账款所得的价款，应当向质权人提前清偿债务或者提存。</li>
<li>第四百四十六条　权利质权除适用本节规定外，适用本章第一节的有关规定。</li>
</ul>
<h4 id="第十九章-留置权"><a href="#第十九章-留置权" class="headerlink" title="第十九章　留置权"></a>第十九章　留置权</h4><ul>
<li>第四百四十七条　债务人不履行到期债务，债权人可以留置已经合法占有的债务人的动产，并有权就该动产优先受偿。<br>前款规定的债权人为留置权人，占有的动产为留置财产。</li>
<li>第四百四十八条　债权人留置的动产，应当与债权属于同一法律关系，但是企业之间留置的除外。</li>
<li>第四百四十九条　法律规定或者当事人约定不得留置的动产，不得留置。</li>
<li>第四百五十条　留置财产为可分物的，留置财产的价值应当相当于债务的金额。</li>
<li>第四百五十一条　留置权人负有妥善保管留置财产的义务；因保管不善致使留置财产毁损、灭失的，应当承担赔偿责任。</li>
<li>第四百五十二条　留置权人有权收取留置财产的孳息。<br>前款规定的孳息应当先充抵收取孳息的费用。</li>
<li>第四百五十三条　留置权人与债务人应当约定留置财产后的债务履行期限；没有约定或者约定不明确的，留置权人应当给债务人六十日以上履行债务的期限，但是鲜活易腐等不易保管的动产除外。债务人逾期未履行的，留置权人可以与债务人协议以留置财产折价，也可以就拍卖、变卖留置财产所得的价款优先受偿。<br>留置财产折价或者变卖的，应当参照市场价格。</li>
<li>第四百五十四条　债务人可以请求留置权人在债务履行期限届满后行使留置权；留置权人不行使的，债务人可以请求人民法院拍卖、变卖留置财产。</li>
<li>第四百五十五条　留置财产折价或者拍卖、变卖后，其价款超过债权数额的部分归债务人所有，不足部分由债务人清偿。</li>
<li>第四百五十六条　同一动产上已经设立抵押权或者质权，该动产又被留置的，留置权人优先受偿。</li>
<li>第四百五十七条　留置权人对留置财产丧失占有或者留置权人接受债务人另行提供担保的，留置权消灭。</li>
</ul>
<h3 id="第五分编-占有"><a href="#第五分编-占有" class="headerlink" title="第五分编　占有"></a>第五分编　占有</h3><h4 id="第二十章-占有"><a href="#第二十章-占有" class="headerlink" title="第二十章　占有"></a>第二十章　占有</h4><ul>
<li>第四百五十八条　基于合同关系等产生的占有，有关不动产或者动产的使用、收益、违约责任等，按照合同约定；合同没有约定或者约定不明确的，依照有关法律规定。</li>
<li>第四百五十九条　占有人因使用占有的不动产或者动产，致使该不动产或者动产受到损害的，恶意占有人应当承担赔偿责任。</li>
<li>第四百六十条　不动产或者动产被占有人占有的，权利人可以请求返还原物及其孳息；但是，应当支付善意占有人因维护该不动产或者动产支出的必要费用。</li>
<li>第四百六十一条　占有的不动产或者动产毁损、灭失，该不动产或者动产的权利人请求赔偿的，占有人应当将因毁损、灭失取得的保险金、赔偿金或者补偿金等返还给权利人；权利人的损害未得到足够弥补的，恶意占有人还应当赔偿损失。</li>
<li>第四百六十二条　占有的不动产或者动产被侵占的，占有人有权请求返还原物；对妨害占有的行为，占有人有权请求排除妨害或者消除危险；因侵占或者妨害造成损害的，占有人有权依法请求损害赔偿。<br>占有人返还原物的请求权，自侵占发生之日起一年内未行使的，该请求权消灭。</li>
</ul>
<h2 id="第三编-合同"><a href="#第三编-合同" class="headerlink" title="第三编　合同"></a>第三编　合同</h2><h3 id="第一分编-通则-1"><a href="#第一分编-通则-1" class="headerlink" title="第一分编　通则"></a>第一分编　通则</h3><h4 id="第一章-一般规定-1"><a href="#第一章-一般规定-1" class="headerlink" title="第一章　一般规定"></a>第一章　一般规定</h4><ul>
<li>第四百六十三条　本编调整因合同产生的民事关系。</li>
<li>第四百六十四条　合同是民事主体之间设立、变更、终止民事法律关系的协议。<br>婚姻、收养、监护等有关身份关系的协议，适用有关该身份关系的法律规定；没有规定的，可以根据其性质参照适用本编规定。</li>
<li>第四百六十五条　依法成立的合同，受法律保护。<br>依法成立的合同，仅对当事人具有法律约束力，但是法律另有规定的除外。</li>
<li>第四百六十六条　当事人对合同条款的理解有争议的，应当依据本法第一百四十二条第一款的规定，确定争议条款的含义。<br>合同文本采用两种以上文字订立并约定具有同等效力的，对各文本使用的词句推定具有相同含义。各文本使用的词句不一致的，应当根据合同的相关条款、性质、目的以及诚信原则等予以解释。</li>
<li>第四百六十七条　本法或者其他法律没有明文规定的合同，适用本编通则的规定，并可以参照适用本编或者其他法律最相类似合同的规定。<br>在中华人民共和国境内履行的中外合资经营企业合同、中外合作经营企业合同、中外合作勘探开发自然资源合同，适用中华人民共和国法律。</li>
<li>第四百六十八条　非因合同产生的债权债务关系，适用有关该债权债务关系的法律规定；没有规定的，适用本编通则的有关规定，但是根据其性质不能适用的除外。</li>
</ul>
<h4 id="第二章-合同的订立"><a href="#第二章-合同的订立" class="headerlink" title="第二章　合同的订立"></a>第二章　合同的订立</h4><ul>
<li>第四百六十九条　当事人订立合同，可以采用书面形式、口头形式或者其他形式。<br>书面形式是合同书、信件、电报、电传、传真等可以有形地表现所载内容的形式。<br>以电子数据交换、电子邮件等方式能够有形地表现所载内容，并可以随时调取查用的数据电文，视为书面形式。</li>
<li>第四百七十条　合同的内容由当事人约定，一般包括下列条款：<blockquote>
<ul>
<li>（一）当事人的姓名或者名称和住所；</li>
<li>（二）标的；</li>
<li>（三）数量；</li>
<li>（四）质量；</li>
<li>（五）价款或者报酬；</li>
<li>（六）履行期限、地点和方式；</li>
<li>（七）违约责任；</li>
<li>（八）解决争议的方法。<br>当事人可以参照各类合同的示范文本订立合同。</li>
</ul>
</blockquote>
</li>
<li>第四百七十一条　当事人订立合同，可以采取要约、承诺方式或者其他方式。</li>
<li>第四百七十二条　要约是希望与他人订立合同的意思表示，该意思表示应当符合下列条件：<blockquote>
<ul>
<li>（一）内容具体确定；</li>
<li>（二）表明经受要约人承诺，要约人即受该意思表示约束。</li>
</ul>
</blockquote>
</li>
<li>第四百七十三条　要约邀请是希望他人向自己发出要约的表示。拍卖公告、招标公告、招股说明书、债券募集办法、基金招募说明书、商业广告和宣传、寄送的价目表等为要约邀请。<br>商业广告和宣传的内容符合要约条件的，构成要约。</li>
<li>第四百七十四条　要约生效的时间适用本法第一百三十七条的规定。</li>
<li>第四百七十五条　要约可以撤回。要约的撤回适用本法第一百四十一条的规定。</li>
<li>第四百七十六条　要约可以撤销，但是有下列情形之一的除外：<blockquote>
<ul>
<li>（一）要约人以确定承诺期限或者其他形式明示要约不可撤销；</li>
<li>（二）受要约人有理由认为要约是不可撤销的，并已经为履行合同做了合理准备工作。</li>
</ul>
</blockquote>
</li>
<li>第四百七十七条　撤销要约的意思表示以对话方式作出的，该意思表示的内容应当在受要约人作出承诺之前为受要约人所知道；撤销要约的意思表示以非对话方式作出的，应当在受要约人作出承诺之前到达受要约人。</li>
<li>第四百七十八条　有下列情形之一的，要约失效：<blockquote>
<ul>
<li>（一）要约被拒绝；</li>
<li>（二）要约被依法撤销；</li>
<li>（三）承诺期限届满，受要约人未作出承诺；</li>
<li>（四）受要约人对要约的内容作出实质性变更。</li>
</ul>
</blockquote>
</li>
<li>第四百七十九条　承诺是受要约人同意要约的意思表示。</li>
<li>第四百八十条　承诺应当以通知的方式作出；但是，根据交易习惯或者要约表明可以通过行为作出承诺的除外。</li>
<li>第四百八十一条　承诺应当在要约确定的期限内到达要约人。<br>要约没有确定承诺期限的，承诺应当依照下列规定到达：<blockquote>
<ul>
<li>（一）要约以对话方式作出的，应当即时作出承诺；</li>
<li>（二）要约以非对话方式作出的，承诺应当在合理期限内到达。</li>
</ul>
</blockquote>
</li>
<li>第四百八十二条　要约以信件或者电报作出的，承诺期限自信件载明的日期或者电报交发之日开始计算。信件未载明日期的，自投寄该信件的邮戳日期开始计算。要约以电话、传真、电子邮件等快速通讯方式作出的，承诺期限自要约到达受要约人时开始计算。</li>
<li>第四百八十三条　承诺生效时合同成立，但是法律另有规定或者当事人另有约定的除外。</li>
<li>第四百八十四条　以通知方式作出的承诺，生效的时间适用本法第一百三十七条的规定。<br>承诺不需要通知的，根据交易习惯或者要约的要求作出承诺的行为时生效。</li>
<li>第四百八十五条　承诺可以撤回。承诺的撤回适用本法第一百四十一条的规定。</li>
<li>第四百八十六条　受要约人超过承诺期限发出承诺，或者在承诺期限内发出承诺，按照通常情形不能及时到达要约人的，为新要约；但是，要约人及时通知受要约人该承诺有效的除外。</li>
<li>第四百八十七条　受要约人在承诺期限内发出承诺，按照通常情形能够及时到达要约人，但是因其他原因致使承诺到达要约人时超过承诺期限的，除要约人及时通知受要约人因承诺超过期限不接受该承诺外，该承诺有效。</li>
<li>第四百八十八条　承诺的内容应当与要约的内容一致。受要约人对要约的内容作出实质性变更的，为新要约。有关合同标的、数量、质量、价款或者报酬、履行期限、履行地点和方式、违约责任和解决争议方法等的变更，是对要约内容的实质性变更。</li>
<li>第四百八十九条　承诺对要约的内容作出非实质性变更的，除要约人及时表示反对或者要约表明承诺不得对要约的内容作出任何变更外，该承诺有效，合同的内容以承诺的内容为准。</li>
<li>第四百九十条　当事人采用合同书形式订立合同的，自当事人均签名、盖章或者按指印时合同成立。在签名、盖章或者按指印之前，当事人一方已经履行主要义务，对方接受时，该合同成立。<br>法律、行政法规规定或者当事人约定合同应当采用书面形式订立，当事人未采用书面形式但是一方已经履行主要义务，对方接受时，该合同成立。</li>
<li>第四百九十一条　当事人采用信件、数据电文等形式订立合同要求签订确认书的，签订确认书时合同成立。<br>当事人一方通过互联网等信息网络发布的商品或者服务信息符合要约条件的，对方选择该商品或者服务并提交订单成功时合同成立，但是当事人另有约定的除外。</li>
<li>第四百九十二条　承诺生效的地点为合同成立的地点。<br>采用数据电文形式订立合同的，收件人的主营业地为合同成立的地点；没有主营业地的，其住所地为合同成立的地点。当事人另有约定的，按照其约定。</li>
<li>第四百九十三条　当事人采用合同书形式订立合同的，最后签名、盖章或者按指印的地点为合同成立的地点，但是当事人另有约定的除外。</li>
<li>第四百九十四条　国家根据抢险救灾、疫情防控或者其他需要下达国家订货任务、指令性任务的，有关民事主体之间应当依照有关法律、行政法规规定的权利和义务订立合同。<br>依照法律、行政法规的规定负有发出要约义务的当事人，应当及时发出合理的要约。<br>依照法律、行政法规的规定负有作出承诺义务的当事人，不得拒绝对方合理的订立合同要求。</li>
<li>第四百九十五条　当事人约定在将来一定期限内订立合同的认购书、订购书、预订书等，构成预约合同。<br>当事人一方不履行预约合同约定的订立合同义务的，对方可以请求其承担预约合同的违约责任。</li>
<li>第四百九十六条　格式条款是当事人为了重复使用而预先拟定，并在订立合同时未与对方协商的条款。<br>采用格式条款订立合同的，提供格式条款的一方应当遵循公平原则确定当事人之间的权利和义务，并采取合理的方式提示对方注意免除或者减轻其责任等与对方有重大利害关系的条款，按照对方的要求，对该条款予以说明。提供格式条款的一方未履行提示或者说明义务，致使对方没有注意或者理解与其有重大利害关系的条款的，对方可以主张该条款不成为合同的内容。</li>
<li>第四百九十七条　有下列情形之一的，该格式条款无效：<blockquote>
<ul>
<li>（一）具有本法第一编第六章第三节和本法第五百零六条规定的无效情形；</li>
<li>（二）提供格式条款一方不合理地免除或者减轻其责任、加重对方责任、限制对方主要权利；</li>
<li>（三）提供格式条款一方排除对方主要权利。</li>
</ul>
</blockquote>
</li>
<li>第四百九十八条　对格式条款的理解发生争议的，应当按照通常理解予以解释。对格式条款有两种以上解释的，应当作出不利于提供格式条款一方的解释。格式条款和非格式条款不一致的，应当采用非格式条款。</li>
<li>第四百九十九条　悬赏人以公开方式声明对完成特定行为的人支付报酬的，完成该行为的人可以请求其支付。</li>
<li>第五百条　当事人在订立合同过程中有下列情形之一，造成对方损失的，应当承担赔偿责任：<blockquote>
<ul>
<li>（一）假借订立合同，恶意进行磋商；</li>
<li>（二）故意隐瞒与订立合同有关的重要事实或者提供虚假情况；</li>
<li>（三）有其他违背诚信原则的行为。</li>
</ul>
</blockquote>
</li>
<li>第五百零一条　当事人在订立合同过程中知悉的商业秘密或者其他应当保密的信息，无论合同是否成立，不得泄露或者不正当地使用；泄露、不正当地使用该商业秘密或者信息，造成对方损失的，应当承担赔偿责任。</li>
</ul>
<h4 id="第三章-合同的效力"><a href="#第三章-合同的效力" class="headerlink" title="第三章　合同的效力"></a>第三章　合同的效力</h4><ul>
<li>第五百零二条　依法成立的合同，自成立时生效，但是法律另有规定或者当事人另有约定的除外。<br>依照法律、行政法规的规定，合同应当办理批准等手续的，依照其规定。未办理批准等手续影响合同生效的，不影响合同中履行报批等义务条款以及相关条款的效力。应当办理申请批准等手续的当事人未履行义务的，对方可以请求其承担违反该义务的责任。<br>依照法律、行政法规的规定，合同的变更、转让、解除等情形应当办理批准等手续的，适用前款规定。</li>
<li>第五百零三条　无权代理人以被代理人的名义订立合同，被代理人已经开始履行合同义务或者接受相对人履行的，视为对合同的追认。</li>
<li>第五百零四条　法人的法定代表人或者非法人组织的负责人超越权限订立的合同，除相对人知道或者应当知道其超越权限外，该代表行为有效，订立的合同对法人或者非法人组织发生效力。</li>
<li>第五百零五条　当事人超越经营范围订立的合同的效力，应当依照本法第一编第六章第三节和本编的有关规定确定，不得仅以超越经营范围确认合同无效。</li>
<li>第五百零六条　合同中的下列免责条款无效：<blockquote>
<ul>
<li>（一）造成对方人身损害的；</li>
<li>（二）因故意或者重大过失造成对方财产损失的。</li>
</ul>
</blockquote>
</li>
<li>第五百零七条　合同不生效、无效、被撤销或者终止的，不影响合同中有关解决争议方法的条款的效力。</li>
<li>第五百零八条　本编对合同的效力没有规定的，适用本法第一编第六章的有关规定。</li>
</ul>
<h4 id="第四章-合同的履行"><a href="#第四章-合同的履行" class="headerlink" title="第四章　合同的履行"></a>第四章　合同的履行</h4><ul>
<li>第五百零九条　当事人应当按照约定全面履行自己的义务。<br>当事人应当遵循诚信原则，根据合同的性质、目的和交易习惯履行通知、协助、保密等义务。<br>当事人在履行合同过程中，应当避免浪费资源、污染环境和破坏生态。</li>
<li>第五百一十条　合同生效后，当事人就质量、价款或者报酬、履行地点等内容没有约定或者约定不明确的，可以协议补充；不能达成补充协议的，按照合同相关条款或者交易习惯确定。</li>
<li>第五百一十一条　当事人就有关合同内容约定不明确，依据前条规定仍不能确定的，适用下列规定：<blockquote>
<ul>
<li>（一）质量要求不明确的，按照强制性国家标准履行；没有强制性国家标准的，按照推荐性国家标准履行；没有推荐性国家标准的，按照行业标准履行；没有国家标准、行业标准的，按照通常标准或者符合合同目的的特定标准履行。</li>
<li>（二）价款或者报酬不明确的，按照订立合同时履行地的市场价格履行；依法应当执行政府定价或者政府指导价的，依照规定履行。</li>
<li>（三）履行地点不明确，给付货币的，在接受货币一方所在地履行；交付不动产的，在不动产所在地履行；其他标的，在履行义务一方所在地履行。</li>
<li>（四）履行期限不明确的，债务人可以随时履行，债权人也可以随时请求履行，但是应当给对方必要的准备时间。</li>
<li>（五）履行方式不明确的，按照有利于实现合同目的的方式履行。</li>
<li>（六）履行费用的负担不明确的，由履行义务一方负担；因债权人原因增加的履行费用，由债权人负担。</li>
</ul>
</blockquote>
</li>
<li>第五百一十二条　通过互联网等信息网络订立的电子合同的标的为交付商品并采用快递物流方式交付的，收货人的签收时间为交付时间。电子合同的标的为提供服务的，生成的电子凭证或者实物凭证中载明的时间为提供服务时间；前述凭证没有载明时间或者载明时间与实际提供服务时间不一致的，以实际提供服务的时间为准。<br>电子合同的标的物为采用在线传输方式交付的，合同标的物进入对方当事人指定的特定系统且能够检索识别的时间为交付时间。<br>电子合同当事人对交付商品或者提供服务的方式、时间另有约定的，按照其约定。</li>
<li>第五百一十三条　执行政府定价或者政府指导价的，在合同约定的交付期限内政府价格调整时，按照交付时的价格计价。逾期交付标的物的，遇价格上涨时，按照原价格执行；价格下降时，按照新价格执行。逾期提取标的物或者逾期付款的，遇价格上涨时，按照新价格执行；价格下降时，按照原价格执行。</li>
<li>第五百一十四条　以支付金钱为内容的债，除法律另有规定或者当事人另有约定外，债权人可以请求债务人以实际履行地的法定货币履行。</li>
<li>第五百一十五条　标的有多项而债务人只需履行其中一项的，债务人享有选择权；但是，法律另有规定、当事人另有约定或者另有交易习惯的除外。<br>享有选择权的当事人在约定期限内或者履行期限届满未作选择，经催告后在合理期限内仍未选择的，选择权转移至对方。</li>
<li>第五百一十六条　当事人行使选择权应当及时通知对方，通知到达对方时，标的确定。标的确定后不得变更，但是经对方同意的除外。<br>可选择的标的发生不能履行情形的，享有选择权的当事人不得选择不能履行的标的，但是该不能履行的情形是由对方造成的除外。</li>
<li>第五百一十七条　债权人为二人以上，标的可分，按照份额各自享有债权的，为按份债权；债务人为二人以上，标的可分，按照份额各自负担债务的，为按份债务。<br>按份债权人或者按份债务人的份额难以确定的，视为份额相同。</li>
<li>第五百一十八条　债权人为二人以上，部分或者全部债权人均可以请求债务人履行债务的，为连带债权；债务人为二人以上，债权人可以请求部分或者全部债务人履行全部债务的，为连带债务。<br>连带债权或者连带债务，由法律规定或者当事人约定。</li>
<li>第五百一十九条　连带债务人之间的份额难以确定的，视为份额相同。<br>实际承担债务超过自己份额的连带债务人，有权就超出部分在其他连带债务人未履行的份额范围内向其追偿，并相应地享有债权人的权利，但是不得损害债权人的利益。其他连带债务人对债权人的抗辩，可以向该债务人主张。<br>被追偿的连带债务人不能履行其应分担份额的，其他连带债务人应当在相应范围内按比例分担。</li>
<li>第五百二十条　部分连带债务人履行、抵销债务或者提存标的物的，其他债务人对债权人的债务在相应范围内消灭；该债务人可以依据前条规定向其他债务人追偿。<br>部分连带债务人的债务被债权人免除的，在该连带债务人应当承担的份额范围内，其他债务人对债权人的债务消灭。<br>部分连带债务人的债务与债权人的债权同归于一人的，在扣除该债务人应当承担的份额后，债权人对其他债务人的债权继续存在。<br>债权人对部分连带债务人的给付受领迟延的，对其他连带债务人发生效力。</li>
<li>第五百二十一条　连带债权人之间的份额难以确定的，视为份额相同。<br>实际受领债权的连带债权人，应当按比例向其他连带债权人返还。<br>连带债权参照适用本章连带债务的有关规定。</li>
<li>第五百二十二条　当事人约定由债务人向第三人履行债务，债务人未向第三人履行债务或者履行债务不符合约定的，应当向债权人承担违约责任。<br>法律规定或者当事人约定第三人可以直接请求债务人向其履行债务，第三人未在合理期限内明确拒绝，债务人未向第三人履行债务或者履行债务不符合约定的，第三人可以请求债务人承担违约责任；债务人对债权人的抗辩，可以向第三人主张。</li>
<li>第五百二十三条　当事人约定由第三人向债权人履行债务，第三人不履行债务或者履行债务不符合约定的，债务人应当向债权人承担违约责任。</li>
<li>第五百二十四条　债务人不履行债务，第三人对履行该债务具有合法利益的，第三人有权向债权人代为履行；但是，根据债务性质、按照当事人约定或者依照法律规定只能由债务人履行的除外。<br>债权人接受第三人履行后，其对债务人的债权转让给第三人，但是债务人和第三人另有约定的除外。</li>
<li>第五百二十五条　当事人互负债务，没有先后履行顺序的，应当同时履行。一方在对方履行之前有权拒绝其履行请求。一方在对方履行债务不符合约定时，有权拒绝其相应的履行请求。</li>
<li>第五百二十六条　当事人互负债务，有先后履行顺序，应当先履行债务一方未履行的，后履行一方有权拒绝其履行请求。先履行一方履行债务不符合约定的，后履行一方有权拒绝其相应的履行请求。</li>
<li>第五百二十七条　应当先履行债务的当事人，有确切证据证明对方有下列情形之一的，可以中止履行：<blockquote>
<ul>
<li>（一）经营状况严重恶化；</li>
<li>（二）转移财产、抽逃资金，以逃避债务；</li>
<li>（三）丧失商业信誉；</li>
<li>（四）有丧失或者可能丧失履行债务能力的其他情形。<br>当事人没有确切证据中止履行的，应当承担违约责任。</li>
</ul>
</blockquote>
</li>
<li>第五百二十八条　当事人依据前条规定中止履行的，应当及时通知对方。对方提供适当担保的，应当恢复履行。中止履行后，对方在合理期限内未恢复履行能力且未提供适当担保的，视为以自己的行为表明不履行主要债务，中止履行的一方可以解除合同并可以请求对方承担违约责任。</li>
<li>第五百二十九条　债权人分立、合并或者变更住所没有通知债务人，致使履行债务发生困难的，债务人可以中止履行或者将标的物提存。</li>
<li>第五百三十条　债权人可以拒绝债务人提前履行债务，但是提前履行不损害债权人利益的除外。<br>债务人提前履行债务给债权人增加的费用，由债务人负担。</li>
<li>第五百三十一条　债权人可以拒绝债务人部分履行债务，但是部分履行不损害债权人利益的除外。<br>债务人部分履行债务给债权人增加的费用，由债务人负担。</li>
<li>第五百三十二条　合同生效后，当事人不得因姓名、名称的变更或者法定代表人、负责人、承办人的变动而不履行合同义务。</li>
<li>第五百三十三条　合同成立后，合同的基础条件发生了当事人在订立合同时无法预见的、不属于商业风险的重大变化，继续履行合同对于当事人一方明显不公平的，受不利影响的当事人可以与对方重新协商；在合理期限内协商不成的，当事人可以请求人民法院或者仲裁机构变更或者解除合同。<br>人民法院或者仲裁机构应当结合案件的实际情况，根据公平原则变更或者解除合同。</li>
<li>第五百三十四条　对当事人利用合同实施危害国家利益、社会公共利益行为的，市场监督管理和其他有关行政主管部门依照法律、行政法规的规定负责监督处理。</li>
</ul>
<h4 id="第五章-合同的保全"><a href="#第五章-合同的保全" class="headerlink" title="第五章　合同的保全"></a>第五章　合同的保全</h4><ul>
<li>第五百三十五条　因债务人怠于行使其债权或者与该债权有关的从权利，影响债权人的到期债权实现的，债权人可以向人民法院请求以自己的名义代位行使债务人对相对人的权利，但是该权利专属于债务人自身的除外。<br>代位权的行使范围以债权人的到期债权为限。债权人行使代位权的必要费用，由债务人负担。<br>相对人对债务人的抗辩，可以向债权人主张。</li>
<li>第五百三十六条　债权人的债权到期前，债务人的债权或者与该债权有关的从权利存在诉讼时效期间即将届满或者未及时申报破产债权等情形，影响债权人的债权实现的，债权人可以代位向债务人的相对人请求其向债务人履行、向破产管理人申报或者作出其他必要的行为。</li>
<li>第五百三十七条　人民法院认定代位权成立的，由债务人的相对人向债权人履行义务，债权人接受履行后，债权人与债务人、债务人与相对人之间相应的权利义务终止。债务人对相对人的债权或者与该债权有关的从权利被采取保全、执行措施，或者债务人破产的，依照相关法律的规定处理。</li>
<li>第五百三十八条　债务人以放弃其债权、放弃债权担保、无偿转让财产等方式无偿处分财产权益，或者恶意延长其到期债权的履行期限，影响债权人的债权实现的，债权人可以请求人民法院撤销债务人的行为。</li>
<li>第五百三十九条　债务人以明显不合理的低价转让财产、以明显不合理的高价受让他人财产或者为他人的债务提供担保，影响债权人的债权实现，债务人的相对人知道或者应当知道该情形的，债权人可以请求人民法院撤销债务人的行为。</li>
<li>第五百四十条　撤销权的行使范围以债权人的债权为限。债权人行使撤销权的必要费用，由债务人负担。</li>
<li>第五百四十一条　撤销权自债权人知道或者应当知道撤销事由之日起一年内行使。自债务人的行为发生之日起五年内没有行使撤销权的，该撤销权消灭。</li>
<li>第五百四十二条　债务人影响债权人的债权实现的行为被撤销的，自始没有法律约束力。</li>
</ul>
<h4 id="第六章-合同的变更和转让"><a href="#第六章-合同的变更和转让" class="headerlink" title="第六章　合同的变更和转让"></a>第六章　合同的变更和转让</h4><ul>
<li>第五百四十三条　当事人协商一致，可以变更合同。</li>
<li>第五百四十四条　当事人对合同变更的内容约定不明确的，推定为未变更。</li>
<li>第五百四十五条　债权人可以将债权的全部或者部分转让给第三人，但是有下列情形之一的除外：<blockquote>
<ul>
<li>（一）根据债权性质不得转让；</li>
<li>（二）按照当事人约定不得转让；</li>
<li>（三）依照法律规定不得转让。<br>当事人约定非金钱债权不得转让的，不得对抗善意第三人。当事人约定金钱债权不得转让的，不得对抗第三人。</li>
</ul>
</blockquote>
</li>
<li>第五百四十六条　债权人转让债权，未通知债务人的，该转让对债务人不发生效力。<br>债权转让的通知不得撤销，但是经受让人同意的除外。</li>
<li>第五百四十七条　债权人转让债权的，受让人取得与债权有关的从权利，但是该从权利专属于债权人自身的除外。<br>受让人取得从权利不因该从权利未办理转移登记手续或者未转移占有而受到影响。</li>
<li>第五百四十八条　债务人接到债权转让通知后，债务人对让与人的抗辩，可以向受让人主张。</li>
<li>第五百四十九条　有下列情形之一的，债务人可以向受让人主张抵销：<blockquote>
<ul>
<li>（一）债务人接到债权转让通知时，债务人对让与人享有债权，且债务人的债权先于转让的债权到期或者同时到期；</li>
<li>（二）债务人的债权与转让的债权是基于同一合同产生。</li>
</ul>
</blockquote>
</li>
<li>第五百五十条　因债权转让增加的履行费用，由让与人负担。</li>
<li>第五百五十一条　债务人将债务的全部或者部分转移给第三人的，应当经债权人同意。<br>债务人或者第三人可以催告债权人在合理期限内予以同意，债权人未作表示的，视为不同意。</li>
<li>第五百五十二条　第三人与债务人约定加入债务并通知债权人，或者第三人向债权人表示愿意加入债务，债权人未在合理期限内明确拒绝的，债权人可以请求第三人在其愿意承担的债务范围内和债务人承担连带债务。</li>
<li>第五百五十三条　债务人转移债务的，新债务人可以主张原债务人对债权人的抗辩；原债务人对债权人享有债权的，新债务人不得向债权人主张抵销。</li>
<li>第五百五十四条　债务人转移债务的，新债务人应当承担与主债务有关的从债务，但是该从债务专属于原债务人自身的除外。</li>
<li>第五百五十五条　当事人一方经对方同意，可以将自己在合同中的权利和义务一并转让给第三人。</li>
<li>第五百五十六条　合同的权利和义务一并转让的，适用债权转让、债务转移的有关规定。</li>
</ul>
<h4 id="第七章-合同的权利义务终止"><a href="#第七章-合同的权利义务终止" class="headerlink" title="第七章　合同的权利义务终止"></a>第七章　合同的权利义务终止</h4><ul>
<li>第五百五十七条　有下列情形之一的，债权债务终止：<blockquote>
<ul>
<li>（一）债务已经履行；</li>
<li>（二）债务相互抵销；</li>
<li>（三）债务人依法将标的物提存；</li>
<li>（四）债权人免除债务；</li>
<li>（五）债权债务同归于一人；</li>
<li>（六）法律规定或者当事人约定终止的其他情形。<br>合同解除的，该合同的权利义务关系终止。</li>
</ul>
</blockquote>
</li>
<li>第五百五十八条　债权债务终止后，当事人应当遵循诚信等原则，根据交易习惯履行通知、协助、保密、旧物回收等义务。</li>
<li>第五百五十九条　债权债务终止时，债权的从权利同时消灭，但是法律另有规定或者当事人另有约定的除外。</li>
<li>第五百六十条　债务人对同一债权人负担的数项债务种类相同，债务人的给付不足以清偿全部债务的，除当事人另有约定外，由债务人在清偿时指定其履行的债务。<br>债务人未作指定的，应当优先履行已经到期的债务；数项债务均到期的，优先履行对债权人缺乏担保或者担保最少的债务；均无担保或者担保相等的，优先履行债务人负担较重的债务；负担相同的，按照债务到期的先后顺序履行；到期时间相同的，按照债务比例履行。</li>
<li>第五百六十一条　债务人在履行主债务外还应当支付利息和实现债权的有关费用，其给付不足以清偿全部债务的，除当事人另有约定外，应当按照下列顺序履行：<blockquote>
<ul>
<li>（一）实现债权的有关费用；</li>
<li>（二）利息；</li>
<li>（三）主债务。</li>
</ul>
</blockquote>
</li>
<li>第五百六十二条　当事人协商一致，可以解除合同。<br>当事人可以约定一方解除合同的事由。解除合同的事由发生时，解除权人可以解除合同。</li>
<li>第五百六十三条　有下列情形之一的，当事人可以解除合同：<blockquote>
<ul>
<li>（一）因不可抗力致使不能实现合同目的；</li>
<li>（二）在履行期限届满前，当事人一方明确表示或者以自己的行为表明不履行主要债务；</li>
<li>（三）当事人一方迟延履行主要债务，经催告后在合理期限内仍未履行；</li>
<li>（四）当事人一方迟延履行债务或者有其他违约行为致使不能实现合同目的；</li>
<li>（五）法律规定的其他情形。<br>以持续履行的债务为内容的不定期合同，当事人可以随时解除合同，但是应当在合理期限之前通知对方。</li>
</ul>
</blockquote>
</li>
<li>第五百六十四条　法律规定或者当事人约定解除权行使期限，期限届满当事人不行使的，该权利消灭。<br>法律没有规定或者当事人没有约定解除权行使期限，自解除权人知道或者应当知道解除事由之日起一年内不行使，或者经对方催告后在合理期限内不行使的，该权利消灭。</li>
<li>第五百六十五条　当事人一方依法主张解除合同的，应当通知对方。合同自通知到达对方时解除；通知载明债务人在一定期限内不履行债务则合同自动解除，债务人在该期限内未履行债务的，合同自通知载明的期限届满时解除。对方对解除合同有异议的，任何一方当事人均可以请求人民法院或者仲裁机构确认解除行为的效力。<br>当事人一方未通知对方，直接以提起诉讼或者申请仲裁的方式依法主张解除合同，人民法院或者仲裁机构确认该主张的，合同自起诉状副本或者仲裁申请书副本送达对方时解除。</li>
<li>第五百六十六条　合同解除后，尚未履行的，终止履行；已经履行的，根据履行情况和合同性质，当事人可以请求恢复原状或者采取其他补救措施，并有权请求赔偿损失。<br>合同因违约解除的，解除权人可以请求违约方承担违约责任，但是当事人另有约定的除外。<br>主合同解除后，担保人对债务人应当承担的民事责任仍应当承担担保责任，但是担保合同另有约定的除外。</li>
<li>第五百六十七条　合同的权利义务关系终止，不影响合同中结算和清理条款的效力。</li>
<li>第五百六十八条　当事人互负债务，该债务的标的物种类、品质相同的，任何一方可以将自己的债务与对方的到期债务抵销；但是，根据债务性质、按照当事人约定或者依照法律规定不得抵销的除外。<br>当事人主张抵销的，应当通知对方。通知自到达对方时生效。抵销不得附条件或者附期限。</li>
<li>第五百六十九条　当事人互负债务，标的物种类、品质不相同的，经协商一致，也可以抵销。</li>
<li>第五百七十条　有下列情形之一，难以履行债务的，债务人可以将标的物提存：<blockquote>
<ul>
<li>（一）债权人无正当理由拒绝受领；</li>
<li>（二）债权人下落不明；</li>
<li>（三）债权人死亡未确定继承人、遗产管理人，或者丧失民事行为能力未确定监护人；</li>
<li>（四）法律规定的其他情形。<br>标的物不适于提存或者提存费用过高的，债务人依法可以拍卖或者变卖标的物，提存所得的价款。</li>
</ul>
</blockquote>
</li>
<li>第五百七十一条　债务人将标的物或者将标的物依法拍卖、变卖所得价款交付提存部门时，提存成立。<br>提存成立的，视为债务人在其提存范围内已经交付标的物。</li>
<li>第五百七十二条　标的物提存后，债务人应当及时通知债权人或者债权人的继承人、遗产管理人、监护人、财产代管人。</li>
<li>第五百七十三条　标的物提存后，毁损、灭失的风险由债权人承担。提存期间，标的物的孳息归债权人所有。提存费用由债权人负担。</li>
<li>第五百七十四条　债权人可以随时领取提存物。但是，债权人对债务人负有到期债务的，在债权人未履行债务或者提供担保之前，提存部门根据债务人的要求应当拒绝其领取提存物。<br>债权人领取提存物的权利，自提存之日起五年内不行使而消灭，提存物扣除提存费用后归国家所有。但是，债权人未履行对债务人的到期债务，或者债权人向提存部门书面表示放弃领取提存物权利的，债务人负担提存费用后有权取回提存物。</li>
<li>第五百七十五条　债权人免除债务人部分或者全部债务的，债权债务部分或者全部终止，但是债务人在合理期限内拒绝的除外。</li>
<li>第五百七十六条　债权和债务同归于一人的，债权债务终止，但是损害第三人利益的除外。</li>
</ul>
<h4 id="第八章-违约责任"><a href="#第八章-违约责任" class="headerlink" title="第八章　违约责任"></a>第八章　违约责任</h4><ul>
<li>第五百七十七条　当事人一方不履行合同义务或者履行合同义务不符合约定的，应当承担继续履行、采取补救措施或者赔偿损失等违约责任。</li>
<li>第五百七十八条　当事人一方明确表示或者以自己的行为表明不履行合同义务的，对方可以在履行期限届满前请求其承担违约责任。</li>
<li>第五百七十九条　当事人一方未支付价款、报酬、租金、利息，或者不履行其他金钱债务的，对方可以请求其支付。</li>
<li>第五百八十条　当事人一方不履行非金钱债务或者履行非金钱债务不符合约定的，对方可以请求履行，但是有下列情形之一的除外：<blockquote>
<ul>
<li>（一）法律上或者事实上不能履行；</li>
<li>（二）债务的标的不适于强制履行或者履行费用过高；</li>
<li>（三）债权人在合理期限内未请求履行。<br>有前款规定的除外情形之一，致使不能实现合同目的的，人民法院或者仲裁机构可以根据当事人的请求终止合同权利义务关系，但是不影响违约责任的承担。</li>
</ul>
</blockquote>
</li>
<li>第五百八十一条　当事人一方不履行债务或者履行债务不符合约定，根据债务的性质不得强制履行的，对方可以请求其负担由第三人替代履行的费用。</li>
<li>第五百八十二条　履行不符合约定的，应当按照当事人的约定承担违约责任。对违约责任没有约定或者约定不明确，依据本法第五百一十条的规定仍不能确定的，受损害方根据标的的性质以及损失的大小，可以合理选择请求对方承担修理、重作、更换、退货、减少价款或者报酬等违约责任。</li>
<li>第五百八十三条　当事人一方不履行合同义务或者履行合同义务不符合约定的，在履行义务或者采取补救措施后，对方还有其他损失的，应当赔偿损失。</li>
<li>第五百八十四条　当事人一方不履行合同义务或者履行合同义务不符合约定，造成对方损失的，损失赔偿额应当相当于因违约所造成的损失，包括合同履行后可以获得的利益；但是，不得超过违约一方订立合同时预见到或者应当预见到的因违约可能造成的损失。</li>
<li>第五百八十五条　当事人可以约定一方违约时应当根据违约情况向对方支付一定数额的违约金，也可以约定因违约产生的损失赔偿额的计算方法。<br>约定的违约金低于造成的损失的，人民法院或者仲裁机构可以根据当事人的请求予以增加；约定的违约金过分高于造成的损失的，人民法院或者仲裁机构可以根据当事人的请求予以适当减少。<br>当事人就迟延履行约定违约金的，违约方支付违约金后，还应当履行债务。</li>
<li>第五百八十六条　当事人可以约定一方向对方给付定金作为债权的担保。定金合同自实际交付定金时成立。<br>定金的数额由当事人约定；但是，不得超过主合同标的额的百分之二十，超过部分不产生定金的效力。实际交付的定金数额多于或者少于约定数额的，视为变更约定的定金数额。</li>
<li>第五百八十七条　债务人履行债务的，定金应当抵作价款或者收回。给付定金的一方不履行债务或者履行债务不符合约定，致使不能实现合同目的的，无权请求返还定金；收受定金的一方不履行债务或者履行债务不符合约定，致使不能实现合同目的的，应当双倍返还定金。</li>
<li>第五百八十八条　当事人既约定违约金，又约定定金的，一方违约时，对方可以选择适用违约金或者定金条款。<br>定金不足以弥补一方违约造成的损失的，对方可以请求赔偿超过定金数额的损失。</li>
<li>第五百八十九条　债务人按照约定履行债务，债权人无正当理由拒绝受领的，债务人可以请求债权人赔偿增加的费用。<br>在债权人受领迟延期间，债务人无须支付利息。</li>
<li>第五百九十条　当事人一方因不可抗力不能履行合同的，根据不可抗力的影响，部分或者全部免除责任，但是法律另有规定的除外。因不可抗力不能履行合同的，应当及时通知对方，以减轻可能给对方造成的损失，并应当在合理期限内提供证明。<br>当事人迟延履行后发生不可抗力的，不免除其违约责任。</li>
<li>第五百九十一条　当事人一方违约后，对方应当采取适当措施防止损失的扩大；没有采取适当措施致使损失扩大的，不得就扩大的损失请求赔偿。<br>当事人因防止损失扩大而支出的合理费用，由违约方负担。</li>
<li>第五百九十二条　当事人都违反合同的，应当各自承担相应的责任。<br>当事人一方违约造成对方损失，对方对损失的发生有过错的，可以减少相应的损失赔偿额。</li>
<li>第五百九十三条　当事人一方因第三人的原因造成违约的，应当依法向对方承担违约责任。当事人一方和第三人之间的纠纷，依照法律规定或者按照约定处理。</li>
<li>第五百九十四条　因国际货物买卖合同和技术进出口合同争议提起诉讼或者申请仲裁的时效期间为四年。</li>
</ul>
<h3 id="第二分编-典型合同"><a href="#第二分编-典型合同" class="headerlink" title="第二分编　典型合同"></a>第二分编　典型合同</h3><h4 id="第九章-买卖合同"><a href="#第九章-买卖合同" class="headerlink" title="第九章　买卖合同"></a>第九章　买卖合同</h4><ul>
<li>第五百九十五条　买卖合同是出卖人转移标的物的所有权于买受人，买受人支付价款的合同。</li>
<li>第五百九十六条　买卖合同的内容一般包括标的物的名称、数量、质量、价款、履行期限、履行地点和方式、包装方式、检验标准和方法、结算方式、合同使用的文字及其效力等条款。</li>
<li>第五百九十七条　因出卖人未取得处分权致使标的物所有权不能转移的，买受人可以解除合同并请求出卖人承担违约责任。<br>法律、行政法规禁止或者限制转让的标的物，依照其规定。</li>
<li>第五百九十八条　出卖人应当履行向买受人交付标的物或者交付提取标的物的单证，并转移标的物所有权的义务。</li>
<li>第五百九十九条　出卖人应当按照约定或者交易习惯向买受人交付提取标的物单证以外的有关单证和资料。</li>
<li>第六百条　出卖具有知识产权的标的物的，除法律另有规定或者当事人另有约定外，该标的物的知识产权不属于买受人。</li>
<li>第六百零一条　出卖人应当按照约定的时间交付标的物。约定交付期限的，出卖人可以在该交付期限内的任何时间交付。</li>
<li>第六百零二条　当事人没有约定标的物的交付期限或者约定不明确的，适用本法第五百一十条、第五百一十一条第四项的规定。</li>
<li>第六百零三条　出卖人应当按照约定的地点交付标的物。<br>当事人没有约定交付地点或者约定不明确，依据本法第五百一十条的规定仍不能确定的，适用下列规定：<blockquote>
<ul>
<li>（一）标的物需要运输的，出卖人应当将标的物交付给第一承运人以运交给买受人；</li>
<li>（二）标的物不需要运输，出卖人和买受人订立合同时知道标的物在某一地点的，出卖人应当在该地点交付标的物；不知道标的物在某一地点的，应当在出卖人订立合同时的营业地交付标的物。</li>
</ul>
</blockquote>
</li>
<li>第六百零四条　标的物毁损、灭失的风险，在标的物交付之前由出卖人承担，交付之后由买受人承担，但是法律另有规定或者当事人另有约定的除外。</li>
<li>第六百零五条　因买受人的原因致使标的物未按照约定的期限交付的，买受人应当自违反约定时起承担标的物毁损、灭失的风险。</li>
<li>第六百零六条　出卖人出卖交由承运人运输的在途标的物，除当事人另有约定外，毁损、灭失的风险自合同成立时起由买受人承担。</li>
<li>第六百零七条　出卖人按照约定将标的物运送至买受人指定地点并交付给承运人后，标的物毁损、灭失的风险由买受人承担。<br>当事人没有约定交付地点或者约定不明确，依据本法第六百零三条第二款第一项的规定标的物需要运输的，出卖人将标的物交付给第一承运人后，标的物毁损、灭失的风险由买受人承担。</li>
<li>第六百零八条　出卖人按照约定或者依据本法第六百零三条第二款第二项的规定将标的物置于交付地点，买受人违反约定没有收取的，标的物毁损、灭失的风险自违反约定时起由买受人承担。</li>
<li>第六百零九条　出卖人按照约定未交付有关标的物的单证和资料的，不影响标的物毁损、灭失风险的转移。</li>
<li>第六百一十条　因标的物不符合质量要求，致使不能实现合同目的的，买受人可以拒绝接受标的物或者解除合同。买受人拒绝接受标的物或者解除合同的，标的物毁损、灭失的风险由出卖人承担。</li>
<li>第六百一十一条　标的物毁损、灭失的风险由买受人承担的，不影响因出卖人履行义务不符合约定，买受人请求其承担违约责任的权利。</li>
<li>第六百一十二条　出卖人就交付的标的物，负有保证第三人对该标的物不享有任何权利的义务，但是法律另有规定的除外。</li>
<li>第六百一十三条　买受人订立合同时知道或者应当知道第三人对买卖的标的物享有权利的，出卖人不承担前条规定的义务。</li>
<li>第六百一十四条　买受人有确切证据证明第三人对标的物享有权利的，可以中止支付相应的价款，但是出卖人提供适当担保的除外。</li>
<li>第六百一十五条　出卖人应当按照约定的质量要求交付标的物。出卖人提供有关标的物质量说明的，交付的标的物应当符合该说明的质量要求。</li>
<li>第六百一十六条　当事人对标的物的质量要求没有约定或者约定不明确，依据本法第五百一十条的规定仍不能确定的，适用本法第五百一十一条第一项的规定。</li>
<li>第六百一十七条　出卖人交付的标的物不符合质量要求的，买受人可以依据本法第五百八十二条至第五百八十四条的规定请求承担违约责任。</li>
<li>第六百一十八条　当事人约定减轻或者免除出卖人对标的物瑕疵承担的责任，因出卖人故意或者重大过失不告知买受人标的物瑕疵的，出卖人无权主张减轻或者免除责任。</li>
<li>第六百一十九条　出卖人应当按照约定的包装方式交付标的物。对包装方式没有约定或者约定不明确，依据本法第五百一十条的规定仍不能确定的，应当按照通用的方式包装；没有通用方式的，应当采取足以保护标的物且有利于节约资源、保护生态环境的包装方式。</li>
<li>第六百二十条　买受人收到标的物时应当在约定的检验期限内检验。没有约定检验期限的，应当及时检验。</li>
<li>第六百二十一条　当事人约定检验期限的，买受人应当在检验期限内将标的物的数量或者质量不符合约定的情形通知出卖人。买受人怠于通知的，视为标的物的数量或者质量符合约定。<br>当事人没有约定检验期限的，买受人应当在发现或者应当发现标的物的数量或者质量不符合约定的合理期限内通知出卖人。买受人在合理期限内未通知或者自收到标的物之日起二年内未通知出卖人的，视为标的物的数量或者质量符合约定；但是，对标的物有质量保证期的，适用质量保证期，不适用该二年的规定。<br>出卖人知道或者应当知道提供的标的物不符合约定的，买受人不受前两款规定的通知时间的限制。</li>
<li>第六百二十二条　当事人约定的检验期限过短，根据标的物的性质和交易习惯，买受人在检验期限内难以完成全面检验的，该期限仅视为买受人对标的物的外观瑕疵提出异议的期限。<br>约定的检验期限或者质量保证期短于法律、行政法规规定期限的，应当以法律、行政法规规定的期限为准。</li>
<li>第六百二十三条　当事人对检验期限未作约定，买受人签收的送货单、确认单等载明标的物数量、型号、规格的，推定买受人已经对数量和外观瑕疵进行检验，但是有相关证据足以推翻的除外。</li>
<li>第六百二十四条　出卖人依照买受人的指示向第三人交付标的物，出卖人和买受人约定的检验标准与买受人和第三人约定的检验标准不一致的，以出卖人和买受人约定的检验标准为准。</li>
<li>第六百二十五条　依照法律、行政法规的规定或者按照当事人的约定，标的物在有效使用年限届满后应予回收的，出卖人负有自行或者委托第三人对标的物予以回收的义务。</li>
<li>第六百二十六条　买受人应当按照约定的数额和支付方式支付价款。对价款的数额和支付方式没有约定或者约定不明确的，适用本法第五百一十条、第五百一十一条第二项和第五项的规定。</li>
<li>第六百二十七条　买受人应当按照约定的地点支付价款。对支付地点没有约定或者约定不明确，依据本法第五百一十条的规定仍不能确定的，买受人应当在出卖人的营业地支付；但是，约定支付价款以交付标的物或者交付提取标的物单证为条件的，在交付标的物或者交付提取标的物单证的所在地支付。</li>
<li>第六百二十八条　买受人应当按照约定的时间支付价款。对支付时间没有约定或者约定不明确，依据本法第五百一十条的规定仍不能确定的，买受人应当在收到标的物或者提取标的物单证的同时支付。</li>
<li>第六百二十九条　出卖人多交标的物的，买受人可以接收或者拒绝接收多交的部分。买受人接收多交部分的，按照约定的价格支付价款；买受人拒绝接收多交部分的，应当及时通知出卖人。</li>
<li>第六百三十条　标的物在交付之前产生的孳息，归出卖人所有；交付之后产生的孳息，归买受人所有。但是，当事人另有约定的除外。</li>
<li>第六百三十一条　因标的物的主物不符合约定而解除合同的，解除合同的效力及于从物。因标的物的从物不符合约定被解除的，解除的效力不及于主物。</li>
<li>第六百三十二条　标的物为数物，其中一物不符合约定的，买受人可以就该物解除。但是，该物与他物分离使标的物的价值显受损害的，买受人可以就数物解除合同。</li>
<li>第六百三十三条　出卖人分批交付标的物的，出卖人对其中一批标的物不交付或者交付不符合约定，致使该批标的物不能实现合同目的的，买受人可以就该批标的物解除。<br>出卖人不交付其中一批标的物或者交付不符合约定，致使之后其他各批标的物的交付不能实现合同目的的，买受人可以就该批以及之后其他各批标的物解除。<br>买受人如果就其中一批标的物解除，该批标的物与其他各批标的物相互依存的，可以就已经交付和未交付的各批标的物解除。</li>
<li>第六百三十四条　分期付款的买受人未支付到期价款的数额达到全部价款的五分之一，经催告后在合理期限内仍未支付到期价款的，出卖人可以请求买受人支付全部价款或者解除合同。<br>出卖人解除合同的，可以向买受人请求支付该标的物的使用费。</li>
<li>第六百三十五条　凭样品买卖的当事人应当封存样品，并可以对样品质量予以说明。出卖人交付的标的物应当与样品及其说明的质量相同。</li>
<li>第六百三十六条　凭样品买卖的买受人不知道样品有隐蔽瑕疵的，即使交付的标的物与样品相同，出卖人交付的标的物的质量仍然应当符合同种物的通常标准。</li>
<li>第六百三十七条　试用买卖的当事人可以约定标的物的试用期限。对试用期限没有约定或者约定不明确，依据本法第五百一十条的规定仍不能确定的，由出卖人确定。</li>
<li>第六百三十八条　试用买卖的买受人在试用期内可以购买标的物，也可以拒绝购买。试用期限届满，买受人对是否购买标的物未作表示的，视为购买。<br>试用买卖的买受人在试用期内已经支付部分价款或者对标的物实施出卖、出租、设立担保物权等行为的，视为同意购买。</li>
<li>第六百三十九条　试用买卖的当事人对标的物使用费没有约定或者约定不明确的，出卖人无权请求买受人支付。</li>
<li>第六百四十条　标的物在试用期内毁损、灭失的风险由出卖人承担。</li>
<li>第六百四十一条　当事人可以在买卖合同中约定买受人未履行支付价款或者其他义务的，标的物的所有权属于出卖人。<br>出卖人对标的物保留的所有权，未经登记，不得对抗善意第三人。</li>
<li>第六百四十二条　当事人约定出卖人保留合同标的物的所有权，在标的物所有权转移前，买受人有下列情形之一，造成出卖人损害的，除当事人另有约定外，出卖人有权取回标的物：<blockquote>
<ul>
<li>（一）未按照约定支付价款，经催告后在合理期限内仍未支付；</li>
<li>（二）未按照约定完成特定条件；</li>
<li>（三）将标的物出卖、出质或者作出其他不当处分。<br>出卖人可以与买受人协商取回标的物；协商不成的，可以参照适用担保物权的实现程序。</li>
</ul>
</blockquote>
</li>
<li>第六百四十三条　出卖人依据前条第一款的规定取回标的物后，买受人在双方约定或者出卖人指定的合理回赎期限内，消除出卖人取回标的物的事由的，可以请求回赎标的物。<br>买受人在回赎期限内没有回赎标的物，出卖人可以以合理价格将标的物出卖给第三人，出卖所得价款扣除买受人未支付的价款以及必要费用后仍有剩余的，应当返还买受人；不足部分由买受人清偿。</li>
<li>第六百四十四条　招标投标买卖的当事人的权利和义务以及招标投标程序等，依照有关法律、行政法规的规定。</li>
<li>第六百四十五条　拍卖的当事人的权利和义务以及拍卖程序等，依照有关法律、行政法规的规定。</li>
<li>第六百四十六条　法律对其他有偿合同有规定的，依照其规定；没有规定的，参照适用买卖合同的有关规定。</li>
<li>第六百四十七条　当事人约定易货交易，转移标的物的所有权的，参照适用买卖合同的有关规定。</li>
</ul>
<h4 id="第十章-供用电、水、气、热力合同"><a href="#第十章-供用电、水、气、热力合同" class="headerlink" title="第十章　供用电、水、气、热力合同"></a>第十章　供用电、水、气、热力合同</h4><ul>
<li>第六百四十八条　供用电合同是供电人向用电人供电，用电人支付电费的合同。<br>向社会公众供电的供电人，不得拒绝用电人合理的订立合同要求。</li>
<li>第六百四十九条　供用电合同的内容一般包括供电的方式、质量、时间，用电容量、地址、性质，计量方式，电价、电费的结算方式，供用电设施的维护责任等条款。</li>
<li>第六百五十条　供用电合同的履行地点，按照当事人约定；当事人没有约定或者约定不明确的，供电设施的产权分界处为履行地点。</li>
<li>第六百五十一条　供电人应当按照国家规定的供电质量标准和约定安全供电。供电人未按照国家规定的供电质量标准和约定安全供电，造成用电人损失的，应当承担赔偿责任。</li>
<li>第六百五十二条　供电人因供电设施计划检修、临时检修、依法限电或者用电人违法用电等原因，需要中断供电时，应当按照国家有关规定事先通知用电人；未事先通知用电人中断供电，造成用电人损失的，应当承担赔偿责任。</li>
<li>第六百五十三条　因自然灾害等原因断电，供电人应当按照国家有关规定及时抢修；未及时抢修，造成用电人损失的，应当承担赔偿责任。</li>
<li>第六百五十四条　用电人应当按照国家有关规定和当事人的约定及时支付电费。用电人逾期不支付电费的，应当按照约定支付违约金。经催告用电人在合理期限内仍不支付电费和违约金的，供电人可以按照国家规定的程序中止供电。<br>供电人依据前款规定中止供电的，应当事先通知用电人。</li>
<li>第六百五十五条　用电人应当按照国家有关规定和当事人的约定安全、节约和计划用电。用电人未按照国家有关规定和当事人的约定用电，造成供电人损失的，应当承担赔偿责任。</li>
<li>第六百五十六条　供用水、供用气、供用热力合同，参照适用供用电合同的有关规定。</li>
</ul>
<h4 id="第十一章-赠与合同"><a href="#第十一章-赠与合同" class="headerlink" title="第十一章　赠与合同"></a>第十一章　赠与合同</h4><ul>
<li>第六百五十七条　赠与合同是赠与人将自己的财产无偿给予受赠人，受赠人表示接受赠与的合同。</li>
<li>第六百五十八条　赠与人在赠与财产的权利转移之前可以撤销赠与。<br>经过公证的赠与合同或者依法不得撤销的具有救灾、扶贫、助残等公益、道德义务性质的赠与合同，不适用前款规定。</li>
<li>第六百五十九条　赠与的财产依法需要办理登记或者其他手续的，应当办理有关手续。</li>
<li>第六百六十条　经过公证的赠与合同或者依法不得撤销的具有救灾、扶贫、助残等公益、道德义务性质的赠与合同，赠与人不交付赠与财产的，受赠人可以请求交付。<br>依据前款规定应当交付的赠与财产因赠与人故意或者重大过失致使毁损、灭失的，赠与人应当承担赔偿责任。</li>
<li>第六百六十一条　赠与可以附义务。<br>赠与附义务的，受赠人应当按照约定履行义务。</li>
<li>第六百六十二条　赠与的财产有瑕疵的，赠与人不承担责任。附义务的赠与，赠与的财产有瑕疵的，赠与人在附义务的限度内承担与出卖人相同的责任。<br>赠与人故意不告知瑕疵或者保证无瑕疵，造成受赠人损失的，应当承担赔偿责任。</li>
<li>第六百六十三条　受赠人有下列情形之一的，赠与人可以撤销赠与：<blockquote>
<ul>
<li>（一）严重侵害赠与人或者赠与人近亲属的合法权益；</li>
<li>（二）对赠与人有扶养义务而不履行；</li>
<li>（三）不履行赠与合同约定的义务。<br>赠与人的撤销权，自知道或者应当知道撤销事由之日起一年内行使。</li>
</ul>
</blockquote>
</li>
<li>第六百六十四条　因受赠人的违法行为致使赠与人死亡或者丧失民事行为能力的，赠与人的继承人或者法定代理人可以撤销赠与。<br>赠与人的继承人或者法定代理人的撤销权，自知道或者应当知道撤销事由之日起六个月内行使。</li>
<li>第六百六十五条　撤销权人撤销赠与的，可以向受赠人请求返还赠与的财产。</li>
<li>第六百六十六条　赠与人的经济状况显著恶化，严重影响其生产经营或者家庭生活的，可以不再履行赠与义务。</li>
</ul>
<h4 id="第十二章-借款合同"><a href="#第十二章-借款合同" class="headerlink" title="第十二章　借款合同"></a>第十二章　借款合同</h4><ul>
<li>第六百六十七条　借款合同是借款人向贷款人借款，到期返还借款并支付利息的合同。</li>
<li>第六百六十八条　借款合同应当采用书面形式，但是自然人之间借款另有约定的除外。<br>借款合同的内容一般包括借款种类、币种、用途、数额、利率、期限和还款方式等条款。</li>
<li>第六百六十九条　订立借款合同，借款人应当按照贷款人的要求提供与借款有关的业务活动和财务状况的真实情况。</li>
<li>第六百七十条　借款的利息不得预先在本金中扣除。利息预先在本金中扣除的，应当按照实际借款数额返还借款并计算利息。</li>
<li>第六百七十一条　贷款人未按照约定的日期、数额提供借款，造成借款人损失的，应当赔偿损失。<br>借款人未按照约定的日期、数额收取借款的，应当按照约定的日期、数额支付利息。</li>
<li>第六百七十二条　贷款人按照约定可以检查、监督借款的使用情况。借款人应当按照约定向贷款人定期提供有关财务会计报表或者其他资料。</li>
<li>第六百七十三条　借款人未按照约定的借款用途使用借款的，贷款人可以停止发放借款、提前收回借款或者解除合同。</li>
<li>第六百七十四条　借款人应当按照约定的期限支付利息。对支付利息的期限没有约定或者约定不明确，依据本法第五百一十条的规定仍不能确定，借款期间不满一年的，应当在返还借款时一并支付；借款期间一年以上的，应当在每届满一年时支付，剩余期间不满一年的，应当在返还借款时一并支付。</li>
<li>第六百七十五条　借款人应当按照约定的期限返还借款。对借款期限没有约定或者约定不明确，依据本法第五百一十条的规定仍不能确定的，借款人可以随时返还；贷款人可以催告借款人在合理期限内返还。</li>
<li>第六百七十六条　借款人未按照约定的期限返还借款的，应当按照约定或者国家有关规定支付逾期利息。</li>
<li>第六百七十七条　借款人提前返还借款的，除当事人另有约定外，应当按照实际借款的期间计算利息。</li>
<li>第六百七十八条　借款人可以在还款期限届满前向贷款人申请展期；贷款人同意的，可以展期。</li>
<li>第六百七十九条　自然人之间的借款合同，自贷款人提供借款时成立。</li>
<li>第六百八十条　禁止高利放贷，借款的利率不得违反国家有关规定。<br>借款合同对支付利息没有约定的，视为没有利息。<br>借款合同对支付利息约定不明确，当事人不能达成补充协议的，按照当地或者当事人的交易方式、交易习惯、市场利率等因素确定利息；自然人之间借款的，视为没有利息。</li>
</ul>
<h4 id="第十三章-保证合同"><a href="#第十三章-保证合同" class="headerlink" title="第十三章　保证合同"></a>第十三章　保证合同</h4><p>第一节　一般规定</p>
<ul>
<li>第六百八十一条　保证合同是为保障债权的实现，保证人和债权人约定，当债务人不履行到期债务或者发生当事人约定的情形时，保证人履行债务或者承担责任的合同。</li>
<li>第六百八十二条　保证合同是主债权债务合同的从合同。主债权债务合同无效的，保证合同无效，但是法律另有规定的除外。<br>保证合同被确认无效后，债务人、保证人、债权人有过错的，应当根据其过错各自承担相应的民事责任。</li>
<li>第六百八十三条　机关法人不得为保证人，但是经国务院批准为使用外国政府或者国际经济组织贷款进行转贷的除外。<br>以公益为目的的非营利法人、非法人组织不得为保证人。</li>
<li>第六百八十四条　保证合同的内容一般包括被保证的主债权的种类、数额，债务人履行债务的期限，保证的方式、范围和期间等条款。</li>
<li>第六百八十五条　保证合同可以是单独订立的书面合同，也可以是主债权债务合同中的保证条款。<br>第三人单方以书面形式向债权人作出保证，债权人接收且未提出异议的，保证合同成立。</li>
<li>第六百八十六条　保证的方式包括一般保证和连带责任保证。<br>当事人在保证合同中对保证方式没有约定或者约定不明确的，按照一般保证承担保证责任。</li>
<li>第六百八十七条　当事人在保证合同中约定，债务人不能履行债务时，由保证人承担保证责任的，为一般保证。<br>一般保证的保证人在主合同纠纷未经审判或者仲裁，并就债务人财产依法强制执行仍不能履行债务前，有权拒绝向债权人承担保证责任，但是有下列情形之一的除外：<blockquote>
<ul>
<li>（一）债务人下落不明，且无财产可供执行；</li>
<li>（二）人民法院已经受理债务人破产案件；</li>
<li>（三）债权人有证据证明债务人的财产不足以履行全部债务或者丧失履行债务能力；</li>
<li>（四）保证人书面表示放弃本款规定的权利。</li>
</ul>
</blockquote>
</li>
<li>第六百八十八条　当事人在保证合同中约定保证人和债务人对债务承担连带责任的，为连带责任保证。<br>连带责任保证的债务人不履行到期债务或者发生当事人约定的情形时，债权人可以请求债务人履行债务，也可以请求保证人在其保证范围内承担保证责任。</li>
<li>第六百八十九条　保证人可以要求债务人提供反担保。</li>
<li>第六百九十条　保证人与债权人可以协商订立最高额保证的合同，约定在最高债权额限度内就一定期间连续发生的债权提供保证。<br>最高额保证除适用本章规定外，参照适用本法第二编最高额抵押权的有关规定。<br>第二节　保证责任</li>
<li>第六百九十一条　保证的范围包括主债权及其利息、违约金、损害赔偿金和实现债权的费用。当事人另有约定的，按照其约定。</li>
<li>第六百九十二条　保证期间是确定保证人承担保证责任的期间，不发生中止、中断和延长。<br>债权人与保证人可以约定保证期间，但是约定的保证期间早于主债务履行期限或者与主债务履行期限同时届满的，视为没有约定；没有约定或者约定不明确的，保证期间为主债务履行期限届满之日起六个月。<br>债权人与债务人对主债务履行期限没有约定或者约定不明确的，保证期间自债权人请求债务人履行债务的宽限期届满之日起计算。</li>
<li>第六百九十三条　一般保证的债权人未在保证期间对债务人提起诉讼或者申请仲裁的，保证人不再承担保证责任。<br>连带责任保证的债权人未在保证期间请求保证人承担保证责任的，保证人不再承担保证责任。</li>
<li>第六百九十四条　一般保证的债权人在保证期间届满前对债务人提起诉讼或者申请仲裁的，从保证人拒绝承担保证责任的权利消灭之日起，开始计算保证债务的诉讼时效。<br>连带责任保证的债权人在保证期间届满前请求保证人承担保证责任的，从债权人请求保证人承担保证责任之日起，开始计算保证债务的诉讼时效。</li>
<li>第六百九十五条　债权人和债务人未经保证人书面同意，协商变更主债权债务合同内容，减轻债务的，保证人仍对变更后的债务承担保证责任；加重债务的，保证人对加重的部分不承担保证责任。<br>债权人和债务人变更主债权债务合同的履行期限，未经保证人书面同意的，保证期间不受影响。</li>
<li>第六百九十六条　债权人转让全部或者部分债权，未通知保证人的，该转让对保证人不发生效力。<br>保证人与债权人约定禁止债权转让，债权人未经保证人书面同意转让债权的，保证人对受让人不再承担保证责任。</li>
<li>第六百九十七条　债权人未经保证人书面同意，允许债务人转移全部或者部分债务，保证人对未经其同意转移的债务不再承担保证责任，但是债权人和保证人另有约定的除外。<br>第三人加入债务的，保证人的保证责任不受影响。</li>
<li>第六百九十八条　一般保证的保证人在主债务履行期限届满后，向债权人提供债务人可供执行财产的真实情况，债权人放弃或者怠于行使权利致使该财产不能被执行的，保证人在其提供可供执行财产的价值范围内不再承担保证责任。</li>
<li>第六百九十九条　同一债务有两个以上保证人的，保证人应当按照保证合同约定的保证份额，承担保证责任；没有约定保证份额的，债权人可以请求任何一个保证人在其保证范围内承担保证责任。</li>
<li>第七百条　保证人承担保证责任后，除当事人另有约定外，有权在其承担保证责任的范围内向债务人追偿，享有债权人对债务人的权利，但是不得损害债权人的利益。</li>
<li>第七百零一条　保证人可以主张债务人对债权人的抗辩。债务人放弃抗辩的，保证人仍有权向债权人主张抗辩。</li>
<li>第七百零二条　债务人对债权人享有抵销权或者撤销权的，保证人可以在相应范围内拒绝承担保证责任。</li>
</ul>
<h4 id="第十四章-租赁合同"><a href="#第十四章-租赁合同" class="headerlink" title="第十四章　租赁合同"></a>第十四章　租赁合同</h4><ul>
<li>第七百零三条　租赁合同是出租人将租赁物交付承租人使用、收益，承租人支付租金的合同。</li>
<li>第七百零四条　租赁合同的内容一般包括租赁物的名称、数量、用途、租赁期限、租金及其支付期限和方式、租赁物维修等条款。</li>
<li>第七百零五条　租赁期限不得超过二十年。超过二十年的，超过部分无效。<br>租赁期限届满，当事人可以续订租赁合同；但是，约定的租赁期限自续订之日起不得超过二十年。</li>
<li>第七百零六条　当事人未依照法律、行政法规规定办理租赁合同登记备案手续的，不影响合同的效力。</li>
<li>第七百零七条　租赁期限六个月以上的，应当采用书面形式。当事人未采用书面形式，无法确定租赁期限的，视为不定期租赁。</li>
<li>第七百零八条　出租人应当按照约定将租赁物交付承租人，并在租赁期限内保持租赁物符合约定的用途。</li>
<li>第七百零九条　承租人应当按照约定的方法使用租赁物。对租赁物的使用方法没有约定或者约定不明确，依据本法第五百一十条的规定仍不能确定的，应当根据租赁物的性质使用。</li>
<li>第七百一十条　承租人按照约定的方法或者根据租赁物的性质使用租赁物，致使租赁物受到损耗的，不承担赔偿责任。</li>
<li>第七百一十一条　承租人未按照约定的方法或者未根据租赁物的性质使用租赁物，致使租赁物受到损失的，出租人可以解除合同并请求赔偿损失。</li>
<li>第七百一十二条　出租人应当履行租赁物的维修义务，但是当事人另有约定的除外。</li>
<li>第七百一十三条　承租人在租赁物需要维修时可以请求出租人在合理期限内维修。出租人未履行维修义务的，承租人可以自行维修，维修费用由出租人负担。因维修租赁物影响承租人使用的，应当相应减少租金或者延长租期。<br>因承租人的过错致使租赁物需要维修的，出租人不承担前款规定的维修义务。</li>
<li>第七百一十四条　承租人应当妥善保管租赁物，因保管不善造成租赁物毁损、灭失的，应当承担赔偿责任。</li>
<li>第七百一十五条　承租人经出租人同意，可以对租赁物进行改善或者增设他物。<br>承租人未经出租人同意，对租赁物进行改善或者增设他物的，出租人可以请求承租人恢复原状或者赔偿损失。</li>
<li>第七百一十六条　承租人经出租人同意，可以将租赁物转租给第三人。承租人转租的，承租人与出租人之间的租赁合同继续有效；第三人造成租赁物损失的，承租人应当赔偿损失。<br>承租人未经出租人同意转租的，出租人可以解除合同。</li>
<li>第七百一十七条　承租人经出租人同意将租赁物转租给第三人，转租期限超过承租人剩余租赁期限的，超过部分的约定对出租人不具有法律约束力，但是出租人与承租人另有约定的除外。</li>
<li>第七百一十八条　出租人知道或者应当知道承租人转租，但是在六个月内未提出异议的，视为出租人同意转租。</li>
<li>第七百一十九条　承租人拖欠租金的，次承租人可以代承租人支付其欠付的租金和违约金，但是转租合同对出租人不具有法律约束力的除外。<br>次承租人代为支付的租金和违约金，可以充抵次承租人应当向承租人支付的租金；超出其应付的租金数额的，可以向承租人追偿。</li>
<li>第七百二十条　在租赁期限内因占有、使用租赁物获得的收益，归承租人所有，但是当事人另有约定的除外。</li>
<li>第七百二十一条　承租人应当按照约定的期限支付租金。对支付租金的期限没有约定或者约定不明确，依据本法第五百一十条的规定仍不能确定，租赁期限不满一年的，应当在租赁期限届满时支付；租赁期限一年以上的，应当在每届满一年时支付，剩余期限不满一年的，应当在租赁期限届满时支付。</li>
<li>第七百二十二条　承租人无正当理由未支付或者迟延支付租金的，出租人可以请求承租人在合理期限内支付；承租人逾期不支付的，出租人可以解除合同。</li>
<li>第七百二十三条　因第三人主张权利，致使承租人不能对租赁物使用、收益的，承租人可以请求减少租金或者不支付租金。<br>第三人主张权利的，承租人应当及时通知出租人。</li>
<li>第七百二十四条　有下列情形之一，非因承租人原因致使租赁物无法使用的，承租人可以解除合同：<blockquote>
<ul>
<li>（一）租赁物被司法机关或者行政机关依法查封、扣押；</li>
<li>（二）租赁物权属有争议；</li>
<li>（三）租赁物具有违反法律、行政法规关于使用条件的强制性规定情形。</li>
</ul>
</blockquote>
</li>
<li>第七百二十五条　租赁物在承租人按照租赁合同占有期限内发生所有权变动的，不影响租赁合同的效力。</li>
<li>第七百二十六条　出租人出卖租赁房屋的，应当在出卖之前的合理期限内通知承租人，承租人享有以同等条件优先购买的权利；但是，房屋按份共有人行使优先购买权或者出租人将房屋出卖给近亲属的除外。<br>出租人履行通知义务后，承租人在十五日内未明确表示购买的，视为承租人放弃优先购买权。</li>
<li>第七百二十七条　出租人委托拍卖人拍卖租赁房屋的，应当在拍卖五日前通知承租人。承租人未参加拍卖的，视为放弃优先购买权。</li>
<li>第七百二十八条　出租人未通知承租人或者有其他妨害承租人行使优先购买权情形的，承租人可以请求出租人承担赔偿责任。但是，出租人与第三人订立的房屋买卖合同的效力不受影响。</li>
<li>第七百二十九条　因不可归责于承租人的事由，致使租赁物部分或者全部毁损、灭失的，承租人可以请求减少租金或者不支付租金；因租赁物部分或者全部毁损、灭失，致使不能实现合同目的的，承租人可以解除合同。</li>
<li>第七百三十条　当事人对租赁期限没有约定或者约定不明确，依据本法第五百一十条的规定仍不能确定的，视为不定期租赁；当事人可以随时解除合同，但是应当在合理期限之前通知对方。</li>
<li>第七百三十一条　租赁物危及承租人的安全或者健康的，即使承租人订立合同时明知该租赁物质量不合格，承租人仍然可以随时解除合同。</li>
<li>第七百三十二条　承租人在房屋租赁期限内死亡的，与其生前共同居住的人或者共同经营人可以按照原租赁合同租赁该房屋。</li>
<li>第七百三十三条　租赁期限届满，承租人应当返还租赁物。返还的租赁物应当符合按照约定或者根据租赁物的性质使用后的状态。</li>
<li>第七百三十四条　租赁期限届满，承租人继续使用租赁物，出租人没有提出异议的，原租赁合同继续有效，但是租赁期限为不定期。<br>租赁期限届满，房屋承租人享有以同等条件优先承租的权利。</li>
</ul>
<h4 id="第十五章-融资租赁合同"><a href="#第十五章-融资租赁合同" class="headerlink" title="第十五章　融资租赁合同"></a>第十五章　融资租赁合同</h4><ul>
<li>第七百三十五条　融资租赁合同是出租人根据承租人对出卖人、租赁物的选择，向出卖人购买租赁物，提供给承租人使用，承租人支付租金的合同。</li>
<li>第七百三十六条　融资租赁合同的内容一般包括租赁物的名称、数量、规格、技术性能、检验方法，租赁期限，租金构成及其支付期限和方式、币种，租赁期限届满租赁物的归属等条款。<br>融资租赁合同应当采用书面形式。</li>
<li>第七百三十七条　当事人以虚构租赁物方式订立的融资租赁合同无效。</li>
<li>第七百三十八条　依照法律、行政法规的规定，对于租赁物的经营使用应当取得行政许可的，出租人未取得行政许可不影响融资租赁合同的效力。</li>
<li>第七百三十九条　出租人根据承租人对出卖人、租赁物的选择订立的买卖合同，出卖人应当按照约定向承租人交付标的物，承租人享有与受领标的物有关的买受人的权利。</li>
<li>第七百四十条　出卖人违反向承租人交付标的物的义务，有下列情形之一的，承租人可以拒绝受领出卖人向其交付的标的物：<blockquote>
<ul>
<li>（一）标的物严重不符合约定；</li>
<li>（二）未按照约定交付标的物，经承租人或者出租人催告后在合理期限内仍未交付。<br>承租人拒绝受领标的物的，应当及时通知出租人。</li>
</ul>
</blockquote>
</li>
<li>第七百四十一条　出租人、出卖人、承租人可以约定，出卖人不履行买卖合同义务的，由承租人行使索赔的权利。承租人行使索赔权利的，出租人应当协助。</li>
<li>第七百四十二条　承租人对出卖人行使索赔权利，不影响其履行支付租金的义务。但是，承租人依赖出租人的技能确定租赁物或者出租人干预选择租赁物的，承租人可以请求减免相应租金。</li>
<li>第七百四十三条　出租人有下列情形之一，致使承租人对出卖人行使索赔权利失败的，承租人有权请求出租人承担相应的责任：<blockquote>
<ul>
<li>（一）明知租赁物有质量瑕疵而不告知承租人；</li>
<li>（二）承租人行使索赔权利时，未及时提供必要协助。<br>出租人怠于行使只能由其对出卖人行使的索赔权利，造成承租人损失的，承租人有权请求出租人承担赔偿责任。</li>
</ul>
</blockquote>
</li>
<li>第七百四十四条　出租人根据承租人对出卖人、租赁物的选择订立的买卖合同，未经承租人同意，出租人不得变更与承租人有关的合同内容。</li>
<li>第七百四十五条　出租人对租赁物享有的所有权，未经登记，不得对抗善意第三人。</li>
<li>第七百四十六条　融资租赁合同的租金，除当事人另有约定外，应当根据购买租赁物的大部分或者全部成本以及出租人的合理利润确定。</li>
<li>第七百四十七条　租赁物不符合约定或者不符合使用目的的，出租人不承担责任。但是，承租人依赖出租人的技能确定租赁物或者出租人干预选择租赁物的除外。</li>
<li>第七百四十八条　出租人应当保证承租人对租赁物的占有和使用。<br>出租人有下列情形之一的，承租人有权请求其赔偿损失：<blockquote>
<ul>
<li>（一）无正当理由收回租赁物；</li>
<li>（二）无正当理由妨碍、干扰承租人对租赁物的占有和使用；</li>
<li>（三）因出租人的原因致使第三人对租赁物主张权利；</li>
<li>（四）不当影响承租人对租赁物占有和使用的其他情形。</li>
</ul>
</blockquote>
</li>
<li>第七百四十九条　承租人占有租赁物期间，租赁物造成第三人人身损害或者财产损失的，出租人不承担责任。</li>
<li>第七百五十条　承租人应当妥善保管、使用租赁物。<br>承租人应当履行占有租赁物期间的维修义务。</li>
<li>第七百五十一条　承租人占有租赁物期间，租赁物毁损、灭失的，出租人有权请求承租人继续支付租金，但是法律另有规定或者当事人另有约定的除外。</li>
<li>第七百五十二条　承租人应当按照约定支付租金。承租人经催告后在合理期限内仍不支付租金的，出租人可以请求支付全部租金；也可以解除合同，收回租赁物。</li>
<li>第七百五十三条　承租人未经出租人同意，将租赁物转让、抵押、质押、投资入股或者以其他方式处分的，出租人可以解除融资租赁合同。</li>
<li>第七百五十四条　有下列情形之一的，出租人或者承租人可以解除融资租赁合同：<blockquote>
<ul>
<li>（一）出租人与出卖人订立的买卖合同解除、被确认无效或者被撤销，且未能重新订立买卖合同；</li>
<li>（二）租赁物因不可归责于当事人的原因毁损、灭失，且不能修复或者确定替代物；</li>
<li>（三）因出卖人的原因致使融资租赁合同的目的不能实现。</li>
</ul>
</blockquote>
</li>
<li>第七百五十五条　融资租赁合同因买卖合同解除、被确认无效或者被撤销而解除，出卖人、租赁物系由承租人选择的，出租人有权请求承租人赔偿相应损失；但是，因出租人原因致使买卖合同解除、被确认无效或者被撤销的除外。<br>出租人的损失已经在买卖合同解除、被确认无效或者被撤销时获得赔偿的，承租人不再承担相应的赔偿责任。</li>
<li>第七百五十六条　融资租赁合同因租赁物交付承租人后意外毁损、灭失等不可归责于当事人的原因解除的，出租人可以请求承租人按照租赁物折旧情况给予补偿。</li>
<li>第七百五十七条　出租人和承租人可以约定租赁期限届满租赁物的归属；对租赁物的归属没有约定或者约定不明确，依据本法第五百一十条的规定仍不能确定的，租赁物的所有权归出租人。</li>
<li>第七百五十八条　当事人约定租赁期限届满租赁物归承租人所有，承租人已经支付大部分租金，但是无力支付剩余租金，出租人因此解除合同收回租赁物，收回的租赁物的价值超过承租人欠付的租金以及其他费用的，承租人可以请求相应返还。<br>当事人约定租赁期限届满租赁物归出租人所有，因租赁物毁损、灭失或者附合、混合于他物致使承租人不能返还的，出租人有权请求承租人给予合理补偿。</li>
<li>第七百五十九条　当事人约定租赁期限届满，承租人仅需向出租人支付象征性价款的，视为约定的租金义务履行完毕后租赁物的所有权归承租人。</li>
<li>第七百六十条　融资租赁合同无效，当事人就该情形下租赁物的归属有约定的，按照其约定；没有约定或者约定不明确的，租赁物应当返还出租人。但是，因承租人原因致使合同无效，出租人不请求返还或者返还后会显著降低租赁物效用的，租赁物的所有权归承租人，由承租人给予出租人合理补偿。</li>
</ul>
<h4 id="第十六章-保理合同"><a href="#第十六章-保理合同" class="headerlink" title="第十六章　保理合同"></a>第十六章　保理合同</h4><ul>
<li>第七百六十一条　保理合同是应收账款债权人将现有的或者将有的应收账款转让给保理人，保理人提供资金融通、应收账款管理或者催收、应收账款债务人付款担保等服务的合同。</li>
<li>第七百六十二条　保理合同的内容一般包括业务类型、服务范围、服务期限、基础交易合同情况、应收账款信息、保理融资款或者服务报酬及其支付方式等条款。<br>保理合同应当采用书面形式。</li>
<li>第七百六十三条　应收账款债权人与债务人虚构应收账款作为转让标的，与保理人订立保理合同的，应收账款债务人不得以应收账款不存在为由对抗保理人，但是保理人明知虚构的除外。</li>
<li>第七百六十四条　保理人向应收账款债务人发出应收账款转让通知的，应当表明保理人身份并附有必要凭证。</li>
<li>第七百六十五条　应收账款债务人接到应收账款转让通知后，应收账款债权人与债务人无正当理由协商变更或者终止基础交易合同，对保理人产生不利影响的，对保理人不发生效力。</li>
<li>第七百六十六条　当事人约定有追索权保理的，保理人可以向应收账款债权人主张返还保理融资款本息或者回购应收账款债权，也可以向应收账款债务人主张应收账款债权。保理人向应收账款债务人主张应收账款债权，在扣除保理融资款本息和相关费用后有剩余的，剩余部分应当返还给应收账款债权人。</li>
<li>第七百六十七条　当事人约定无追索权保理的，保理人应当向应收账款债务人主张应收账款债权，保理人取得超过保理融资款本息和相关费用的部分，无需向应收账款债权人返还。</li>
<li>第七百六十八条　应收账款债权人就同一应收账款订立多个保理合同，致使多个保理人主张权利的，已经登记的先于未登记的取得应收账款；均已经登记的，按照登记时间的先后顺序取得应收账款；均未登记的，由最先到达应收账款债务人的转让通知中载明的保理人取得应收账款；既未登记也未通知的，按照保理融资款或者服务报酬的比例取得应收账款。</li>
<li>第七百六十九条　本章没有规定的，适用本编第六章债权转让的有关规定。</li>
</ul>
<h4 id="第十七章-承揽合同"><a href="#第十七章-承揽合同" class="headerlink" title="第十七章　承揽合同"></a>第十七章　承揽合同</h4><ul>
<li>第七百七十条　承揽合同是承揽人按照定作人的要求完成工作，交付工作成果，定作人支付报酬的合同。<br>承揽包括加工、定作、修理、复制、测试、检验等工作。</li>
<li>第七百七十一条　承揽合同的内容一般包括承揽的标的、数量、质量、报酬，承揽方式，材料的提供，履行期限，验收标准和方法等条款。</li>
<li>第七百七十二条　承揽人应当以自己的设备、技术和劳力，完成主要工作，但是当事人另有约定的除外。<br>承揽人将其承揽的主要工作交由第三人完成的，应当就该第三人完成的工作成果向定作人负责；未经定作人同意的，定作人也可以解除合同。</li>
<li>第七百七十三条　承揽人可以将其承揽的辅助工作交由第三人完成。承揽人将其承揽的辅助工作交由第三人完成的，应当就该第三人完成的工作成果向定作人负责。</li>
<li>第七百七十四条　承揽人提供材料的，应当按照约定选用材料，并接受定作人检验。</li>
<li>第七百七十五条　定作人提供材料的，应当按照约定提供材料。承揽人对定作人提供的材料应当及时检验，发现不符合约定时，应当及时通知定作人更换、补齐或者采取其他补救措施。<br>承揽人不得擅自更换定作人提供的材料，不得更换不需要修理的零部件。</li>
<li>第七百七十六条　承揽人发现定作人提供的图纸或者技术要求不合理的，应当及时通知定作人。因定作人怠于答复等原因造成承揽人损失的，应当赔偿损失。</li>
<li>第七百七十七条　定作人中途变更承揽工作的要求，造成承揽人损失的，应当赔偿损失。</li>
<li>第七百七十八条　承揽工作需要定作人协助的，定作人有协助的义务。定作人不履行协助义务致使承揽工作不能完成的，承揽人可以催告定作人在合理期限内履行义务，并可以顺延履行期限；定作人逾期不履行的，承揽人可以解除合同。</li>
<li>第七百七十九条　承揽人在工作期间，应当接受定作人必要的监督检验。定作人不得因监督检验妨碍承揽人的正常工作。</li>
<li>第七百八十条　承揽人完成工作的，应当向定作人交付工作成果，并提交必要的技术资料和有关质量证明。定作人应当验收该工作成果。</li>
<li>第七百八十一条　承揽人交付的工作成果不符合质量要求的，定作人可以合理选择请求承揽人承担修理、重作、减少报酬、赔偿损失等违约责任。</li>
<li>第七百八十二条　定作人应当按照约定的期限支付报酬。对支付报酬的期限没有约定或者约定不明确，依据本法第五百一十条的规定仍不能确定的，定作人应当在承揽人交付工作成果时支付；工作成果部分交付的，定作人应当相应支付。</li>
<li>第七百八十三条　定作人未向承揽人支付报酬或者材料费等价款的，承揽人对完成的工作成果享有留置权或者有权拒绝交付，但是当事人另有约定的除外。</li>
<li>第七百八十四条　承揽人应当妥善保管定作人提供的材料以及完成的工作成果，因保管不善造成毁损、灭失的，应当承担赔偿责任。</li>
<li>第七百八十五条　承揽人应当按照定作人的要求保守秘密，未经定作人许可，不得留存复制品或者技术资料。</li>
<li>第七百八十六条　共同承揽人对定作人承担连带责任，但是当事人另有约定的除外。</li>
<li>第七百八十七条　定作人在承揽人完成工作前可以随时解除合同，造成承揽人损失的，应当赔偿损失。</li>
</ul>
<h4 id="第十八章-建设工程合同"><a href="#第十八章-建设工程合同" class="headerlink" title="第十八章　建设工程合同"></a>第十八章　建设工程合同</h4><ul>
<li>第七百八十八条　建设工程合同是承包人进行工程建设，发包人支付价款的合同。<br>建设工程合同包括工程勘察、设计、施工合同。</li>
<li>第七百八十九条　建设工程合同应当采用书面形式。</li>
<li>第七百九十条　建设工程的招标投标活动，应当依照有关法律的规定公开、公平、公正进行。</li>
<li>第七百九十一条　发包人可以与总承包人订立建设工程合同，也可以分别与勘察人、设计人、施工人订立勘察、设计、施工承包合同。发包人不得将应当由一个承包人完成的建设工程支解成若干部分发包给数个承包人。<br>总承包人或者勘察、设计、施工承包人经发包人同意，可以将自己承包的部分工作交由第三人完成。第三人就其完成的工作成果与总承包人或者勘察、设计、施工承包人向发包人承担连带责任。承包人不得将其承包的全部建设工程转包给第三人或者将其承包的全部建设工程支解以后以分包的名义分别转包给第三人。<br>禁止承包人将工程分包给不具备相应资质条件的单位。禁止分包单位将其承包的工程再分包。建设工程主体结构的施工必须由承包人自行完成。</li>
<li>第七百九十二条　国家重大建设工程合同，应当按照国家规定的程序和国家批准的投资计划、可行性研究报告等文件订立。</li>
<li>第七百九十三条　建设工程施工合同无效，但是建设工程经验收合格的，可以参照合同关于工程价款的约定折价补偿承包人。<br>建设工程施工合同无效，且建设工程经验收不合格的，按照以下情形处理：<blockquote>
<ul>
<li>（一）修复后的建设工程经验收合格的，发包人可以请求承包人承担修复费用；</li>
<li>（二）修复后的建设工程经验收不合格的，承包人无权请求参照合同关于工程价款的约定折价补偿。<br>发包人对因建设工程不合格造成的损失有过错的，应当承担相应的责任。</li>
</ul>
</blockquote>
</li>
<li>第七百九十四条　勘察、设计合同的内容一般包括提交有关基础资料和概预算等文件的期限、质量要求、费用以及其他协作条件等条款。</li>
<li>第七百九十五条　施工合同的内容一般包括工程范围、建设工期、中间交工工程的开工和竣工时间、工程质量、工程造价、技术资料交付时间、材料和设备供应责任、拨款和结算、竣工验收、质量保修范围和质量保证期、相互协作等条款。</li>
<li>第七百九十六条　建设工程实行监理的，发包人应当与监理人采用书面形式订立委托监理合同。发包人与监理人的权利和义务以及法律责任，应当依照本编委托合同以及其他有关法律、行政法规的规定。</li>
<li>第七百九十七条　发包人在不妨碍承包人正常作业的情况下，可以随时对作业进度、质量进行检查。</li>
<li>第七百九十八条　隐蔽工程在隐蔽以前，承包人应当通知发包人检查。发包人没有及时检查的，承包人可以顺延工程日期，并有权请求赔偿停工、窝工等损失。</li>
<li>第七百九十九条　建设工程竣工后，发包人应当根据施工图纸及说明书、国家颁发的施工验收规范和质量检验标准及时进行验收。验收合格的，发包人应当按照约定支付价款，并接收该建设工程。<br>建设工程竣工经验收合格后，方可交付使用；未经验收或者验收不合格的，不得交付使用。</li>
<li>第八百条　勘察、设计的质量不符合要求或者未按照期限提交勘察、设计文件拖延工期，造成发包人损失的，勘察人、设计人应当继续完善勘察、设计，减收或者免收勘察、设计费并赔偿损失。</li>
<li>第八百零一条　因施工人的原因致使建设工程质量不符合约定的，发包人有权请求施工人在合理期限内无偿修理或者返工、改建。经过修理或者返工、改建后，造成逾期交付的，施工人应当承担违约责任。</li>
<li>第八百零二条　因承包人的原因致使建设工程在合理使用期限内造成人身损害和财产损失的，承包人应当承担赔偿责任。</li>
<li>第八百零三条　发包人未按照约定的时间和要求提供原材料、设备、场地、资金、技术资料的，承包人可以顺延工程日期，并有权请求赔偿停工、窝工等损失。</li>
<li>第八百零四条　因发包人的原因致使工程中途停建、缓建的，发包人应当采取措施弥补或者减少损失，赔偿承包人因此造成的停工、窝工、倒运、机械设备调迁、材料和构件积压等损失和实际费用。</li>
<li>第八百零五条　因发包人变更计划，提供的资料不准确，或者未按照期限提供必需的勘察、设计工作条件而造成勘察、设计的返工、停工或者修改设计，发包人应当按照勘察人、设计人实际消耗的工作量增付费用。</li>
<li>第八百零六条　承包人将建设工程转包、违法分包的，发包人可以解除合同。<br>发包人提供的主要建筑材料、建筑构配件和设备不符合强制性标准或者不履行协助义务，致使承包人无法施工，经催告后在合理期限内仍未履行相应义务的，承包人可以解除合同。<br>合同解除后，已经完成的建设工程质量合格的，发包人应当按照约定支付相应的工程价款；已经完成的建设工程质量不合格的，参照本法第七百九十三条的规定处理。</li>
<li>第八百零七条　发包人未按照约定支付价款的，承包人可以催告发包人在合理期限内支付价款。发包人逾期不支付的，除根据建设工程的性质不宜折价、拍卖外，承包人可以与发包人协议将该工程折价，也可以请求人民法院将该工程依法拍卖。建设工程的价款就该工程折价或者拍卖的价款优先受偿。</li>
<li>第八百零八条　本章没有规定的，适用承揽合同的有关规定。</li>
</ul>
<h4 id="第十九章-运输合同"><a href="#第十九章-运输合同" class="headerlink" title="第十九章　运输合同"></a>第十九章　运输合同</h4><p>第一节　一般规定</p>
<ul>
<li>第八百零九条　运输合同是承运人将旅客或者货物从起运地点运输到约定地点，旅客、托运人或者收货人支付票款或者运输费用的合同。</li>
<li>第八百一十条　从事公共运输的承运人不得拒绝旅客、托运人通常、合理的运输要求。</li>
<li>第八百一十一条　承运人应当在约定期限或者合理期限内将旅客、货物安全运输到约定地点。</li>
<li>第八百一十二条　承运人应当按照约定的或者通常的运输路线将旅客、货物运输到约定地点。</li>
<li>第八百一十三条　旅客、托运人或者收货人应当支付票款或者运输费用。承运人未按照约定路线或者通常路线运输增加票款或者运输费用的，旅客、托运人或者收货人可以拒绝支付增加部分的票款或者运输费用。<br>第二节　客运合同</li>
<li>第八百一十四条　客运合同自承运人向旅客出具客票时成立，但是当事人另有约定或者另有交易习惯的除外。</li>
<li>第八百一十五条　旅客应当按照有效客票记载的时间、班次和座位号乘坐。旅客无票乘坐、超程乘坐、越级乘坐或者持不符合减价条件的优惠客票乘坐的，应当补交票款，承运人可以按照规定加收票款；旅客不支付票款的，承运人可以拒绝运输。<br>实名制客运合同的旅客丢失客票的，可以请求承运人挂失补办，承运人不得再次收取票款和其他不合理费用。</li>
<li>第八百一十六条　旅客因自己的原因不能按照客票记载的时间乘坐的，应当在约定的期限内办理退票或者变更手续；逾期办理的，承运人可以不退票款，并不再承担运输义务。</li>
<li>第八百一十七条　旅客随身携带行李应当符合约定的限量和品类要求；超过限量或者违反品类要求携带行李的，应当办理托运手续。</li>
<li>第八百一十八条　旅客不得随身携带或者在行李中夹带易燃、易爆、有毒、有腐蚀性、有放射性以及可能危及运输工具上人身和财产安全的危险物品或者违禁物品。<br>旅客违反前款规定的，承运人可以将危险物品或者违禁物品卸下、销毁或者送交有关部门。旅客坚持携带或者夹带危险物品或者违禁物品的，承运人应当拒绝运输。</li>
<li>第八百一十九条　承运人应当严格履行安全运输义务，及时告知旅客安全运输应当注意的事项。旅客对承运人为安全运输所作的合理安排应当积极协助和配合。</li>
<li>第八百二十条　承运人应当按照有效客票记载的时间、班次和座位号运输旅客。承运人迟延运输或者有其他不能正常运输情形的，应当及时告知和提醒旅客，采取必要的安置措施，并根据旅客的要求安排改乘其他班次或者退票；由此造成旅客损失的，承运人应当承担赔偿责任，但是不可归责于承运人的除外。</li>
<li>第八百二十一条　承运人擅自降低服务标准的，应当根据旅客的请求退票或者减收票款；提高服务标准的，不得加收票款。</li>
<li>第八百二十二条　承运人在运输过程中，应当尽力救助患有急病、分娩、遇险的旅客。</li>
<li>第八百二十三条　承运人应当对运输过程中旅客的伤亡承担赔偿责任；但是，伤亡是旅客自身健康原因造成的或者承运人证明伤亡是旅客故意、重大过失造成的除外。<br>前款规定适用于按照规定免票、持优待票或者经承运人许可搭乘的无票旅客。</li>
<li>第八百二十四条　在运输过程中旅客随身携带物品毁损、灭失，承运人有过错的，应当承担赔偿责任。<br>旅客托运的行李毁损、灭失的，适用货物运输的有关规定。<br>第三节　货运合同</li>
<li>第八百二十五条　托运人办理货物运输，应当向承运人准确表明收货人的姓名、名称或者凭指示的收货人，货物的名称、性质、重量、数量，收货地点等有关货物运输的必要情况。<br>因托运人申报不实或者遗漏重要情况，造成承运人损失的，托运人应当承担赔偿责任。</li>
<li>第八百二十六条　货物运输需要办理审批、检验等手续的，托运人应当将办理完有关手续的文件提交承运人。</li>
<li>第八百二十七条　托运人应当按照约定的方式包装货物。对包装方式没有约定或者约定不明确的，适用本法第六百一十九条的规定。<br>托运人违反前款规定的，承运人可以拒绝运输。</li>
<li>第八百二十八条　托运人托运易燃、易爆、有毒、有腐蚀性、有放射性等危险物品的，应当按照国家有关危险物品运输的规定对危险物品妥善包装，做出危险物品标志和标签，并将有关危险物品的名称、性质和防范措施的书面材料提交承运人。<br>托运人违反前款规定的，承运人可以拒绝运输，也可以采取相应措施以避免损失的发生，因此产生的费用由托运人负担。</li>
<li>第八百二十九条　在承运人将货物交付收货人之前，托运人可以要求承运人中止运输、返还货物、变更到达地或者将货物交给其他收货人，但是应当赔偿承运人因此受到的损失。</li>
<li>第八百三十条　货物运输到达后，承运人知道收货人的，应当及时通知收货人，收货人应当及时提货。收货人逾期提货的，应当向承运人支付保管费等费用。</li>
<li>第八百三十一条　收货人提货时应当按照约定的期限检验货物。对检验货物的期限没有约定或者约定不明确，依据本法第五百一十条的规定仍不能确定的，应当在合理期限内检验货物。收货人在约定的期限或者合理期限内对货物的数量、毁损等未提出异议的，视为承运人已经按照运输单证的记载交付的初步证据。</li>
<li>第八百三十二条　承运人对运输过程中货物的毁损、灭失承担赔偿责任。但是，承运人证明货物的毁损、灭失是因不可抗力、货物本身的自然性质或者合理损耗以及托运人、收货人的过错造成的，不承担赔偿责任。</li>
<li>第八百三十三条　货物的毁损、灭失的赔偿额，当事人有约定的，按照其约定；没有约定或者约定不明确，依据本法第五百一十条的规定仍不能确定的，按照交付或者应当交付时货物到达地的市场价格计算。法律、行政法规对赔偿额的计算方法和赔偿限额另有规定的，依照其规定。</li>
<li>第八百三十四条　两个以上承运人以同一运输方式联运的，与托运人订立合同的承运人应当对全程运输承担责任；损失发生在某一运输区段的，与托运人订立合同的承运人和该区段的承运人承担连带责任。</li>
<li>第八百三十五条　货物在运输过程中因不可抗力灭失，未收取运费的，承运人不得请求支付运费；已经收取运费的，托运人可以请求返还。法律另有规定的，依照其规定。</li>
<li>第八百三十六条　托运人或者收货人不支付运费、保管费或者其他费用的，承运人对相应的运输货物享有留置权，但是当事人另有约定的除外。</li>
<li>第八百三十七条　收货人不明或者收货人无正当理由拒绝受领货物的，承运人依法可以提存货物。<br>第四节　多式联运合同</li>
<li>第八百三十八条　多式联运经营人负责履行或者组织履行多式联运合同，对全程运输享有承运人的权利，承担承运人的义务。</li>
<li>第八百三十九条　多式联运经营人可以与参加多式联运的各区段承运人就多式联运合同的各区段运输约定相互之间的责任；但是，该约定不影响多式联运经营人对全程运输承担的义务。</li>
<li>第八百四十条　多式联运经营人收到托运人交付的货物时，应当签发多式联运单据。按照托运人的要求，多式联运单据可以是可转让单据，也可以是不可转让单据。</li>
<li>第八百四十一条　因托运人托运货物时的过错造成多式联运经营人损失的，即使托运人已经转让多式联运单据，托运人仍然应当承担赔偿责任。</li>
<li>第八百四十二条　货物的毁损、灭失发生于多式联运的某一运输区段的，多式联运经营人的赔偿责任和责任限额，适用调整该区段运输方式的有关法律规定；货物毁损、灭失发生的运输区段不能确定的，依照本章规定承担赔偿责任。</li>
</ul>
<h4 id="第二十章-技术合同"><a href="#第二十章-技术合同" class="headerlink" title="第二十章　技术合同"></a>第二十章　技术合同</h4><p>第一节　一般规定</p>
<ul>
<li>第八百四十三条　技术合同是当事人就技术开发、转让、许可、咨询或者服务订立的确立相互之间权利和义务的合同。</li>
<li>第八百四十四条　订立技术合同，应当有利于知识产权的保护和科学技术的进步，促进科学技术成果的研发、转化、应用和推广。</li>
<li>第八百四十五条　技术合同的内容一般包括项目的名称，标的的内容、范围和要求，履行的计划、地点和方式，技术信息和资料的保密，技术成果的归属和收益的分配办法，验收标准和方法，名词和术语的解释等条款。<br>与履行合同有关的技术背景资料、可行性论证和技术评价报告、项目任务书和计划书、技术标准、技术规范、原始设计和工艺文件，以及其他技术文档，按照当事人的约定可以作为合同的组成部分。<br>技术合同涉及专利的，应当注明发明创造的名称、专利申请人和专利权人、申请日期、申请号、专利号以及专利权的有效期限。</li>
<li>第八百四十六条　技术合同价款、报酬或者使用费的支付方式由当事人约定，可以采取一次总算、一次总付或者一次总算、分期支付，也可以采取提成支付或者提成支付附加预付入门费的方式。<br>约定提成支付的，可以按照产品价格、实施专利和使用技术秘密后新增的产值、利润或者产品销售额的一定比例提成，也可以按照约定的其他方式计算。提成支付的比例可以采取固定比例、逐年递增比例或者逐年递减比例。<br>约定提成支付的，当事人可以约定查阅有关会计账目的办法。</li>
<li>第八百四十七条　职务技术成果的使用权、转让权属于法人或者非法人组织的，法人或者非法人组织可以就该项职务技术成果订立技术合同。法人或者非法人组织订立技术合同转让职务技术成果时，职务技术成果的完成人享有以同等条件优先受让的权利。<br>职务技术成果是执行法人或者非法人组织的工作任务，或者主要是利用法人或者非法人组织的物质技术条件所完成的技术成果。</li>
<li>第八百四十八条　非职务技术成果的使用权、转让权属于完成技术成果的个人，完成技术成果的个人可以就该项非职务技术成果订立技术合同。</li>
<li>第八百四十九条　完成技术成果的个人享有在有关技术成果文件上写明自己是技术成果完成者的权利和取得荣誉证书、奖励的权利。</li>
<li>第八百五十条　非法垄断技术或者侵害他人技术成果的技术合同无效。<br>第二节　技术开发合同</li>
<li>第八百五十一条　技术开发合同是当事人之间就新技术、新产品、新工艺、新品种或者新材料及其系统的研究开发所订立的合同。<br>技术开发合同包括委托开发合同和合作开发合同。<br>技术开发合同应当采用书面形式。<br>当事人之间就具有实用价值的科技成果实施转化订立的合同，参照适用技术开发合同的有关规定。</li>
<li>第八百五十二条　委托开发合同的委托人应当按照约定支付研究开发经费和报酬，提供技术资料，提出研究开发要求，完成协作事项，接受研究开发成果。</li>
<li>第八百五十三条　委托开发合同的研究开发人应当按照约定制定和实施研究开发计划，合理使用研究开发经费，按期完成研究开发工作，交付研究开发成果，提供有关的技术资料和必要的技术指导，帮助委托人掌握研究开发成果。</li>
<li>第八百五十四条　委托开发合同的当事人违反约定造成研究开发工作停滞、延误或者失败的，应当承担违约责任。</li>
<li>第八百五十五条　合作开发合同的当事人应当按照约定进行投资，包括以技术进行投资，分工参与研究开发工作，协作配合研究开发工作。</li>
<li>第八百五十六条　合作开发合同的当事人违反约定造成研究开发工作停滞、延误或者失败的，应当承担违约责任。</li>
<li>第八百五十七条　作为技术开发合同标的的技术已经由他人公开，致使技术开发合同的履行没有意义的，当事人可以解除合同。</li>
<li>第八百五十八条　技术开发合同履行过程中，因出现无法克服的技术困难，致使研究开发失败或者部分失败的，该风险由当事人约定；没有约定或者约定不明确，依据本法第五百一十条的规定仍不能确定的，风险由当事人合理分担。<br>当事人一方发现前款规定的可能致使研究开发失败或者部分失败的情形时，应当及时通知另一方并采取适当措施减少损失；没有及时通知并采取适当措施，致使损失扩大的，应当就扩大的损失承担责任。</li>
<li>第八百五十九条　委托开发完成的发明创造，除法律另有规定或者当事人另有约定外，申请专利的权利属于研究开发人。研究开发人取得专利权的，委托人可以依法实施该专利。<br>研究开发人转让专利申请权的，委托人享有以同等条件优先受让的权利。</li>
<li>第八百六十条　合作开发完成的发明创造，申请专利的权利属于合作开发的当事人共有；当事人一方转让其共有的专利申请权的，其他各方享有以同等条件优先受让的权利。但是，当事人另有约定的除外。<br>合作开发的当事人一方声明放弃其共有的专利申请权的，除当事人另有约定外，可以由另一方单独申请或者由其他各方共同申请。申请人取得专利权的，放弃专利申请权的一方可以免费实施该专利。<br>合作开发的当事人一方不同意申请专利的，另一方或者其他各方不得申请专利。</li>
<li>第八百六十一条　委托开发或者合作开发完成的技术秘密成果的使用权、转让权以及收益的分配办法，由当事人约定；没有约定或者约定不明确，依据本法第五百一十条的规定仍不能确定的，在没有相同技术方案被授予专利权前，当事人均有使用和转让的权利。但是，委托开发的研究开发人不得在向委托人交付研究开发成果之前，将研究开发成果转让给第三人。<br>第三节　技术转让合同和技术许可合同</li>
<li>第八百六十二条　技术转让合同是合法拥有技术的权利人，将现有特定的专利、专利申请、技术秘密的相关权利让与他人所订立的合同。<br>技术许可合同是合法拥有技术的权利人，将现有特定的专利、技术秘密的相关权利许可他人实施、使用所订立的合同。<br>技术转让合同和技术许可合同中关于提供实施技术的专用设备、原材料或者提供有关的技术咨询、技术服务的约定，属于合同的组成部分。</li>
<li>第八百六十三条　技术转让合同包括专利权转让、专利申请权转让、技术秘密转让等合同。<br>技术许可合同包括专利实施许可、技术秘密使用许可等合同。<br>技术转让合同和技术许可合同应当采用书面形式。</li>
<li>第八百六十四条　技术转让合同和技术许可合同可以约定实施专利或者使用技术秘密的范围，但是不得限制技术竞争和技术发展。</li>
<li>第八百六十五条　专利实施许可合同仅在该专利权的存续期限内有效。专利权有效期限届满或者专利权被宣告无效的，专利权人不得就该专利与他人订立专利实施许可合同。</li>
<li>第八百六十六条　专利实施许可合同的许可人应当按照约定许可被许可人实施专利，交付实施专利有关的技术资料，提供必要的技术指导。</li>
<li>第八百六十七条　专利实施许可合同的被许可人应当按照约定实施专利，不得许可约定以外的第三人实施该专利，并按照约定支付使用费。</li>
<li>第八百六十八条　技术秘密转让合同的让与人和技术秘密使用许可合同的许可人应当按照约定提供技术资料，进行技术指导，保证技术的实用性、可靠性，承担保密义务。<br>前款规定的保密义务，不限制许可人申请专利，但是当事人另有约定的除外。</li>
<li>第八百六十九条　技术秘密转让合同的受让人和技术秘密使用许可合同的被许可人应当按照约定使用技术，支付转让费、使用费，承担保密义务。</li>
<li>第八百七十条　技术转让合同的让与人和技术许可合同的许可人应当保证自己是所提供的技术的合法拥有者，并保证所提供的技术完整、无误、有效，能够达到约定的目标。</li>
<li>第八百七十一条　技术转让合同的受让人和技术许可合同的被许可人应当按照约定的范围和期限，对让与人、许可人提供的技术中尚未公开的秘密部分，承担保密义务。</li>
<li>第八百七十二条　许可人未按照约定许可技术的，应当返还部分或者全部使用费，并应当承担违约责任；实施专利或者使用技术秘密超越约定的范围的，违反约定擅自许可第三人实施该项专利或者使用该项技术秘密的，应当停止违约行为，承担违约责任；违反约定的保密义务的，应当承担违约责任。<br>让与人承担违约责任，参照适用前款规定。</li>
<li>第八百七十三条　被许可人未按照约定支付使用费的，应当补交使用费并按照约定支付违约金；不补交使用费或者支付违约金的，应当停止实施专利或者使用技术秘密，交还技术资料，承担违约责任；实施专利或者使用技术秘密超越约定的范围的，未经许可人同意擅自许可第三人实施该专利或者使用该技术秘密的，应当停止违约行为，承担违约责任；违反约定的保密义务的，应当承担违约责任。<br>受让人承担违约责任，参照适用前款规定。</li>
<li>第八百七十四条　受让人或者被许可人按照约定实施专利、使用技术秘密侵害他人合法权益的，由让与人或者许可人承担责任，但是当事人另有约定的除外。</li>
<li>第八百七十五条　当事人可以按照互利的原则，在合同中约定实施专利、使用技术秘密后续改进的技术成果的分享办法；没有约定或者约定不明确，依据本法第五百一十条的规定仍不能确定的，一方后续改进的技术成果，其他各方无权分享。</li>
<li>第八百七十六条　集成电路布图设计专有权、植物新品种权、计算机软件著作权等其他知识产权的转让和许可，参照适用本节的有关规定。</li>
<li>第八百七十七条　法律、行政法规对技术进出口合同或者专利、专利申请合同另有规定的，依照其规定。<br>第四节　技术咨询合同和技术服务合同</li>
<li>第八百七十八条　技术咨询合同是当事人一方以技术知识为对方就特定技术项目提供可行性论证、技术预测、专题技术调查、分析评价报告等所订立的合同。<br>技术服务合同是当事人一方以技术知识为对方解决特定技术问题所订立的合同，不包括承揽合同和建设工程合同。</li>
<li>第八百七十九条　技术咨询合同的委托人应当按照约定阐明咨询的问题，提供技术背景材料及有关技术资料，接受受托人的工作成果，支付报酬。</li>
<li>第八百八十条　技术咨询合同的受托人应当按照约定的期限完成咨询报告或者解答问题，提出的咨询报告应当达到约定的要求。</li>
<li>第八百八十一条　技术咨询合同的委托人未按照约定提供必要的资料，影响工作进度和质量，不接受或者逾期接受工作成果的，支付的报酬不得追回，未支付的报酬应当支付。<br>技术咨询合同的受托人未按期提出咨询报告或者提出的咨询报告不符合约定的，应当承担减收或者免收报酬等违约责任。<br>技术咨询合同的委托人按照受托人符合约定要求的咨询报告和意见作出决策所造成的损失，由委托人承担，但是当事人另有约定的除外。</li>
<li>第八百八十二条　技术服务合同的委托人应当按照约定提供工作条件，完成配合事项，接受工作成果并支付报酬。</li>
<li>第八百八十三条　技术服务合同的受托人应当按照约定完成服务项目，解决技术问题，保证工作质量，并传授解决技术问题的知识。</li>
<li>第八百八十四条　技术服务合同的委托人不履行合同义务或者履行合同义务不符合约定，影响工作进度和质量，不接受或者逾期接受工作成果的，支付的报酬不得追回，未支付的报酬应当支付。<br>技术服务合同的受托人未按照约定完成服务工作的，应当承担免收报酬等违约责任。</li>
<li>第八百八十五条　技术咨询合同、技术服务合同履行过程中，受托人利用委托人提供的技术资料和工作条件完成的新的技术成果，属于受托人。委托人利用受托人的工作成果完成的新的技术成果，属于委托人。当事人另有约定的，按照其约定。</li>
<li>第八百八十六条　技术咨询合同和技术服务合同对受托人正常开展工作所需费用的负担没有约定或者约定不明确的，由受托人负担。</li>
<li>第八百八十七条　法律、行政法规对技术中介合同、技术培训合同另有规定的，依照其规定。</li>
</ul>
<h4 id="第二十一章-保管合同"><a href="#第二十一章-保管合同" class="headerlink" title="第二十一章　保管合同"></a>第二十一章　保管合同</h4><ul>
<li>第八百八十八条　保管合同是保管人保管寄存人交付的保管物，并返还该物的合同。<br>寄存人到保管人处从事购物、就餐、住宿等活动，将物品存放在指定场所的，视为保管，但是当事人另有约定或者另有交易习惯的除外。</li>
<li>第八百八十九条　寄存人应当按照约定向保管人支付保管费。<br>当事人对保管费没有约定或者约定不明确，依据本法第五百一十条的规定仍不能确定的，视为无偿保管。</li>
<li>第八百九十条　保管合同自保管物交付时成立，但是当事人另有约定的除外。</li>
<li>第八百九十一条　寄存人向保管人交付保管物的，保管人应当出具保管凭证，但是另有交易习惯的除外。</li>
<li>第八百九十二条　保管人应当妥善保管保管物。<br>当事人可以约定保管场所或者方法。除紧急情况或者为维护寄存人利益外，不得擅自改变保管场所或者方法。</li>
<li>第八百九十三条　寄存人交付的保管物有瑕疵或者根据保管物的性质需要采取特殊保管措施的，寄存人应当将有关情况告知保管人。寄存人未告知，致使保管物受损失的，保管人不承担赔偿责任；保管人因此受损失的，除保管人知道或者应当知道且未采取补救措施外，寄存人应当承担赔偿责任。</li>
<li>第八百九十四条　保管人不得将保管物转交第三人保管，但是当事人另有约定的除外。<br>保管人违反前款规定，将保管物转交第三人保管，造成保管物损失的，应当承担赔偿责任。</li>
<li>第八百九十五条　保管人不得使用或者许可第三人使用保管物，但是当事人另有约定的除外。</li>
<li>第八百九十六条　第三人对保管物主张权利的，除依法对保管物采取保全或者执行措施外，保管人应当履行向寄存人返还保管物的义务。<br>第三人对保管人提起诉讼或者对保管物申请扣押的，保管人应当及时通知寄存人。</li>
<li>第八百九十七条　保管期内，因保管人保管不善造成保管物毁损、灭失的，保管人应当承担赔偿责任。但是，无偿保管人证明自己没有故意或者重大过失的，不承担赔偿责任。</li>
<li>第八百九十八条　寄存人寄存货币、有价证券或者其他贵重物品的，应当向保管人声明，由保管人验收或者封存；寄存人未声明的，该物品毁损、灭失后，保管人可以按照一般物品予以赔偿。</li>
<li>第八百九十九条　寄存人可以随时领取保管物。<br>当事人对保管期限没有约定或者约定不明确的，保管人可以随时请求寄存人领取保管物；约定保管期限的，保管人无特别事由，不得请求寄存人提前领取保管物。</li>
<li>第九百条　保管期限届满或者寄存人提前领取保管物的，保管人应当将原物及其孳息归还寄存人。</li>
<li>第九百零一条　保管人保管货币的，可以返还相同种类、数量的货币；保管其他可替代物的，可以按照约定返还相同种类、品质、数量的物品。</li>
<li>第九百零二条　有偿的保管合同，寄存人应当按照约定的期限向保管人支付保管费。<br>当事人对支付期限没有约定或者约定不明确，依据本法第五百一十条的规定仍不能确定的，应当在领取保管物的同时支付。</li>
<li>第九百零三条　寄存人未按照约定支付保管费或者其他费用的，保管人对保管物享有留置权，但是当事人另有约定的除外。</li>
</ul>
<h4 id="第二十二章-仓储合同"><a href="#第二十二章-仓储合同" class="headerlink" title="第二十二章　仓储合同"></a>第二十二章　仓储合同</h4><ul>
<li>第九百零四条　仓储合同是保管人储存存货人交付的仓储物，存货人支付仓储费的合同。</li>
<li>第九百零五条　仓储合同自保管人和存货人意思表示一致时成立。</li>
<li>第九百零六条　储存易燃、易爆、有毒、有腐蚀性、有放射性等危险物品或者易变质物品的，存货人应当说明该物品的性质，提供有关资料。<br>存货人违反前款规定的，保管人可以拒收仓储物，也可以采取相应措施以避免损失的发生，因此产生的费用由存货人负担。<br>保管人储存易燃、易爆、有毒、有腐蚀性、有放射性等危险物品的，应当具备相应的保管条件。</li>
<li>第九百零七条　保管人应当按照约定对入库仓储物进行验收。保管人验收时发现入库仓储物与约定不符合的，应当及时通知存货人。保管人验收后，发生仓储物的品种、数量、质量不符合约定的，保管人应当承担赔偿责任。</li>
<li>第九百零八条　存货人交付仓储物的，保管人应当出具仓单、入库单等凭证。</li>
<li>第九百零九条　保管人应当在仓单上签名或者盖章。仓单包括下列事项：<blockquote>
<ul>
<li>（一）存货人的姓名或者名称和住所；</li>
<li>（二）仓储物的品种、数量、质量、包装及其件数和标记；</li>
<li>（三）仓储物的损耗标准；</li>
<li>（四）储存场所；</li>
<li>（五）储存期限；</li>
<li>（六）仓储费；</li>
<li>（七）仓储物已经办理保险的，其保险金额、期间以及保险人的名称；</li>
<li>（八）填发人、填发地和填发日期。</li>
</ul>
</blockquote>
</li>
<li>第九百一十条　仓单是提取仓储物的凭证。存货人或者仓单持有人在仓单上背书并经保管人签名或者盖章的，可以转让提取仓储物的权利。</li>
<li>第九百一十一条　保管人根据存货人或者仓单持有人的要求，应当同意其检查仓储物或者提取样品。</li>
<li>第九百一十二条　保管人发现入库仓储物有变质或者其他损坏的，应当及时通知存货人或者仓单持有人。</li>
<li>第九百一十三条　保管人发现入库仓储物有变质或者其他损坏，危及其他仓储物的安全和正常保管的，应当催告存货人或者仓单持有人作出必要的处置。因情况紧急，保管人可以作出必要的处置；但是，事后应当将该情况及时通知存货人或者仓单持有人。</li>
<li>第九百一十四条　当事人对储存期限没有约定或者约定不明确的，存货人或者仓单持有人可以随时提取仓储物，保管人也可以随时请求存货人或者仓单持有人提取仓储物，但是应当给予必要的准备时间。</li>
<li>第九百一十五条　储存期限届满，存货人或者仓单持有人应当凭仓单、入库单等提取仓储物。存货人或者仓单持有人逾期提取的，应当加收仓储费；提前提取的，不减收仓储费。</li>
<li>第九百一十六条　储存期限届满，存货人或者仓单持有人不提取仓储物的，保管人可以催告其在合理期限内提取；逾期不提取的，保管人可以提存仓储物。</li>
<li>第九百一十七条　储存期内，因保管不善造成仓储物毁损、灭失的，保管人应当承担赔偿责任。因仓储物本身的自然性质、包装不符合约定或者超过有效储存期造成仓储物变质、损坏的，保管人不承担赔偿责任。</li>
<li>第九百一十八条　本章没有规定的，适用保管合同的有关规定。</li>
</ul>
<h4 id="第二十三章-委托合同"><a href="#第二十三章-委托合同" class="headerlink" title="第二十三章　委托合同"></a>第二十三章　委托合同</h4><ul>
<li>第九百一十九条　委托合同是委托人和受托人约定，由受托人处理委托人事务的合同。</li>
<li>第九百二十条　委托人可以特别委托受托人处理一项或者数项事务，也可以概括委托受托人处理一切事务。</li>
<li>第九百二十一条　委托人应当预付处理委托事务的费用。受托人为处理委托事务垫付的必要费用，委托人应当偿还该费用并支付利息。</li>
<li>第九百二十二条　受托人应当按照委托人的指示处理委托事务。需要变更委托人指示的，应当经委托人同意；因情况紧急，难以和委托人取得联系的，受托人应当妥善处理委托事务，但是事后应当将该情况及时报告委托人。</li>
<li>第九百二十三条　受托人应当亲自处理委托事务。经委托人同意，受托人可以转委托。转委托经同意或者追认的，委托人可以就委托事务直接指示转委托的第三人，受托人仅就第三人的选任及其对第三人的指示承担责任。转委托未经同意或者追认的，受托人应当对转委托的第三人的行为承担责任；但是，在紧急情况下受托人为了维护委托人的利益需要转委托第三人的除外。</li>
<li>第九百二十四条　受托人应当按照委托人的要求，报告委托事务的处理情况。委托合同终止时，受托人应当报告委托事务的结果。</li>
<li>第九百二十五条　受托人以自己的名义，在委托人的授权范围内与第三人订立的合同，第三人在订立合同时知道受托人与委托人之间的代理关系的，该合同直接约束委托人和第三人；但是，有确切证据证明该合同只约束受托人和第三人的除外。</li>
<li>第九百二十六条　受托人以自己的名义与第三人订立合同时，第三人不知道受托人与委托人之间的代理关系的，受托人因第三人的原因对委托人不履行义务，受托人应当向委托人披露第三人，委托人因此可以行使受托人对第三人的权利。但是，第三人与受托人订立合同时如果知道该委托人就不会订立合同的除外。<br>受托人因委托人的原因对第三人不履行义务，受托人应当向第三人披露委托人，第三人因此可以选择受托人或者委托人作为相对人主张其权利，但是第三人不得变更选定的相对人。<br>委托人行使受托人对第三人的权利的，第三人可以向委托人主张其对受托人的抗辩。第三人选定委托人作为其相对人的，委托人可以向第三人主张其对受托人的抗辩以及受托人对第三人的抗辩。</li>
<li>第九百二十七条　受托人处理委托事务取得的财产，应当转交给委托人。</li>
<li>第九百二十八条　受托人完成委托事务的，委托人应当按照约定向其支付报酬。<br>因不可归责于受托人的事由，委托合同解除或者委托事务不能完成的，委托人应当向受托人支付相应的报酬。当事人另有约定的，按照其约定。</li>
<li>第九百二十九条　有偿的委托合同，因受托人的过错造成委托人损失的，委托人可以请求赔偿损失。无偿的委托合同，因受托人的故意或者重大过失造成委托人损失的，委托人可以请求赔偿损失。<br>受托人超越权限造成委托人损失的，应当赔偿损失。</li>
<li>第九百三十条　受托人处理委托事务时，因不可归责于自己的事由受到损失的，可以向委托人请求赔偿损失。</li>
<li>第九百三十一条　委托人经受托人同意，可以在受托人之外委托第三人处理委托事务。因此造成受托人损失的，受托人可以向委托人请求赔偿损失。</li>
<li>第九百三十二条　两个以上的受托人共同处理委托事务的，对委托人承担连带责任。</li>
<li>第九百三十三条　委托人或者受托人可以随时解除委托合同。因解除合同造成对方损失的，除不可归责于该当事人的事由外，无偿委托合同的解除方应当赔偿因解除时间不当造成的直接损失，有偿委托合同的解除方应当赔偿对方的直接损失和合同履行后可以获得的利益。</li>
<li>第九百三十四条　委托人死亡、终止或者受托人死亡、丧失民事行为能力、终止的，委托合同终止；但是，当事人另有约定或者根据委托事务的性质不宜终止的除外。</li>
<li>第九百三十五条　因委托人死亡或者被宣告破产、解散，致使委托合同终止将损害委托人利益的，在委托人的继承人、遗产管理人或者清算人承受委托事务之前，受托人应当继续处理委托事务。</li>
<li>第九百三十六条　因受托人死亡、丧失民事行为能力或者被宣告破产、解散，致使委托合同终止的，受托人的继承人、遗产管理人、法定代理人或者清算人应当及时通知委托人。因委托合同终止将损害委托人利益的，在委托人作出善后处理之前，受托人的继承人、遗产管理人、法定代理人或者清算人应当采取必要措施。</li>
</ul>
<h4 id="第二十四章-物业服务合同"><a href="#第二十四章-物业服务合同" class="headerlink" title="第二十四章　物业服务合同"></a>第二十四章　物业服务合同</h4><ul>
<li>第九百三十七条　物业服务合同是物业服务人在物业服务区域内，为业主提供建筑物及其附属设施的维修养护、环境卫生和相关秩序的管理维护等物业服务，业主支付物业费的合同。<br>物业服务人包括物业服务企业和其他管理人。</li>
<li>第九百三十八条　物业服务合同的内容一般包括服务事项、服务质量、服务费用的标准和收取办法、维修资金的使用、服务用房的管理和使用、服务期限、服务交接等条款。<br>物业服务人公开作出的有利于业主的服务承诺，为物业服务合同的组成部分。<br>物业服务合同应当采用书面形式。</li>
<li>第九百三十九条　建设单位依法与物业服务人订立的前期物业服务合同，以及业主委员会与业主大会依法选聘的物业服务人订立的物业服务合同，对业主具有法律约束力。</li>
<li>第九百四十条　建设单位依法与物业服务人订立的前期物业服务合同约定的服务期限届满前，业主委员会或者业主与新物业服务人订立的物业服务合同生效的，前期物业服务合同终止。</li>
<li>第九百四十一条　物业服务人将物业服务区域内的部分专项服务事项委托给专业性服务组织或者其他第三人的，应当就该部分专项服务事项向业主负责。<br>物业服务人不得将其应当提供的全部物业服务转委托给第三人，或者将全部物业服务支解后分别转委托给第三人。</li>
<li>第九百四十二条　物业服务人应当按照约定和物业的使用性质，妥善维修、养护、清洁、绿化和经营管理物业服务区域内的业主共有部分，维护物业服务区域内的基本秩序，采取合理措施保护业主的人身、财产安全。<br>对物业服务区域内违反有关治安、环保、消防等法律法规的行为，物业服务人应当及时采取合理措施制止、向有关行政主管部门报告并协助处理。</li>
<li>第九百四十三条　物业服务人应当定期将服务的事项、负责人员、质量要求、收费项目、收费标准、履行情况，以及维修资金使用情况、业主共有部分的经营与收益情况等以合理方式向业主公开并向业主大会、业主委员会报告。</li>
<li>第九百四十四条　业主应当按照约定向物业服务人支付物业费。物业服务人已经按照约定和有关规定提供服务的，业主不得以未接受或者无需接受相关物业服务为由拒绝支付物业费。<br>业主违反约定逾期不支付物业费的，物业服务人可以催告其在合理期限内支付；合理期限届满仍不支付的，物业服务人可以提起诉讼或者申请仲裁。<br>物业服务人不得采取停止供电、供水、供热、供燃气等方式催交物业费。</li>
<li>第九百四十五条　业主装饰装修房屋的，应当事先告知物业服务人，遵守物业服务人提示的合理注意事项，并配合其进行必要的现场检查。<br>业主转让、出租物业专有部分、设立居住权或者依法改变共有部分用途的，应当及时将相关情况告知物业服务人。</li>
<li>第九百四十六条　业主依照法定程序共同决定解聘物业服务人的，可以解除物业服务合同。决定解聘的，应当提前六十日书面通知物业服务人，但是合同对通知期限另有约定的除外。<br>依据前款规定解除合同造成物业服务人损失的，除不可归责于业主的事由外，业主应当赔偿损失。</li>
<li>第九百四十七条　物业服务期限届满前，业主依法共同决定续聘的，应当与原物业服务人在合同期限届满前续订物业服务合同。<br>物业服务期限届满前，物业服务人不同意续聘的，应当在合同期限届满前九十日书面通知业主或者业主委员会，但是合同对通知期限另有约定的除外。</li>
<li>第九百四十八条　物业服务期限届满后，业主没有依法作出续聘或者另聘物业服务人的决定，物业服务人继续提供物业服务的，原物业服务合同继续有效，但是服务期限为不定期。<br>当事人可以随时解除不定期物业服务合同，但是应当提前六十日书面通知对方。</li>
<li>第九百四十九条　物业服务合同终止的，原物业服务人应当在约定期限或者合理期限内退出物业服务区域，将物业服务用房、相关设施、物业服务所必需的相关资料等交还给业主委员会、决定自行管理的业主或者其指定的人，配合新物业服务人做好交接工作，并如实告知物业的使用和管理状况。<br>原物业服务人违反前款规定的，不得请求业主支付物业服务合同终止后的物业费；造成业主损失的，应当赔偿损失。</li>
<li>第九百五十条　物业服务合同终止后，在业主或者业主大会选聘的新物业服务人或者决定自行管理的业主接管之前，原物业服务人应当继续处理物业服务事项，并可以请求业主支付该期间的物业费。</li>
</ul>
<h4 id="第二十五章-行纪合同"><a href="#第二十五章-行纪合同" class="headerlink" title="第二十五章　行纪合同"></a>第二十五章　行纪合同</h4><ul>
<li>第九百五十一条　行纪合同是行纪人以自己的名义为委托人从事贸易活动，委托人支付报酬的合同。</li>
<li>第九百五十二条　行纪人处理委托事务支出的费用，由行纪人负担，但是当事人另有约定的除外。</li>
<li>第九百五十三条　行纪人占有委托物的，应当妥善保管委托物。</li>
<li>第九百五十四条　委托物交付给行纪人时有瑕疵或者容易腐烂、变质的，经委托人同意，行纪人可以处分该物；不能与委托人及时取得联系的，行纪人可以合理处分。</li>
<li>第九百五十五条　行纪人低于委托人指定的价格卖出或者高于委托人指定的价格买入的，应当经委托人同意；未经委托人同意，行纪人补偿其差额的，该买卖对委托人发生效力。<br>行纪人高于委托人指定的价格卖出或者低于委托人指定的价格买入的，可以按照约定增加报酬；没有约定或者约定不明确，依据本法第五百一十条的规定仍不能确定的，该利益属于委托人。<br>委托人对价格有特别指示的，行纪人不得违背该指示卖出或者买入。</li>
<li>第九百五十六条　行纪人卖出或者买入具有市场定价的商品，除委托人有相反的意思表示外，行纪人自己可以作为买受人或者出卖人。<br>行纪人有前款规定情形的，仍然可以请求委托人支付报酬。</li>
<li>第九百五十七条　行纪人按照约定买入委托物，委托人应当及时受领。经行纪人催告，委托人无正当理由拒绝受领的，行纪人依法可以提存委托物。<br>委托物不能卖出或者委托人撤回出卖，经行纪人催告，委托人不取回或者不处分该物的，行纪人依法可以提存委托物。</li>
<li>第九百五十八条　行纪人与第三人订立合同的，行纪人对该合同直接享有权利、承担义务。<br>第三人不履行义务致使委托人受到损害的，行纪人应当承担赔偿责任，但是行纪人与委托人另有约定的除外。</li>
<li>第九百五十九条　行纪人完成或者部分完成委托事务的，委托人应当向其支付相应的报酬。委托人逾期不支付报酬的，行纪人对委托物享有留置权，但是当事人另有约定的除外。</li>
<li>第九百六十条　本章没有规定的，参照适用委托合同的有关规定。</li>
</ul>
<h4 id="第二十六章-中介合同"><a href="#第二十六章-中介合同" class="headerlink" title="第二十六章　中介合同"></a>第二十六章　中介合同</h4><ul>
<li>第九百六十一条　中介合同是中介人向委托人报告订立合同的机会或者提供订立合同的媒介服务，委托人支付报酬的合同。</li>
<li>第九百六十二条　中介人应当就有关订立合同的事项向委托人如实报告。<br>中介人故意隐瞒与订立合同有关的重要事实或者提供虚假情况，损害委托人利益的，不得请求支付报酬并应当承担赔偿责任。</li>
<li>第九百六十三条　中介人促成合同成立的，委托人应当按照约定支付报酬。对中介人的报酬没有约定或者约定不明确，依据本法第五百一十条的规定仍不能确定的，根据中介人的劳务合理确定。因中介人提供订立合同的媒介服务而促成合同成立的，由该合同的当事人平均负担中介人的报酬。<br>中介人促成合同成立的，中介活动的费用，由中介人负担。</li>
<li>第九百六十四条　中介人未促成合同成立的，不得请求支付报酬；但是，可以按照约定请求委托人支付从事中介活动支出的必要费用。</li>
<li>第九百六十五条　委托人在接受中介人的服务后，利用中介人提供的交易机会或者媒介服务，绕开中介人直接订立合同的，应当向中介人支付报酬。</li>
<li>第九百六十六条　本章没有规定的，参照适用委托合同的有关规定。</li>
</ul>
<h4 id="第二十七章-合伙合同"><a href="#第二十七章-合伙合同" class="headerlink" title="第二十七章　合伙合同"></a>第二十七章　合伙合同</h4><ul>
<li>第九百六十七条　合伙合同是两个以上合伙人为了共同的事业目的，订立的共享利益、共担风险的协议。</li>
<li>第九百六十八条　合伙人应当按照约定的出资方式、数额和缴付期限，履行出资义务。</li>
<li>第九百六十九条　合伙人的出资、因合伙事务依法取得的收益和其他财产，属于合伙财产。<br>合伙合同终止前，合伙人不得请求分割合伙财产。</li>
<li>第九百七十条　合伙人就合伙事务作出决定的，除合伙合同另有约定外，应当经全体合伙人一致同意。<br>合伙事务由全体合伙人共同执行。按照合伙合同的约定或者全体合伙人的决定，可以委托一个或者数个合伙人执行合伙事务；其他合伙人不再执行合伙事务，但是有权监督执行情况。<br>合伙人分别执行合伙事务的，执行事务合伙人可以对其他合伙人执行的事务提出异议；提出异议后，其他合伙人应当暂停该项事务的执行。</li>
<li>第九百七十一条　合伙人不得因执行合伙事务而请求支付报酬，但是合伙合同另有约定的除外。</li>
<li>第九百七十二条　合伙的利润分配和亏损分担，按照合伙合同的约定办理；合伙合同没有约定或者约定不明确的，由合伙人协商决定；协商不成的，由合伙人按照实缴出资比例分配、分担；无法确定出资比例的，由合伙人平均分配、分担。</li>
<li>第九百七十三条　合伙人对合伙债务承担连带责任。清偿合伙债务超过自己应当承担份额的合伙人，有权向其他合伙人追偿。</li>
<li>第九百七十四条　除合伙合同另有约定外，合伙人向合伙人以外的人转让其全部或者部分财产份额的，须经其他合伙人一致同意。</li>
<li>第九百七十五条　合伙人的债权人不得代位行使合伙人依照本章规定和合伙合同享有的权利，但是合伙人享有的利益分配请求权除外。</li>
<li>第九百七十六条　合伙人对合伙期限没有约定或者约定不明确，依据本法第五百一十条的规定仍不能确定的，视为不定期合伙。<br>合伙期限届满，合伙人继续执行合伙事务，其他合伙人没有提出异议的，原合伙合同继续有效，但是合伙期限为不定期。<br>合伙人可以随时解除不定期合伙合同，但是应当在合理期限之前通知其他合伙人。</li>
<li>第九百七十七条　合伙人死亡、丧失民事行为能力或者终止的，合伙合同终止；但是，合伙合同另有约定或者根据合伙事务的性质不宜终止的除外。</li>
<li>第九百七十八条　合伙合同终止后，合伙财产在支付因终止而产生的费用以及清偿合伙债务后有剩余的，依据本法第九百七十二条的规定进行分配。</li>
</ul>
<h3 id="第三分编-准合同"><a href="#第三分编-准合同" class="headerlink" title="第三分编　准合同"></a>第三分编　准合同</h3><h4 id="第二十八章-无因管理"><a href="#第二十八章-无因管理" class="headerlink" title="第二十八章　无因管理"></a>第二十八章　无因管理</h4><ul>
<li>第九百七十九条　管理人没有法定的或者约定的义务，为避免他人利益受损失而管理他人事务的，可以请求受益人偿还因管理事务而支出的必要费用；管理人因管理事务受到损失的，可以请求受益人给予适当补偿。<br>管理事务不符合受益人真实意思的，管理人不享有前款规定的权利；但是，受益人的真实意思违反法律或者违背公序良俗的除外。</li>
<li>第九百八十条　管理人管理事务不属于前条规定的情形，但是受益人享有管理利益的，受益人应当在其获得的利益范围内向管理人承担前条第一款规定的义务。</li>
<li>第九百八十一条　管理人管理他人事务，应当采取有利于受益人的方法。中断管理对受益人不利的，无正当理由不得中断。</li>
<li>第九百八十二条　管理人管理他人事务，能够通知受益人的，应当及时通知受益人。管理的事务不需要紧急处理的，应当等待受益人的指示。</li>
<li>第九百八十三条　管理结束后，管理人应当向受益人报告管理事务的情况。管理人管理事务取得的财产，应当及时转交给受益人。</li>
<li>第九百八十四条　管理人管理事务经受益人事后追认的，从管理事务开始时起，适用委托合同的有关规定，但是管理人另有意思表示的除外。</li>
</ul>
<h4 id="第二十九章-不当得利"><a href="#第二十九章-不当得利" class="headerlink" title="第二十九章　不当得利"></a>第二十九章　不当得利</h4><ul>
<li>第九百八十五条　得利人没有法律根据取得不当利益的，受损失的人可以请求得利人返还取得的利益，但是有下列情形之一的除外：<blockquote>
<ul>
<li>（一）为履行道德义务进行的给付；</li>
<li>（二）债务到期之前的清偿；</li>
<li>（三）明知无给付义务而进行的债务清偿。</li>
</ul>
</blockquote>
</li>
<li>第九百八十六条　得利人不知道且不应当知道取得的利益没有法律根据，取得的利益已经不存在的，不承担返还该利益的义务。</li>
<li>第九百八十七条　得利人知道或者应当知道取得的利益没有法律根据的，受损失的人可以请求得利人返还其取得的利益并依法赔偿损失。</li>
<li>第九百八十八条　得利人已经将取得的利益无偿转让给第三人的，受损失的人可以请求第三人在相应范围内承担返还义务。</li>
</ul>
<h2 id="第四编-人格权"><a href="#第四编-人格权" class="headerlink" title="第四编　人格权"></a>第四编　人格权</h2><h4 id="第一章-一般规定-2"><a href="#第一章-一般规定-2" class="headerlink" title="第一章　一般规定"></a>第一章　一般规定</h4><ul>
<li>第九百八十九条　本编调整因人格权的享有和保护产生的民事关系。</li>
<li>第九百九十条　人格权是民事主体享有的生命权、身体权、健康权、姓名权、名称权、肖像权、名誉权、荣誉权、隐私权等权利。<br>除前款规定的人格权外，自然人享有基于人身自由、人格尊严产生的其他人格权益。</li>
<li>第九百九十一条　民事主体的人格权受法律保护，任何组织或者个人不得侵害。</li>
<li>第九百九十二条　人格权不得放弃、转让或者继承。</li>
<li>第九百九十三条　民事主体可以将自己的姓名、名称、肖像等许可他人使用，但是依照法律规定或者根据其性质不得许可的除外。</li>
<li>第九百九十四条　死者的姓名、肖像、名誉、荣誉、隐私、遗体等受到侵害的，其配偶、子女、父母有权依法请求行为人承担民事责任；死者没有配偶、子女且父母已经死亡的，其他近亲属有权依法请求行为人承担民事责任。</li>
<li>第九百九十五条　人格权受到侵害的，受害人有权依照本法和其他法律的规定请求行为人承担民事责任。受害人的停止侵害、排除妨碍、消除危险、消除影响、恢复名誉、赔礼道歉请求权，不适用诉讼时效的规定。</li>
<li>第九百九十六条　因当事人一方的违约行为，损害对方人格权并造成严重精神损害，受损害方选择请求其承担违约责任的，不影响受损害方请求精神损害赔偿。</li>
<li>第九百九十七条　民事主体有证据证明行为人正在实施或者即将实施侵害其人格权的违法行为，不及时制止将使其合法权益受到难以弥补的损害的，有权依法向人民法院申请采取责令行为人停止有关行为的措施。</li>
<li>第九百九十八条　认定行为人承担侵害除生命权、身体权和健康权外的人格权的民事责任，应当考虑行为人和受害人的职业、影响范围、过错程度，以及行为的目的、方式、后果等因素。</li>
<li>第九百九十九条　为公共利益实施新闻报道、舆论监督等行为的，可以合理使用民事主体的姓名、名称、肖像、个人信息等；使用不合理侵害民事主体人格权的，应当依法承担民事责任。</li>
<li>第一千条　行为人因侵害人格权承担消除影响、恢复名誉、赔礼道歉等民事责任的，应当与行为的具体方式和造成的影响范围相当。<br>行为人拒不承担前款规定的民事责任的，人民法院可以采取在报刊、网络等媒体上发布公告或者公布生效裁判文书等方式执行，产生的费用由行为人负担。</li>
<li>第一千零一条　对自然人因婚姻家庭关系等产生的身份权利的保护，适用本法第一编、第五编和其他法律的相关规定；没有规定的，可以根据其性质参照适用本编人格权保护的有关规定。</li>
</ul>
<h4 id="第二章-生命权、身体权和健康权"><a href="#第二章-生命权、身体权和健康权" class="headerlink" title="第二章　生命权、身体权和健康权"></a>第二章　生命权、身体权和健康权</h4><ul>
<li>第一千零二条　自然人享有生命权。自然人的生命安全和生命尊严受法律保护。任何组织或者个人不得侵害他人的生命权。</li>
<li>第一千零三条　自然人享有身体权。自然人的身体完整和行动自由受法律保护。任何组织或者个人不得侵害他人的身体权。</li>
<li>第一千零四条　自然人享有健康权。自然人的身心健康受法律保护。任何组织或者个人不得侵害他人的健康权。</li>
<li>第一千零五条　自然人的生命权、身体权、健康权受到侵害或者处于其他危难情形的，负有法定救助义务的组织或者个人应当及时施救。</li>
<li>第一千零六条　完全民事行为能力人有权依法自主决定无偿捐献其人体细胞、人体组织、人体器官、遗体。任何组织或者个人不得强迫、欺骗、利诱其捐献。<br>完全民事行为能力人依据前款规定同意捐献的，应当采用书面形式，也可以订立遗嘱。<br>自然人生前未表示不同意捐献的，该自然人死亡后，其配偶、成年子女、父母可以共同决定捐献，决定捐献应当采用书面形式。</li>
<li>第一千零七条　禁止以任何形式买卖人体细胞、人体组织、人体器官、遗体。<br>违反前款规定的买卖行为无效。</li>
<li>第一千零八条　为研制新药、医疗器械或者发展新的预防和治疗方法，需要进行临床试验的，应当依法经相关主管部门批准并经伦理委员会审查同意，向受试者或者受试者的监护人告知试验目的、用途和可能产生的风险等详细情况，并经其书面同意。<br>进行临床试验的，不得向受试者收取试验费用。</li>
<li>第一千零九条　从事与人体基因、人体胚胎等有关的医学和科研活动，应当遵守法律、行政法规和国家有关规定，不得危害人体健康，不得违背伦理道德，不得损害公共利益。</li>
<li>第一千零一十条　违背他人意愿，以言语、文字、图像、肢体行为等方式对他人实施性骚扰的，受害人有权依法请求行为人承担民事责任。<br>机关、企业、学校等单位应当采取合理的预防、受理投诉、调查处置等措施，防止和制止利用职权、从属关系等实施性骚扰。</li>
<li>第一千零一十一条　以非法拘禁等方式剥夺、限制他人的行动自由，或者非法搜查他人身体的，受害人有权依法请求行为人承担民事责任。</li>
</ul>
<h4 id="第三章-姓名权和名称权"><a href="#第三章-姓名权和名称权" class="headerlink" title="第三章　姓名权和名称权"></a>第三章　姓名权和名称权</h4><ul>
<li>第一千零一十二条　自然人享有姓名权，有权依法决定、使用、变更或者许可他人使用自己的姓名，但是不得违背公序良俗。</li>
<li>第一千零一十三条　法人、非法人组织享有名称权，有权依法决定、使用、变更、转让或者许可他人使用自己的名称。</li>
<li>第一千零一十四条　任何组织或者个人不得以干涉、盗用、假冒等方式侵害他人的姓名权或者名称权。</li>
<li>第一千零一十五条　自然人应当随父姓或者母姓，但是有下列情形之一的，可以在父姓和母姓之外选取姓氏：<blockquote>
<ul>
<li>（一）选取其他直系长辈血亲的姓氏；</li>
<li>（二）因由法定扶养人以外的人扶养而选取扶养人姓氏；</li>
<li>（三）有不违背公序良俗的其他正当理由。<br>少数民族自然人的姓氏可以遵从本民族的文化传统和风俗习惯。</li>
</ul>
</blockquote>
</li>
<li>第一千零一十六条　自然人决定、变更姓名，或者法人、非法人组织决定、变更、转让名称的，应当依法向有关机关办理登记手续，但是法律另有规定的除外。<br>民事主体变更姓名、名称的，变更前实施的民事法律行为对其具有法律约束力。</li>
<li>第一千零一十七条　具有一定社会知名度，被他人使用足以造成公众混淆的笔名、艺名、网名、译名、字号、姓名和名称的简称等，参照适用姓名权和名称权保护的有关规定。</li>
</ul>
<h4 id="第四章-肖像权"><a href="#第四章-肖像权" class="headerlink" title="第四章　肖像权"></a>第四章　肖像权</h4><ul>
<li>第一千零一十八条　自然人享有肖像权，有权依法制作、使用、公开或者许可他人使用自己的肖像。<br>肖像是通过影像、雕塑、绘画等方式在一定载体上所反映的特定自然人可以被识别的外部形象。</li>
<li>第一千零一十九条　任何组织或者个人不得以丑化、污损，或者利用信息技术手段伪造等方式侵害他人的肖像权。未经肖像权人同意，不得制作、使用、公开肖像权人的肖像，但是法律另有规定的除外。<br>未经肖像权人同意，肖像作品权利人不得以发表、复制、发行、出租、展览等方式使用或者公开肖像权人的肖像。</li>
<li>第一千零二十条　合理实施下列行为的，可以不经肖像权人同意：<blockquote>
<ul>
<li>（一）为个人学习、艺术欣赏、课堂教学或者科学研究，在必要范围内使用肖像权人已经公开的肖像；</li>
<li>（二）为实施新闻报道，不可避免地制作、使用、公开肖像权人的肖像；</li>
<li>（三）为依法履行职责，国家机关在必要范围内制作、使用、公开肖像权人的肖像；</li>
<li>（四）为展示特定公共环境，不可避免地制作、使用、公开肖像权人的肖像；</li>
<li>（五）为维护公共利益或者肖像权人合法权益，制作、使用、公开肖像权人的肖像的其他行为。</li>
</ul>
</blockquote>
</li>
<li>第一千零二十一条　当事人对肖像许可使用合同中关于肖像使用条款的理解有争议的，应当作出有利于肖像权人的解释。</li>
<li>第一千零二十二条　当事人对肖像许可使用期限没有约定或者约定不明确的，任何一方当事人可以随时解除肖像许可使用合同，但是应当在合理期限之前通知对方。<br>当事人对肖像许可使用期限有明确约定，肖像权人有正当理由的，可以解除肖像许可使用合同，但是应当在合理期限之前通知对方。因解除合同造成对方损失的，除不可归责于肖像权人的事由外，应当赔偿损失。</li>
<li>第一千零二十三条　对姓名等的许可使用，参照适用肖像许可使用的有关规定。<br>对自然人声音的保护，参照适用肖像权保护的有关规定。</li>
</ul>
<h4 id="第五章-名誉权和荣誉权"><a href="#第五章-名誉权和荣誉权" class="headerlink" title="第五章　名誉权和荣誉权"></a>第五章　名誉权和荣誉权</h4><ul>
<li>第一千零二十四条　民事主体享有名誉权。任何组织或者个人不得以侮辱、诽谤等方式侵害他人的名誉权。<br>名誉是对民事主体的品德、声望、才能、信用等的社会评价。</li>
<li>第一千零二十五条　行为人为公共利益实施新闻报道、舆论监督等行为，影响他人名誉的，不承担民事责任，但是有下列情形之一的除外：<blockquote>
<ul>
<li>（一）捏造、歪曲事实；</li>
<li>（二）对他人提供的严重失实内容未尽到合理核实义务；</li>
<li>（三）使用侮辱性言辞等贬损他人名誉。</li>
</ul>
</blockquote>
</li>
<li>第一千零二十六条　认定行为人是否尽到前条第二项规定的合理核实义务，应当考虑下列因素：<blockquote>
<ul>
<li>（一）内容来源的可信度；</li>
<li>（二）对明显可能引发争议的内容是否进行了必要的调查；</li>
<li>（三）内容的时限性；</li>
<li>（四）内容与公序良俗的关联性；</li>
<li>（五）受害人名誉受贬损的可能性；</li>
<li>（六）核实能力和核实成本。</li>
</ul>
</blockquote>
</li>
<li>第一千零二十七条　行为人发表的文学、艺术作品以真人真事或者特定人为描述对象，含有侮辱、诽谤内容，侵害他人名誉权的，受害人有权依法请求该行为人承担民事责任。<br>行为人发表的文学、艺术作品不以特定人为描述对象，仅其中的情节与该特定人的情况相似的，不承担民事责任。</li>
<li>第一千零二十八条　民事主体有证据证明报刊、网络等媒体报道的内容失实，侵害其名誉权的，有权请求该媒体及时采取更正或者删除等必要措施。</li>
<li>第一千零二十九条　民事主体可以依法查询自己的信用评价；发现信用评价不当的，有权提出异议并请求采取更正、删除等必要措施。信用评价人应当及时核查，经核查属实的，应当及时采取必要措施。</li>
<li>第一千零三十条　民事主体与征信机构等信用信息处理者之间的关系，适用本编有关个人信息保护的规定和其他法律、行政法规的有关规定。</li>
<li>第一千零三十一条　民事主体享有荣誉权。任何组织或者个人不得非法剥夺他人的荣誉称号，不得诋毁、贬损他人的荣誉。<br>获得的荣誉称号应当记载而没有记载的，民事主体可以请求记载；获得的荣誉称号记载错误的，民事主体可以请求更正。</li>
</ul>
<h4 id="第六章-隐私权和个人信息保护"><a href="#第六章-隐私权和个人信息保护" class="headerlink" title="第六章　隐私权和个人信息保护"></a>第六章　隐私权和个人信息保护</h4><ul>
<li>第一千零三十二条　自然人享有隐私权。任何组织或者个人不得以刺探、侵扰、泄露、公开等方式侵害他人的隐私权。<br>隐私是自然人的私人生活安宁和不愿为他人知晓的私密空间、私密活动、私密信息。</li>
<li>第一千零三十三条　除法律另有规定或者权利人明确同意外，任何组织或者个人不得实施下列行为：<blockquote>
<ul>
<li>（一）以电话、短信、即时通讯工具、电子邮件、传单等方式侵扰他人的私人生活安宁；</li>
<li>（二）进入、拍摄、窥视他人的住宅、宾馆房间等私密空间；</li>
<li>（三）拍摄、窥视、窃听、公开他人的私密活动；</li>
<li>（四）拍摄、窥视他人身体的私密部位；</li>
<li>（五）处理他人的私密信息；</li>
<li>（六）以其他方式侵害他人的隐私权。</li>
</ul>
</blockquote>
</li>
<li>第一千零三十四条　自然人的个人信息受法律保护。<br>个人信息是以电子或者其他方式记录的能够单独或者与其他信息结合识别特定自然人的各种信息，包括自然人的姓名、出生日期、身份证件号码、生物识别信息、住址、电话号码、电子邮箱、健康信息、行踪信息等。<br>个人信息中的私密信息，适用有关隐私权的规定；没有规定的，适用有关个人信息保护的规定。</li>
<li>第一千零三十五条　处理个人信息的，应当遵循合法、正当、必要原则，不得过度处理，并符合下列条件：<blockquote>
<ul>
<li>（一）征得该自然人或者其监护人同意，但是法律、行政法规另有规定的除外；</li>
<li>（二）公开处理信息的规则；</li>
<li>（三）明示处理信息的目的、方式和范围；</li>
<li>（四）不违反法律、行政法规的规定和双方的约定。<br>个人信息的处理包括个人信息的收集、存储、使用、加工、传输、提供、公开等。</li>
</ul>
</blockquote>
</li>
<li>第一千零三十六条　处理个人信息，有下列情形之一的，行为人不承担民事责任：<blockquote>
<ul>
<li>（一）在该自然人或者其监护人同意的范围内合理实施的行为；</li>
<li>（二）合理处理该自然人自行公开的或者其他已经合法公开的信息，但是该自然人明确拒绝或者处理该信息侵害其重大利益的除外；</li>
<li>（三）为维护公共利益或者该自然人合法权益，合理实施的其他行为。</li>
</ul>
</blockquote>
</li>
<li>第一千零三十七条　自然人可以依法向信息处理者查阅或者复制其个人信息；发现信息有错误的，有权提出异议并请求及时采取更正等必要措施。<br>自然人发现信息处理者违反法律、行政法规的规定或者双方的约定处理其个人信息的，有权请求信息处理者及时删除。</li>
<li>第一千零三十八条　信息处理者不得泄露或者篡改其收集、存储的个人信息；未经自然人同意，不得向他人非法提供其个人信息，但是经过加工无法识别特定个人且不能复原的除外。<br>信息处理者应当采取技术措施和其他必要措施，确保其收集、存储的个人信息安全，防止信息泄露、篡改、丢失；发生或者可能发生个人信息泄露、篡改、丢失的，应当及时采取补救措施，按照规定告知自然人并向有关主管部门报告。</li>
<li>第一千零三十九条　国家机关、承担行政职能的法定机构及其工作人员对于履行职责过程中知悉的自然人的隐私和个人信息，应当予以保密，不得泄露或者向他人非法提供。</li>
</ul>
<h2 id="第五编-婚姻家庭"><a href="#第五编-婚姻家庭" class="headerlink" title="第五编　婚姻家庭"></a>第五编　婚姻家庭</h2><h4 id="第一章-一般规定-3"><a href="#第一章-一般规定-3" class="headerlink" title="第一章　一般规定"></a>第一章　一般规定</h4><ul>
<li>第一千零四十条　本编调整因婚姻家庭产生的民事关系。</li>
<li>第一千零四十一条　婚姻家庭受国家保护。<br>实行婚姻自由、一夫一妻、男女平等的婚姻制度。<br>保护妇女、未成年人、老年人、残疾人的合法权益。</li>
<li>第一千零四十二条　禁止包办、买卖婚姻和其他干涉婚姻自由的行为。禁止借婚姻索取财物。<br>禁止重婚。禁止有配偶者与他人同居。<br>禁止家庭暴力。禁止家庭成员间的虐待和遗弃。</li>
<li>第一千零四十三条　家庭应当树立优良家风，弘扬家庭美德，重视家庭文明建设。<br>夫妻应当互相忠实，互相尊重，互相关爱；家庭成员应当敬老爱幼，互相帮助，维护平等、和睦、文明的婚姻家庭关系。</li>
<li>第一千零四十四条　收养应当遵循最有利于被收养人的原则，保障被收养人和收养人的合法权益。<br>禁止借收养名义买卖未成年人。</li>
<li>第一千零四十五条　亲属包括配偶、血亲和姻亲。<br>配偶、父母、子女、兄弟姐妹、祖父母、外祖父母、孙子女、外孙子女为近亲属。<br>配偶、父母、子女和其他共同生活的近亲属为家庭成员。</li>
</ul>
<h4 id="第二章-结婚"><a href="#第二章-结婚" class="headerlink" title="第二章　结婚"></a>第二章　结婚</h4><ul>
<li>第一千零四十六条　结婚应当男女双方完全自愿，禁止任何一方对另一方加以强迫，禁止任何组织或者个人加以干涉。</li>
<li>第一千零四十七条　结婚年龄，男不得早于二十二周岁，女不得早于二十周岁。</li>
<li>第一千零四十八条　直系血亲或者三代以内的旁系血亲禁止结婚。</li>
<li>第一千零四十九条　要求结婚的男女双方应当亲自到婚姻登记机关申请结婚登记。符合本法规定的，予以登记，发给结婚证。完成结婚登记，即确立婚姻关系。未办理结婚登记的，应当补办登记。</li>
<li>第一千零五十条　登记结婚后，按照男女双方约定，女方可以成为男方家庭的成员，男方可以成为女方家庭的成员。</li>
<li>第一千零五十一条　有下列情形之一的，婚姻无效：<blockquote>
<ul>
<li>（一）重婚；</li>
<li>（二）有禁止结婚的亲属关系；</li>
<li>（三）未到法定婚龄。</li>
</ul>
</blockquote>
</li>
<li>第一千零五十二条　因胁迫结婚的，受胁迫的一方可以向人民法院请求撤销婚姻。<br>请求撤销婚姻的，应当自胁迫行为终止之日起一年内提出。<br>被非法限制人身自由的当事人请求撤销婚姻的，应当自恢复人身自由之日起一年内提出。</li>
<li>第一千零五十三条　一方患有重大疾病的，应当在结婚登记前如实告知另一方；不如实告知的，另一方可以向人民法院请求撤销婚姻。<br>请求撤销婚姻的，应当自知道或者应当知道撤销事由之日起一年内提出。</li>
<li>第一千零五十四条　无效的或者被撤销的婚姻自始没有法律约束力，当事人不具有夫妻的权利和义务。同居期间所得的财产，由当事人协议处理；协议不成的，由人民法院根据照顾无过错方的原则判决。对重婚导致的无效婚姻的财产处理，不得侵害合法婚姻当事人的财产权益。当事人所生的子女，适用本法关于父母子女的规定。<br>婚姻无效或者被撤销的，无过错方有权请求损害赔偿。</li>
</ul>
<h4 id="第三章-家庭关系"><a href="#第三章-家庭关系" class="headerlink" title="第三章　家庭关系"></a>第三章　家庭关系</h4><p>第一节　夫妻关系</p>
<ul>
<li>第一千零五十五条　夫妻在婚姻家庭中地位平等。</li>
<li>第一千零五十六条　夫妻双方都有各自使用自己姓名的权利。</li>
<li>第一千零五十七条　夫妻双方都有参加生产、工作、学习和社会活动的自由，一方不得对另一方加以限制或者干涉。</li>
<li>第一千零五十八条　夫妻双方平等享有对未成年子女抚养、教育和保护的权利，共同承担对未成年子女抚养、教育和保护的义务。</li>
<li>第一千零五十九条　夫妻有相互扶养的义务。<br>需要扶养的一方，在另一方不履行扶养义务时，有要求其给付扶养费的权利。</li>
<li>第一千零六十条　夫妻一方因家庭日常生活需要而实施的民事法律行为，对夫妻双方发生效力，但是夫妻一方与相对人另有约定的除外。<br>夫妻之间对一方可以实施的民事法律行为范围的限制，不得对抗善意相对人。</li>
<li>第一千零六十一条　夫妻有相互继承遗产的权利。</li>
<li>第一千零六十二条　夫妻在婚姻关系存续期间所得的下列财产，为夫妻的共同财产，归夫妻共同所有：<blockquote>
<ul>
<li>（一）工资、奖金、劳务报酬；</li>
<li>（二）生产、经营、投资的收益；</li>
<li>（三）知识产权的收益；</li>
<li>（四）继承或者受赠的财产，但是本法第一千零六十三条第三项规定的除外；</li>
<li>（五）其他应当归共同所有的财产。<br>夫妻对共同财产，有平等的处理权。</li>
</ul>
</blockquote>
</li>
<li>第一千零六十三条　下列财产为夫妻一方的个人财产：<blockquote>
<ul>
<li>（一）一方的婚前财产；</li>
<li>（二）一方因受到人身损害获得的赔偿或者补偿；</li>
<li>（三）遗嘱或者赠与合同中确定只归一方的财产；</li>
<li>（四）一方专用的生活用品；</li>
<li>（五）其他应当归一方的财产。</li>
</ul>
</blockquote>
</li>
<li>第一千零六十四条　夫妻双方共同签名或者夫妻一方事后追认等共同意思表示所负的债务，以及夫妻一方在婚姻关系存续期间以个人名义为家庭日常生活需要所负的债务，属于夫妻共同债务。<br>夫妻一方在婚姻关系存续期间以个人名义超出家庭日常生活需要所负的债务，不属于夫妻共同债务；但是，债权人能够证明该债务用于夫妻共同生活、共同生产经营或者基于夫妻双方共同意思表示的除外。</li>
<li>第一千零六十五条　男女双方可以约定婚姻关系存续期间所得的财产以及婚前财产归各自所有、共同所有或者部分各自所有、部分共同所有。约定应当采用书面形式。没有约定或者约定不明确的，适用本法第一千零六十二条、第一千零六十三条的规定。<br>夫妻对婚姻关系存续期间所得的财产以及婚前财产的约定，对双方具有法律约束力。<br>夫妻对婚姻关系存续期间所得的财产约定归各自所有，夫或者妻一方对外所负的债务，相对人知道该约定的，以夫或者妻一方的个人财产清偿。</li>
<li>第一千零六十六条　婚姻关系存续期间，有下列情形之一的，夫妻一方可以向人民法院请求分割共同财产：<blockquote>
<ul>
<li>（一）一方有隐藏、转移、变卖、毁损、挥霍夫妻共同财产或者伪造夫妻共同债务等严重损害夫妻共同财产利益的行为；</li>
<li>（二）一方负有法定扶养义务的人患重大疾病需要医治，另一方不同意支付相关医疗费用。<br>第二节　父母子女关系和其他近亲属关系</li>
</ul>
</blockquote>
</li>
<li>第一千零六十七条　父母不履行抚养义务的，未成年子女或者不能独立生活的成年子女，有要求父母给付抚养费的权利。<br>成年子女不履行赡养义务的，缺乏劳动能力或者生活困难的父母，有要求成年子女给付赡养费的权利。</li>
<li>第一千零六十八条　父母有教育、保护未成年子女的权利和义务。未成年子女造成他人损害的，父母应当依法承担民事责任。</li>
<li>第一千零六十九条　子女应当尊重父母的婚姻权利，不得干涉父母离婚、再婚以及婚后的生活。子女对父母的赡养义务，不因父母的婚姻关系变化而终止。</li>
<li>第一千零七十条　父母和子女有相互继承遗产的权利。</li>
<li>第一千零七十一条　非婚生子女享有与婚生子女同等的权利，任何组织或者个人不得加以危害和歧视。<br>不直接抚养非婚生子女的生父或者生母，应当负担未成年子女或者不能独立生活的成年子女的抚养费。</li>
<li>第一千零七十二条　继父母与继子女间，不得虐待或者歧视。<br>继父或者继母和受其抚养教育的继子女间的权利义务关系，适用本法关于父母子女关系的规定。</li>
<li>第一千零七十三条　对亲子关系有异议且有正当理由的，父或者母可以向人民法院提起诉讼，请求确认或者否认亲子关系。<br>对亲子关系有异议且有正当理由的，成年子女可以向人民法院提起诉讼，请求确认亲子关系。</li>
<li>第一千零七十四条　有负担能力的祖父母、外祖父母，对于父母已经死亡或者父母无力抚养的未成年孙子女、外孙子女，有抚养的义务。<br>有负担能力的孙子女、外孙子女，对于子女已经死亡或者子女无力赡养的祖父母、外祖父母，有赡养的义务。</li>
<li>第一千零七十五条　有负担能力的兄、姐，对于父母已经死亡或者父母无力抚养的未成年弟、妹，有扶养的义务。<br>由兄、姐扶养长大的有负担能力的弟、妹，对于缺乏劳动能力又缺乏生活来源的兄、姐，有扶养的义务。</li>
</ul>
<h4 id="第四章-离婚"><a href="#第四章-离婚" class="headerlink" title="第四章　离婚"></a>第四章　离婚</h4><ul>
<li>第一千零七十六条　夫妻双方自愿离婚的，应当签订书面离婚协议，并亲自到婚姻登记机关申请离婚登记。<br>离婚协议应当载明双方自愿离婚的意思表示和对子女抚养、财产以及债务处理等事项协商一致的意见。</li>
<li>第一千零七十七条　自婚姻登记机关收到离婚登记申请之日起三十日内，任何一方不愿意离婚的，可以向婚姻登记机关撤回离婚登记申请。<br>前款规定期限届满后三十日内，双方应当亲自到婚姻登记机关申请发给离婚证；未申请的，视为撤回离婚登记申请。</li>
<li>第一千零七十八条　婚姻登记机关查明双方确实是自愿离婚，并已经对子女抚养、财产以及债务处理等事项协商一致的，予以登记，发给离婚证。</li>
<li>第一千零七十九条　夫妻一方要求离婚的，可以由有关组织进行调解或者直接向人民法院提起离婚诉讼。<br>人民法院审理离婚案件，应当进行调解；如果感情确已破裂，调解无效的，应当准予离婚。<br>有下列情形之一，调解无效的，应当准予离婚：<blockquote>
<ul>
<li>（一）重婚或者与他人同居；</li>
<li>（二）实施家庭暴力或者虐待、遗弃家庭成员；</li>
<li>（三）有赌博、吸毒等恶习屡教不改；</li>
<li>（四）因感情不和分居满二年；</li>
<li>（五）其他导致夫妻感情破裂的情形。<br>一方被宣告失踪，另一方提起离婚诉讼的，应当准予离婚。<br>经人民法院判决不准离婚后，双方又分居满一年，一方再次提起离婚诉讼的，应当准予离婚。</li>
</ul>
</blockquote>
</li>
<li>第一千零八十条　完成离婚登记，或者离婚判决书、调解书生效，即解除婚姻关系。</li>
<li>第一千零八十一条　现役军人的配偶要求离婚，应当征得军人同意，但是军人一方有重大过错的除外。</li>
<li>第一千零八十二条　女方在怀孕期间、分娩后一年内或者终止妊娠后六个月内，男方不得提出离婚；但是，女方提出离婚或者人民法院认为确有必要受理男方离婚请求的除外。</li>
<li>第一千零八十三条　离婚后，男女双方自愿恢复婚姻关系的，应当到婚姻登记机关重新进行结婚登记。</li>
<li>第一千零八十四条　父母与子女间的关系，不因父母离婚而消除。离婚后，子女无论由父或者母直接抚养，仍是父母双方的子女。<br>离婚后，父母对于子女仍有抚养、教育、保护的权利和义务。<br>离婚后，不满两周岁的子女，以由母亲直接抚养为原则。已满两周岁的子女，父母双方对抚养问题协议不成的，由人民法院根据双方的具体情况，按照最有利于未成年子女的原则判决。子女已满八周岁的，应当尊重其真实意愿。</li>
<li>第一千零八十五条　离婚后，子女由一方直接抚养的，另一方应当负担部分或者全部抚养费。负担费用的多少和期限的长短，由双方协议；协议不成的，由人民法院判决。<br>前款规定的协议或者判决，不妨碍子女在必要时向父母任何一方提出超过协议或者判决原定数额的合理要求。</li>
<li>第一千零八十六条　离婚后，不直接抚养子女的父或者母，有探望子女的权利，另一方有协助的义务。<br>行使探望权利的方式、时间由当事人协议；协议不成的，由人民法院判决。<br>父或者母探望子女，不利于子女身心健康的，由人民法院依法中止探望；中止的事由消失后，应当恢复探望。</li>
<li>第一千零八十七条　离婚时，夫妻的共同财产由双方协议处理；协议不成的，由人民法院根据财产的具体情况，按照照顾子女、女方和无过错方权益的原则判决。<br>对夫或者妻在家庭土地承包经营中享有的权益等，应当依法予以保护。</li>
<li>第一千零八十八条　夫妻一方因抚育子女、照料老年人、协助另一方工作等负担较多义务的，离婚时有权向另一方请求补偿，另一方应当给予补偿。具体办法由双方协议；协议不成的，由人民法院判决。</li>
<li>第一千零八十九条　离婚时，夫妻共同债务应当共同偿还。共同财产不足清偿或者财产归各自所有的，由双方协议清偿；协议不成的，由人民法院判决。</li>
<li>第一千零九十条　离婚时，如果一方生活困难，有负担能力的另一方应当给予适当帮助。具体办法由双方协议；协议不成的，由人民法院判决。</li>
<li>第一千零九十一条　有下列情形之一，导致离婚的，无过错方有权请求损害赔偿：<blockquote>
<ul>
<li>（一）重婚；</li>
<li>（二）与他人同居；</li>
<li>（三）实施家庭暴力；</li>
<li>（四）虐待、遗弃家庭成员；</li>
<li>（五）有其他重大过错。</li>
</ul>
</blockquote>
</li>
<li>第一千零九十二条　夫妻一方隐藏、转移、变卖、毁损、挥霍夫妻共同财产，或者伪造夫妻共同债务企图侵占另一方财产的，在离婚分割夫妻共同财产时，对该方可以少分或者不分。离婚后，另一方发现有上述行为的，可以向人民法院提起诉讼，请求再次分割夫妻共同财产。</li>
</ul>
<h4 id="第五章-收养"><a href="#第五章-收养" class="headerlink" title="第五章　收养"></a>第五章　收养</h4><p>第一节　收养关系的成立</p>
<ul>
<li>第一千零九十三条　下列未成年人，可以被收养：<blockquote>
<ul>
<li>（一）丧失父母的孤儿；</li>
<li>（二）查找不到生父母的未成年人；</li>
<li>（三）生父母有特殊困难无力抚养的子女。</li>
</ul>
</blockquote>
</li>
<li>第一千零九十四条　下列个人、组织可以作送养人：<blockquote>
<ul>
<li>（一）孤儿的监护人；</li>
<li>（二）儿童福利机构；</li>
<li>（三）有特殊困难无力抚养子女的生父母。</li>
</ul>
</blockquote>
</li>
<li>第一千零九十五条　未成年人的父母均不具备完全民事行为能力且可能严重危害该未成年人的，该未成年人的监护人可以将其送养。</li>
<li>第一千零九十六条　监护人送养孤儿的，应当征得有抚养义务的人同意。有抚养义务的人不同意送养、监护人不愿意继续履行监护职责的，应当依照本法第一编的规定另行确定监护人。</li>
<li>第一千零九十七条　生父母送养子女，应当双方共同送养。生父母一方不明或者查找不到的，可以单方送养。</li>
<li>第一千零九十八条　收养人应当同时具备下列条件：<blockquote>
<ul>
<li>（一）无子女或者只有一名子女；</li>
<li>（二）有抚养、教育和保护被收养人的能力；</li>
<li>（三）未患有在医学上认为不应当收养子女的疾病；</li>
<li>（四）无不利于被收养人健康成长的违法犯罪记录；</li>
<li>（五）年满三十周岁。</li>
</ul>
</blockquote>
</li>
<li>第一千零九十九条　收养三代以内旁系同辈血亲的子女，可以不受本法第一千零九十三条第三项、第一千零九十四条第三项和第一千一百零二条规定的限制。<br>华侨收养三代以内旁系同辈血亲的子女，还可以不受本法第一千零九十八条第一项规定的限制。</li>
<li>第一千一百条　无子女的收养人可以收养两名子女；有子女的收养人只能收养一名子女。<br>收养孤儿、残疾未成年人或者儿童福利机构抚养的查找不到生父母的未成年人，可以不受前款和本法第一千零九十八条第一项规定的限制。</li>
<li>第一千一百零一条　有配偶者收养子女，应当夫妻共同收养。</li>
<li>第一千一百零二条　无配偶者收养异性子女的，收养人与被收养人的年龄应当相差四十周岁以上。</li>
<li>第一千一百零三条　继父或者继母经继子女的生父母同意，可以收养继子女，并可以不受本法第一千零九十三条第三项、第一千零九十四条第三项、第一千零九十八条和第一千一百条第一款规定的限制。</li>
<li>第一千一百零四条　收养人收养与送养人送养，应当双方自愿。收养八周岁以上未成年人的，应当征得被收养人的同意。</li>
<li>第一千一百零五条　收养应当向县级以上人民政府民政部门登记。收养关系自登记之日起成立。<br>收养查找不到生父母的未成年人的，办理登记的民政部门应当在登记前予以公告。<br>收养关系当事人愿意签订收养协议的，可以签订收养协议。<br>收养关系当事人各方或者一方要求办理收养公证的，应当办理收养公证。<br>县级以上人民政府民政部门应当依法进行收养评估。</li>
<li>第一千一百零六条　收养关系成立后，公安机关应当按照国家有关规定为被收养人办理户口登记。</li>
<li>第一千一百零七条　孤儿或者生父母无力抚养的子女，可以由生父母的亲属、朋友抚养；抚养人与被抚养人的关系不适用本章规定。</li>
<li>第一千一百零八条　配偶一方死亡，另一方送养未成年子女的，死亡一方的父母有优先抚养的权利。</li>
<li>第一千一百零九条　外国人依法可以在中华人民共和国收养子女。<br>外国人在中华人民共和国收养子女，应当经其所在国主管机关依照该国法律审查同意。收养人应当提供由其所在国有权机构出具的有关其年龄、婚姻、职业、财产、健康、有无受过刑事处罚等状况的证明材料，并与送养人签订书面协议，亲自向省、自治区、直辖市人民政府民政部门登记。<br>前款规定的证明材料应当经收养人所在国外交机关或者外交机关授权的机构认证，并经中华人民共和国驻该国使领馆认证，但是国家另有规定的除外。</li>
<li>第一千一百一十条　收养人、送养人要求保守收养秘密的，其他人应当尊重其意愿，不得泄露。<br>第二节　收养的效力</li>
<li>第一千一百一十一条　自收养关系成立之日起，养父母与养子女间的权利义务关系，适用本法关于父母子女关系的规定；养子女与养父母的近亲属间的权利义务关系，适用本法关于子女与父母的近亲属关系的规定。<br>养子女与生父母以及其他近亲属间的权利义务关系，因收养关系的成立而消除。</li>
<li>第一千一百一十二条　养子女可以随养父或者养母的姓氏，经当事人协商一致，也可以保留原姓氏。</li>
<li>第一千一百一十三条　有本法第一编关于民事法律行为无效规定情形或者违反本编规定的收养行为无效。<br>无效的收养行为自始没有法律约束力。<br>第三节　收养关系的解除</li>
<li>第一千一百一十四条　收养人在被收养人成年以前，不得解除收养关系，但是收养人、送养人双方协议解除的除外。养子女八周岁以上的，应当征得本人同意。<br>收养人不履行抚养义务，有虐待、遗弃等侵害未成年养子女合法权益行为的，送养人有权要求解除养父母与养子女间的收养关系。送养人、收养人不能达成解除收养关系协议的，可以向人民法院提起诉讼。</li>
<li>第一千一百一十五条　养父母与成年养子女关系恶化、无法共同生活的，可以协议解除收养关系。不能达成协议的，可以向人民法院提起诉讼。</li>
<li>第一千一百一十六条　当事人协议解除收养关系的，应当到民政部门办理解除收养关系登记。</li>
<li>第一千一百一十七条　收养关系解除后，养子女与养父母以及其他近亲属间的权利义务关系即行消除，与生父母以及其他近亲属间的权利义务关系自行恢复。但是，成年养子女与生父母以及其他近亲属间的权利义务关系是否恢复，可以协商确定。</li>
<li>第一千一百一十八条　收养关系解除后，经养父母抚养的成年养子女，对缺乏劳动能力又缺乏生活来源的养父母，应当给付生活费。因养子女成年后虐待、遗弃养父母而解除收养关系的，养父母可以要求养子女补偿收养期间支出的抚养费。<br>生父母要求解除收养关系的，养父母可以要求生父母适当补偿收养期间支出的抚养费；但是，因养父母虐待、遗弃养子女而解除收养关系的除外。</li>
</ul>
<h2 id="第六编-继承"><a href="#第六编-继承" class="headerlink" title="第六编　继承"></a>第六编　继承</h2><h4 id="第一章-一般规定-4"><a href="#第一章-一般规定-4" class="headerlink" title="第一章　一般规定"></a>第一章　一般规定</h4><ul>
<li>第一千一百一十九条　本编调整因继承产生的民事关系。</li>
<li>第一千一百二十条　国家保护自然人的继承权。</li>
<li>第一千一百二十一条　继承从被继承人死亡时开始。<br>相互有继承关系的数人在同一事件中死亡，难以确定死亡时间的，推定没有其他继承人的人先死亡。都有其他继承人，辈份不同的，推定长辈先死亡；辈份相同的，推定同时死亡，相互不发生继承。</li>
<li>第一千一百二十二条　遗产是自然人死亡时遗留的个人合法财产。<br>依照法律规定或者根据其性质不得继承的遗产，不得继承。</li>
<li>第一千一百二十三条　继承开始后，按照法定继承办理；有遗嘱的，按照遗嘱继承或者遗赠办理；有遗赠扶养协议的，按照协议办理。</li>
<li>第一千一百二十四条　继承开始后，继承人放弃继承的，应当在遗产处理前，以书面形式作出放弃继承的表示；没有表示的，视为接受继承。<br>受遗赠人应当在知道受遗赠后六十日内，作出接受或者放弃受遗赠的表示；到期没有表示的，视为放弃受遗赠。</li>
<li>第一千一百二十五条　继承人有下列行为之一的，丧失继承权：<blockquote>
<ul>
<li>（一）故意杀害被继承人；</li>
<li>（二）为争夺遗产而杀害其他继承人；</li>
<li>（三）遗弃被继承人，或者虐待被继承人情节严重；</li>
<li>（四）伪造、篡改、隐匿或者销毁遗嘱，情节严重；</li>
<li>（五）以欺诈、胁迫手段迫使或者妨碍被继承人设立、变更或者撤回遗嘱，情节严重。<br>继承人有前款第三项至第五项行为，确有悔改表现，被继承人表示宽恕或者事后在遗嘱中将其列为继承人的，该继承人不丧失继承权。<br>受遗赠人有本条第一款规定行为的，丧失受遗赠权。</li>
</ul>
</blockquote>
</li>
</ul>
<h4 id="第二章-法定继承"><a href="#第二章-法定继承" class="headerlink" title="第二章　法定继承"></a>第二章　法定继承</h4><ul>
<li>第一千一百二十六条　继承权男女平等。</li>
<li>第一千一百二十七条　遗产按照下列顺序继承：<blockquote>
<ul>
<li>（一）第一顺序：配偶、子女、父母；</li>
<li>（二）第二顺序：兄弟姐妹、祖父母、外祖父母。<br>继承开始后，由第一顺序继承人继承，第二顺序继承人不继承；没有第一顺序继承人继承的，由第二顺序继承人继承。<br>本编所称子女，包括婚生子女、非婚生子女、养子女和有扶养关系的继子女。<br>本编所称父母，包括生父母、养父母和有扶养关系的继父母。<br>本编所称兄弟姐妹，包括同父母的兄弟姐妹、同父异母或者同母异父的兄弟姐妹、养兄弟姐妹、有扶养关系的继兄弟姐妹。</li>
</ul>
</blockquote>
</li>
<li>第一千一百二十八条　被继承人的子女先于被继承人死亡的，由被继承人的子女的直系晚辈血亲代位继承。<br>被继承人的兄弟姐妹先于被继承人死亡的，由被继承人的兄弟姐妹的子女代位继承。<br>代位继承人一般只能继承被代位继承人有权继承的遗产份额。</li>
<li>第一千一百二十九条　丧偶儿媳对公婆，丧偶女婿对岳父母，尽了主要赡养义务的，作为第一顺序继承人。</li>
<li>第一千一百三十条　同一顺序继承人继承遗产的份额，一般应当均等。<br>对生活有特殊困难又缺乏劳动能力的继承人，分配遗产时，应当予以照顾。<br>对被继承人尽了主要扶养义务或者与被继承人共同生活的继承人，分配遗产时，可以多分。<br>有扶养能力和有扶养条件的继承人，不尽扶养义务的，分配遗产时，应当不分或者少分。<br>继承人协商同意的，也可以不均等。</li>
<li>第一千一百三十一条　对继承人以外的依靠被继承人扶养的人，或者继承人以外的对被继承人扶养较多的人，可以分给适当的遗产。</li>
<li>第一千一百三十二条　继承人应当本着互谅互让、和睦团结的精神，协商处理继承问题。遗产分割的时间、办法和份额，由继承人协商确定；协商不成的，可以由人民调解委员会调解或者向人民法院提起诉讼。</li>
</ul>
<h4 id="第三章-遗嘱继承和遗赠"><a href="#第三章-遗嘱继承和遗赠" class="headerlink" title="第三章　遗嘱继承和遗赠"></a>第三章　遗嘱继承和遗赠</h4><ul>
<li>第一千一百三十三条　自然人可以依照本法规定立遗嘱处分个人财产，并可以指定遗嘱执行人。<br>自然人可以立遗嘱将个人财产指定由法定继承人中的一人或者数人继承。<br>自然人可以立遗嘱将个人财产赠与国家、集体或者法定继承人以外的组织、个人。<br>自然人可以依法设立遗嘱信托。</li>
<li>第一千一百三十四条　自书遗嘱由遗嘱人亲笔书写，签名，注明年、月、日。</li>
<li>第一千一百三十五条　代书遗嘱应当有两个以上见证人在场见证，由其中一人代书，并由遗嘱人、代书人和其他见证人签名，注明年、月、日。</li>
<li>第一千一百三十六条　打印遗嘱应当有两个以上见证人在场见证。遗嘱人和见证人应当在遗嘱每一页签名，注明年、月、日。</li>
<li>第一千一百三十七条　以录音录像形式立的遗嘱，应当有两个以上见证人在场见证。遗嘱人和见证人应当在录音录像中记录其姓名或者肖像，以及年、月、日。</li>
<li>第一千一百三十八条　遗嘱人在危急情况下，可以立口头遗嘱。口头遗嘱应当有两个以上见证人在场见证。危急情况消除后，遗嘱人能够以书面或者录音录像形式立遗嘱的，所立的口头遗嘱无效。</li>
<li>第一千一百三十九条　公证遗嘱由遗嘱人经公证机构办理。</li>
<li>第一千一百四十条　下列人员不能作为遗嘱见证人：<blockquote>
<ul>
<li>（一）无民事行为能力人、限制民事行为能力人以及其他不具有见证能力的人；</li>
<li>（二）继承人、受遗赠人；</li>
<li>（三）与继承人、受遗赠人有利害关系的人。</li>
</ul>
</blockquote>
</li>
<li>第一千一百四十一条　遗嘱应当为缺乏劳动能力又没有生活来源的继承人保留必要的遗产份额。</li>
<li>第一千一百四十二条　遗嘱人可以撤回、变更自己所立的遗嘱。<br>立遗嘱后，遗嘱人实施与遗嘱内容相反的民事法律行为的，视为对遗嘱相关内容的撤回。<br>立有数份遗嘱，内容相抵触的，以最后的遗嘱为准。</li>
<li>第一千一百四十三条　无民事行为能力人或者限制民事行为能力人所立的遗嘱无效。<br>遗嘱必须表示遗嘱人的真实意思，受欺诈、胁迫所立的遗嘱无效。<br>伪造的遗嘱无效。<br>遗嘱被篡改的，篡改的内容无效。</li>
<li>第一千一百四十四条　遗嘱继承或者遗赠附有义务的，继承人或者受遗赠人应当履行义务。没有正当理由不履行义务的，经利害关系人或者有关组织请求，人民法院可以取消其接受附义务部分遗产的权利。</li>
</ul>
<h4 id="第四章-遗产的处理"><a href="#第四章-遗产的处理" class="headerlink" title="第四章　遗产的处理"></a>第四章　遗产的处理</h4><ul>
<li>第一千一百四十五条　继承开始后，遗嘱执行人为遗产管理人；没有遗嘱执行人的，继承人应当及时推选遗产管理人；继承人未推选的，由继承人共同担任遗产管理人；没有继承人或者继承人均放弃继承的，由被继承人生前住所地的民政部门或者村民委员会担任遗产管理人。</li>
<li>第一千一百四十六条　对遗产管理人的确定有争议的，利害关系人可以向人民法院申请指定遗产管理人。</li>
<li>第一千一百四十七条　遗产管理人应当履行下列职责：<blockquote>
<ul>
<li>（一）清理遗产并制作遗产清单；</li>
<li>（二）向继承人报告遗产情况；</li>
<li>（三）采取必要措施防止遗产毁损、灭失；</li>
<li>（四）处理被继承人的债权债务；</li>
<li>（五）按照遗嘱或者依照法律规定分割遗产；</li>
<li>（六）实施与管理遗产有关的其他必要行为。</li>
</ul>
</blockquote>
</li>
<li>第一千一百四十八条　遗产管理人应当依法履行职责，因故意或者重大过失造成继承人、受遗赠人、债权人损害的，应当承担民事责任。</li>
<li>第一千一百四十九条　遗产管理人可以依照法律规定或者按照约定获得报酬。</li>
<li>第一千一百五十条　继承开始后，知道被继承人死亡的继承人应当及时通知其他继承人和遗嘱执行人。继承人中无人知道被继承人死亡或者知道被继承人死亡而不能通知的，由被继承人生前所在单位或者住所地的居民委员会、村民委员会负责通知。</li>
<li>第一千一百五十一条　存有遗产的人，应当妥善保管遗产，任何组织或者个人不得侵吞或者争抢。</li>
<li>第一千一百五十二条　继承开始后，继承人于遗产分割前死亡，并没有放弃继承的，该继承人应当继承的遗产转给其继承人，但是遗嘱另有安排的除外。</li>
<li>第一千一百五十三条　夫妻共同所有的财产，除有约定的外，遗产分割时，应当先将共同所有的财产的一半分出为配偶所有，其余的为被继承人的遗产。<br>遗产在家庭共有财产之中的，遗产分割时，应当先分出他人的财产。</li>
<li>第一千一百五十四条　有下列情形之一的，遗产中的有关部分按照法定继承办理：<blockquote>
<ul>
<li>（一）遗嘱继承人放弃继承或者受遗赠人放弃受遗赠；</li>
<li>（二）遗嘱继承人丧失继承权或者受遗赠人丧失受遗赠权；</li>
<li>（三）遗嘱继承人、受遗赠人先于遗嘱人死亡或者终止；</li>
<li>（四）遗嘱无效部分所涉及的遗产；</li>
<li>（五）遗嘱未处分的遗产。</li>
</ul>
</blockquote>
</li>
<li>第一千一百五十五条　遗产分割时，应当保留胎儿的继承份额。胎儿娩出时是死体的，保留的份额按照法定继承办理。</li>
<li>第一千一百五十六条　遗产分割应当有利于生产和生活需要，不损害遗产的效用。<br>不宜分割的遗产，可以采取折价、适当补偿或者共有等方法处理。</li>
<li>第一千一百五十七条　夫妻一方死亡后另一方再婚的，有权处分所继承的财产，任何组织或者个人不得干涉。</li>
<li>第一千一百五十八条　自然人可以与继承人以外的组织或者个人签订遗赠扶养协议。按照协议，该组织或者个人承担该自然人生养死葬的义务，享有受遗赠的权利。</li>
<li>第一千一百五十九条　分割遗产，应当清偿被继承人依法应当缴纳的税款和债务；但是，应当为缺乏劳动能力又没有生活来源的继承人保留必要的遗产。</li>
<li>第一千一百六十条　无人继承又无人受遗赠的遗产，归国家所有，用于公益事业；死者生前是集体所有制组织成员的，归所在集体所有制组织所有。</li>
<li>第一千一百六十一条　继承人以所得遗产实际价值为限清偿被继承人依法应当缴纳的税款和债务。超过遗产实际价值部分，继承人自愿偿还的不在此限。<br>继承人放弃继承的，对被继承人依法应当缴纳的税款和债务可以不负清偿责任。</li>
<li>第一千一百六十二条　执行遗赠不得妨碍清偿遗赠人依法应当缴纳的税款和债务。</li>
<li>第一千一百六十三条　既有法定继承又有遗嘱继承、遗赠的，由法定继承人清偿被继承人依法应当缴纳的税款和债务；超过法定继承遗产实际价值部分，由遗嘱继承人和受遗赠人按比例以所得遗产清偿。</li>
</ul>
<h2 id="第七编-侵权责任"><a href="#第七编-侵权责任" class="headerlink" title="第七编　侵权责任"></a>第七编　侵权责任</h2><h4 id="第一章-一般规定-5"><a href="#第一章-一般规定-5" class="headerlink" title="第一章　一般规定"></a>第一章　一般规定</h4><ul>
<li>第一千一百六十四条　本编调整因侵害民事权益产生的民事关系。</li>
<li>第一千一百六十五条　行为人因过错侵害他人民事权益造成损害的，应当承担侵权责任。<br>依照法律规定推定行为人有过错，其不能证明自己没有过错的，应当承担侵权责任。</li>
<li>第一千一百六十六条　行为人造成他人民事权益损害，不论行为人有无过错，法律规定应当承担侵权责任的，依照其规定。</li>
<li>第一千一百六十七条　侵权行为危及他人人身、财产安全的，被侵权人有权请求侵权人承担停止侵害、排除妨碍、消除危险等侵权责任。</li>
<li>第一千一百六十八条　二人以上共同实施侵权行为，造成他人损害的，应当承担连带责任。</li>
<li>第一千一百六十九条　教唆、帮助他人实施侵权行为的，应当与行为人承担连带责任。<br>教唆、帮助无民事行为能力人、限制民事行为能力人实施侵权行为的，应当承担侵权责任；该无民事行为能力人、限制民事行为能力人的监护人未尽到监护职责的，应当承担相应的责任。</li>
<li>第一千一百七十条　二人以上实施危及他人人身、财产安全的行为，其中一人或者数人的行为造成他人损害，能够确定具体侵权人的，由侵权人承担责任；不能确定具体侵权人的，行为人承担连带责任。</li>
<li>第一千一百七十一条　二人以上分别实施侵权行为造成同一损害，每个人的侵权行为都足以造成全部损害的，行为人承担连带责任。</li>
<li>第一千一百七十二条　二人以上分别实施侵权行为造成同一损害，能够确定责任大小的，各自承担相应的责任；难以确定责任大小的，平均承担责任。</li>
<li>第一千一百七十三条　被侵权人对同一损害的发生或者扩大有过错的，可以减轻侵权人的责任。</li>
<li>第一千一百七十四条　损害是因受害人故意造成的，行为人不承担责任。</li>
<li>第一千一百七十五条　损害是因第三人造成的，第三人应当承担侵权责任。</li>
<li>第一千一百七十六条　自愿参加具有一定风险的文体活动，因其他参加者的行为受到损害的，受害人不得请求其他参加者承担侵权责任；但是，其他参加者对损害的发生有故意或者重大过失的除外。<br>活动组织者的责任适用本法第一千一百九十八条至第一千二百零一条的规定。</li>
<li>第一千一百七十七条　合法权益受到侵害，情况紧迫且不能及时获得国家机关保护，不立即采取措施将使其合法权益受到难以弥补的损害的，受害人可以在保护自己合法权益的必要范围内采取扣留侵权人的财物等合理措施；但是，应当立即请求有关国家机关处理。<br>受害人采取的措施不当造成他人损害的，应当承担侵权责任。</li>
<li>第一千一百七十八条　本法和其他法律对不承担责任或者减轻责任的情形另有规定的，依照其规定。</li>
</ul>
<h4 id="第二章-损害赔偿"><a href="#第二章-损害赔偿" class="headerlink" title="第二章　损害赔偿"></a>第二章　损害赔偿</h4><ul>
<li>第一千一百七十九条　侵害他人造成人身损害的，应当赔偿医疗费、护理费、交通费、营养费、住院伙食补助费等为治疗和康复支出的合理费用，以及因误工减少的收入。造成残疾的，还应当赔偿辅助器具费和残疾赔偿金；造成死亡的，还应当赔偿丧葬费和死亡赔偿金。</li>
<li>第一千一百八十条　因同一侵权行为造成多人死亡的，可以以相同数额确定死亡赔偿金。</li>
<li>第一千一百八十一条　被侵权人死亡的，其近亲属有权请求侵权人承担侵权责任。被侵权人为组织，该组织分立、合并的，承继权利的组织有权请求侵权人承担侵权责任。<br>被侵权人死亡的，支付被侵权人医疗费、丧葬费等合理费用的人有权请求侵权人赔偿费用，但是侵权人已经支付该费用的除外。</li>
<li>第一千一百八十二条　侵害他人人身权益造成财产损失的，按照被侵权人因此受到的损失或者侵权人因此获得的利益赔偿；被侵权人因此受到的损失以及侵权人因此获得的利益难以确定，被侵权人和侵权人就赔偿数额协商不一致，向人民法院提起诉讼的，由人民法院根据实际情况确定赔偿数额。</li>
<li>第一千一百八十三条　侵害自然人人身权益造成严重精神损害的，被侵权人有权请求精神损害赔偿。<br>因故意或者重大过失侵害自然人具有人身意义的特定物造成严重精神损害的，被侵权人有权请求精神损害赔偿。</li>
<li>第一千一百八十四条　侵害他人财产的，财产损失按照损失发生时的市场价格或者其他合理方式计算。</li>
<li>第一千一百八十五条　故意侵害他人知识产权，情节严重的，被侵权人有权请求相应的惩罚性赔偿。</li>
<li>第一千一百八十六条　受害人和行为人对损害的发生都没有过错的，依照法律的规定由双方分担损失。</li>
<li>第一千一百八十七条　损害发生后，当事人可以协商赔偿费用的支付方式。协商不一致的，赔偿费用应当一次性支付；一次性支付确有困难的，可以分期支付，但是被侵权人有权请求提供相应的担保。</li>
</ul>
<h4 id="第三章-责任主体的特殊规定"><a href="#第三章-责任主体的特殊规定" class="headerlink" title="第三章　责任主体的特殊规定"></a>第三章　责任主体的特殊规定</h4><ul>
<li>第一千一百八十八条　无民事行为能力人、限制民事行为能力人造成他人损害的，由监护人承担侵权责任。监护人尽到监护职责的，可以减轻其侵权责任。<br>有财产的无民事行为能力人、限制民事行为能力人造成他人损害的，从本人财产中支付赔偿费用；不足部分，由监护人赔偿。</li>
<li>第一千一百八十九条　无民事行为能力人、限制民事行为能力人造成他人损害，监护人将监护职责委托给他人的，监护人应当承担侵权责任；受托人有过错的，承担相应的责任。</li>
<li>第一千一百九十条　完全民事行为能力人对自己的行为暂时没有意识或者失去控制造成他人损害有过错的，应当承担侵权责任；没有过错的，根据行为人的经济状况对受害人适当补偿。<br>完全民事行为能力人因醉酒、滥用麻醉药品或者精神药品对自己的行为暂时没有意识或者失去控制造成他人损害的，应当承担侵权责任。</li>
<li>第一千一百九十一条　用人单位的工作人员因执行工作任务造成他人损害的，由用人单位承担侵权责任。用人单位承担侵权责任后，可以向有故意或者重大过失的工作人员追偿。<br>劳务派遣期间，被派遣的工作人员因执行工作任务造成他人损害的，由接受劳务派遣的用工单位承担侵权责任；劳务派遣单位有过错的，承担相应的责任。</li>
<li>第一千一百九十二条　个人之间形成劳务关系，提供劳务一方因劳务造成他人损害的，由接受劳务一方承担侵权责任。接受劳务一方承担侵权责任后，可以向有故意或者重大过失的提供劳务一方追偿。提供劳务一方因劳务受到损害的，根据双方各自的过错承担相应的责任。<br>提供劳务期间，因第三人的行为造成提供劳务一方损害的，提供劳务一方有权请求第三人承担侵权责任，也有权请求接受劳务一方给予补偿。接受劳务一方补偿后，可以向第三人追偿。</li>
<li>第一千一百九十三条　承揽人在完成工作过程中造成第三人损害或者自己损害的，定作人不承担侵权责任。但是，定作人对定作、指示或者选任有过错的，应当承担相应的责任。</li>
<li>第一千一百九十四条　网络用户、网络服务提供者利用网络侵害他人民事权益的，应当承担侵权责任。法律另有规定的，依照其规定。</li>
<li>第一千一百九十五条　网络用户利用网络服务实施侵权行为的，权利人有权通知网络服务提供者采取删除、屏蔽、断开链接等必要措施。通知应当包括构成侵权的初步证据及权利人的真实身份信息。<br>网络服务提供者接到通知后，应当及时将该通知转送相关网络用户，并根据构成侵权的初步证据和服务类型采取必要措施；未及时采取必要措施的，对损害的扩大部分与该网络用户承担连带责任。<br>权利人因错误通知造成网络用户或者网络服务提供者损害的，应当承担侵权责任。法律另有规定的，依照其规定。</li>
<li>第一千一百九十六条　网络用户接到转送的通知后，可以向网络服务提供者提交不存在侵权行为的声明。声明应当包括不存在侵权行为的初步证据及网络用户的真实身份信息。<br>网络服务提供者接到声明后，应当将该声明转送发出通知的权利人，并告知其可以向有关部门投诉或者向人民法院提起诉讼。网络服务提供者在转送声明到达权利人后的合理期限内，未收到权利人已经投诉或者提起诉讼通知的，应当及时终止所采取的措施。</li>
<li>第一千一百九十七条　网络服务提供者知道或者应当知道网络用户利用其网络服务侵害他人民事权益，未采取必要措施的，与该网络用户承担连带责任。</li>
<li>第一千一百九十八条　宾馆、商场、银行、车站、机场、体育场馆、娱乐场所等经营场所、公共场所的经营者、管理者或者群众性活动的组织者，未尽到安全保障义务，造成他人损害的，应当承担侵权责任。<br>因第三人的行为造成他人损害的，由第三人承担侵权责任；经营者、管理者或者组织者未尽到安全保障义务的，承担相应的补充责任。经营者、管理者或者组织者承担补充责任后，可以向第三人追偿。</li>
<li>第一千一百九十九条　无民事行为能力人在幼儿园、学校或者其他教育机构学习、生活期间受到人身损害的，幼儿园、学校或者其他教育机构应当承担侵权责任；但是，能够证明尽到教育、管理职责的，不承担侵权责任。</li>
<li>第一千二百条　限制民事行为能力人在学校或者其他教育机构学习、生活期间受到人身损害，学校或者其他教育机构未尽到教育、管理职责的，应当承担侵权责任。</li>
<li>第一千二百零一条　无民事行为能力人或者限制民事行为能力人在幼儿园、学校或者其他教育机构学习、生活期间，受到幼儿园、学校或者其他教育机构以外的第三人人身损害的，由第三人承担侵权责任；幼儿园、学校或者其他教育机构未尽到管理职责的，承担相应的补充责任。幼儿园、学校或者其他教育机构承担补充责任后，可以向第三人追偿。</li>
</ul>
<h4 id="第四章-产品责任"><a href="#第四章-产品责任" class="headerlink" title="第四章　产品责任"></a>第四章　产品责任</h4><ul>
<li>第一千二百零二条　因产品存在缺陷造成他人损害的，生产者应当承担侵权责任。</li>
<li>第一千二百零三条　因产品存在缺陷造成他人损害的，被侵权人可以向产品的生产者请求赔偿，也可以向产品的销售者请求赔偿。<br>产品缺陷由生产者造成的，销售者赔偿后，有权向生产者追偿。因销售者的过错使产品存在缺陷的，生产者赔偿后，有权向销售者追偿。</li>
<li>第一千二百零四条　因运输者、仓储者等第三人的过错使产品存在缺陷，造成他人损害的，产品的生产者、销售者赔偿后，有权向第三人追偿。</li>
<li>第一千二百零五条　因产品缺陷危及他人人身、财产安全的，被侵权人有权请求生产者、销售者承担停止侵害、排除妨碍、消除危险等侵权责任。</li>
<li>第一千二百零六条　产品投入流通后发现存在缺陷的，生产者、销售者应当及时采取停止销售、警示、召回等补救措施；未及时采取补救措施或者补救措施不力造成损害扩大的，对扩大的损害也应当承担侵权责任。<br>依据前款规定采取召回措施的，生产者、销售者应当负担被侵权人因此支出的必要费用。</li>
<li>第一千二百零七条　明知产品存在缺陷仍然生产、销售，或者没有依据前条规定采取有效补救措施，造成他人死亡或者健康严重损害的，被侵权人有权请求相应的惩罚性赔偿。</li>
</ul>
<h4 id="第五章-机动车交通事故责任"><a href="#第五章-机动车交通事故责任" class="headerlink" title="第五章　机动车交通事故责任"></a>第五章　机动车交通事故责任</h4><ul>
<li>第一千二百零八条　机动车发生交通事故造成损害的，依照道路交通安全法律和本法的有关规定承担赔偿责任。</li>
<li>第一千二百零九条　因租赁、借用等情形机动车所有人、管理人与使用人不是同一人时，发生交通事故造成损害，属于该机动车一方责任的，由机动车使用人承担赔偿责任；机动车所有人、管理人对损害的发生有过错的，承担相应的赔偿责任。</li>
<li>第一千二百一十条　当事人之间已经以买卖或者其他方式转让并交付机动车但是未办理登记，发生交通事故造成损害，属于该机动车一方责任的，由受让人承担赔偿责任。</li>
<li>第一千二百一十一条　以挂靠形式从事道路运输经营活动的机动车，发生交通事故造成损害，属于该机动车一方责任的，由挂靠人和被挂靠人承担连带责任。</li>
<li>第一千二百一十二条　未经允许驾驶他人机动车，发生交通事故造成损害，属于该机动车一方责任的，由机动车使用人承担赔偿责任；机动车所有人、管理人对损害的发生有过错的，承担相应的赔偿责任，但是本章另有规定的除外。</li>
<li>第一千二百一十三条　机动车发生交通事故造成损害，属于该机动车一方责任的，先由承保机动车强制保险的保险人在强制保险责任限额范围内予以赔偿；不足部分，由承保机动车商业保险的保险人按照保险合同的约定予以赔偿；仍然不足或者没有投保机动车商业保险的，由侵权人赔偿。</li>
<li>第一千二百一十四条　以买卖或者其他方式转让拼装或者已经达到报废标准的机动车，发生交通事故造成损害的，由转让人和受让人承担连带责任。</li>
<li>第一千二百一十五条　盗窃、抢劫或者抢夺的机动车发生交通事故造成损害的，由盗窃人、抢劫人或者抢夺人承担赔偿责任。盗窃人、抢劫人或者抢夺人与机动车使用人不是同一人，发生交通事故造成损害，属于该机动车一方责任的，由盗窃人、抢劫人或者抢夺人与机动车使用人承担连带责任。<br>保险人在机动车强制保险责任限额范围内垫付抢救费用的，有权向交通事故责任人追偿。</li>
<li>第一千二百一十六条　机动车驾驶人发生交通事故后逃逸，该机动车参加强制保险的，由保险人在机动车强制保险责任限额范围内予以赔偿；机动车不明、该机动车未参加强制保险或者抢救费用超过机动车强制保险责任限额，需要支付被侵权人人身伤亡的抢救、丧葬等费用的，由道路交通事故社会救助基金垫付。道路交通事故社会救助基金垫付后，其管理机构有权向交通事故责任人追偿。</li>
<li>第一千二百一十七条　非营运机动车发生交通事故造成无偿搭乘人损害，属于该机动车一方责任的，应当减轻其赔偿责任，但是机动车使用人有故意或者重大过失的除外。</li>
</ul>
<h4 id="第六章-医疗损害责任"><a href="#第六章-医疗损害责任" class="headerlink" title="第六章　医疗损害责任"></a>第六章　医疗损害责任</h4><ul>
<li>第一千二百一十八条　患者在诊疗活动中受到损害，医疗机构或者其医务人员有过错的，由医疗机构承担赔偿责任。</li>
<li>第一千二百一十九条　医务人员在诊疗活动中应当向患者说明病情和医疗措施。需要实施手术、特殊检查、特殊治疗的，医务人员应当及时向患者具体说明医疗风险、替代医疗方案等情况，并取得其明确同意；不能或者不宜向患者说明的，应当向患者的近亲属说明，并取得其明确同意。<br>医务人员未尽到前款义务，造成患者损害的，医疗机构应当承担赔偿责任。</li>
<li>第一千二百二十条　因抢救生命垂危的患者等紧急情况，不能取得患者或者其近亲属意见的，经医疗机构负责人或者授权的负责人批准，可以立即实施相应的医疗措施。</li>
<li>第一千二百二十一条　医务人员在诊疗活动中未尽到与当时的医疗水平相应的诊疗义务，造成患者损害的，医疗机构应当承担赔偿责任。</li>
<li>第一千二百二十二条　患者在诊疗活动中受到损害，有下列情形之一的，推定医疗机构有过错：<blockquote>
<ul>
<li>（一）违反法律、行政法规、规章以及其他有关诊疗规范的规定；</li>
<li>（二）隐匿或者拒绝提供与纠纷有关的病历资料；</li>
<li>（三）遗失、伪造、篡改或者违法销毁病历资料。</li>
</ul>
</blockquote>
</li>
<li>第一千二百二十三条　因药品、消毒产品、医疗器械的缺陷，或者输入不合格的血液造成患者损害的，患者可以向药品上市许可持有人、生产者、血液提供机构请求赔偿，也可以向医疗机构请求赔偿。患者向医疗机构请求赔偿的，医疗机构赔偿后，有权向负有责任的药品上市许可持有人、生产者、血液提供机构追偿。</li>
<li>第一千二百二十四条　患者在诊疗活动中受到损害，有下列情形之一的，医疗机构不承担赔偿责任：<blockquote>
<ul>
<li>（一）患者或者其近亲属不配合医疗机构进行符合诊疗规范的诊疗；</li>
<li>（二）医务人员在抢救生命垂危的患者等紧急情况下已经尽到合理诊疗义务；</li>
<li>（三）限于当时的医疗水平难以诊疗。<br>前款第一项情形中，医疗机构或者其医务人员也有过错的，应当承担相应的赔偿责任。</li>
</ul>
</blockquote>
</li>
<li>第一千二百二十五条　医疗机构及其医务人员应当按照规定填写并妥善保管住院志、医嘱单、检验报告、手术及麻醉记录、病理资料、护理记录等病历资料。<br>患者要求查阅、复制前款规定的病历资料的，医疗机构应当及时提供。</li>
<li>第一千二百二十六条　医疗机构及其医务人员应当对患者的隐私和个人信息保密。泄露患者的隐私和个人信息，或者未经患者同意公开其病历资料的，应当承担侵权责任。</li>
<li>第一千二百二十七条　医疗机构及其医务人员不得违反诊疗规范实施不必要的检查。</li>
<li>第一千二百二十八条　医疗机构及其医务人员的合法权益受法律保护。<br>干扰医疗秩序，妨碍医务人员工作、生活，侵害医务人员合法权益的，应当依法承担法律责任。</li>
</ul>
<h4 id="第七章-环境污染和生态破坏责任"><a href="#第七章-环境污染和生态破坏责任" class="headerlink" title="第七章　环境污染和生态破坏责任"></a>第七章　环境污染和生态破坏责任</h4><ul>
<li>第一千二百二十九条　因污染环境、破坏生态造成他人损害的，侵权人应当承担侵权责任。</li>
<li>第一千二百三十条　因污染环境、破坏生态发生纠纷，行为人应当就法律规定的不承担责任或者减轻责任的情形及其行为与损害之间不存在因果关系承担举证责任。</li>
<li>第一千二百三十一条　两个以上侵权人污染环境、破坏生态的，承担责任的大小，根据污染物的种类、浓度、排放量，破坏生态的方式、范围、程度，以及行为对损害后果所起的作用等因素确定。</li>
<li>第一千二百三十二条　侵权人违反法律规定故意污染环境、破坏生态造成严重后果的，被侵权人有权请求相应的惩罚性赔偿。</li>
<li>第一千二百三十三条　因第三人的过错污染环境、破坏生态的，被侵权人可以向侵权人请求赔偿，也可以向第三人请求赔偿。侵权人赔偿后，有权向第三人追偿。</li>
<li>第一千二百三十四条　违反国家规定造成生态环境损害，生态环境能够修复的，国家规定的机关或者法律规定的组织有权请求侵权人在合理期限内承担修复责任。侵权人在期限内未修复的，国家规定的机关或者法律规定的组织可以自行或者委托他人进行修复，所需费用由侵权人负担。</li>
<li>第一千二百三十五条　违反国家规定造成生态环境损害的，国家规定的机关或者法律规定的组织有权请求侵权人赔偿下列损失和费用：<blockquote>
<ul>
<li>（一）生态环境受到损害至修复完成期间服务功能丧失导致的损失；</li>
<li>（二）生态环境功能永久性损害造成的损失；</li>
<li>（三）生态环境损害调查、鉴定评估等费用；</li>
<li>（四）清除污染、修复生态环境费用；</li>
<li>（五）防止损害的发生和扩大所支出的合理费用。</li>
</ul>
</blockquote>
</li>
</ul>
<h4 id="第八章-高度危险责任"><a href="#第八章-高度危险责任" class="headerlink" title="第八章　高度危险责任"></a>第八章　高度危险责任</h4><ul>
<li>第一千二百三十六条　从事高度危险作业造成他人损害的，应当承担侵权责任。</li>
<li>第一千二百三十七条　民用核设施或者运入运出核设施的核材料发生核事故造成他人损害的，民用核设施的营运单位应当承担侵权责任；但是，能够证明损害是因战争、武装冲突、暴乱等情形或者受害人故意造成的，不承担责任。</li>
<li>第一千二百三十八条　民用航空器造成他人损害的，民用航空器的经营者应当承担侵权责任；但是，能够证明损害是因受害人故意造成的，不承担责任。</li>
<li>第一千二百三十九条　占有或者使用易燃、易爆、剧毒、高放射性、强腐蚀性、高致病性等高度危险物造成他人损害的，占有人或者使用人应当承担侵权责任；但是，能够证明损害是因受害人故意或者不可抗力造成的，不承担责任。被侵权人对损害的发生有重大过失的，可以减轻占有人或者使用人的责任。</li>
<li>第一千二百四十条　从事高空、高压、地下挖掘活动或者使用高速轨道运输工具造成他人损害的，经营者应当承担侵权责任；但是，能够证明损害是因受害人故意或者不可抗力造成的，不承担责任。被侵权人对损害的发生有重大过失的，可以减轻经营者的责任。</li>
<li>第一千二百四十一条　遗失、抛弃高度危险物造成他人损害的，由所有人承担侵权责任。所有人将高度危险物交由他人管理的，由管理人承担侵权责任；所有人有过错的，与管理人承担连带责任。</li>
<li>第一千二百四十二条　非法占有高度危险物造成他人损害的，由非法占有人承担侵权责任。所有人、管理人不能证明对防止非法占有尽到高度注意义务的，与非法占有人承担连带责任。</li>
<li>第一千二百四十三条　未经许可进入高度危险活动区域或者高度危险物存放区域受到损害，管理人能够证明已经采取足够安全措施并尽到充分警示义务的，可以减轻或者不承担责任。</li>
<li>第一千二百四十四条　承担高度危险责任，法律规定赔偿限额的，依照其规定，但是行为人有故意或者重大过失的除外。</li>
</ul>
<h4 id="第九章-饲养动物损害责任"><a href="#第九章-饲养动物损害责任" class="headerlink" title="第九章　饲养动物损害责任"></a>第九章　饲养动物损害责任</h4><ul>
<li>第一千二百四十五条　饲养的动物造成他人损害的，动物饲养人或者管理人应当承担侵权责任；但是，能够证明损害是因被侵权人故意或者重大过失造成的，可以不承担或者减轻责任。</li>
<li>第一千二百四十六条　违反管理规定，未对动物采取安全措施造成他人损害的，动物饲养人或者管理人应当承担侵权责任；但是，能够证明损害是因被侵权人故意造成的，可以减轻责任。</li>
<li>第一千二百四十七条　禁止饲养的烈性犬等危险动物造成他人损害的，动物饲养人或者管理人应当承担侵权责任。</li>
<li>第一千二百四十八条　动物园的动物造成他人损害的，动物园应当承担侵权责任；但是，能够证明尽到管理职责的，不承担侵权责任。</li>
<li>第一千二百四十九条　遗弃、逃逸的动物在遗弃、逃逸期间造成他人损害的，由动物原饲养人或者管理人承担侵权责任。</li>
<li>第一千二百五十条　因第三人的过错致使动物造成他人损害的，被侵权人可以向动物饲养人或者管理人请求赔偿，也可以向第三人请求赔偿。动物饲养人或者管理人赔偿后，有权向第三人追偿。</li>
<li>第一千二百五十一条　饲养动物应当遵守法律法规，尊重社会公德，不得妨碍他人生活。</li>
</ul>
<h4 id="第十章-建筑物和物件损害责任"><a href="#第十章-建筑物和物件损害责任" class="headerlink" title="第十章　建筑物和物件损害责任"></a>第十章　建筑物和物件损害责任</h4><ul>
<li>第一千二百五十二条　建筑物、构筑物或者其他设施倒塌、塌陷造成他人损害的，由建设单位与施工单位承担连带责任，但是建设单位与施工单位能够证明不存在质量缺陷的除外。建设单位、施工单位赔偿后，有其他责任人的，有权向其他责任人追偿。<br>因所有人、管理人、使用人或者第三人的原因，建筑物、构筑物或者其他设施倒塌、塌陷造成他人损害的，由所有人、管理人、使用人或者第三人承担侵权责任。</li>
<li>第一千二百五十三条　建筑物、构筑物或者其他设施及其搁置物、悬挂物发生脱落、坠落造成他人损害，所有人、管理人或者使用人不能证明自己没有过错的，应当承担侵权责任。所有人、管理人或者使用人赔偿后，有其他责任人的，有权向其他责任人追偿。</li>
<li>第一千二百五十四条　禁止从建筑物中抛掷物品。从建筑物中抛掷物品或者从建筑物上坠落的物品造成他人损害的，由侵权人依法承担侵权责任；经调查难以确定具体侵权人的，除能够证明自己不是侵权人的外，由可能加害的建筑物使用人给予补偿。可能加害的建筑物使用人补偿后，有权向侵权人追偿。<br>物业服务企业等建筑物管理人应当采取必要的安全保障措施防止前款规定情形的发生；未采取必要的安全保障措施的，应当依法承担未履行安全保障义务的侵权责任。<br>发生本条第一款规定的情形的，公安等机关应当依法及时调查，查清责任人。</li>
<li>第一千二百五十五条　堆放物倒塌、滚落或者滑落造成他人损害，堆放人不能证明自己没有过错的，应当承担侵权责任。</li>
<li>第一千二百五十六条　在公共道路上堆放、倾倒、遗撒妨碍通行的物品造成他人损害的，由行为人承担侵权责任。公共道路管理人不能证明已经尽到清理、防护、警示等义务的，应当承担相应的责任。</li>
<li>第一千二百五十七条　因林木折断、倾倒或者果实坠落等造成他人损害，林木的所有人或者管理人不能证明自己没有过错的，应当承担侵权责任。</li>
<li>第一千二百五十八条　在公共场所或者道路上挖掘、修缮安装地下设施等造成他人损害，施工人不能证明已经设置明显标志和采取安全措施的，应当承担侵权责任。<br>窨井等地下设施造成他人损害，管理人不能证明尽到管理职责的，应当承担侵权责任。</li>
</ul>
<h2 id="附则"><a href="#附则" class="headerlink" title="附则"></a>附则</h2><ul>
<li>第一千二百五十九条　民法所称的“以上”、“以下”、“以内”、“届满”，包括本数；所称的“不满”、“超过”、“以外”，不包括本数。</li>
<li>第一千二百六十条　本法自2021年1月1日起施行。《中华人民共和国婚姻法》、《中华人民共和国继承法》、《中华人民共和国民法通则》、《中华人民共和国收养法》、《中华人民共和国担保法》、《中华人民共和国合同法》、《中华人民共和国物权法》、《中华人民共和国侵权责任法》、《中华人民共和国民法总则》同时废止。</li>
</ul>
]]></content>
      <categories>
        <category>法律</category>
      </categories>
      <tags>
        <tag>民法典</tag>
      </tags>
  </entry>
  <entry>
    <title>基于easy-rsa3搭建openvpn服务</title>
    <url>/ji-yu-easy-rsa3-da-jian-openvpn-fu-wu/</url>
    <content><![CDATA[<h3 id="openvpn服务器安装"><a href="#openvpn服务器安装" class="headerlink" title="openvpn服务器安装"></a>openvpn服务器安装</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 安装服务</span>
yum <span class="token function">install</span> epel-release
yum <span class="token function">install</span> -y openssl openssl-devel lzo lzo-devel pam pam-devel automake pkgconfig makecache
yum <span class="token function">install</span> -y openvpn easy-rsa
<span class="token comment" spellcheck="true"># 找到easy-ras的安装目录</span>
<span class="token punctuation">[</span>root@localhost openvpn<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># whereis easy-rsa</span>
easy-rsa: /usr/share/easy-rsa
<span class="token comment" spellcheck="true"># 并拷贝到openvpn目录下</span>
<span class="token function">mkdir</span> -p /etc/openvpn/easy-rsa
<span class="token comment" spellcheck="true"># 注意3.0.8版本号可能不一样</span>
<span class="token function">cd</span> /usr/share/easy-rsa/3.0.8
<span class="token function">cp</span> -r *  /etc/openvpn/easy-rsa
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="openvpn服务端配置"><a href="#openvpn服务端配置" class="headerlink" title="openvpn服务端配置"></a>openvpn服务端配置</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 进入easy-rsa目录</span>
<span class="token function">cd</span> /etc/openvpn/easy-rsa
<span class="token comment" spellcheck="true"># 将easy-rsa变量模板拷入到当前目录</span>
<span class="token function">find</span> / -type f -name <span class="token string">"vars.example"</span><span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">cp</span> -t <span class="token keyword">.</span> <span class="token operator">&amp;&amp;</span> <span class="token function">mv</span> vars.example vars
<span class="token punctuation">[</span>root@localhost easy-rsa<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>
total 100
-rwxr-xr-x. 1 root root 76946 Mar 18 16:26 easyrsa
-rw-r--r--. 1 root root  4616 Mar 18 16:26 openssl-easyrsa.cnf
-rw-r--r--. 1 root root  8888 Mar 19  2022 vars
drwxr-xr-x. 2 root root   122 Mar 18 16:26 x509-types
<span class="token comment" spellcheck="true"># 修改vars主要信息,按需修改</span>
set_var EASYRSA_REQ_COUNTRY     <span class="token string">"CN"</span>
set_var EASYRSA_REQ_PROVINCE    <span class="token string">"Jiangsu"</span>
set_var EASYRSA_REQ_CITY        <span class="token string">"Nanjing"</span>
set_var EASYRSA_REQ_ORG         <span class="token string">"Deri"</span>
set_var EASYRSA_REQ_EMAIL       <span class="token string">"wuzhiyong@deri.energy"</span>
set_var EASYRSA_REQ_OU          <span class="token string">"deri.org.cn"</span>
<span class="token comment" spellcheck="true"># 创建空的pki</span>
./easyrsa init-pki
<span class="token comment" spellcheck="true"># 创建新的CA,不使用密码,过程中直接回车</span>
./easyrsa build-ca nopass
<span class="token comment" spellcheck="true"># 创建服务端证书</span>
./easyrsa gen-req server nopass
<span class="token comment" spellcheck="true"># 签约服务端证书,过程中手动输入yes</span>
./easyrsa sign server server
<span class="token comment" spellcheck="true"># 生成DH验证文件Diffie-Hellman</span>
./easyrsa gen-dh
<span class="token comment" spellcheck="true"># 创建吊销列表</span>
./easyrsa gen-crl
<span class="token comment" spellcheck="true"># 生成ta.key</span>
openvpn --genkey --secret keys/ta.key
<span class="token comment" spellcheck="true"># 将所有需要的文件拷贝到/etc/openvpn/server目录下</span>
<span class="token function">cp</span> keys/ta.key <span class="token punctuation">..</span>/server/
<span class="token function">cp</span> pki/ca.crt <span class="token punctuation">..</span>/server/
<span class="token function">cp</span> pki/dh.pem <span class="token punctuation">..</span>/server/
<span class="token function">cp</span> pki/issued/server.crt <span class="token punctuation">..</span>/server/
<span class="token function">cp</span> pki/private/server.key <span class="token punctuation">..</span>/server/
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>创建服务器配置</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@ecs-a017-0002 chuanda<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat server.conf </span>
port 20016
<span class="token punctuation">;</span>proto tcp
proto udp
dev tun
<span class="token punctuation">;</span>dev tap
ca /etc/openvpn/server/ca.crt
cert /etc/openvpn/server/server.crt
key /etc/openvpn/server/server.key
tls-auth /etc/openvpn/server/ta.key 0
dh /etc/openvpn/server/dh.pem
log /etc/openvpn/openvpn.log
<span class="token comment" spellcheck="true">#duplicate-cn</span>
push <span class="token string">"route 10.1.0.0 255.255.255.0"</span>
server 10.1.0.0 255.255.255.0
<span class="token comment" spellcheck="true"># 在ipp.txt可以配置静态ip: client1,11.1.0.100</span>
ifconfig-pool-persist /etc/openvpn/ipp.txt
keepalive 10 120
cipher AES-256-CBC
persist-key
persist-tun
status /etc/openvpn/openvpn-status.log
verb 3
explicit-exit-notify 1
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>创建openvpn启停脚本，start.sh</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>
CD_OVPN_PNUM<span class="token operator">=</span>`ps -ef<span class="token operator">|</span><span class="token function">grep</span> <span class="token string">"openvpn /etc/openvpn/server.conf"</span><span class="token operator">|</span><span class="token function">grep</span> -v <span class="token function">grep</span><span class="token operator">|</span><span class="token function">wc</span> -l`
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$CD_OVPN_PNUM</span> -le 0 <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
   openvpn /etc/openvpn/chuanda/server.conf <span class="token operator">&amp;</span>
<span class="token keyword">fi</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>stop.sh</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>
<span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> <span class="token string">"openvpn /etc/openvpn/server.conf"</span><span class="token operator">|</span><span class="token function">grep</span> -v <span class="token function">grep</span><span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print<span class="token variable">$2</span>}'</span><span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">kill</span> -9
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="创建客户端证书"><a href="#创建客户端证书" class="headerlink" title="创建客户端证书"></a>创建客户端证书</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 生成客户端证书</span>
./easyrsa build-client-full client_name nopass
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="创建openvpn客户端文件"><a href="#创建openvpn客户端文件" class="headerlink" title="创建openvpn客户端文件"></a>创建openvpn客户端文件</h3><pre class="line-numbers language-xml"><code class="language-xml">client
nobind
dev tun
remote-cert-tls server
remote 服务器IP 端口 udp
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- 客户端私钥 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cert</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- 客户端证书 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cert</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ca</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- ca.crt --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ca</span><span class="token punctuation">></span></span>
key-direction 1
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tls-auth</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- ta.key --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tls-auth</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><pre class="line-numbers language-log"><code class="language-log">A: VERIFY ERROR: depth=1, error=certificate is not yet valid
or error 9 at 1 depth lookup:certificate is not yet valid
B: VERIFY ERROR: depth=0, error=certificate signature failure
C: error 7 at 0 depth lookup:certificate signature failure
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>解决办法：主要是由于服务器时区设置不对,客户端时间比服务器时间早导致.</p>
</blockquote>
]]></content>
      <categories>
        <category>openvpn</category>
      </categories>
  </entry>
  <entry>
    <title>大数据平台CDH简介</title>
    <url>/da-shu-ju-ping-tai-cdh/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>不收费的Hadoop版本主要有三个（均是国外厂商），分别是：</p>
<ul>
<li>Apache（最原始的版本，所有发行版均基于这个版本进行改进）</li>
<li>Cloudera版本（<code>Cloudera’s Distribution Including Apache Hadoop</code>，简称<code>CDH</code>）</li>
<li>Hortonworks版本(<code>Hortonworks Data Platform</code>，简称<code>HDP</code>）</li>
</ul>
<h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><table>
<thead>
<tr>
<th>版本</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>Apache社区版</td>
<td>完全开源免费、社区活跃、文档、资料详实</td>
<td>1. 版本管理比较混乱，各种版本层出不穷，很难选择，选择其他生态组件时，比如Hive，Sqoop，Flume，Spark等，需要考虑兼容性问题、版本匹配问题、组件冲突问题、编译问题等。2. 集群安装部署复杂，需要编写大量配置文件，分发到每台节点，容易出错，效率低。3. 集群运维复杂，需要安装第三方软件辅助。</td>
</tr>
<tr>
<td>CDH</td>
<td>1. 版本管理清晰。2. 版本更新快。3. 集群安装部署简单。提供了部署、安装、配置工具，大大提高了集群部署的效率.运维简单。提供了管理、监控、诊断、配置修改的工具，管理配置方便，定位问题快速、准确，使运维工作简单，有效。</td>
<td>厂商固定</td>
</tr>
</tbody></table>
<h3 id="CDH安装"><a href="#CDH安装" class="headerlink" title="CDH安装"></a>CDH安装</h3><p>参考以下链接：</p>
<ul>
<li><a href="https://www.jianshu.com/p/106739236db4">https://www.jianshu.com/p/106739236db4</a></li>
<li><a href="https://www.cnblogs.com/lijiaman/p/8733316.html">https://www.cnblogs.com/lijiaman/p/8733316.html</a></li>
<li><a href="https://yq.aliyun.com/articles/573790">https://yq.aliyun.com/articles/573790</a></li>
</ul>
]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
        <tag>CDH</tag>
      </tags>
  </entry>
  <entry>
    <title>好用的VPN</title>
    <url>/hao-yong-de-vpn/</url>
    <content><![CDATA[<p><a href="https://tly.sh/2025171">注册登录/购买VIP</a></p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>vpn</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 安装使用NFS</title>
    <url>/an-zhuang-shi-yong-nfs/</url>
    <content><![CDATA[<h3 id="yum-安装"><a href="#yum-安装" class="headerlink" title="yum 安装"></a>yum 安装</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> nfs-utils
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="设置-NFS-服务开机启动"><a href="#设置-NFS-服务开机启动" class="headerlink" title="设置 NFS 服务开机启动"></a>设置 NFS 服务开机启动</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl <span class="token function">enable</span> rpcbind
<span class="token function">sudo</span> systemctl <span class="token function">enable</span> nfs
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="启动-NFS-服务"><a href="#启动-NFS-服务" class="headerlink" title="启动 NFS 服务"></a>启动 NFS 服务</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start rpcbind
<span class="token function">sudo</span> systemctl start nfs
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="服务启动之后，我们在服务端配置一个共享目录"><a href="#服务启动之后，我们在服务端配置一个共享目录" class="headerlink" title="服务启动之后，我们在服务端配置一个共享目录"></a>服务启动之后，我们在服务端配置一个共享目录</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> /data
<span class="token function">sudo</span> <span class="token function">chmod</span> 755 /data
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="根据这个目录，相应配置导出目录"><a href="#根据这个目录，相应配置导出目录" class="headerlink" title="根据这个目录，相应配置导出目录"></a>根据这个目录，相应配置导出目录</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vi</span> /etc/exports
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="添加如下配置"><a href="#添加如下配置" class="headerlink" title="添加如下配置"></a>添加如下配置</h3><pre><code>/data/     192.168.0.0/24(rw,sync,no_root_squash,no_all_squash)
</code></pre>
<blockquote>
<ol>
<li><code>/data</code>: 共享目录位置。</li>
<li><code>192.168.0.0/24</code>: 客户端 <code>IP</code> 范围，<code>*</code> 代表所有，即没有限制。</li>
<li><code>rw</code>: 权限设置，可读可写。</li>
<li><code>sync</code>: 同步共享目录。</li>
<li><code>no_root_squash</code>: 可以使用 <code>root</code> 授权。</li>
<li><code>no_all_squash</code>: 可以使用普通用户授权。</li>
</ol>
</blockquote>
<h3 id="wq-保存设置之后，重启-NFS-服务"><a href="#wq-保存设置之后，重启-NFS-服务" class="headerlink" title=":wq 保存设置之后，重启 NFS 服务"></a><code>:wq </code>保存设置之后，重启 <code>NFS</code> 服务</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart nfs
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="可以检查一下本地的共享目录"><a href="#可以检查一下本地的共享目录" class="headerlink" title="可以检查一下本地的共享目录"></a>可以检查一下本地的共享目录</h3><pre class="line-numbers language-bash"><code class="language-bash">showmount -e localhost
Export list <span class="token keyword">for</span> localhost:
/data 192.168.0.0/24
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://qizhanming.com/blog/2018/08/08/how-to-install-nfs-on-centos-7">参考</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>nfs</tag>
      </tags>
  </entry>
  <entry>
    <title>安装ingress-nginx【非helm方式】</title>
    <url>/an-zhuang-ingress-nginx-fei-helm/</url>
    <content><![CDATA[<blockquote>
<p>本文使用kubernetes环境: <code>v1.19</code>,不是这个版本<code>apiVersion</code>可能不一样.</p>
</blockquote>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>之前通过helm方式安装ingress-nginx，具体参考<a href="https://blog.csdn.net/wzy_168/article/details/100582322">3.2 使用Helm部署Nginx Ingress</a>.</p>
<p>但是现在<code>http://mirror.azure.cn/kubernetes/charts</code>仓库已经无法使用.本文通过<code>yaml</code>文件安装.</p>
<h3 id="创建serviceaccount"><a href="#创建serviceaccount" class="headerlink" title="创建serviceaccount"></a>创建serviceaccount</h3><blockquote>
<p>这里没有梳理可能用到的权限,所以直接赋予了全部权限.</p>
</blockquote>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx

<span class="token punctuation">---</span>

<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>normal
<span class="token key atrule">rules</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">'*'</span>
    <span class="token key atrule">resources</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">'*'</span>
    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">'*'</span>
  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">""</span>
    <span class="token key atrule">resources</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">'*'</span>
    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">'*'</span>
  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">'*'</span>
    <span class="token key atrule">resources</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">'*'</span>
    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">'*'</span>
  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">'*'</span>
    <span class="token key atrule">resources</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">'*'</span>
    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">'*'</span>
  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">""</span>
    <span class="token key atrule">resources</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">'*'</span>
    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">'*'</span>
  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">'*'</span>
    <span class="token key atrule">resources</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">'*'</span>
    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">'*'</span>

<span class="token punctuation">---</span>

<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Role
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>minimal
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx
<span class="token key atrule">rules</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">'*'</span>
    <span class="token key atrule">resources</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">'*'</span>
    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">'*'</span>
  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">'*'</span>
    <span class="token key atrule">resources</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">'*'</span>
    <span class="token key atrule">resourceNames</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">'*'</span>
    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">'*'</span>
  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">'*'</span>
    <span class="token key atrule">resources</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">'*'</span>
    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">'*'</span>
  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">'*'</span>
    <span class="token key atrule">resources</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">'*'</span>
    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">'*'</span>

<span class="token punctuation">---</span>

<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> RoleBinding
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>minimal
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx
<span class="token key atrule">roleRef</span><span class="token punctuation">:</span>
  <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io
  <span class="token key atrule">kind</span><span class="token punctuation">:</span> Role
  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>minimal
<span class="token key atrule">subjects</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount
    <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress
    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx

<span class="token punctuation">---</span>

<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRoleBinding
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>normal
<span class="token key atrule">roleRef</span><span class="token punctuation">:</span>
  <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io
  <span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole
  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>normal
<span class="token key atrule">subjects</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount
    <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress
    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><a href="https://stackoverflow.com/questions/53204733/k8s-ingress-nginx-ingress-controller-is-not-in-running-mode">参考链接</a></li>
</ul>
<h3 id="创建configmap"><a href="#创建configmap" class="headerlink" title="创建configmap"></a>创建configmap</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> tcp<span class="token punctuation">-</span>services
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="创建nginx-ingress-default-backend"><a href="#创建nginx-ingress-default-backend" class="headerlink" title="创建nginx-ingress-default-backend"></a>创建nginx-ingress-default-backend</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress
    <span class="token key atrule">chart</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>1.24.5
    <span class="token key atrule">component</span><span class="token punctuation">:</span> default<span class="token punctuation">-</span>backend
    <span class="token key atrule">heritage</span><span class="token punctuation">:</span> Tiller
    <span class="token key atrule">release</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress
  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>default<span class="token punctuation">-</span>backend
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">selector</span><span class="token punctuation">:</span>
    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>
      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress
      <span class="token key atrule">release</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress
  <span class="token key atrule">template</span><span class="token punctuation">:</span>
    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>
      <span class="token key atrule">creationTimestamp</span><span class="token punctuation">:</span> <span class="token null important">null</span>
      <span class="token key atrule">labels</span><span class="token punctuation">:</span>
        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress
        <span class="token key atrule">component</span><span class="token punctuation">:</span> default<span class="token punctuation">-</span>backend
        <span class="token key atrule">release</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress
    <span class="token key atrule">spec</span><span class="token punctuation">:</span>
      <span class="token key atrule">serviceAccount</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress
      <span class="token key atrule">containers</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> hub.deri.org.cn/k8s/defaultbackend<span class="token punctuation">-</span>amd64<span class="token punctuation">:</span><span class="token number">1.5</span>
        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent
        <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>
          <span class="token key atrule">failureThreshold</span><span class="token punctuation">:</span> <span class="token number">3</span>
          <span class="token key atrule">httpGet</span><span class="token punctuation">:</span>
            <span class="token key atrule">path</span><span class="token punctuation">:</span> /healthz
            <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>
            <span class="token key atrule">scheme</span><span class="token punctuation">:</span> HTTP
          <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">30</span>
          <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>
          <span class="token key atrule">successThreshold</span><span class="token punctuation">:</span> <span class="token number">1</span>
          <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span>
        <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>default<span class="token punctuation">-</span>backend
        <span class="token key atrule">ports</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080</span>
          <span class="token key atrule">name</span><span class="token punctuation">:</span> http
          <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP
        <span class="token key atrule">readinessProbe</span><span class="token punctuation">:</span>
          <span class="token key atrule">failureThreshold</span><span class="token punctuation">:</span> <span class="token number">6</span>
          <span class="token key atrule">httpGet</span><span class="token punctuation">:</span>
            <span class="token key atrule">path</span><span class="token punctuation">:</span> /healthz
            <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>
            <span class="token key atrule">scheme</span><span class="token punctuation">:</span> HTTP
          <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span>
          <span class="token key atrule">successThreshold</span><span class="token punctuation">:</span> <span class="token number">1</span>
          <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span>
        <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>
          <span class="token key atrule">runAsUser</span><span class="token punctuation">:</span> <span class="token number">65534</span>
        <span class="token key atrule">terminationMessagePath</span><span class="token punctuation">:</span> /dev/termination<span class="token punctuation">-</span>log
        <span class="token key atrule">terminationMessagePolicy</span><span class="token punctuation">:</span> File
      <span class="token key atrule">dnsPolicy</span><span class="token punctuation">:</span> ClusterFirst
      <span class="token key atrule">nodeSelector</span><span class="token punctuation">:</span>
        <span class="token key atrule">node-role.kubernetes.io/edge</span><span class="token punctuation">:</span> <span class="token string">""</span>
      <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> Always
      <span class="token key atrule">schedulerName</span><span class="token punctuation">:</span> default<span class="token punctuation">-</span>scheduler
      <span class="token key atrule">terminationGracePeriodSeconds</span><span class="token punctuation">:</span> <span class="token number">60</span>
      <span class="token key atrule">tolerations</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">effect</span><span class="token punctuation">:</span> NoSchedule
        <span class="token key atrule">key</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span>role.kubernetes.io/master
        <span class="token key atrule">operator</span><span class="token punctuation">:</span> Exists
      <span class="token punctuation">-</span> <span class="token key atrule">effect</span><span class="token punctuation">:</span> PreferNoSchedule
        <span class="token key atrule">key</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span>role.kubernetes.io/master
        <span class="token key atrule">operator</span><span class="token punctuation">:</span> Exists

<span class="token punctuation">---</span>
<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress
    <span class="token key atrule">chart</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>1.24.5
    <span class="token key atrule">component</span><span class="token punctuation">:</span> default<span class="token punctuation">-</span>backend
    <span class="token key atrule">heritage</span><span class="token punctuation">:</span> Tiller
    <span class="token key atrule">release</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress
  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>default<span class="token punctuation">-</span>backend
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">ports</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> http
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>
    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP
    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> http
  <span class="token key atrule">selector</span><span class="token punctuation">:</span>
    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress
    <span class="token key atrule">component</span><span class="token punctuation">:</span> default<span class="token punctuation">-</span>backend
    <span class="token key atrule">release</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress
  <span class="token key atrule">sessionAffinity</span><span class="token punctuation">:</span> None
  <span class="token key atrule">type</span><span class="token punctuation">:</span> ClusterIP
<span class="token key atrule">status</span><span class="token punctuation">:</span>
  <span class="token key atrule">loadBalancer</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="创建nginx-ingress-controller"><a href="#创建nginx-ingress-controller" class="headerlink" title="创建nginx-ingress-controller"></a>创建nginx-ingress-controller</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress
    <span class="token key atrule">chart</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>1.24.5
    <span class="token key atrule">component</span><span class="token punctuation">:</span> controller
    <span class="token key atrule">heritage</span><span class="token punctuation">:</span> Tiller
    <span class="token key atrule">release</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress
  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>controller
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">selector</span><span class="token punctuation">:</span>
    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>
      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress
      <span class="token key atrule">release</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress
  <span class="token key atrule">template</span><span class="token punctuation">:</span>
    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>
      <span class="token key atrule">labels</span><span class="token punctuation">:</span>
        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress
        <span class="token key atrule">component</span><span class="token punctuation">:</span> controller
        <span class="token key atrule">release</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress
    <span class="token key atrule">spec</span><span class="token punctuation">:</span>
      <span class="token key atrule">serviceAccount</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress
      <span class="token key atrule">affinity</span><span class="token punctuation">:</span>
        <span class="token key atrule">podAntiAffinity</span><span class="token punctuation">:</span>
          <span class="token key atrule">requiredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token key atrule">labelSelector</span><span class="token punctuation">:</span>
              <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>
              <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> app
                <span class="token key atrule">operator</span><span class="token punctuation">:</span> In
                <span class="token key atrule">values</span><span class="token punctuation">:</span>
                <span class="token punctuation">-</span> nginx<span class="token punctuation">-</span>ingress
              <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> component
                <span class="token key atrule">operator</span><span class="token punctuation">:</span> In
                <span class="token key atrule">values</span><span class="token punctuation">:</span>
                <span class="token punctuation">-</span> controller
            <span class="token key atrule">topologyKey</span><span class="token punctuation">:</span> kubernetes.io/hostname
      <span class="token key atrule">containers</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">args</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> /nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>controller
        <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>default<span class="token punctuation">-</span>backend<span class="token punctuation">-</span>service=ingress<span class="token punctuation">-</span>nginx/nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>default<span class="token punctuation">-</span>backend
        <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>election<span class="token punctuation">-</span>id=ingress<span class="token punctuation">-</span>controller<span class="token punctuation">-</span>leader
        <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>class=nginx
        <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>tcp<span class="token punctuation">-</span>services<span class="token punctuation">-</span>configmap=$(POD_NAMESPACE)/tcp<span class="token punctuation">-</span>services
        <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>configmap=ingress<span class="token punctuation">-</span>nginx/nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>controller
        <span class="token key atrule">env</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> POD_NAME
          <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>
            <span class="token key atrule">fieldRef</span><span class="token punctuation">:</span>
              <span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
              <span class="token key atrule">fieldPath</span><span class="token punctuation">:</span> metadata.name
        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> POD_NAMESPACE
          <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>
            <span class="token key atrule">fieldRef</span><span class="token punctuation">:</span>
              <span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
              <span class="token key atrule">fieldPath</span><span class="token punctuation">:</span> metadata.namespace
        <span class="token key atrule">image</span><span class="token punctuation">:</span> hub.deri.org.cn/k8s/nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>controller<span class="token punctuation">:</span>0.26.1
        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent
        <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>
          <span class="token key atrule">failureThreshold</span><span class="token punctuation">:</span> <span class="token number">3</span>
          <span class="token key atrule">httpGet</span><span class="token punctuation">:</span>
            <span class="token key atrule">path</span><span class="token punctuation">:</span> /healthz
            <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">10254</span>
            <span class="token key atrule">scheme</span><span class="token punctuation">:</span> HTTP
          <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>
          <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>
          <span class="token key atrule">successThreshold</span><span class="token punctuation">:</span> <span class="token number">1</span>
          <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">1</span>
        <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>controller
        <span class="token key atrule">ports</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>
          <span class="token key atrule">hostPort</span><span class="token punctuation">:</span> <span class="token number">80</span>
          <span class="token key atrule">name</span><span class="token punctuation">:</span> http
          <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP
        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">443</span>
          <span class="token key atrule">hostPort</span><span class="token punctuation">:</span> <span class="token number">443</span>
          <span class="token key atrule">name</span><span class="token punctuation">:</span> https
          <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP
        <span class="token key atrule">readinessProbe</span><span class="token punctuation">:</span>
          <span class="token key atrule">failureThreshold</span><span class="token punctuation">:</span> <span class="token number">3</span>
          <span class="token key atrule">httpGet</span><span class="token punctuation">:</span>
            <span class="token key atrule">path</span><span class="token punctuation">:</span> /healthz
            <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">10254</span>
            <span class="token key atrule">scheme</span><span class="token punctuation">:</span> HTTP
          <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>
          <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>
          <span class="token key atrule">successThreshold</span><span class="token punctuation">:</span> <span class="token number">1</span>
          <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">1</span>
        <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>
          <span class="token key atrule">allowPrivilegeEscalation</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
          <span class="token key atrule">capabilities</span><span class="token punctuation">:</span>
            <span class="token key atrule">add</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> NET_BIND_SERVICE
            <span class="token key atrule">drop</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> ALL
          <span class="token key atrule">runAsUser</span><span class="token punctuation">:</span> <span class="token number">33</span>
        <span class="token key atrule">terminationMessagePath</span><span class="token punctuation">:</span> /dev/termination<span class="token punctuation">-</span>log
        <span class="token key atrule">terminationMessagePolicy</span><span class="token punctuation">:</span> File
      <span class="token key atrule">dnsPolicy</span><span class="token punctuation">:</span> ClusterFirst
      <span class="token key atrule">hostNetwork</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token key atrule">nodeSelector</span><span class="token punctuation">:</span>
        <span class="token key atrule">node-role.kubernetes.io/edge</span><span class="token punctuation">:</span> <span class="token string">""</span>
      <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> Always
      <span class="token key atrule">schedulerName</span><span class="token punctuation">:</span> default<span class="token punctuation">-</span>scheduler
      <span class="token key atrule">tolerations</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">effect</span><span class="token punctuation">:</span> NoSchedule
        <span class="token key atrule">key</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span>role.kubernetes.io/master
        <span class="token key atrule">operator</span><span class="token punctuation">:</span> Exists
      <span class="token punctuation">-</span> <span class="token key atrule">effect</span><span class="token punctuation">:</span> PreferNoSchedule
        <span class="token key atrule">key</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span>role.kubernetes.io/master
        <span class="token key atrule">operator</span><span class="token punctuation">:</span> Exists

<span class="token punctuation">---</span>

<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress
    <span class="token key atrule">chart</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>1.24.5
    <span class="token key atrule">component</span><span class="token punctuation">:</span> controller
    <span class="token key atrule">heritage</span><span class="token punctuation">:</span> Tiller
    <span class="token key atrule">release</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress
  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>controller
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">externalTrafficPolicy</span><span class="token punctuation">:</span> Cluster
  <span class="token key atrule">ports</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> http
    <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">31967</span>
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>
    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP
    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> http
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> https
    <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">31276</span>
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">443</span>
    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP
    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> https
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 30107<span class="token punctuation">-</span>tcp
    <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">32354</span>
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">30107</span>
    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP
    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> 30107<span class="token punctuation">-</span>tcp
  <span class="token key atrule">selector</span><span class="token punctuation">:</span>
    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress
    <span class="token key atrule">component</span><span class="token punctuation">:</span> controller
    <span class="token key atrule">release</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress
  <span class="token key atrule">sessionAffinity</span><span class="token punctuation">:</span> None
  <span class="token key atrule">type</span><span class="token punctuation">:</span> LoadBalancer
<span class="token key atrule">status</span><span class="token punctuation">:</span>
  <span class="token key atrule">loadBalancer</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>ingress-nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>开放分布式追踪OpenTracing与Jaeger相关文档整理</title>
    <url>/kai-fang-fen-bu-shi-zhui-zong-opentracing-yu-jaeger-xiang-guan-wen-dang-zheng-li/</url>
    <content><![CDATA[<h1 id="为什么需要服务追踪？"><a href="#为什么需要服务追踪？" class="headerlink" title="为什么需要服务追踪？"></a>为什么需要服务追踪？</h1><p>开发和工程团队因为系统组件水平扩展、开发团队小型化、敏捷开发、CD（持续集成）、解耦等各种需求，正在使用现代的微服务架构替换老旧的单片机系统，当一个生产系统面对真正的高并发，或者解耦成大量微服务时，以前很容易实现的重点任务变得困难了，如<strong>用户体验优化</strong>、<strong>后台真实错误原因分析</strong>，<strong>分布式系统内各组件的调用情况</strong>等。 </p>
<h1 id="分布式服务追踪现状"><a href="#分布式服务追踪现状" class="headerlink" title="分布式服务追踪现状"></a>分布式服务追踪现状</h1><p>当代分布式跟踪系统（例如，<code>Zipkin</code>, <code>Dapper</code>, <code>HTrace</code>, <code>X-Trace</code>等）旨在解决这些问题，但是他们使用不兼容的<code>API</code>来实现各自的应用需求。尽管这些分布式追踪系统有着相似的API语法，但各种语言的开发人员依然很难将他们各自的系统（使用不同的语言和技术）和特定的分布式追踪系统进行整合。</p>
<h1 id="OpenTracing"><a href="#OpenTracing" class="headerlink" title="OpenTracing"></a>OpenTracing</h1><p>OpenTracing通过提供平台无关、厂商无关的API，使得开发人员能够方便的添加（或更换）追踪系统的实现。 OpenTracing提供了用于运营支撑系统的和针对特定平台的辅助程序库。</p>
<h1 id="典型服务追踪案例"><a href="#典型服务追踪案例" class="headerlink" title="典型服务追踪案例"></a>典型服务追踪案例</h1><p><img data-src="/images/ot1.png" alt="案例"></p>
<p>在一个分布式系统中，追踪一个事务或者调用流一般如上图所示。虽然这种图对于看清各组件的组合关系是很有用的，但是，它不能很好显示组件的调用时间，是串行调用还是并行调用，如果展现更复杂的调用关系，会更加复杂，甚至无法画出这样的图。这种图也无法显示调用间的时间间隔以及是否通过定时调用来启动调用.</p>
<p><img data-src="/images/ot2.png" alt="案例"></p>
<p>这种展现方式增加显示了执行时间的上下文，相关服务间的层次关系，进程或者任务的串行或并行调用关系。这样的视图有助于发现系统调用的关键路径。通过关注关键路径的执行过程，项目团队可能专注于优化路径中的关键位置，最大幅度的提升系统性能。例如：可以通过追踪一个资源定位的调用情况，明确底层的调用情况，发现哪些操作有阻塞的情况。</p>
<h1 id="Jaeger-架构"><a href="#Jaeger-架构" class="headerlink" title="Jaeger 架构"></a>Jaeger 架构</h1><p><code>Jaeger</code>是OpenTracing的一种实现。<br><img data-src="/images/jaeger.jpg" alt="jaeger"></p>
<p>如上图所示，<code>Jaeger</code> 主要由以下几部分组成。</p>
<ul>
<li><strong>Jaeger Client</strong> - 为不同语言实现了符合&nbsp;OpenTracing&nbsp;标准的 SDK。应用程序通过 API 写入数据，client library 把 trace 信息按照应用程序指定的采样策略传递给 jaeger-agent。在 Application 中调用 Jaeger Client Library 记录 Span 的过程通常被称为埋点。</li>
<li><strong>Agent</strong> - 它是一个监听在 UDP 端口上接收 span 数据的网络守护进程，它会将数据批量发送给 collector。它被设计成一个基础组件，部署到所有的宿主机上。Agent 将 client library 和 collector 解耦，为 client library 屏蔽了路由和发现 collector 的细节。</li>
<li><strong>Collector</strong> - 接收 jaeger-agent 发送来的数据，然后将数据写入后端存储。Collector 被设计成无状态的组件，因此您可以同时运行任意数量的 jaeger-collector。</li>
<li><strong>Data Store</strong> - 后端存储被设计成一个可插拔的组件，支持将数据写入 cassandra、elastic search。</li>
<li><strong>Query</strong> - 接收查询请求，然后从后端存储系统中检索 trace 并通过 UI 进行展示。Query 是无状态的，您可以启动多个实例，把它们部署在 nginx 这样的负载均衡器后面。</li>
</ul>
<h1 id="Istio-Trace链路追踪方案"><a href="#Istio-Trace链路追踪方案" class="headerlink" title="Istio Trace链路追踪方案"></a>Istio Trace链路追踪方案</h1><ul>
<li><p><code>Envoy</code>原生就支持分布式追踪系统的接入，如支持<code>jaeger</code>和<code>zipkin</code>；</p>
</li>
<li><p>生成<code>Request Id</code>，填充<code>HTTP</code>的<code>header</code>字段<code>x-request-id</code>;</p>
</li>
<li><p>如果<code>incoming</code>的请求没有trace相关的headers，则会在流量进入pods之前创建一个<code>root span</code>;</p>
</li>
<li><p>如果<code>incoming</code>的请求包含有trace相关的headers，Sidecar的proxy将会extract这些span的上下文信息，然后在流量进入pods之前创建一个继承上一个span的新的span;</p>
</li>
<li><p>Jaeger本身支持在client端调整和通过collector调整采样策略，但是在Istio中并没有Jaeger的client，只是envoy里面支持了trace，不过Istio中提供了一个全局的设置，通过设置pilot的参数可以用来控制采用策略。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>istio</category>
      </categories>
      <tags>
        <tag>istio</tag>
        <tag>OpenTracing</tag>
        <tag>jaeger</tag>
      </tags>
  </entry>
  <entry>
    <title>微网基础知识</title>
    <url>/wei-wang-ji-chu-zhi-shi/</url>
    <content><![CDATA[<h3 id="储能系统"><a href="#储能系统" class="headerlink" title="储能系统"></a>储能系统</h3><p>储能系统（Energy Storage System，简称ESS）：是一个可完成存储电能和供电的系统，具有平滑过渡、削峰填谷、调频调压等功能。可以使太阳能、风能发电平滑输出，减少其随机性、间歇性、波动性给电网和用户带来的冲击；通过谷价时段充电，峰价时段放电可以减少用户的电费支出；在大电网断电时，能够孤岛运行，确保对用户不间断供电。</p>
<table>
<thead>
<tr>
<th>名词</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>BA</td>
<td>储能电池组</td>
</tr>
<tr>
<td>BMS</td>
<td>电池管理系统</td>
</tr>
<tr>
<td>PCS</td>
<td>储能变流器，功率变换系统</td>
</tr>
<tr>
<td>EMS</td>
<td>能量管理系统</td>
</tr>
</tbody></table>
<h3 id="变流器控制策略"><a href="#变流器控制策略" class="headerlink" title="变流器控制策略"></a>变流器控制策略</h3><ul>
<li>PQ控制：指恒定有功无功控制，控制储能变流器输出的有功功率和无功功率等于其参考功率。PQ控制是新能源并网最常用的控制方式，只有在储能系统并网模式下才可能运用</li>
<li>VF控制：指储能变流器维持输出电压和频率不变；而输出的有功功率和无功功率由负荷决定</li>
<li>VSG控制：虚拟同步机模式，该模式下储能可以构网，同时可以和并网型或者构网型系统并机运行</li>
</ul>
<h3 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h3><ul>
<li>使能：所谓使能信号，英文叫Enable，通过这个信号可以控制某颗芯片/某个电路有没有被“启用”。一个大型的数字系统中，通常都需要使用多个芯片/电路单元来配合完成一个功能。而这些芯片并不是每时每刻都在工作的。因此需要用使能信号来控制应该“启动”哪个芯片来工作。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>思维导图神器markmap</title>
    <url>/si-wei-dao-tu-shen-qi-markmap/</url>
    <content><![CDATA[<h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><p>用markdown编写思维导图神器markmap.</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=gera2ld.markmap-vscode">安装markmap</a></p>
<p>安装完成后，正常编写markdown文件，点击右上角<code>open as markmap</code>，也可以导出.</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
  </entry>
  <entry>
    <title>数字黑洞495,6174...</title>
    <url>/shu-zi-hei-dong/</url>
    <content><![CDATA[<blockquote>
<p>1955年，卡普耶卡(D.R.Kaprekar)研究了对四位数的一种变换：任给出四位数k0,用它的四个数字由大到小重新排列成一个四位数m,再减去它的反序数rev(m),得出数k1=m-rev(m),然后，继续对k1重复上述变换，得数k2.如此进行下去，卡普耶卡发现，无论k0是多大的四位数，只要四个数字不全相同，最多进行7次上述变换，就会出现四位数6174。因此这项研究在国际数学界又被称为“马丁猜想—6174问题”。</p>
</blockquote>
<h3 id="有趣的数字6174"><a href="#有趣的数字6174" class="headerlink" title="有趣的数字6174"></a>有趣的数字6174</h3><ul>
<li>随机生成四个不完全一样的数字(<code>0000</code>,<code>1111</code>,<code>2222</code>,等排除);</li>
<li>四个数字组成一个<code>最大的数</code> 和 一个<code>最小的数</code>,如<code>2,5,7,3</code>组成的最大的数<code>7532</code>,最小的数<code>2357</code>;</li>
<li>最大的数 <code>-</code> 最小的数，如果不等于<code>6174</code>，就按照上一步将差值重新组成一个<code>最大的数</code> 和 一个<code>最小的数</code>;</li>
<li>最后一定有一次能得到差值为<code>6174</code>.俗称<code>数字黑洞</code>.</li>
</ul>
<h3 id="JAVA实现"><a href="#JAVA实现" class="headerlink" title="JAVA实现"></a>JAVA实现</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test6174</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 无线循环测试</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 随机生成四个数字，考虑到出现四个一样的概率非常低 没有处理</span>
            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> meta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                meta<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"原始数字:"</span> <span class="token operator">+</span> meta<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token number">6174</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 获取四个数字组合的最大的数 和 最小的数</span>
                <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token function">getMax</span><span class="token punctuation">(</span>meta<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token function">getMin</span><span class="token punctuation">(</span>meta<span class="token punctuation">)</span><span class="token punctuation">;</span>
                result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>
                count<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// 数字为啥是6174？</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token number">6174</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">",次数:"</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                meta <span class="token operator">=</span> <span class="token function">getMeta</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMax</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> meta<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> tmp <span class="token operator">=</span> meta<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> tmp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">+</span> tmp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> tmp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> tmp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMin</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> meta<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> tmp <span class="token operator">=</span> meta<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> tmp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> tmp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> tmp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> tmp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">getMeta</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tmp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tmp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num <span class="token operator">/</span> <span class="token number">100</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tmp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tmp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="同样的黑洞数字还有很多哦"><a href="#同样的黑洞数字还有很多哦" class="headerlink" title="同样的黑洞数字还有很多哦"></a>同样的黑洞数字还有很多哦</h3><p>不如写个程序来找出不同位数的黑洞数字吧</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestN</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 输入几位数就是找几位数的黑洞数字</span>
        <span class="token keyword">int</span> digits <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> meta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> digits<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            meta<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getMax</span><span class="token punctuation">(</span>meta<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getMin</span><span class="token punctuation">(</span>meta<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数字完全一样,不符合要求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原始数字:"</span> <span class="token operator">+</span> meta<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token function">getMax</span><span class="token punctuation">(</span>meta<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token function">getMin</span><span class="token punctuation">(</span>meta<span class="token punctuation">)</span><span class="token punctuation">;</span>
            result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>
            meta <span class="token operator">=</span> <span class="token function">getMeta</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> digits<span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 获取数字组合的最大数</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMax</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> meta<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> tmp <span class="token operator">=</span> meta<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tmp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result <span class="token operator">=</span> result <span class="token operator">+</span> tmp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 获取数字组合的最小数</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMin</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> meta<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> tmp <span class="token operator">=</span> meta<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tmp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result <span class="token operator">=</span> result <span class="token operator">+</span> tmp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 获取数的各位数</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">getMeta</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> c<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            tmp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如上程序测试运行：</p>
<table>
<thead>
<tr>
<th><code>digits</code>(位数)</th>
<th>黑洞数(个)</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td><code>1</code></td>
<td><code>-</code></td>
<td><code>-</code></td>
</tr>
<tr>
<td><code>2</code></td>
<td><code>5</code></td>
<td><code>9,81,63,27,45</code></td>
</tr>
<tr>
<td><code>3</code></td>
<td><code>1</code></td>
<td><code>495</code></td>
</tr>
<tr>
<td><code>4</code></td>
<td><code>1</code></td>
<td><code>6174</code></td>
</tr>
<tr>
<td><code>5</code></td>
<td><code>4</code></td>
<td><code>71973,83952,74943,62964</code></td>
</tr>
<tr>
<td><code>6</code></td>
<td><code>7</code></td>
<td><code>840852,860832,862632,642654,...</code></td>
</tr>
<tr>
<td><code>7</code></td>
<td><code>8</code></td>
<td><code>9529641,8719722,8649432,7519743,...</code></td>
</tr>
<tr>
<td><code>8</code></td>
<td><code>3</code></td>
<td><code>64308654,83208762,86526432</code></td>
</tr>
<tr>
<td><code>9</code></td>
<td><code>14</code></td>
<td><code>954197541,883098612,976494321,...</code></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>黑洞数字</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库查询结果为空定义默认值</title>
    <url>/shu-ju-ku-cha-xun-jie-guo-wei-kong-ding-yi-mo-ren-zhi/</url>
    <content><![CDATA[<blockquote>
<p>使用MyBatis查询 返回类型为int，但是当查询结果为空NULL，报异常的解决方法</p>
</blockquote>
<p>如</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> pre_id <span class="token keyword">from</span> task_child <span class="token keyword">where</span> parent_id<span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">order</span> <span class="token keyword">by</span> pre_id <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果查询结果是空,那么后台可能报异常</p>
<pre class="line-numbers language-log"><code class="language-log">Servlet.service() for servlet [springDispatcherServlet] in context with path [/xxxx] threw exception [Request processing failed; 
nested exception is org.apache.ibatis.binding.BindingException: Mapper method 'com.xxx.PersonRoleRelationMapper.getPersonRecordno attempted to return null from a method with a primitive return type (int).] 
with root cause org.apache.ibatis.binding.BindingException: Mapper method 'com.xxx.PPersonRoleRelationMapper.getPersonRecordno attempted to return null from a method with a primitive return type (int).
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>这时，我们需要给查询结果一个默认值</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> IFNULL<span class="token punctuation">(</span><span class="token function">MAX</span><span class="token punctuation">(</span>pre_id<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">from</span> task_child <span class="token keyword">where</span> parent_id<span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">order</span> <span class="token keyword">by</span> pre_id <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>或者</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 在Oracle中我们可以这样写：</span>
<span class="token keyword">select</span> NVL<span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>pre_id<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token comment" spellcheck="true">--对于所有数据库适用的方法可以这样写：</span>
<span class="token keyword">select</span> <span class="token keyword">COALESCE</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>pre_id<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>max也可以用sum函数代替.</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>日志聚合工具Loki使用【LogQL】</title>
    <url>/ri-zhi-ju-he-gong-ju-loki-shi-yong-logql/</url>
    <content><![CDATA[<p><a href="https://github.com/grafana/loki/blob/master/docs/logql.md">LogQL github</a></p>
<h3 id="LogQL简介"><a href="#LogQL简介" class="headerlink" title="LogQL简介"></a>LogQL简介</h3><p>LogQL: Log Query Language<br>Loki comes with its very own language for querying logs called LogQL. LogQL can be considered a distributed grep with labels for filtering.</p>
<p>A basic LogQL query consists of two parts: the log stream selector and a filter expression. Due to Loki’s design, all LogQL queries are required to contain a log stream selector.</p>
<p>The log stream selector will reduce the number of log streams to a manageable volume. Depending how many labels you use to filter down the log streams will affect the relative performance of the query’s execution. The filter expression is then used to do a distributed grep over the retrieved log streams.</p>
<h3 id="Loki选择器"><a href="#Loki选择器" class="headerlink" title="Loki选择器"></a>Loki选择器</h3><p>对于查询表达式的标签部分，将其包装在花括号中<code>{}</code>，然后使用键值对的语法来选择标签，多个标签表达式用逗号分隔，比如：</p>
<pre><code>{app="mysql",name="mysql-backup"}
</code></pre>
<p>目前支持以下标签匹配运算符：</p>
<ul>
<li>=等于</li>
<li>!=不相等</li>
<li>=~正则表达式匹配</li>
<li>!~不匹配正则表达式</li>
<li>比如：</li>
</ul>
<pre><code>{name=~"mysql.+"}
{name!~"mysql.+"}
</code></pre>
<h3 id="日志过滤器"><a href="#日志过滤器" class="headerlink" title="日志过滤器"></a>日志过滤器</h3><p>编写日志流选择器后，您可以通过编写搜索表达式来进一步过滤结果。搜索表达式可以只是文本或正则表达式。<br>查询示例：</p>
<pre><code>{job="mysql"} |= "error"
{name="kafka"} |~ "tsdb-ops.*io:2003"
{instance=~"kafka-[23]",name="kafka"} != kafka.server:type=ReplicaManager
</code></pre>
<p>过滤器运算符可以被链接，并将顺序过滤表达式-结果日志行将满足每个过滤器。例如：</p>
<pre><code>{job="mysql"} |= "error" != "timeout"
</code></pre>
<p>已实现以下过滤器类型：</p>
<ul>
<li>|= 行包含字符串。</li>
<li>!= 行不包含字符串。</li>
<li>|~ 行匹配正则表达式。</li>
<li>!~ 行与正则表达式不匹配。<br><code>regex</code>表达式接受<code>RE2</code>语法。默认情况下，匹配项区分大小写，并且可以将<code>regex</code>切换为不区分大小写的前缀<code>(?i)</code>。</li>
</ul>
<h3 id="日志统计"><a href="#日志统计" class="headerlink" title="日志统计"></a>日志统计</h3><ul>
<li>rate: calculate the number of entries per second</li>
</ul>
<pre><code>rate( ( {job="mysql"} |= "error" != "timeout)[10s] ) )
</code></pre>
<ul>
<li>count_over_time: counts the entries for each log stream within the given range.</li>
</ul>
<pre><code>count_over_time({job="mysql"}[5m])
</code></pre>
<h3 id="聚合运算"><a href="#聚合运算" class="headerlink" title="聚合运算"></a>聚合运算</h3><ul>
<li>sum: Calculate sum over labels</li>
<li>min: Select minimum over labels</li>
<li>max: Select maximum over labels</li>
<li>avg: Calculate the average over labels</li>
<li>stddev: Calculate the population standard deviation over labels</li>
<li>stdvar: Calculate the population standard variance over labels</li>
<li>count: Count number of elements in the vector</li>
<li>bottomk: Select smallest k elements by sample value</li>
<li>topk: Select largest k elements by sample value</li>
</ul>
<p>示例：<br>Get the top 10 applications by the highest log throughput:</p>
<pre><code>topk(10,sum(rate({region="us-east1"}[5m])) by (name))
</code></pre>
<p>Get the count of logs during the last five minutes, grouping by level:</p>
<pre><code>sum(count_over_time({job="mysql"}[5m])) by (level)
</code></pre>
<p>Get the rate of HTTP GET requests from NGINX logs:</p>
<pre><code>avg(rate(({job="nginx"} |= "GET")[10s])) by (region)
</code></pre>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>loki</tag>
        <tag>logQL</tag>
      </tags>
  </entry>
  <entry>
    <title>日志聚合工具Loki安装使用【采用helm安装】</title>
    <url>/ri-zhi-ju-he-gong-ju-loki-an-zhuang-shi-yong-cai-yong-helm-an-zhuang/</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Loki是 Grafana Labs 团队最新的开源项目，是一个水平可扩展，高可用性，多租户的日志聚合系统。它的设计非常经济高效且易于操作，因为它不会为日志内容编制索引，而是为每个日志流编制一组标签。项目受 Prometheus 启发，官方的介绍就是：Like Prometheus, but for logs.，类似于 Prometheus 的日志系统。</p>
<p>与其他日志聚合系统相比，Loki具有下面的一些特性：</p>
<ul>
<li>不对日志进行全文索引。通过存储压缩非结构化日志和仅索引元数据，Loki 操作起来会更简单，更省成本。</li>
<li>通过使用与 Prometheus 相同的标签记录流对日志进行索引和分组，这使得日志的扩展和操作效率更高。</li>
<li>特别适合储存 Kubernetes Pod 日志; 诸如 Pod 标签之类的元数据会被自动删除和编入索引。</li>
<li>受 Grafana 原生支持。</li>
</ul>
<p>Loki 由以下3个部分组成：<br><img data-src="/images/loki.png" alt="Loki"></p>
<ol>
<li>loki是主服务器，负责存储日志和处理查询。</li>
<li>promtail是代理，负责收集日志并将其发送给 loki 。</li>
<li>Grafana用于 UI 展示。</li>
</ol>
<h3 id="Loki安装"><a href="#Loki安装" class="headerlink" title="Loki安装"></a>Loki安装</h3><p>参考<a href="https://github.com/grafana/loki/blob/master/docs/installation/helm.md">官网</a></p>
<h4 id="添加-x2F-更新helm"><a href="#添加-x2F-更新helm" class="headerlink" title="添加/更新helm"></a>添加/更新helm</h4><pre class="line-numbers language-bash"><code class="language-bash">helm repo add loki https://grafana.github.io/loki/charts
helm repo update
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="安装loki（使用默认配置）"><a href="#安装loki（使用默认配置）" class="headerlink" title="安装loki（使用默认配置）"></a>安装loki（使用默认配置）</h4><pre class="line-numbers language-bash"><code class="language-bash">helm upgrade --install loki loki/loki-stack
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="安装loki（设置namespace）"><a href="#安装loki（设置namespace）" class="headerlink" title="安装loki（设置namespace）"></a>安装loki（设置namespace）</h4><pre class="line-numbers language-bash"><code class="language-bash">helm upgrade --install loki --namespace<span class="token operator">=</span>loki loki/loki
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="安装loki（更改一些配置）"><a href="#安装loki（更改一些配置）" class="headerlink" title="安装loki（更改一些配置）"></a>安装loki（更改一些配置）</h4><pre class="line-numbers language-bash"><code class="language-bash">helm upgrade --install loki loki/loki-stack  --set grafana.enabled<span class="token operator">=</span>true,prometheus.enabled<span class="token operator">=</span>true,prometheus.alertmanager.persistentVolume.enabled<span class="token operator">=</span>false,prometheus.server.persistentVolume.enabled<span class="token operator">=</span>false
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>这边loki使用的镜像是<code>grafana/loki:v1.2.0</code>，建议提前拉取下来。</p>
<pre class="line-numbers language-bash"><code class="language-bash">docker pull grafana/loki:v1.2.0
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>其它一些信息，可以参考官网配置。</p>
</blockquote>
<h3 id="Promtail安装"><a href="#Promtail安装" class="headerlink" title="Promtail安装"></a>Promtail安装</h3><p>参考<a href="https://github.com/grafana/loki/blob/master/docs/clients/promtail/installation.md">官网</a></p>
<pre class="line-numbers language-bash"><code class="language-bash">helm upgrade --install promtail loki/promtail --set <span class="token string">"loki.serviceName=loki"</span> --namespace<span class="token operator">=</span>loki
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>这边loki使用的镜像是<code>grafana/promtail:v1.2.0</code>，建议提前拉取下来。</p>
<pre class="line-numbers language-bash"><code class="language-bash">docker pull grafana/promtail:v1.2.0
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>其它一些信息，可以参考官网配置。</p>
</blockquote>
<h3 id="集成Grafana，实现页面查询日志"><a href="#集成Grafana，实现页面查询日志" class="headerlink" title="集成Grafana，实现页面查询日志"></a>集成Grafana，实现页面查询日志</h3><blockquote>
<p>前文使用<a href="">Helm一键安装Prometheus Operator</a>已经安装了grafana服务，我们可以直接使用。</p>
</blockquote>
<h4 id="登录grafana，选择添加数据源"><a href="#登录grafana，选择添加数据源" class="headerlink" title="登录grafana，选择添加数据源"></a>登录grafana，选择添加数据源</h4><p><img data-src="/images/loki1.jpg" alt="添加Loki数据源"></p>
<h4 id="数据源列表中选择Loki，配置服务地址"><a href="#数据源列表中选择Loki，配置服务地址" class="headerlink" title="数据源列表中选择Loki，配置服务地址"></a>数据源列表中选择Loki，配置服务地址</h4><blockquote>
<p>如果<code>grafana</code>与<code>loki</code>在同一个<code>namespace</code>，只需写服务名即可。<br>如果是在不同的<code>namespace</code>，那么要写完整<code>DNS</code>地址。</p>
</blockquote>
<p><img data-src="/images/loki2.jpg" alt="添加Loki数据源"></p>
<h4 id="切换到grafana左侧区域的Explore，进入loki页面"><a href="#切换到grafana左侧区域的Explore，进入loki页面" class="headerlink" title="切换到grafana左侧区域的Explore，进入loki页面"></a>切换到<code>grafana</code>左侧区域的<code>Explore</code>，进入<code>loki</code>页面</h4><p><img data-src="/images/loki3.jpg" alt="添加Loki数据源"></p>
<p>点击Log labels就可以把当前系统采集的日志标签给显示出来，可以根据这些标签进行日志的过滤查询</p>
<p><img data-src="/images/loki4.jpg" alt="添加Loki数据源"></p>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><pre><code>...........
level=error ts=2019-12-17T05:43:00.189385282Z caller=filetarget.go:272 msg="failed to tail file, stat failed" error="stat /var/log/pods/kube-system_kube-flannel-ds-amd64-btn7m_5088625c-bba8-41d6-86c8-dc738d3b43ab/kube-flannel/3.log: no such file or directory" filename=/var/log/pods/kube-system_kube-flannel-ds-amd64-btn7m_5088625c-bba8-41d6-86c8-dc738d3b43ab/kube-flannel/3.log
level=error ts=2019-12-17T05:43:00.192476724Z caller=filetarget.go:272 msg="failed to tail file, stat failed" error="stat /var/log/pods/kube-system_kube-flannel-ds-amd64-btn7m_5088625c-bba8-41d6-86c8-dc738d3b43ab/install-cni/5.log: no such file or directory" filename=/var/log/pods/kube-system_kube-flannel-ds-amd64-btn7m_5088625c-bba8-41d6-86c8-dc738d3b43ab/install-cni/5.log
......
</code></pre>
<p>提示找不到<code>/var/log/pods</code>目录下的日志文件，无法<code>tail</code>。</p>
<p>首先我们可以进入<code>promtail</code>容器内，到该目录下查看下是否有该文件，通过<code>cat</code>命令看看是否有日志。</p>
<p>默认安装<code>promtail</code>，它会将主机<code>/var/log/pods</code>和<code>/var/lib/docker/containers</code>目录通过<code>volumes</code>方式挂载到<code>promtail</code>容器内。如果安装<code>docker</code>和<code>k8s</code>都是采用默认配置，应该不会存在读不到日志的问题。</p>
<pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"docker"</span><span class="token punctuation">,</span>
    <span class="token property">"hostPath"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"/var/lib/docker/containers"</span><span class="token punctuation">,</span>
        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">""</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"pods"</span><span class="token punctuation">,</span>
    <span class="token property">"hostPath"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"/var/log/pods"</span><span class="token punctuation">,</span>
        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">""</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>本人因为主机系统盘太小，设置了<code>docker</code>镜像的目录到挂载磁盘<code>/data</code>目录下，所以需要修改默认<code>volumes</code>配置。</p>
<pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"docker"</span><span class="token punctuation">,</span>
    <span class="token property">"hostPath"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"/data/docker/containers"</span><span class="token punctuation">,</span>
        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">""</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"pods"</span><span class="token punctuation">,</span>
    <span class="token property">"hostPath"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"/var/log/pods"</span><span class="token punctuation">,</span>
        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">""</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
//注意对应的volumeMounts也要修改
<span class="token property">"volumeMounts"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
              <span class="token punctuation">{</span>
                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"docker"</span><span class="token punctuation">,</span>
                <span class="token property">"readOnly"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token property">"mountPath"</span><span class="token operator">:</span> <span class="token string">"/data/docker/containers"</span>
              <span class="token punctuation">}</span><span class="token punctuation">,</span>
              <span class="token punctuation">{</span>
                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"pods"</span><span class="token punctuation">,</span>
                <span class="token property">"readOnly"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token property">"mountPath"</span><span class="token operator">:</span> <span class="token string">"/var/log/pods"</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面<code>volumes</code>和<code>volumeMounts</code>都要修改，因为<code>/var/log/pods</code>目录下的日志文件其实是个软链接，指向的是<code>docker/containers</code>目录下的日志文件。如果只修改了<code>volumes</code>，那么<code>promtail</code>容器内可以找到日志文件，但是打开确实空的，因为它只是个软连接。</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@node1 log<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll /var/log/pods/monitoring_promtail-bs5cs_5bc5bc90-bac9-480d-b291-4caadeff2236/promtail/</span>
total 4
lrwxrwxrwx 1 root root 162 Dec 17 14:04 0.log -<span class="token operator">></span> /data/docker/containers/db45d5118e9508817e1a2efa3c9da68cfe969a2b0a3ed42619ff61a29cc64e5f/db45d5118e9508817e1a2efa3c9da68cfe969a2b0a3ed42619ff61a29cc64e5f-json.log
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>loki</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>Service Mesh简介</title>
    <url>/fu-wu-wang-ge/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>服务网格（<code>Service mesh</code>）是服务间通信的基础设施层</strong>。它对全局流量和通信进行监控和管理，提供包括可观察性、流量转移（用于灰度发布）、弹性能力（例如断路和重试/超时）等一系列功能，并为服务之间的通信提供双向 TLS 认证能力，让网格能够对请求和响应进行自动加密和解密。<br><img data-src="/images/sm1.jpg" alt="Service Mesh"></p>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul>
<li>治理能力独立（Sidecar）</li>
<li>应用程序无感知</li>
<li>服务通信的基础设施层</li>
</ul>
<h4 id="关注的方面"><a href="#关注的方面" class="headerlink" title="关注的方面"></a>关注的方面</h4><ul>
<li>可观察性</li>
<li>安全性</li>
<li>可运维性</li>
<li>可拓展性</li>
</ul>
<h3 id="为什么需要？"><a href="#为什么需要？" class="headerlink" title="为什么需要？"></a>为什么需要？</h3><p><img data-src="/images/sm4.png" alt="Service Mesh"><br><code>Kubernetes</code> 提供平台基础设施层强大的容器编排与调度能力</p>
<ul>
<li>服务部署与弹性伸缩：<code>Deployment</code></li>
<li>服务拆分与服务发现：<code>Service</code></li>
</ul>
<p><code>Kubernetes</code> 提供简单的负载均衡</p>
<ul>
<li>负载均衡：基于<code>IPVS</code>或<code>Iptables</code>的简单均衡机制</li>
</ul>
<p>但是<code>Kubernetes</code>在服务治理方面并不完备，缺少了动态路由、熔断、灰度发布等等功能，需要由服务网格互补。</p>
<h3 id="什么时候用Service-Mesh？"><a href="#什么时候用Service-Mesh？" class="headerlink" title="什么时候用Service Mesh？"></a>什么时候用Service Mesh？</h3><p><img data-src="/images/sm2.jpg" alt="Service Mesh"></p>
<p>随着我们的微服务越来越细分，我们所要管理的服务正在成倍的增长着，<code>Kubernetes</code> 提供了丰富的功能，使得我们可以快速的部署和调度这些服务，同时也提供了我们熟悉的方式来实现那些复杂的功能，但是随着部署的应该越来越多，复杂度越来越高，当临界点到来时，可能就是我们真正要去考虑使用 <code>Service Mesh</code> 的时候了。</p>
<h3 id="Istio问世"><a href="#Istio问世" class="headerlink" title="Istio问世"></a>Istio问世</h3><p><img data-src="/images/sm3.jpg" alt="Service Mesh"><br><code>Istio</code>是一个开放服务网格，是<code>Service Mesh</code>标准实现，也是当下最流行的，提供了一种连接，管理和保护微服务的统一方法。它支持管理服务之间的流量，执行访问策略以及汇总遥测数据，所有这些都无需更改微服务代码。</p>
]]></content>
      <categories>
        <category>istio</category>
      </categories>
      <tags>
        <tag>istio</tag>
        <tag>service mesh</tag>
      </tags>
  </entry>
  <entry>
    <title>构建最小的java8镜像</title>
    <url>/gou-jian-zui-xiao-de-java8-jing-xiang/</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul>
<li><code>openjdk</code>和<code>oracle jdk</code>一些情况下并不兼容;</li>
<li><code>openjdk</code>镜像很小只有一百朵兆,但是<code>oracle jdk</code>搜到的镜像都很大.</li>
</ul>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>下载最新的<a href="https://www.java.com/en/download/manual.jsp">oracle jre 8</a></li>
</ol>
<pre><code>https://javadl.oracle.com/webapps/download/AutoDL?BundleId=242050_3d5a2bb8f8d4428bbe94aed7ec7ae784
</code></pre>
<ol start="2">
<li>上传到<code>linux</code>并解压</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@node1 jdk8<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tar -xvzf jre-8u251-linux-x64.tar.gz </span>
<span class="token punctuation">[</span>root@node1 jdk8<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># pwd</span>
/root/jdk8
<span class="token punctuation">[</span>root@node1 jdk8<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>
总用量 85492
drwxr-xr-x 5 10143 10143       76 7月   9 14:04 jre1.8.0_251
-rw-r--r-- 1 root  root  87543611 7月   9 13:55 jre-8u251-linux-x64.tar.gz
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="3">
<li>删除一些说明文档和无用包</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@node1 jdk8<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd jre1.8.0_251/</span>

<span class="token function">rm</span> -rf COPYRIGHT LICENSE README release THIRDPARTYLICENSEREADME-JAVAFX.txt THIRDPARTYLICENSEREADME.txt Welcome.html
<span class="token function">rm</span> -rf   lib/plugin.jar \
           lib/ext/jfxrt.jar \
           bin/javaws \
           lib/javaws.jar \
           lib/desktop \
           plugin \
           lib/deploy* \
           lib/*javafx* \
           lib/*jfx* \
           lib/amd64/libdecora_sse.so \
           lib/amd64/libprism_*.so \
           lib/amd64/libfxplugins.so \
           lib/amd64/libglass.so \
           lib/amd64/libgstreamer-lite.so \
           lib/amd64/libjavafx*.so \
           lib/amd64/libjfx*.so

<span class="token punctuation">[</span>root@node1 jre1.8.0_251<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>
总用量 4
drwxr-xr-x  2 10143 10143  208 7月   9 13:56 bin
drwxr-xr-x 13 10143 10143 4096 7月   9 13:56 lib
drwxr-xr-x  4 10143 10143   47 3月  12 14:33 <span class="token function">man</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="4">
<li>重新打包</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@node1 jre1.8.0_251<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tar zcvf jre8.tar.gz *</span>
<span class="token punctuation">[</span>root@node1 jre1.8.0_251<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span>
总用量 43896
drwxr-xr-x  2 10143 10143      208 7月   9 13:56 bin
-rw-r--r--  1 root  root  44942683 7月   9 14:04 jre8.tar.gz
drwxr-xr-x 13 10143 10143     4096 7月   9 13:56 lib
drwxr-xr-x  4 10143 10143       47 3月  12 14:33 <span class="token function">man</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="5">
<li>直接在当前目录下创建<code>Dockerfile</code></li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@node1 jre1.8.0_251<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim Dockerfile</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>编写<code>Dockerfile</code></p>
<pre><code>FROM docker.io/jeanblanchard/alpine-glibc
MAINTAINER wuzhiyong
ADD jre8.tar.gz /usr/java/jdk/
ENV JAVA_HOME /usr/java/jdk
ENV PATH ${PATH}:${JAVA_HOME}/bin
WORKDIR /opt
</code></pre>
<ol start="6">
<li>生成镜像</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 生成镜像</span>
<span class="token punctuation">[</span>root@node1 jre1.8.0_251<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker build -t wuzhiyong/java8.0_251 .</span>
Sending build context to Docker daemon  161.1MB
Step 1/6 <span class="token keyword">:</span> FROM docker.io/jeanblanchard/alpine-glibc
 ---<span class="token operator">></span> c1bfe6541128
Step 2/6 <span class="token keyword">:</span> MAINTAINER wuzhiyong
 ---<span class="token operator">></span> Using cache
 ---<span class="token operator">></span> 5e4699308c35
Step 3/6 <span class="token keyword">:</span> ADD jre8.tar.gz /usr/java/jdk/
 ---<span class="token operator">></span> 8b6b66ec0f68
Step 4/6 <span class="token keyword">:</span> ENV JAVA_HOME /usr/java/jdk
 ---<span class="token operator">></span> Running <span class="token keyword">in</span> 26f286188aa8
Removing intermediate container 26f286188aa8
 ---<span class="token operator">></span> 7d1501133f4c
Step 5/6 <span class="token keyword">:</span> ENV PATH <span class="token variable">${PATH}</span><span class="token keyword">:</span><span class="token variable">${JAVA_HOME}</span>/bin
 ---<span class="token operator">></span> Running <span class="token keyword">in</span> 418be370f8b9
Removing intermediate container 418be370f8b9
 ---<span class="token operator">></span> 8a920d8285df
Step 6/6 <span class="token keyword">:</span> WORKDIR /opt
 ---<span class="token operator">></span> Running <span class="token keyword">in</span> 107687a0007d
Removing intermediate container 107687a0007d
 ---<span class="token operator">></span> e7a62387e585
Successfully built e7a62387e585
Successfully tagged wuzhiyong/java8.0_251:latest
<span class="token comment" spellcheck="true">#查看镜像大小</span>
<span class="token punctuation">[</span>root@node1 jre1.8.0_251<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker images | grep java8</span>
wuzhiyong/java8.0_251                                            latest                    e7a62387e585        15 seconds ago      133MB
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="7">
<li>上传到镜像仓库,可以下载使用</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash">docker pull hub.deri.org.cn/library/oracle_jdk_1.8_251:latest
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>每日算法题【只出现一次的数字】</title>
    <url>/mei-ri-suan-fa-ti-zhi-chu-xian-yi-ci-de-shu-zi/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://leetcode-cn.com/problems/single-number/solution/zhi-chu-xian-yi-ci-de-shu-zi-by-leetcode-solution/">每日算法题【只出现一次的数字】</a></p>
</blockquote>
<h2 id="只出现一次的数字"><a href="#只出现一次的数字" class="headerlink" title="只出现一次的数字"></a>只出现一次的数字</h2><pre><code>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
</code></pre>
<p>题解：</p>
<ul>
<li>使用集合存储数字。遍历数组中的每个数字，如果集合中没有该数字，则将该数字加入集合，如果集合中已经有该数字，则将该数字从集合中删除，最后剩下的数字就是只出现一次的数字。</li>
<li>使用哈希表存储每个数字和该数字出现的次数。遍历数组即可得到每个数字出现的次数，并更新哈希表，最后遍历哈希表，得到只出现一次的数字。</li>
<li>使用集合存储数组中出现的所有数字，并计算数组中的元素之和。由于集合保证元素无重复，因此计算集合中的所有元素之和的两倍，即为每个元素出现两次的情况下的元素之和。由于数组中只有一个元素出现一次，其余元素都出现两次，因此用集合中的元素之和的两倍减去数组中的元素之和，剩下的数就是数组中只出现一次的数字。</li>
<li>最优解：<strong>位运算</strong>,数组中所有数依次做异或运算，最后得到的数就是只出现一次的数。</li>
</ul>
<blockquote>
<ol>
<li>任何数和 <code>0</code> 做异或运算，结果仍然是原来的数  </li>
<li>任何数和其自身做异或运算，结果是 <code>0</code>  </li>
<li>异或运算满足交换律和结合律</li>
</ol>
</blockquote>
<pre><code>0^0 = 0
1^0 = 1
0^1 = 1
1^1 = 0
</code></pre>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>流式计算</title>
    <url>/liu-shi-ji-suan/</url>
    <content><![CDATA[<h1 id="什么是流式计算"><a href="#什么是流式计算" class="headerlink" title="什么是流式计算"></a>什么是流式计算</h1><p>流式计算一般被用来和批量计算做比较。批量计算往往有一个固定的数据集作为输入并计算结果。而流式计算的输入往往是“无界”的（Unbounded Data），持续输入的，即永远拿不到全量数据去做计算；同时，计算结果也是持续输出的，只能拿到某一个时刻的结果，而不是最终的结果。（批量计算是全量的：拿到一批数据，计算一个结果；流式计算是增量的：数据持续输入，持续计算最新的结果）</p>
<h1 id="流式计算框架"><a href="#流式计算框架" class="headerlink" title="流式计算框架"></a>流式计算框架</h1><table>
<thead>
<tr>
<th></th>
<th>Storm</th>
<th>Trident</th>
<th>Spark Streaming</th>
<th>Flink</th>
<th>Samza</th>
<th>Kafka streams</th>
</tr>
</thead>
<tbody><tr>
<td>数据流模型</td>
<td>原生</td>
<td>微批</td>
<td>微批</td>
<td>原生</td>
<td>原生</td>
<td>原生</td>
</tr>
<tr>
<td>状态存储</td>
<td>不支持状态管理</td>
<td>本地存储，外部数据库</td>
<td>多种状态存储方式</td>
<td>多种状态存储方式</td>
<td>本地存储，Kafka主题</td>
<td>本地存储，日志变更主题</td>
</tr>
<tr>
<td>时延</td>
<td>低</td>
<td>高</td>
<td>高</td>
<td>低</td>
<td>低</td>
<td>低</td>
</tr>
<tr>
<td>吞吐量</td>
<td>低</td>
<td>高</td>
<td>高</td>
<td>高</td>
<td>高</td>
<td>高</td>
</tr>
<tr>
<td>保障机制</td>
<td>at-least-once</td>
<td>exactly-once</td>
<td>exactly-once</td>
<td>exactly-once</td>
<td>at-least-once</td>
<td>exactly-once</td>
</tr>
<tr>
<td>容错机制</td>
<td>record ack</td>
<td>record ack</td>
<td>RDD based，checkpoint</td>
<td>checkpoint</td>
<td>Kafka log-base</td>
<td>Kafka log</td>
</tr>
<tr>
<td>成熟度</td>
<td>较多不足，但实际应用比较广泛</td>
<td>Storm基础上改进</td>
<td>流行的框架之一，Spark大环境</td>
<td>较新的流处理框架，性能非常优秀</td>
<td>基于Kafka作为数据源</td>
<td>完全基于Kafka集群实现</td>
</tr>
<tr>
<td>定位</td>
<td>框架</td>
<td>框架</td>
<td>框架</td>
<td>框架</td>
<td>框架</td>
<td>类库</td>
</tr>
</tbody></table>
<h1 id="Kafka-Streams"><a href="#Kafka-Streams" class="headerlink" title="Kafka Streams"></a>Kafka Streams</h1><blockquote>
<p>Kafka Streams is a client library for building applications and microservices, where the input and output data are stored in Kafka clusters. It combines the simplicity of writing and deploying standard Java and Scala applications on the client side with the benefits of Kafka’s server-side cluster technology.</p>
</blockquote>
<p>Kafka Streams是一个构建应用程序和微服务的<strong>客户端库</strong>，并且输入数据个输出数据均是保存在Kafka集群上的。Kafka Streams主要有如下特点：</p>
<ul>
<li>非常简单的客户端库，可以非常容易的嵌入到任何java应用程序与任何应用程序进行封装集成。</li>
<li>使用Kafka集群作为消息层，没有外部依赖。</li>
<li>支持本地状态存储。</li>
<li>提供了快速故障切换分布式处理和容错能力。</li>
<li>提供了非常方便的API。</li>
<li>支持<code>exactly-once</code>语义</li>
<li>支持纪录级的处理，实现毫秒级的延迟</li>
<li>提供High-Level的Stream DSL和Low-Level的Processor API</li>
</ul>
<p>采用<code>one-record-at-a-time</code>的消息处理方式，实现消息处理的低延迟。<br>但是Kafka Streams的设计目标是足够轻量，所以很难满足对大体量的复杂计算需求，并且数据的输入和输出均是依靠Kafka集群，对于其他的数据源需要借助Kafka connect将数据输入到Kafka主题中，然后在通过Kafka Streams程序进行处理，并通过Kafka connect将主题中的数据转存到其他数据源。</p>
<p>所以Kafka Streams更适合计算复杂度较小，数据流动过程是<code>Kafka-&gt;Kafka</code>的场景。</p>
<h1 id="Storm"><a href="#Storm" class="headerlink" title="Storm"></a>Storm</h1><p>在Storm中，需要先设计一个实时计算结构，我们称之为拓扑（topology）。之后，这个拓扑结构会被提交给集群，其中主节点（master node）负责给工作节点（worker node）分配代码，工作节点负责执行代码。在一个拓扑结构中，包含spout和bolt两种角色。数据在spouts之间传递，这些spouts将数据流以tuple元组的形式发送；而bolt则负责转换数据流。</p>
<ul>
<li>状态管理：无状态，需用户自行进行状态管理</li>
<li>窗口支持：对事件窗口支持较弱，缓存整个窗口的所有数据，窗口结束时一起计算</li>
<li>消息投递：At Most Once/At Least Once</li>
<li>容错方式：对每个消息进行全链路跟踪，失败或超时进行重发。</li>
</ul>
<h1 id="Spark-Streaming"><a href="#Spark-Streaming" class="headerlink" title="Spark Streaming"></a>Spark Streaming</h1><p>采用微批的方式，提高了吞吐性能。Spark streaming批量读取数据源中的数据，然后把每个batch转化成内部的RDD。Spark streaming以batch为单位进行计算，而不是以record为单位，大大减少了ack所需的开销，显著满足了高吞吐、低延迟的要求，同时也提供exactly once功能。但也因为处理数据的粒度变大，导致Spark streaming的数据延时不如Storm，Spark streaming是秒级返回结果（与设置的batch间隔有关），Storm则是毫秒级。</p>
<p>但是Spark Streaming的优点是可以与Spark大环境进行有效的结合。</p>
<h1 id="Flink"><a href="#Flink" class="headerlink" title="Flink"></a>Flink</h1><p>Flink 是一种可以处理批处理任务的流处理框架。Flink 流处理为先的方法可提供低延迟，高吞吐率，近乎逐项处理的能力，并且提供了复杂计算的能力。</p>
<p>Flink 完全支持流处理，也就是说作为流处理看待时，输入数据流是无界的；批处理被作为一种特殊的流处理，只是它的输入数据流被定义为有界的。这与 Spark streaming 不同，Spark streaming 是将流处理视为无限个有界的批处理（microbatch）。</p>
<ul>
<li>有状态计算的 Exactly-once 语义。状态是指 flink 能够维护数据在时序上的聚类和聚合，同时它的 checkpoint 机制可以方便快速的做出失败重试； </li>
<li>支持带有事件时间（event time）语义的流处理和窗口处理。事件时间的语义使流计算的结果更加精确，尤其在事件到达无序或者延迟的情况下； </li>
<li>支持高度灵活的窗口（window）操作。支持基于 time、count、session，以及 data-driven 的窗口操作，能很好的对现实环境中的创建的数据进行建模；</li>
<li>轻量的容错处理（fault tolerance）。它使得系统既能保持高的吞吐率又能保证 exactly-once 的一致性。通过轻量的 state snapshots 实现；</li>
<li>支持高吞吐、低延迟、高性能的流处理；</li>
<li>支持 savepoints 机制（一般手动触发），可以将应用的运行状态保存下来；在升级应用或者处理历史数据上，能够做到无状态丢失和最小停机时间；</li>
<li>支持大规模的集群模式，支持 yarn、Mesos。可运行在成千上万的节点上；</li>
<li>支持具有 Backpressure 功能的持续流模型； </li>
<li>Flink 在 JVM 内部实现了自己的内存管理，包括完善的内存架构和 OOM error prevention；</li>
<li>支持迭代计算；</li>
<li>支持程序自动优化：避免特定情况下 Shuffle、排序等昂贵操作，中间结果进行缓存。</li>
</ul>
<h1 id="说明一"><a href="#说明一" class="headerlink" title="说明一"></a>说明一</h1><p>通常来说，对于单独的消息系统而言，语义分为如下三种：</p>
<p><strong>至多一次（At most once）</strong>：不管 Writer 在等待 ACK 时是否发生超时或者得到错误异常，Writer 都不会重新发送 Event，因此会有数据丢失的风险。在具体的实现过程中，这一种语义无需做任何额外的控制，实现起来最为简单，因此也通常有着最优的性能。在某些特定的场景中，我们只希望追求极致的性能而不关心数据的丢失，可能会选用此方案。</p>
<p><strong>至少一次（At least once）</strong>：如果 Writer 在等待 ACK 时发生超时或者得到错误异常，Writer 将会重新发送消息，这样能保证每个 Event 至少被处理一次，保证了数据不会丢失，从而提高了系统的可靠性，但同时会带来数据重复的问题，例如，当 Writer 往 Stream 中成功写入一个 Event，但是当系统尝试给 Writer 返回 ACK 的时候出现网络异常，Writer 因没有收到 ACK 而判断为写入 Event 失败，因此 Writer 还是会重新发送此 Event，导致数据重复。</p>
<p><strong>仅一次（Exactly once）</strong>：在系统发生异常时，Writer 可以尝试多次重新发送 Event，同时能保证最终每个 Event 只被写入一次。一些对数据准确性要求非常高的系统需要保证 exactly-once 语义，譬如支付系统，当用户在移动端付款时，很有可能会因为网络原因导致延时较长甚至超时，用户可能会手动进行刷新操作，如果没有 exactly-once 的语义支持，很有可能会发生两次扣费，我们绝对不希望此类错误发生。</p>
<h1 id="说明二"><a href="#说明二" class="headerlink" title="说明二"></a>说明二</h1><p><a href="https://tech.meituan.com/2017/11/17/flink-benchmark.html">美团flink测试</a></p>
<p><strong>测试结论</strong></p>
<p>推荐使用 Flink 的场景</p>
<ul>
<li>实时计算场景建议考虑使用 Flink 框架进行计算：</li>
<li>要求消息投递语义为 Exactly Once 的场景；</li>
<li>数据量较大，要求高吞吐低延迟的场景； </li>
<li>需要进行状态管理或窗口统计的场景。</li>
</ul>
<h1 id="说明三-语言支持"><a href="#说明三-语言支持" class="headerlink" title="说明三 - 语言支持"></a>说明三 - 语言支持</h1><p>Spark和flink都是JVM语言开发，在API层对java和Scala语言支持较好，python语言API支持，但是效率不高，其它语言几乎不支持。</p>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>流式计算</tag>
      </tags>
  </entry>
  <entry>
    <title>测试文章加密，密码123456</title>
    <url>/ce-shi-wen-zhang-jia-mi/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="2f61712405010cd05c3c8de010d68a728afba76a60858c296303d0176f7ad2c2">4630436162ade97ba2718b7d0c4b3b63501b8b0e90dd70c68cacef77fafaa69c317ae65cbb0b5d7c9b5d3c87dcec57c7f5aefaefbda04e49c2c17e1c351f9eeb29fc63dbf68f61398ecf6663440b215f1c7b9c9448009c16765ee8a682efb80bcb44ea583523416e9bb48c01e361371411b3ec351333e68ee260a97b02b9a2b68573b5971f93a2ebd375c01f5674f44b5757296c97c6d267a4768c958adc8eab2fff357ca339d2c3e013a2d87709b202ddbfeba2726418e93868fd556da944602bb158358add5c050d8b14674df5cbcaa3d40481dbbe278d45c67a2ed98a6017da476346be48497e034aef1e14d2cfad0f2a82869ee532c17426fdf9e47b92ef48b2efd6085127c8937e2567bfadcc885171856b1c6e3ab8805c127aa012d08570ff023ca948bd6cbca7ccd9dcde9549fc381b15113bebdff4665779b307c371846ca2e970fa35ef89ad9d64fc03050c0720874f01c97918946b65e14340a3815bb19fa8df7d8a7c5d966754697410d2e6b57822e3b0eca3ef71765afc8f32a91e108ab6ed92c419b7ef3acde6e27f84a8aaf08d6f7be637f7046b1748339e4c555c8ab9d87181992a24b39bcec63ef03524c0776b4811f02423b1dcf1da477d2c70c8768bf6c0eaceacd4859b3b8b2ff1c28b62abf4f74c40d4a51da7c915a917e25ba5f9bfffa0bdc2785cf48abaf95af48d59fcef3b6c2b994b35207475e0bb7824653f093ee264099bd79698450369ab81c7f03ebc3c35ebb13d60e34cfc6077bbba10e0befa50bf0a876c1b05f145d1b54fc70f59c0569b406fa1aeabb559a00bac2bd0da9b560486d2c4070d54de094324f1f20cbcc02659456dde75857548094a60eac4d06bdd399ea081655575cd66de08e2f41908d10557e0b7830e70822375c57475f1041828a766fdbcf7efed07ff88050ae4dd96236a7aae3d30dea3be729a577308b60038c22c140dfa03f423be41743881863ffad991c3470303c62136cb27d6f0dd890037eacba1e43e8e61db8a8c9350c08824c0545122ba176d61ea020a96e90dc84e4f1c69b54717aaa951513a23f8dc068248bb157a6c548f91ab7707a9d2e63b768571a3f73df70c8db672ee47bb07ec703a78775170e504f05d58c0c13173689384936b51ca1f589b20658b981eb09329d6590acb678fe2d31be9cf57ec302382803fed13a9a771cfa445366629f4e8393961c390d94b623c023ae62301d5d0e6093e10889b1869c0f4bc2cde387bf53e3f984380a0f62aa5afc2eed89813d69dabf4a973b189e4661521279d29da9ab30cde96befdd6aa24bcde82f8e4c3c39645ad30a19985f7b3810f062ad81856e02764a6e52e7ff43627be2b3485faea1e46822d56fab5d41c26fd1549e9ab6f3c8c5997ab7614099b90bbf3ef6e925af65dd0adb5239f3d037a8b3ffad9b02a0718d6a2985191d53daad68d8d2c77a1a15d8b8c045588119b6b0e18ed8088b1e1b9a64a022725d610a82e8069267a12be74c53f15bf64d63d8109f4cfef8f11fac190949ea6d577451723586410dc1f3982850fcf146124eea1b91e54d279ae828aeda56677ebffae77209d5ca5bb27188fec7efd33850c857a072dbb02d380e10132555b8fae1960e8850a05f3b8edcf14a421b09c62679f2bf004ac87d7dab929829ca04d309eed42f8dcbff888f66fb459847d1180eba68dc3dc0e5b1b045c14ecd9e61413a2f7beaf86d8cccffcc3a39f580988e5a7b026a51fc303eafd9fda9616611b8e1c01676a87949bd7e2de629c6733e831f40f49aebfe6a070691149ee85f932ed6ebb59bff933c265d211472917fe776477e1f5bf8926d8c3220ad4955594ad4a6d49598955368de461eea19f9719d2a1950783a28495bdc64e24842ea41e7b1c5f7b561703d0d37a09fb9791a0c268d6d1c126b21a60eef488e3c90dd6669fdcee914f65cc957f5e565a1a9b440d1812344a86d54fa6a79de3b4e57880cf975cff630cfee74f1e6e1a94f06fd1490aceb128c10770de293e7ac04b33a6a6953b8e329f5937ff0afb970cd9df74ce09eea283f95038e45c4dbcfb834dd1580489cad7187285a928370757d4115503862a0728ce80e7fd55b8d3a3056ef3f7b136f63a325ac5981ec9e5063e55b0316025c90d227d24f7c4e1dadc2e50595552b3244bf79185e37be21fbc4c17affa4d1974993012b7ab13f1c3ad308b1277ffa404dd145deaf4ccba098db5116f5be309bf2d15277b4adf078fe9c30b13f7116f97f92f0a18c0822b9e8514dead10bb</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>SHA256</tag>
        <tag>hexo-blog-encrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>电力系统基础知识</title>
    <url>/dian-li-xi-tong-ji-chu-zhi-shi/</url>
    <content><![CDATA[<h3 id="术语解释"><a href="#术语解释" class="headerlink" title="术语解释"></a>术语解释</h3><table>
<thead>
<tr>
<th>术语</th>
<th>英文</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>AC</td>
<td>Alternating Current</td>
<td>交流电压</td>
</tr>
<tr>
<td>DC</td>
<td>Direct Current</td>
<td>直流电压</td>
</tr>
<tr>
<td>整流器</td>
<td>Rectifier</td>
<td>将交流电转变成直流电的电子设备</td>
</tr>
<tr>
<td>逆变器</td>
<td>inverter</td>
<td>把直流电能（电池、蓄电瓶）转变成交流电（一般为220V,50Hz正弦波）</td>
</tr>
<tr>
<td>继电器</td>
<td>Relay</td>
<td>通常应用于自动控制电路中，用较小的电流去控制较大电流的一种“自动开关”。在电路中起着自动调节、安全保护、转换电路等作用</td>
</tr>
<tr>
<td>变压器</td>
<td>transformer</td>
<td>变换（升高或降低）交流电压，但不改变电源频率的电能转换器</td>
</tr>
<tr>
<td>台区</td>
<td>-</td>
<td>指（一台）变压器的供电范围或区域</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>离线环境安装docker和docker-compose</title>
    <url>/chi-xian-huan-jing-an-zhuang-docker-he-docker-compose/</url>
    <content><![CDATA[<h3 id="下载软件包"><a href="#下载软件包" class="headerlink" title="下载软件包"></a>下载软件包</h3><ul>
<li><a href="https://download.docker.com/linux/static/stable/x86_64/">docker软件包下载地址</a></li>
<li><a href="https://github.com/docker/compose/releases">docker-compose软件包下载地址</a><blockquote>
<p>本次安装下载的软件包版本:</p>
<ul>
<li><code>docker-19.03.9.tgz</code></li>
<li><code>docker-compose 1.24.1</code></li>
</ul>
</blockquote>
</li>
</ul>
<h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><blockquote>
<p>本次安装使用<code>centos7.5</code>操作系统.</p>
</blockquote>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 关闭防火墙</span>
systemctl stop firewalld
systemctl disable firewalld
<span class="token comment" spellcheck="true"># 查看防火墙状态</span>
systemctl status firewalld

<span class="token comment" spellcheck="true"># 关闭selinux</span>
setenforce 0
vim /etc/selinux/config
<span class="token comment" spellcheck="true"># 查看selinux状态</span>
/usr/sbin/sestatus -v
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><ul>
<li>准备<code>docker.service</code>，<code>docker</code>服务化配置文件</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>
Description<span class="token operator">=</span>Docker Application Container Engine
Documentation<span class="token operator">=</span>https://docs.docker.com
After<span class="token operator">=</span>network-online.target firewalld.service
Wants<span class="token operator">=</span>network-online.target

<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>
Type<span class="token operator">=</span>notify
<span class="token comment" spellcheck="true"># the default is not to use systemd for cgroups because the delegate issues still</span>
<span class="token comment" spellcheck="true"># exists and systemd currently does not support the cgroup feature set required</span>
<span class="token comment" spellcheck="true"># for containers run by docker</span>
ExecStart<span class="token operator">=</span>/usr/bin/dockerd
ExecReload<span class="token operator">=</span>/bin/kill -s HUP <span class="token variable">$MAINPID</span>
<span class="token comment" spellcheck="true"># Having non-zero Limit*s causes performance problems due to accounting overhead</span>
<span class="token comment" spellcheck="true"># in the kernel. We recommend using cgroups to do container-local accounting.</span>
LimitNOFILE<span class="token operator">=</span>infinity
LimitNPROC<span class="token operator">=</span>infinity
LimitCORE<span class="token operator">=</span>infinity
<span class="token comment" spellcheck="true"># Uncomment TasksMax if your systemd version supports it.</span>
<span class="token comment" spellcheck="true"># Only systemd 226 and above support this version.</span>
<span class="token comment" spellcheck="true">#TasksMax=infinity</span>
TimeoutStartSec<span class="token operator">=</span>0
<span class="token comment" spellcheck="true"># set delegate yes so that systemd does not reset the cgroups of docker containers</span>
Delegate<span class="token operator">=</span>yes
<span class="token comment" spellcheck="true"># kill only the docker process, not all processes in the cgroup</span>
KillMode<span class="token operator">=</span>process
<span class="token comment" spellcheck="true"># restart the docker process if it exits prematurely</span>
Restart<span class="token operator">=</span>on-failure
StartLimitBurst<span class="token operator">=</span>3
StartLimitInterval<span class="token operator">=</span>60s

<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>
WantedBy<span class="token operator">=</span>multi-user.target
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>依次执行命令安装</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 解压tar包</span>
<span class="token function">tar</span> -xvf docker-19.03.9.tgz
<span class="token comment" spellcheck="true"># 将docker目录移到/usr/bin目录下</span>
<span class="token function">cp</span> docker/* /usr/bin/
<span class="token comment" spellcheck="true"># 将docker.service 移到/etc/systemd/system/ 目录</span>
<span class="token function">cp</span> docker.service /etc/systemd/system/
<span class="token comment" spellcheck="true"># 添加文件权限</span>
<span class="token function">chmod</span> +x /etc/systemd/system/docker.service
<span class="token comment" spellcheck="true"># 重新加载配置文件</span>
systemctl daemon-reload
<span class="token comment" spellcheck="true"># 启动docker</span>
systemctl start docker
<span class="token comment" spellcheck="true"># 设置开机自启</span>
systemctl <span class="token function">enable</span> docker.service
<span class="token comment" spellcheck="true"># 验证docker安装是否成功</span>
docker -v
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 添加文件权限</span>
<span class="token function">chmod</span> +x /xxx/docker-compose
<span class="token comment" spellcheck="true"># 创建软链接</span>
<span class="token function">ln</span> -s /xxx/docker-compose /usr/bin/docker-compose
<span class="token comment" spellcheck="true"># 验证安装是否成功</span>
docker-compose --version
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="配置普通用户可以使用docker命令"><a href="#配置普通用户可以使用docker命令" class="headerlink" title="配置普通用户可以使用docker命令"></a>配置普通用户可以使用docker命令</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建用户组,默认安装docker可能已经创建了</span>
<span class="token function">sudo</span> <span class="token function">groupadd</span> docker
<span class="token comment" spellcheck="true"># 示例</span>
<span class="token function">sudo</span> <span class="token function">usermod</span> -aG docker testuser
<span class="token comment" spellcheck="true"># 重新服务再登录即可使用docker命令</span>
<span class="token function">sudo</span> systemctl restart docker
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker-compose</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>私有镜像仓库Harbor-v1.5.0搭建与使用</title>
    <url>/si-you-jing-xiang-cang-ku-harbor-v1-5-0-da-jian-yu-shi-yong/</url>
    <content><![CDATA[<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ol>
<li>安装<code>docker-ce</code>（过程省略）</li>
<li>安装<code>docker-compose</code>（过程省略）</li>
<li>安装<code>harbor</code></li>
</ol>
<h3 id="下载Harbor离线安装包"><a href="#下载Harbor离线安装包" class="headerlink" title="下载Harbor离线安装包"></a>下载Harbor离线安装包</h3><ol>
<li>下载地址：<code>http://harbor.orientsoft.cn/</code>，找个最新的，本文使用<code>v1.5.0</code>版本</li>
<li>使用 <code>tar xvf harbor-offline-installer-v1.5.0.tgz</code></li>
<li>进入到解压后的目录，<code>harbor/</code></li>
</ol>
<h3 id="配置harbor-cfg【关键配置】"><a href="#配置harbor-cfg【关键配置】" class="headerlink" title="配置harbor.cfg【关键配置】"></a>配置<code>harbor.cfg</code><font color="red">【关键配置】</font></h3><pre><code>#hostname设置访问地址，可以使用ip、域名，不可以设置为127.0.0.1或localhost
hostname = harbor.deri.com
 
# 访问协议，默认是http，也可以设置https，如果设置https，则nginx ssl需要设置on
ui_url_protocol = http
 
#配置admin用户的密码，默认Harbor12345
harbor_admin_password = Harbor12345
 
#是否只允许admin用户创建项目，everyone是所有人都可以
project_creation_restriction = adminonly
 
# 是否开启自注册
self_registration = on
 
# Token有效时间，默认30分钟
token_expiration = 30
</code></pre>
<h3 id="配置docker-compose-yml"><a href="#配置docker-compose-yml" class="headerlink" title="配置docker-compose.yml"></a>配置<code>docker-compose.yml</code></h3><p>如果需要修改访问端口，默认<code>80</code>，<code>443</code>，也可以不修改.</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">##此处粘贴部分配置  </span>
  <span class="token key atrule">proxy</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> vmware/nginx<span class="token punctuation">-</span>photon<span class="token punctuation">:</span>v1.5.0
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nginx
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ./common/config/nginx<span class="token punctuation">:</span>/etc/nginx<span class="token punctuation">:</span>z
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> harbor
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token datetime number">80:80</span>
      <span class="token punctuation">-</span> 443<span class="token punctuation">:</span><span class="token number">443</span>
      <span class="token punctuation">-</span> 4443<span class="token punctuation">:</span><span class="token number">4443</span>
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> mysql
      <span class="token punctuation">-</span> registry
      <span class="token punctuation">-</span> ui
      <span class="token punctuation">-</span> log
    <span class="token key atrule">logging</span><span class="token punctuation">:</span>
      <span class="token key atrule">driver</span><span class="token punctuation">:</span> <span class="token string">"syslog"</span>
      <span class="token key atrule">options</span><span class="token punctuation">:</span>  
        <span class="token key atrule">syslog-address</span><span class="token punctuation">:</span> <span class="token string">"tcp://127.0.0.1:1514"</span>
        <span class="token key atrule">tag</span><span class="token punctuation">:</span> <span class="token string">"proxy"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="启动harbor"><a href="#启动harbor" class="headerlink" title="启动harbor"></a>启动<code>harbor</code></h3><p>到<code>harbor/</code>目录下，执行<code>./install.sh</code>，<code>harbor</code>会根据当前目录下<code>docker-compose.yml</code>配置，下载相关镜像，并启动。</p>
<h3 id="配置本地hosts文件"><a href="#配置本地hosts文件" class="headerlink" title="配置本地hosts文件"></a>配置本地<code>hosts</code>文件</h3><p>配置<code>hosts</code>文件，增加部署机器的 <code>IP</code> 和 域名【域名是<code>harbor.cfg</code>中的<code>hostname</code>】</p>
<pre><code>Windows: C:\Windows\System32\drivers\etc\hosts 
Linux: /etc/hosts
</code></pre>
<h3 id="访问Harbor"><a href="#访问Harbor" class="headerlink" title="访问Harbor"></a>访问<code>Harbor</code></h3><p>浏览器输入<code>hostname</code>，用户名密码：<code>admin/Harbor12345</code></p>
<p><img data-src="/images/harbor1.jpg" alt="Harbor首页"></p>
<h3 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h3><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><p><em>注意选择访问级别</em><br><img data-src="/images/harbor2.jpg" alt="Harbor创建项目"></p>
<h4 id="使用docker-login登录到私有仓库"><a href="#使用docker-login登录到私有仓库" class="headerlink" title="使用docker login登录到私有仓库"></a>使用<code>docker login</code>登录到私有仓库</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@node4 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker login harbor.deri.com</span>
Username: admin
Password: 
WARNING<span class="token operator">!</span> Your password will be stored unencrypted <span class="token keyword">in</span> /root/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/<span class="token comment" spellcheck="true">#credentials-store</span>
 
Login Succeeded
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<hr>
<p><font color="red"><strong>这里有个问题</strong></font></p>
<p>执行上面的一步肯定会报错：<code>Error response from daemon: Get https://harbor.deri.com/v2/users/: dial tcp 192.168.41.139:443: getsockopt: connection refused</code>，原因是<code>docker</code>认为这个仓库不可信，需要在<code>/etc/docker/daemon.json</code>（<font color="red">不存在就新建</font>）增加<code>insecure-registries</code>配置，注意是标准的json格式！</p>
<pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"insecure-registries"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"harbor.deri.com"</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>然后重启docker服务</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl daemon-reload
<span class="token function">sudo</span> systemctl restart docker
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>重启harbor服务</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#到harbor/目录下执行</span>
docker-compose down -v
docker-compose up -d
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<hr>
<h4 id="本地随便找个镜像"><a href="#本地随便找个镜像" class="headerlink" title="本地随便找个镜像"></a>本地随便找个镜像</h4><p>修改其<code>tag</code>，如</p>
<pre class="line-numbers language-bash"><code class="language-bash">docker tag hub.c.163.com/library/mysql:5.7 harbor.deri.com/deri/mysql:5.7
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><font color="red"><strong>注意<code>tag</code>格式：<code>域名</code>/<code>项目名</code>/<code>镜像名</code>:<code>版本</code></strong></font></p>
<h4 id="上传镜像-1"><a href="#上传镜像-1" class="headerlink" title="上传镜像"></a>上传镜像</h4><pre class="line-numbers language-bash"><code class="language-bash">docker push harbor.deri.com/deri/mysql:5.7
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="登录UI查看"><a href="#登录UI查看" class="headerlink" title="登录UI查看"></a>登录<code>UI</code>查看</h4><p><img data-src="/images/harbor3.jpg" alt="harbor镜像仓库"></p>
<h4 id="从私有镜像仓库拉取镜像"><a href="#从私有镜像仓库拉取镜像" class="headerlink" title="从私有镜像仓库拉取镜像"></a>从私有镜像仓库拉取镜像</h4><pre class="line-numbers language-bash"><code class="language-bash">docker pull harbor.deri.com/deri/mysql:5.7
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h4><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">logout</span> harbor.deri.com
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>使用结束！接下来创建项目、用户了。</p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>harbor</tag>
      </tags>
  </entry>
  <entry>
    <title>通过ftp上传文件到centos中文文件名乱码问题</title>
    <url>/tong-guo-ftp-shang-chuan-wen-jian-dao-centos-zhong-wen-wen-jian-ming-luan-ma-wen-ti/</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在windows上使用ftp上传文件到Linux上，中文名称在Linux系统中显示为乱码。</p>
<p>原因在于，Windows 的文件名中文编码默认为GBK，压缩或者上传后，文件名还会是GBK编码，而Linux中默认文件名编码为UTF8，由于编码不一致所以导致了文件名乱码的问题，解决这个问题需要对文件名进行转码。</p>
<h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 安装</span>
yum <span class="token function">install</span> convmv 
<span class="token comment" spellcheck="true"># 转换</span>
convmv -f gbk -t utf-8 -r --notest /home/test
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>钉钉群机器人开发</title>
    <url>/ding-ding-qun-ji-qi-ren-kai-fa/</url>
    <content><![CDATA[<h3 id="钉钉群机器人定义"><a href="#钉钉群机器人定义" class="headerlink" title="钉钉群机器人定义"></a>钉钉群机器人定义</h3><p>群机器人是钉钉群的高级扩展功能。群机器人可以将第三方服务的信息聚合到群聊中，实现自动化的信息同步。目前，大部分机器人在添加后，还需要进行Webhook配置，才可正常使用(配置说明详见操作流程中的帮助链接)。</p>
<p>例如：</p>
<ul>
<li>通过聚合GitHub，GitLab等源码管理服务，实现源码更新同步。</li>
<li>通过聚合Trello，JIRA等项目协调服务，实现项目信息同步。</li>
<li>另外，群机器人支持Webhook协议的自定义接入，支持更多可能性，例如：你可将运维报警通过自定义机器人聚合到钉钉群实现提醒功能。</li>
</ul>
<h3 id="机器人发送消息频率限制"><a href="#机器人发送消息频率限制" class="headerlink" title="机器人发送消息频率限制"></a>机器人发送消息频率限制</h3><p>消息发送太频繁会严重影响群成员的使用体验，大量发消息的场景（譬如系统监控报警）可以将这些信息进行整合，通过<code>markdown</code>消息以摘要的形式发送到群里。</p>
<p>每个机器人每分钟最多发送<code>20</code>条。如果超过20条，会限流<code>10分钟</code>。</p>
<h3 id="添加群机器人"><a href="#添加群机器人" class="headerlink" title="添加群机器人"></a>添加群机器人</h3><p>参考官网：<code>https://ding-doc.dingtalk.com/doc#/serverapi3/iydd5h</code></p>
<h3 id="下载SDK简化开发"><a href="#下载SDK简化开发" class="headerlink" title="下载SDK简化开发"></a>下载SDK简化开发</h3><p>下载链接：<code>https://ding-doc.dingtalk.com/doc#/faquestions/vzbp02</code></p>
<h3 id="将SDK安装到本地maven仓库"><a href="#将SDK安装到本地maven仓库" class="headerlink" title="将SDK安装到本地maven仓库"></a>将SDK安装到本地maven仓库</h3><pre><code>mvn install:install-file -Dfile=D:/taobao-sdk-java-auto-20191203.jar -DgroupId=com.taobao -DartifactId=taobao-sdk-java-auto-20191203 -Dversion=1.0.0 -Dpackaging=jar
</code></pre>
<h3 id="项目中引用"><a href="#项目中引用" class="headerlink" title="项目中引用"></a>项目中引用</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.taobao<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>taobao-sdk-java-auto-20191203<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="开发样例"><a href="#开发样例" class="headerlink" title="开发样例"></a>开发样例</h3><pre class="line-numbers language-java"><code class="language-java">DingTalkClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultDingTalkClient</span><span class="token punctuation">(</span><span class="token string">"https://oapi.dingtalk.com/robot/send?access_token=566cc69da782ec33e42541b09b08551f09fbe864eb8008112e994b43887"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
OapiRobotSendRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OapiRobotSendRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//文本类型</span>
request<span class="token punctuation">.</span><span class="token function">setMsgtype</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
OapiRobotSendRequest<span class="token punctuation">.</span>Text text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OapiRobotSendRequest<span class="token punctuation">.</span>Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
text<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">"测试文本消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
request<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
OapiRobotSendRequest<span class="token punctuation">.</span>At at <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OapiRobotSendRequest<span class="token punctuation">.</span>At</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
at<span class="token punctuation">.</span><span class="token function">setAtMobiles</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"132xxxxxxxx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
request<span class="token punctuation">.</span><span class="token function">setAt</span><span class="token punctuation">(</span>at<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment" spellcheck="true">//link类型</span>
request<span class="token punctuation">.</span><span class="token function">setMsgtype</span><span class="token punctuation">(</span><span class="token string">"link"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
OapiRobotSendRequest<span class="token punctuation">.</span>Link link <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OapiRobotSendRequest<span class="token punctuation">.</span>Link</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
link<span class="token punctuation">.</span><span class="token function">setMessageUrl</span><span class="token punctuation">(</span><span class="token string">"https://www.dingtalk.com/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
link<span class="token punctuation">.</span><span class="token function">setPicUrl</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
link<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"时代的火车向前开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
link<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"这个即将发布的新版本，创始人xx称它为“红树林”。\n"</span> <span class="token operator">+</span>
        <span class="token string">"而在此之前，每当面临重大升级，产品经理们都会取一个应景的代号，这一次，为什么是“红树林"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
request<span class="token punctuation">.</span><span class="token function">setLink</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment" spellcheck="true">//markdown类型</span>
request<span class="token punctuation">.</span><span class="token function">setMsgtype</span><span class="token punctuation">(</span><span class="token string">"markdown"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
OapiRobotSendRequest<span class="token punctuation">.</span>Markdown markdown <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OapiRobotSendRequest<span class="token punctuation">.</span>Markdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
markdown<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"杭州天气"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
markdown<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"#### 杭州天气 @156xxxx8827\n"</span> <span class="token operator">+</span>
        <span class="token string">"> 9度，西北风1级，空气良89，相对温度73%\n\n"</span> <span class="token operator">+</span>
        <span class="token string">"> ![screenshot](https://gw.alicdn.com/tfs/TB1ut3xxbsrBKNjSZFpXXcXhFXa-846-786.png)\n"</span>  <span class="token operator">+</span>
        <span class="token string">"> ###### 10点20分发布 [天气](http://www.thinkpage.cn/) \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
request<span class="token punctuation">.</span><span class="token function">setMarkdown</span><span class="token punctuation">(</span>markdown<span class="token punctuation">)</span><span class="token punctuation">;</span>
OapiRobotSendResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>常用的三种类型如上所示，具体参考<a href="https://ding-doc.dingtalk.com/doc#/serverapi3/iydd5h">官网类型</a>。</p>
<h3 id="应答机制"><a href="#应答机制" class="headerlink" title="应答机制"></a>应答机制</h3><p>自定义机器人尚不支持应答机制 (该机制指的是群里成员在聊天@机器人的时候，钉钉回调指定的服务地址，即Outgoing机器人)。</p>
<h3 id="错误码"><a href="#错误码" class="headerlink" title="错误码"></a>错误码</h3><p>开发者每次调用接口时，可能获得正确或错误的返回码，企业可以根据返回码信息调试接口，排查错误。</p>
<blockquote>
<p>注意：开发者的程序应该根据errcode来判断出错的情况，而不应该依赖errmsg来匹配，因为errmsg可能会调整。</p>
</blockquote>
<p>参考官网：<a href="https://ding-doc.dingtalk.com/doc#/faquestions/rftpfg">错误码</a></p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>钉钉</tag>
      </tags>
  </entry>
  <entry>
    <title>非root用户使用docker命令配置</title>
    <url>/fei-root-yong-hu-shi-yong-docker-ming-ling-pei-zhi/</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>docker安装完成后，默认只能root用户才能使用docker命令.</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建用户组,默认安装docker可能已经创建了</span>
<span class="token function">groupadd</span> docker

<span class="token comment" spellcheck="true"># 将当前用户加入到docker组</span>
<span class="token function">usermod</span> -aG docker <span class="token variable">$USER</span>
<span class="token comment" spellcheck="true"># 示例</span>
<span class="token function">usermod</span> -aG docker hadoop

<span class="token comment" spellcheck="true"># 重新登录即可使用docker命令</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>更新hexo版本</title>
    <url>/geng-xin-hexo/</url>
    <content><![CDATA[<ul>
<li><a href="https://novnan.github.io/Hexo/update_hexo/">Hexo版本升级指南</a></li>
</ul>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>kubernetes更新证书</title>
    <url>/kubernetes-geng-xin-zheng-shu/</url>
    <content><![CDATA[<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看证书过期时间</span>
kubeadm alpha certs check-expiration
<span class="token comment" spellcheck="true"># 更新证书</span>
kubeadm alpha certs renew all
<span class="token comment" spellcheck="true"># 证书如果没有生效,重启相关服务生效</span>
docker <span class="token function">ps</span> <span class="token operator">|</span> <span class="token function">grep</span> -E <span class="token string">'k8s_kube-apiserver|k8s_kube-controller-manager|k8s_kube-scheduler|k8s_etcd_etcd'</span> <span class="token operator">|</span> <span class="token function">awk</span> -F <span class="token string">' '</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span> <span class="token operator">|</span> <span class="token function">xargs</span> docker restart
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>springboot证书单向/双向认证</title>
    <url>/springboot-zheng-shu-ren-zheng/</url>
    <content><![CDATA[<h3 id="springboot单向认证和双向认证"><a href="#springboot单向认证和双向认证" class="headerlink" title="springboot单向认证和双向认证"></a>springboot单向认证和双向认证</h3><ul>
<li>单向认证<br>服务端开启 SSL 证书,通过 springboot 或者 nginx 都可以实现, 开启单向认证后访问服务端接口需要使用 https 协议即可。</li>
</ul>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8443</span>
  <span class="token key atrule">ssl</span><span class="token punctuation">:</span>
    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token comment" spellcheck="true">#服务端证书路径, classpath:local-dev.p12</span>
    <span class="token key atrule">key-store</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>server.jks
    <span class="token comment" spellcheck="true">#证书密码</span>
    <span class="token key atrule">key-store-passwd</span><span class="token punctuation">:</span> <span class="token number">123456</span>
    <span class="token comment" spellcheck="true">#证书类型</span>
    <span class="token key atrule">key-store-type</span><span class="token punctuation">:</span> JKS
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>双向认证<br>springboot 服务端除了开启 SSL 证书,还要开启客户端证书认证 <code>client-auth: need</code>, 需要将客户端证书导入到服务端<code>信任库</code>中, 否则访问报错, 提示<code>无法建立连接, 不接受您的登录证书, 或者您可能没有提供登录证书</code> 等报错信息.</li>
</ul>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8443</span>
  <span class="token key atrule">ssl</span><span class="token punctuation">:</span>
    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token comment" spellcheck="true">#服务端证书路径, classpath:local-dev.p12</span>
    <span class="token key atrule">key-store</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>server.jks
    <span class="token comment" spellcheck="true">#证书密码</span>
    <span class="token key atrule">key-store-passwd</span><span class="token punctuation">:</span> <span class="token number">123456</span>
    <span class="token comment" spellcheck="true">#证书类型</span>
    <span class="token key atrule">key-store-type</span><span class="token punctuation">:</span> JKS
    <span class="token comment" spellcheck="true">#是否需要进行认证,可选: need/want/none</span>
    <span class="token key atrule">client-auth</span><span class="token punctuation">:</span> need
    <span class="token comment" spellcheck="true">#可信任的客户端证书, classpath:local-dev.p12</span>
    <span class="token key atrule">trust-store</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>server.jks
    <span class="token comment" spellcheck="true">#密码，即步骤一中输入的密码</span>
    <span class="token key atrule">trust-store-password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
    <span class="token key atrule">trust-store-type</span><span class="token punctuation">:</span> JKS
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="使用-keytool-创建证书"><a href="#使用-keytool-创建证书" class="headerlink" title="使用 keytool 创建证书"></a>使用 keytool 创建证书</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建 test_server, 如果是单向认证创建完 test_server.jks 并配置正确即可.</span>
keytool -genkeypair -alias test_server -keypass 123456 -storepass 123456  -dname <span class="token string">"C=CN,ST=JS,L=NJ,O=test,OU=dev,CN=test.server.cn"</span> -keyalg RSA -keysize 20
48 -validity 3650 -keystore test_server.jks

<span class="token comment" spellcheck="true"># 双向认证还需要进行以下步骤</span>
<span class="token comment" spellcheck="true"># 使用 keytool 创建 test_client 证书库</span>
keytool -genkeypair -alias test_client -keypass 123456 -storepass 123456  -dname <span class="token string">"C=CN,ST=JS,L=NJ,O=test,OU=dev,CN=test.client.cn"</span> -keyalg RSA -keysize 20
48 -validity 3650 -keystore test_client.jks
<span class="token comment" spellcheck="true"># 从证书库中导出客户端证书, 注意：加上 -rfc 选项输出PEM编码格式的证书, 否则导入服务端信任库会报错.</span>
keytool -exportcert -keystore test_client.jks -rfc -file test_client.cer -alias test_client -storepass 123456
<span class="token comment" spellcheck="true"># 将客户端证书导入到服务端信任库</span>
keytool -importcert -keystore test_server.jks -file test_client.cer -alias test_client -storepass 123456 -noprompt
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>在信任库中, 导入后的证书为 <code>trustedCertEntry</code> 实体类型，而私钥证书为 <code>PrivateKeyEntry</code>.   </p>
</blockquote>
<blockquote>
<p>上述操作完成后, 就可以通过客户端证书调用服务端接口，但是想要服务端调用客户端，需要按照上述步骤将服务端证书导入到客户端信任库.</p>
</blockquote>
<ul>
<li>keytool 查看<code>证书库</code>详情</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash">keytool -list -keystore test_server.jks -storepass 123456
<span class="token comment" spellcheck="true"># 加 -v 查看详情</span>
keytool -list -v -keystore test_server.jks -storepass 123456
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>keytool 查看<code>证书</code>详情</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash">keytool -printcert -file test_client.cer
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="openssl-创建自签名证书"><a href="#openssl-创建自签名证书" class="headerlink" title="openssl 创建自签名证书"></a>openssl 创建自签名证书</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建私钥（.key）</span>
openssl genrsa -out my.key 2048
<span class="token comment" spellcheck="true"># 基于私钥（.key）创建证书签名请求（.csr）</span>
openssl req -new -key my.key -out my.csr -subj <span class="token string">"/C=CN/ST=shanghai/L=shanghai/O=example/OU=it/CN=domain1/CN=domain2"</span>
<span class="token comment" spellcheck="true"># （可选）直接同时生成私钥（.key）和证书签名请求（.csr）</span>
openssl req -new -newkey rsa:2048 -nodes -keyout my.key -out my.csr -subj <span class="token string">"/C=CN/ST=shanghai/L=shanghai/O=example/OU=it/CN=domain1/CN=domain2"</span>
<span class="token comment" spellcheck="true"># 使用自己的私钥（.key）签署自己的证书签名请求（.csr），生成自签名证书（.crt）</span>
openssl x509 -req -in my.csr -out my.crt -signkey my.key -days 3650
<span class="token comment" spellcheck="true"># （可选）直接同时生成私钥（.key）和自签名证书（.crt）</span>
openssl req -x509 -newkey rsa:2048 -nodes -keyout my.key -out my.crt -days 3650  -subj <span class="token string">"/C=CN/ST=shanghai/L=shanghai/O=example/OU=it/CN=domain1/CN=domain2"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="openssl-创建私有CA签发的证书"><a href="#openssl-创建私有CA签发的证书" class="headerlink" title="openssl 创建私有CA签发的证书"></a>openssl 创建私有CA签发的证书</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 生成CA私钥（ca.key）和CA自签名证书（ca.crt）</span>
openssl req -x509 -newkey rsa:2048 -nodes -keyout ca.key -out ca.crt -days 3650  -subj <span class="token string">"/C=CN/ST=shanghai/L=shanghai/O=example/OU=it/CN=domain1/CN=domain2"</span>
<span class="token comment" spellcheck="true"># 生成Server端私钥（server.key）和证书签名请求（server.csr）</span>
openssl req -new -newkey rsa:2048 -nodes -keyout server.key -out server.csr -subj <span class="token string">"/C=CN/ST=shanghai/L=shanghai/O=example/OU=it/CN=domain1/CN=domain2"</span>
<span class="token comment" spellcheck="true"># 使用CA证书（ca.crt）与密钥（ca.key）签署服务器的证书签名请求（server.csr），生成私有CA签名的服务器证书（server.crt）</span>
openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 3650
<span class="token comment" spellcheck="true"># 验证server.crt是否真得是由ca签发的, 结果显示 ok</span>
openssl verify -CAfile ca.crt server.crt
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="openssl创建的证书导入java证书信任库"><a href="#openssl创建的证书导入java证书信任库" class="headerlink" title="openssl创建的证书导入java证书信任库"></a>openssl创建的证书导入java证书信任库</h3><pre class="line-numbers language-bash"><code class="language-bash">keytool -importcert -keystore test_server.jks -file openssl_client.crt -alias test_client -storepass 123456 -noprompt
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="证书格式转换-参考链接"><a href="#证书格式转换-参考链接" class="headerlink" title="证书格式转换(参考链接)"></a>证书格式转换(<a href="https://www.cnblogs.com/littleatp/p/5922362.html">参考链接</a>)</h3><ul>
<li>jks / pkcs12 格式转换</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># jks 转 p12</span>
keytool -importkeystore -srckeystore server.keystore -destkeystore server.p12 -srcalias serverkey -destalias serverkey \
    -srcstoretype jks -deststoretype pkcs12 -srcstorepass 111111 -deststorepass 111111  -destkeypass  111111 -noprompt
<span class="token comment" spellcheck="true"># p12 转 jks 同理</span>
keytool -importkeystore -srckeystore server.p12 -destkeystore server.keystore \
-srcstoretype pkcs12 -deststoretype jks -srcalias server -destalias server \
-deststorepass 111111 -srcstorepass 111111
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>Nginx 证书 转 JKS<br>Java 通常使用 JKS 作为证书存储格式，而Nginx往往采用 PEM 证书格式</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># pem证书和私钥合成p12,注意定义-name 选项，这将作为keystore识别实体的参数</span>
openssl pkcs12 -export -in server.crt -inkey server.key -passin pass:111111 -password pass:111111 -name server -out server.p12
<span class="token comment" spellcheck="true"># p12 证书转jks 证书</span>
keytool -importkeystore -srckeystore server.p12 -destkeystore server.keystore \
-srcstoretype pkcs12 -deststoretype jks -srcalias server -destalias server \
-deststorepass 111111 -srcstorepass 111111
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>如果 p12 文件中未指定实体名称，使用 keytool 转换时则不需提供 srcalias/destalias 参数，而输出的 keystore 实体名称默认为 1</p>
</blockquote>
<ul>
<li>JKS 证书 转 Nginx证书</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># jks 证书转p12</span>
keytool -importkeystore -srckeystore server.keystore  -destkeystore server.p12 \
-srcstoretype jks -deststoretype pkcs12 -srcalias server -destalias server \
-deststorepass 111111 -destkeypass 111111 -srcstorepass 111111
<span class="token comment" spellcheck="true"># p12 证书提取pem证书和私钥</span>
openssl pkcs12 -in server.p12 -clcerts -nokeys -password pass:111111 -out server.crt
openssl pkcs12 -in server.p12  -nocerts -password pass:111111 -passout pass:111111 -out server.key
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="postman-双向认证测试"><a href="#postman-双向认证测试" class="headerlink" title="postman 双向认证测试"></a>postman 双向认证测试</h3><ol>
<li>创建服务端信任库</li>
<li>创建客户端证书</li>
<li>将客户端证书添加到服务端信任库</li>
<li><code>postman</code> 设置选择：<code>setting</code> - <code>General</code> - 关闭<code>SSL certificate verification</code></li>
<li><code>postman</code> 设置选择：<code>setting</code> - <code>Certificates</code> - <code>Client Certificates</code> - 选择 <code>Add Certificates</code></li>
<li>设置<code>地址</code>和<code>端口号</code>、<code>CAR file</code> 、<code>KEY file</code>，证书有密码就输入<code>Passphrase</code></li>
<li>测试</li>
</ol>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>ssl</tag>
        <tag>openssl</tag>
        <tag>keytool</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx-ingress证书双向认证</title>
    <url>/nginx-ingress-zheng-shu-shuang-xiang-ren-zheng/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>Nginx Ingress Controller 支持通过 annotation 的方式配置服务器与客户端之间的双向 HTTPS 认证来保证连接的安全性。</p>
<h3 id="创建自签的CA证书"><a href="#创建自签的CA证书" class="headerlink" title="创建自签的CA证书"></a>创建自签的CA证书</h3><pre class="line-numbers language-bash"><code class="language-bash">openssl req -x509 -sha256 -newkey rsa:4096 -keyout ca.key -out ca.crt -days 356 -nodes -subj <span class="token string">'/CN=Fern Cert Authority'</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="创建Server端证书"><a href="#创建Server端证书" class="headerlink" title="创建Server端证书"></a>创建Server端证书</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 生成Server端证书的key和请求文件</span>
openssl req -new -newkey rsa:4096 -keyout server.key -out server.csr -nodes -subj <span class="token string">'/CN=foo.bar.com'</span>
<span class="token comment" spellcheck="true"># 使用根证书签发Server端请求文件，生成Server端证书</span>
openssl x509 -req -sha256 -days 365 -in server.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out server.crt
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="创建Client端证书"><a href="#创建Client端证书" class="headerlink" title="创建Client端证书"></a>创建Client端证书</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 生成Client端证书的请求文件</span>
openssl req -new -newkey rsa:4096 -keyout client.key -out client.csr -nodes -subj <span class="token string">'/CN=Fern'</span>
<span class="token comment" spellcheck="true"># 使用根证书签发Client端请求文件，生成Client端证书</span>
openssl x509 -req -sha256 -days 365 -in client.csr -CA ca.crt -CAkey ca.key -set_serial 02 -out client.crt
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="创建CA证书的Secret"><a href="#创建CA证书的Secret" class="headerlink" title="创建CA证书的Secret"></a>创建CA证书的Secret</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 默认default命名空间创建</span>
kubectl create secret generic ca-secret --from-file<span class="token operator">=</span>ca.crt<span class="token operator">=</span>ca.crt
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="创建Server证书的Secret"><a href="#创建Server证书的Secret" class="headerlink" title="创建Server证书的Secret"></a>创建Server证书的Secret</h3><pre class="line-numbers language-bash"><code class="language-bash">kubectl create secret generic tls-secret --from-file<span class="token operator">=</span>tls.crt<span class="token operator">=</span>server.crt --from-file<span class="token operator">=</span>tls.key<span class="token operator">=</span>server.key
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="创建测试用的Nginx-Ingress用例"><a href="#创建测试用的Nginx-Ingress用例" class="headerlink" title="创建测试用的Nginx Ingress用例"></a>创建测试用的Nginx Ingress用例</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.k8s.io/v1beta1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Ingress
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>
    <span class="token key atrule">nginx.ingress.kubernetes.io/auth-tls-verify-client</span><span class="token punctuation">:</span> <span class="token string">"on"</span>
    <span class="token key atrule">nginx.ingress.kubernetes.io/auth-tls-secret</span><span class="token punctuation">:</span> <span class="token string">"default/ca-secret"</span>
    <span class="token key atrule">nginx.ingress.kubernetes.io/auth-tls-verify-depth</span><span class="token punctuation">:</span> <span class="token string">"1"</span>
    <span class="token key atrule">nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream</span><span class="token punctuation">:</span> <span class="token string">"true"</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>test
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">rules</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> foo.bar.com
    <span class="token key atrule">http</span><span class="token punctuation">:</span>
      <span class="token key atrule">paths</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">backend</span><span class="token punctuation">:</span>
          <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> http<span class="token punctuation">-</span>svc
          <span class="token key atrule">servicePort</span><span class="token punctuation">:</span> <span class="token number">80</span>
        <span class="token key atrule">path</span><span class="token punctuation">:</span> /
  <span class="token key atrule">tls</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> foo.bar.com
    <span class="token key atrule">secretName</span><span class="token punctuation">:</span> tls<span class="token punctuation">-</span>secret
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 客户端不传证书访问</span>
curl --cacert ./ca.crt  https://foo.bar.com
<span class="token comment" spellcheck="true"># 客户端传证书访问</span>
curl --cacert ./ca.crt --cert ./client.crt --key ./client.key https://foo.bar.com
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>nginx-ingress</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx证书双向认证</title>
    <url>/nginx-zheng-shu-shuang-xiang-ren-zheng/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>nginx 证书双向认证是认证<code>客户端证书</code>是否是配置的<code>根证书</code>颁发的.</p>
<h3 id="创建根证书"><a href="#创建根证书" class="headerlink" title="创建根证书"></a>创建根证书</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#创建根证书私钥：</span>
openssl genrsa -out ca.key 1024
<span class="token comment" spellcheck="true">#创建根证书请求文件：</span>
openssl req -new -out ca.csr -key ca.key
<span class="token comment" spellcheck="true">#创建根证书：</span>
openssl x509 -req -in ca.csr -out ca.crt -signkey ca.key -CAcreateserial -days 3650
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>ca.crt : 签名有效期为10年的根证书</li>
<li>ca.key: 根证书私钥文件</li>
<li>ca.csr: 根证书请求文件</li>
</ul>
<h3 id="根据根证书创建服务端证书"><a href="#根据根证书创建服务端证书" class="headerlink" title="根据根证书创建服务端证书"></a>根据根证书创建服务端证书</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#生成服务器端证书私钥：</span>
openssl genrsa -out server.key 1024
<span class="token comment" spellcheck="true">#生成服务器证书请求文件，过程和注意事项参考根证书，本节不详述：</span>
openssl req -new -out server.csr -key server.key
<span class="token comment" spellcheck="true">#生成服务器端公钥证书</span>
openssl x509 -req -in server.csr -out server.crt -signkey server.key -CA ca.crt -CAkey ca.key -CAcreateserial -days 3650
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="根据根证书创建客户端证书"><a href="#根据根证书创建客户端证书" class="headerlink" title="根据根证书创建客户端证书"></a>根据根证书创建客户端证书</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#生成客户端证书秘钥：</span>
openssl genrsa -out client.key 1024
<span class="token comment" spellcheck="true">#生成客户端证书请求文件，过程和注意事项参考根证书，本节不详述：</span>
openssl req -new -out client.csr -key client.key
<span class="token comment" spellcheck="true">#生客户端证书</span>
openssl x509 -req -in client.csr -out client.crt -signkey client.key -CA ca.crt -CAkey ca.key -CAcreateserial -days 3650
<span class="token comment" spellcheck="true">#生客户端p12格式证书，需要输入一个密码，比如123456</span>
openssl pkcs12 -export -clcerts -in client.crt -inkey client.key -out client.p12
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>client.p12：客户端 p12 格式，这个证书文件包含客户端的公钥和私钥，主要用来给浏览器或 postman 访问使用.</p>
</blockquote>
<h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><pre class="line-numbers language-conf"><code class="language-conf">server {
    listen       443 ssl;
    server_name  www.yourdomain.com;# 无域名可填写ip
    ssl                  on;  
    ssl_certificate      /data/sslKey/server.crt;  #server公钥证书
    ssl_certificate_key  /data/sslKey/server.key;  #server私钥
    ssl_client_certificate /data/sslKey/ca.crt;  #根证书，可以验证所有它颁发的客户端证书
    ssl_verify_client on;  #开启客户端证书验证  
    ssl_verify_depth 1; #如果客户端证书不是由根证书直接颁发,需要开启此参数

    location / {
        proxy_pass http://127.0.0.1:8080/;
    }
    
    #location / {
    #    root   html;
    #    index  index.html index.htm;
    # }
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><ul>
<li>curl 带证书访问</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash">   curl --cert ./client.crt --key ./client.key https://foo.bar.com
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>postman</li>
</ul>
<ol>
<li>设置 <code>General</code> 中先把 <code>SSL certificate verification</code> 关掉.</li>
<li><code>Certificates</code> 中选择<code>Add Certificates</code>,<code>PFX file</code> 配置客户端 <code>p12</code> 文件和<code>密码</code>.</li>
</ol>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>openssl</tag>
      </tags>
  </entry>
  <entry>
    <title>gson自定义类型适配器</title>
    <url>/gson-zi-ding-yi-lei-xing-gua-pei-qi/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p><code>gson</code> 实现 <code>yyyyMMddHHmmss</code> 格式的时间与 <code>LocalDateTime</code> 类型相互转换.</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 自定义序列化</span>
JsonSerializer<span class="token operator">&lt;</span>LocalDateTime<span class="token operator">></span> serializer <span class="token operator">=</span>
                <span class="token punctuation">(</span>localDateTime<span class="token punctuation">,</span> type<span class="token punctuation">,</span> jsonSerializationContext<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">JsonPrimitive</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyyMMddHHmmss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 自定义反序列化</span>
JsonDeserializer<span class="token operator">&lt;</span>LocalDateTime<span class="token operator">></span> deserializer <span class="token operator">=</span>
        <span class="token punctuation">(</span>jsonElement<span class="token punctuation">,</span> type<span class="token punctuation">,</span> jsonDeserializationContext<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> LocalDateTime<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonElement<span class="token punctuation">.</span><span class="token function">getAsJsonPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyyMMddHHmmss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Gson gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">registerTypeAdapter</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> serializer<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">registerTypeAdapter</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> deserializer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 测试 object to json</span>
TestObject object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
object<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// {"date":"20221115141202"}</span>
<span class="token comment" spellcheck="true">// 测试 json to object</span>
String json <span class="token operator">=</span> <span class="token string">"{\"date\":\"20221115140534\"}"</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> TestObject<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// TestObject(date=2022-11-15T14:05:34)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>TestObject.java</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@ToString</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestObject</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> LocalDateTime date<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>gson</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot配置ExceptionHandler</title>
    <url>/springboot-pei-zhi-exceptionhandler/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>springboot配置ExceptionHandler不仅可以统一处理全局异常，还可以用来自定义404、405返回。</p>
<h3 id="自定义404、405"><a href="#自定义404、405" class="headerlink" title="自定义404、405"></a>自定义404、405</h3><ul>
<li>配置application.yml</li>
</ul>
<pre class="line-numbers language-yml"><code class="language-yml"># 捕获404异常需要开启以下配置,其它异常无需开启
spring:
  mvc:
    throw-exception-if-no-handler-found: true
  resources:
    add-mappings: false
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>编写java</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestControllerAdvice</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionHandle</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Object <span class="token function">handlerException</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 请求接口地址不存在 404</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">NoHandlerFoundException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// Response是自定义的一个返回对象</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>NoHandlerFound<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// 请求方法不支持 405</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">HttpRequestMethodNotSupportedException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>MethodNotSupported<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//其他异常都可以捕获</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>sysError<span class="token punctuation">,</span> Constant<span class="token punctuation">.</span>sysError<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>java</category>
        <category>springboot</category>
      </categories>
  </entry>
  <entry>
    <title>springboot通过注解和redis实现接口限流</title>
    <url>/springboot-tong-guo-zhu-jie-shi-xian-xian-liu/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>本文通过 <code>自定义注解</code> + <code>Redis</code> 实现接口限流。</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul>
<li>自定义注解</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Inherited</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// 默认就是60秒内可以访问2次</span>
<span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">RequestLimit</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * 时间，秒为单位
     */</span>
    <span class="token keyword">int</span> <span class="token function">second</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">60</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
     * second时间内允许访问的次数
     */</span>
    <span class="token keyword">int</span> <span class="token function">maxCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>通过AOP实现限流</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableAspectJAutoProxy</span>
<span class="token annotation punctuation">@Aspect</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 如果有多个AOP，需要将Order设置到最小，优先判断限流</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestLimitAspect</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 这里通过将访问信息保存在redis中，判断是否限流</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 定义切点，所有添加RequestLimit注解的</span>
    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"@annotation(org.xxx.xxx.annotation.RequestLimit)"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleRequestLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"handleRequestLimit()"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Object <span class="token function">handleResponseEncrypt</span><span class="token punctuation">(</span>ProceedingJoinPoint pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>
        MethodSignature signature <span class="token operator">=</span> <span class="token punctuation">(</span>MethodSignature<span class="token punctuation">)</span> pjp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Method method <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        RequestLimit requestLimit <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>RequestLimit<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 没有添加注解直接放行</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> requestLimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ServletRequestAttributes requestAttributes <span class="token operator">=</span> <span class="token punctuation">(</span>ServletRequestAttributes<span class="token punctuation">)</span> RequestContextHolder<span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 获取HttpServletRequest</span>
        HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> requestAttributes<span class="token punctuation">.</span><span class="token function">resolveReference</span><span class="token punctuation">(</span>RequestAttributes<span class="token punctuation">.</span>REFERENCE_REQUEST<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 获取公网IP</span>
        String ip <span class="token operator">=</span> CommonUtils<span class="token punctuation">.</span><span class="token function">getPublicIp</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 实现同一个公网IP 限流</span>
        String key <span class="token operator">=</span> <span class="token string">"limit:"</span> <span class="token operator">+</span> ip <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getServletPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            count <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> count<span class="token punctuation">,</span> requestLimit<span class="token punctuation">.</span><span class="token function">second</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">&lt;</span> requestLimit<span class="token punctuation">.</span><span class="token function">maxCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"RemoteAddr:{} 请求接口:{} 请求过于频繁, 已拒绝请求."</span><span class="token punctuation">,</span> ip<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getServletPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        HttpServletResponse response <span class="token operator">=</span> requestAttributes<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json; charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment" spellcheck="true">// 触发限流自定义返回内容</span>
                <span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>ResponseCode<span class="token punctuation">.</span>RequestLimit<span class="token punctuation">,</span> Constant<span class="token punctuation">.</span>ResponseMsg<span class="token punctuation">.</span>RequestLimit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>获取公网IP</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getPublicIp</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    String ip <span class="token operator">=</span> null<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"x-forwarded-for"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Proxy-Client-IP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span> <span class="token operator">||</span> ip<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"WL-Proxy-Client-IP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"HTTP_CLIENT_IP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"HTTP_X_FORWARDED_FOR"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"getPublicIp ERROR "</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//使用代理，则获取第一个IP地址</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ip<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ip<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ip <span class="token operator">=</span> ip<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> ip<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ip<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>java</category>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>限流</tag>
      </tags>
  </entry>
  <entry>
    <title>loki采集docker日志</title>
    <url>/loki-cai-ji-docker-ri-zhi/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>本文通过安装 docker loki plugin 直接采集docker容器日志，并推送至loki。<a href="https://grafana.com/docs/loki/latest/clients/docker-driver/">官方文档</a></p>
<h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 安装最新的插件</span>
docker plugin <span class="token function">install</span> grafana/loki-docker-driver:latest --alias loki --grant-all-permissions
<span class="token comment" spellcheck="true"># 查看插件</span>
<span class="token punctuation">[</span>root@data1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker plugin ls</span>
ID             NAME          DESCRIPTION           ENABLED
744b79d5d1a9   loki:latest   Loki Logging Driver   <span class="token boolean">true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="插件升级"><a href="#插件升级" class="headerlink" title="插件升级"></a>插件升级</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 停用</span>
docker plugin disable loki --force
<span class="token comment" spellcheck="true"># 升级</span>
docker plugin upgrade loki grafana/loki-docker-driver:latest --grant-all-permissions
<span class="token comment" spellcheck="true"># 启用</span>
docker plugin <span class="token function">enable</span> loki
<span class="token comment" spellcheck="true"># 重启docker</span>
systemctl restart docker
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="插件卸载"><a href="#插件卸载" class="headerlink" title="插件卸载"></a>插件卸载</h3><pre class="line-numbers language-bash"><code class="language-bash">docker plugin disable loki --force
docker plugin <span class="token function">rm</span> loki
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="单独为一个容器设置日志驱动"><a href="#单独为一个容器设置日志驱动" class="headerlink" title="单独为一个容器设置日志驱动"></a>单独为一个容器设置日志驱动</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># --log-driver=loki</span>
docker run --log-driver<span class="token operator">=</span>loki \
    --log-opt loki-url<span class="token operator">=</span><span class="token string">"http://IP:3100/loki/api/v1/push"</span> \
    --log-opt loki-retries<span class="token operator">=</span>5 \
    --log-opt loki-batch-size<span class="token operator">=</span>400 \
    --log-opt max-size<span class="token operator">=</span>50m \
    --log-opt max-file<span class="token operator">=</span>3 \
    grafana/grafana
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="为所有的容器设置默认参数"><a href="#为所有的容器设置默认参数" class="headerlink" title="为所有的容器设置默认参数"></a>为所有的容器设置默认参数</h4><p>编辑<code>/etc/docker/daemon.json</code>文件(如果没有就新建).</p>
<pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>
    <span class="token property">"debug"</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"log-driver"</span><span class="token operator">:</span> <span class="token string">"loki"</span><span class="token punctuation">,</span>
    <span class="token property">"log-opts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"loki-url"</span><span class="token operator">:</span> <span class="token string">"http://IP:3100/loki/api/v1/push"</span><span class="token punctuation">,</span>
        <span class="token property">"loki-batch-size"</span><span class="token operator">:</span> <span class="token string">"400"</span><span class="token punctuation">,</span>
        <span class="token property">"loki-retries"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
        <span class="token property">"max-size"</span><span class="token operator">:</span> <span class="token string">"50m"</span><span class="token punctuation">,</span>
        <span class="token property">"max-file"</span><span class="token operator">:</span> <span class="token string">"10"</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>更多如<code>docker-compose</code>的用法参考<a href="https://grafana.com/docs/loki/latest/clients/docker-driver/configuration/">官网文档</a>.</p>
</blockquote>
<ul>
<li>loki.yaml</li>
</ul>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">auth_enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>

<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">http_listen_port</span><span class="token punctuation">:</span> <span class="token number">3100</span>
  <span class="token key atrule">grpc_listen_port</span><span class="token punctuation">:</span> <span class="token number">9095</span>

<span class="token key atrule">ingester</span><span class="token punctuation">:</span>
  <span class="token key atrule">chunk_idle_period</span><span class="token punctuation">:</span> 3m
  <span class="token key atrule">chunk_block_size</span><span class="token punctuation">:</span> <span class="token number">262144</span>
  <span class="token key atrule">chunk_retain_period</span><span class="token punctuation">:</span> 1m
  <span class="token key atrule">max_transfer_retries</span><span class="token punctuation">:</span> <span class="token number">0</span>
  <span class="token key atrule">lifecycler</span><span class="token punctuation">:</span>
    <span class="token key atrule">ring</span><span class="token punctuation">:</span>
      <span class="token key atrule">kvstore</span><span class="token punctuation">:</span>
        <span class="token key atrule">store</span><span class="token punctuation">:</span> inmemory
      <span class="token key atrule">replication_factor</span><span class="token punctuation">:</span> <span class="token number">1</span>

<span class="token key atrule">limits_config</span><span class="token punctuation">:</span>
  <span class="token key atrule">reject_old_samples</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">reject_old_samples_max_age</span><span class="token punctuation">:</span> 168h

<span class="token key atrule">common</span><span class="token punctuation">:</span>
  <span class="token key atrule">path_prefix</span><span class="token punctuation">:</span> /tmp/loki
  <span class="token key atrule">storage</span><span class="token punctuation">:</span>
    <span class="token key atrule">filesystem</span><span class="token punctuation">:</span>
      <span class="token key atrule">chunks_directory</span><span class="token punctuation">:</span> /tmp/loki/chunks
      <span class="token key atrule">rules_directory</span><span class="token punctuation">:</span> /tmp/loki/rules
  <span class="token key atrule">replication_factor</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">ring</span><span class="token punctuation">:</span>
    <span class="token key atrule">instance_addr</span><span class="token punctuation">:</span> 127.0.0.1
    <span class="token key atrule">kvstore</span><span class="token punctuation">:</span>
      <span class="token key atrule">store</span><span class="token punctuation">:</span> inmemory

<span class="token key atrule">storage_config</span><span class="token punctuation">:</span>
  <span class="token key atrule">boltdb_shipper</span><span class="token punctuation">:</span>
    <span class="token key atrule">active_index_directory</span><span class="token punctuation">:</span> /tmp/loki/boltdb<span class="token punctuation">-</span>shipper<span class="token punctuation">-</span>active
    <span class="token key atrule">cache_location</span><span class="token punctuation">:</span> /tmp/loki/boltdb<span class="token punctuation">-</span>shipper<span class="token punctuation">-</span>cache
    <span class="token key atrule">cache_ttl</span><span class="token punctuation">:</span> 24h
    <span class="token key atrule">shared_store</span><span class="token punctuation">:</span> filesystem
  <span class="token key atrule">filesystem</span><span class="token punctuation">:</span>
    <span class="token key atrule">directory</span><span class="token punctuation">:</span> /tmp/loki/chunks

<span class="token key atrule">chunk_store_config</span><span class="token punctuation">:</span>
  <span class="token key atrule">max_look_back_period</span><span class="token punctuation">:</span> 672h

<span class="token key atrule">table_manager</span><span class="token punctuation">:</span>
  <span class="token key atrule">retention_deletes_enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">retention_period</span><span class="token punctuation">:</span> 672h

<span class="token key atrule">compactor</span><span class="token punctuation">:</span>
  <span class="token key atrule">working_directory</span><span class="token punctuation">:</span> /tmp/loki/boltdb<span class="token punctuation">-</span>shipper<span class="token punctuation">-</span>compactor
  <span class="token key atrule">shared_store</span><span class="token punctuation">:</span> filesystem
  <span class="token key atrule">retention_enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">retention_delete_delay</span><span class="token punctuation">:</span> 2h

<span class="token key atrule">query_range</span><span class="token punctuation">:</span>
  <span class="token key atrule">results_cache</span><span class="token punctuation">:</span>
    <span class="token key atrule">cache</span><span class="token punctuation">:</span>
      <span class="token key atrule">embedded_cache</span><span class="token punctuation">:</span>
        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
        <span class="token key atrule">max_size_mb</span><span class="token punctuation">:</span> <span class="token number">200</span>

<span class="token key atrule">querier</span><span class="token punctuation">:</span>
  <span class="token key atrule">query_timeout</span><span class="token punctuation">:</span> 2m

<span class="token key atrule">schema_config</span><span class="token punctuation">:</span>
  <span class="token key atrule">configs</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">from</span><span class="token punctuation">:</span> <span class="token datetime number">2020-10-24</span>
      <span class="token key atrule">store</span><span class="token punctuation">:</span> boltdb<span class="token punctuation">-</span>shipper
      <span class="token key atrule">object_store</span><span class="token punctuation">:</span> filesystem
      <span class="token key atrule">schema</span><span class="token punctuation">:</span> v11
      <span class="token key atrule">index</span><span class="token punctuation">:</span>
        <span class="token key atrule">prefix</span><span class="token punctuation">:</span> index_
        <span class="token key atrule">period</span><span class="token punctuation">:</span> 24h

<span class="token comment" spellcheck="true"># ruler:</span>
<span class="token comment" spellcheck="true">#   alertmanager_url: http://localhost:9093</span>

<span class="token comment" spellcheck="true"># By default, Loki will send anonymous, but uniquely-identifiable usage and configuration</span>
<span class="token comment" spellcheck="true"># analytics to Grafana Labs. These statistics are sent to https://stats.grafana.org/</span>
<span class="token comment" spellcheck="true">#</span>
<span class="token comment" spellcheck="true"># Statistics help us better understand how Loki is used, and they show us performance</span>
<span class="token comment" spellcheck="true"># levels for most users. This helps us prioritize features and documentation.</span>
<span class="token comment" spellcheck="true"># For more information on what's sent, look at</span>
<span class="token comment" spellcheck="true"># https://github.com/grafana/loki/blob/main/pkg/usagestats/stats.go</span>
<span class="token comment" spellcheck="true"># Refer to the buildReport method to see what goes into a report.</span>
<span class="token comment" spellcheck="true">#</span>
<span class="token comment" spellcheck="true"># If you would like to disable reporting, uncomment the following lines:</span>
<span class="token key atrule">analytics</span><span class="token punctuation">:</span>
 <span class="token key atrule">reporting_enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>docker</category>
        <category>loki</category>
      </categories>
      <tags>
        <tag>loki</tag>
        <tag>docker plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot集成kafka</title>
    <url>/springboot-ji-cheng-kafka/</url>
    <content><![CDATA[<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">kafka</span><span class="token punctuation">:</span>
    <span class="token key atrule">bootstrap-servers</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>KAFKA_SERVERS<span class="token punctuation">:</span>localhost<span class="token punctuation">:</span><span class="token number">9092</span><span class="token punctuation">}</span>
    <span class="token key atrule">producer</span><span class="token punctuation">:</span>
      <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">0</span>
      <span class="token key atrule">acks</span><span class="token punctuation">:</span> <span class="token number">1</span>
      <span class="token key atrule">batch-size</span><span class="token punctuation">:</span> <span class="token number">100000</span>
      <span class="token key atrule">buffer-memory</span><span class="token punctuation">:</span> <span class="token number">33554432</span>
      <span class="token key atrule">key-serializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringSerializer
      <span class="token key atrule">value-serializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringSerializer
    <span class="token key atrule">consumer</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 默认的group名称</span>
      <span class="token key atrule">group-id</span><span class="token punctuation">:</span> service<span class="token punctuation">-</span>group
    <span class="token comment" spellcheck="true">#   关闭自动提交</span>
      <span class="token key atrule">enable-auto-commit</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
      <span class="token key atrule">auto-commit-interval</span><span class="token punctuation">:</span> <span class="token number">1000</span>
      <span class="token key atrule">auto-offset-reset</span><span class="token punctuation">:</span> latest
      <span class="token key atrule">max-poll-records</span><span class="token punctuation">:</span> <span class="token number">1000</span>
      <span class="token key atrule">key-deserializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringDeserializer
      <span class="token key atrule">value-deserializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringDeserializer
    <span class="token key atrule">listener</span><span class="token punctuation">:</span>
      <span class="token key atrule">ack-mode</span><span class="token punctuation">:</span> manual_immediate
      <span class="token key atrule">missing-topics-fatal</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
      <span class="token key atrule">type</span><span class="token punctuation">:</span> batch
<span class="token comment" spellcheck="true"># 自定义配置监听的topic</span>
<span class="token key atrule">log</span><span class="token punctuation">:</span>
  <span class="token key atrule">topics</span><span class="token punctuation">:</span> topic1<span class="token punctuation">,</span>topic2<span class="token punctuation">,</span>topic3
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span><span class="token string">"#{'${log.topics}'.split(',')}"</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// public void processMessage(List&lt;String> records, Acknowledgment ack) {</span>
<span class="token comment" spellcheck="true">// public void processMessage(ConsumerRecord&lt;?, ?> records, Acknowledgment ack) {</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processMessage</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>ConsumerRecord<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">>></span> records<span class="token punctuation">,</span> Acknowledgment ack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>records<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>records<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 手动提交</span>
        ack<span class="token punctuation">.</span><span class="token function">acknowledge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>常用中间件docker安装</title>
    <url>/chang-yong-zhong-jian-jian-docker-an-zhuang/</url>
    <content><![CDATA[<h3 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h3><pre class="line-numbers language-bash"><code class="language-bash">docker run -d --name zookeeper -p 2181:2181 --restart always -e ZOO_MY_ID<span class="token operator">=</span>1 -e ALLOW_ANONYMOUS_LOGIN<span class="token operator">=</span>yes -e TZ<span class="token operator">=</span>Asia/Shanghai -v /etc/localtime:/etc/localtime zookeeper:3.7
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 注意：KAFKA_CFG_ADVERTISED_LISTENERS要改成你自己宿主机的IP</span>
docker run -d --name kafka -p 9092:9092 --restart<span class="token operator">=</span>always  -e KAFKA_CFG_ZOOKEEPER_CONNECT<span class="token operator">=</span>192.168.1.12:2181 -e KAFKA_BROKER_ID<span class="token operator">=</span>1 -e KAFKA_CFG_LISTENERS<span class="token operator">=</span>PLAINTEXT://:9092 -e KAFKA_CFG_ADVERTISED_LISTENERS<span class="token operator">=</span>PLAINTEXT://192.168.1.12:9092 -e ALLOW_PLAINTEXT_LISTENER<span class="token operator">=</span>yes -e KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE<span class="token operator">=</span>true -e TZ<span class="token operator">=</span>Asia/Shanghai -v /etc/localtime:/etc/localtime bitnami/kafka:2.8.0 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><pre class="line-numbers language-bash"><code class="language-bash">docker run -d --name redis -p 6379:6379 -e TZ<span class="token operator">=</span>Asia/Shanghai -v /etc/localtime:/etc/localtime redis
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><pre class="line-numbers language-bash"><code class="language-bash">docker run -d --name mysql -e MYSQL_ROOT_PASSWORD<span class="token operator">=</span>123456 -p 3306:3306 -e TZ<span class="token operator">=</span>Asia/Shanghai -v /etc/localtime:/etc/localtime --restart<span class="token operator">=</span>always mysql:8.0.32
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>mysql8密码加密规则变更</li>
</ul>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">use</span> mysql<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 查看密码加密规则,8.0后使用的是caching_sha2_password,需要修改成mysql_native_password</span>
<span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">,</span>host<span class="token punctuation">,</span>plugin <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span>
<span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'root'</span>@'localhost<span class="token string">' IDENTIFIED BY '</span><span class="token number">123456</span><span class="token string">' PASSWORD EXPIRE NEVER;
ALTER USER '</span>root<span class="token string">'@'</span>localhost<span class="token string">' IDENTIFIED WITH mysql_native_password BY '</span><span class="token number">123456</span><span class="token string">';
ALTER USER '</span>root<span class="token string">'@'</span><span class="token operator">%</span><span class="token string">' IDENTIFIED BY '</span><span class="token number">123456</span><span class="token string">' PASSWORD EXPIRE NEVER;
ALTER USER '</span>root<span class="token string">'@'</span><span class="token operator">%</span><span class="token string">' IDENTIFIED WITH mysql_native_password BY '</span><span class="token number">123456</span>'<span class="token punctuation">;</span>
flush <span class="token keyword">privileges</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>机器性能不好可以设置配置</li>
</ul>
<pre><code>sync_binlog=0
innodb_flush_log_at_trx_commit=2
</code></pre>
<h3 id="kafka-manager"><a href="#kafka-manager" class="headerlink" title="kafka-manager"></a>kafka-manager</h3><pre class="line-numbers language-bash"><code class="language-bash">docker run -d -p 9000:9000 --restart<span class="token operator">=</span>always --name kafka-ui -e ZK_HOSTS<span class="token operator">=</span>192.168.3.27:2181 -e TZ<span class="token operator">=</span>Asia/Shanghai -v /etc/localtime:/etc/localtime solsson/kafka-manager
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="kafka-ui-lite"><a href="#kafka-ui-lite" class="headerlink" title="kafka-ui-lite"></a>kafka-ui-lite</h3><pre class="line-numbers language-bash"><code class="language-bash">docker run -d --name ui --restart<span class="token operator">=</span>always -e TZ<span class="token operator">=</span>Asia/Shanghai -v /etc/localtime:/etc/localtime -p 8889:8889 freakchicken/kafka-ui-lite
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
  </entry>
  <entry>
    <title>mysql8递归查询</title>
    <url>/mysql8-di-gui-cha-xun/</url>
    <content><![CDATA[<h3 id="原表"><a href="#原表" class="headerlink" title="原表"></a>原表</h3><p>有这样一张菜单表,菜单下可以有子菜单,需求：给你一个菜单ID，让你查出这个菜单下所有子菜单。</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>t_menu<span class="token punctuation">`</span> <span class="token punctuation">(</span>
  <span class="token punctuation">`</span>menu_id<span class="token punctuation">`</span> <span class="token keyword">int</span> unsigned <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'菜单ID'</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>menu_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'菜单名称'</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>menu_url<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'菜单url'</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>menu_level<span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token string">'-1'</span> <span class="token keyword">COMMENT</span> <span class="token string">'菜单级别'</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>menu_type<span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'菜单类型，0菜单，1按钮'</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>menu_patent_id<span class="token punctuation">`</span> <span class="token keyword">int</span> unsigned <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'父菜单ID'</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>menu_icon<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'资源图标'</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>menu_order<span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'资源顺序'</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>menu_id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="递归查询"><a href="#递归查询" class="headerlink" title="递归查询"></a>递归查询</h3><p>MySQL8新增了 <code>WITH RECURSIVE</code> 递归查询父子集的方法,低于这个版本不生效.</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 定义临时表 temp,缓存所有查询出来的结果</span>
<span class="token keyword">WITH</span> recursive <span class="token keyword">temp</span> <span class="token keyword">AS</span><span class="token punctuation">(</span> 
    <span class="token comment" spellcheck="true">-- 根据菜单ID查询这条记录</span>
    <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_menu <span class="token keyword">WHERE</span> menu_id<span class="token operator">=</span><span class="token number">1</span>
    <span class="token keyword">UNION</span> <span class="token keyword">ALL</span>
    <span class="token comment" spellcheck="true">-- 匹配父菜单ID和菜单ID相等的记录,并加入到 temp 表</span>
    <span class="token keyword">SELECT</span> m<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span> t_menu m<span class="token punctuation">,</span><span class="token keyword">temp</span> t <span class="token keyword">WHERE</span> m<span class="token punctuation">.</span>menu_patent_id<span class="token operator">=</span>t<span class="token punctuation">.</span>menu_id
<span class="token punctuation">)</span> 
<span class="token comment" spellcheck="true">-- 查询temp表中的记录</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">temp</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
  </entry>
  <entry>
    <title>bookstack部署使用</title>
    <url>/bookstack-bu-shu-shi-yong/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>bookstack作为confluence的开源替代品,部署简单，使用方便.</p>
<h3 id="docker部署"><a href="#docker部署" class="headerlink" title="docker部署"></a>docker部署</h3><ul>
<li><a href="https://www.bookstackapp.com/docs/admin/installation">官方文档</a></li>
<li><a href="https://hub.docker.com/r/solidnerd/bookstack/">docker部署</a></li>
</ul>
<h3 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h3><ul>
<li>需要准备一个MySQL,创建好数据库bookstack.</li>
<li>docker启动</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 注意APP_URL，这里是你访问bookstack的地址，如果你是通过域名访问则输入你的域名,如https://book.test.com</span>
docker run -d --name bookstack  -e PUID<span class="token operator">=</span>1000 -e PGID<span class="token operator">=</span>1000 -e DB_HOST<span class="token operator">=</span>192.168.3.27  -e DB_PORT<span class="token operator">=</span>3306 -e DB_USER<span class="token operator">=</span>root -e DB_PASS<span class="token operator">=</span>123456 -e DB_DATABASE<span class="token operator">=</span>bookstack -p 6875:80 -e APP_URL<span class="token operator">=</span>http://192.168.3.27:6875 -e TZ<span class="token operator">=</span>Asia/Shanghai  linuxserver/bookstack
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="接入LDAP"><a href="#接入LDAP" class="headerlink" title="接入LDAP"></a>接入LDAP</h3><ul>
<li><a href="https://www.bookstackapp.com/docs/admin/ldap-auth/">官方文档</a></li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash">docker run -d --name bookstack  -e PUID<span class="token operator">=</span>1000 -e PGID<span class="token operator">=</span>1000 -e DB_HOST<span class="token operator">=</span>192.168.3.27  -e DB_PORT<span class="token operator">=</span>3306 -e DB_USER<span class="token operator">=</span>root -e DB_PASS<span class="token operator">=</span>123456 -e DB_DATABASE<span class="token operator">=</span>bookstack -p 6875:80 -e APP_URL<span class="token operator">=</span>http://192.168.3.27:6875 -e TZ<span class="token operator">=</span>Asia/Shanghai -e AUTH_METHOD<span class="token operator">=</span>ldap -e LDAP_SERVER<span class="token operator">=</span>192.168.0.9:389 -e LDAP_BASE_DN<span class="token operator">=</span><span class="token string">"ou=xxxxx,dc=xxxx,dc=xxxx"</span> -e LDAP_DN<span class="token operator">=</span><span class="token string">"cn=xxx,dc=xxx,dc=xxxx"</span> -e LDAP_VERSION<span class="token operator">=</span>3 -e LDAP_PASS<span class="token operator">=</span><span class="token string">"xxxxxxxxxxxxxxxxxx"</span>  linuxserver/bookstack
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>也可以直接修改<code>.env</code>文件然后映射到容器中<code>/config/www/.env</code>. <code>.env</code>文件中有其它默认配置,别弄丢了.</p>
</blockquote>
<h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><pre class="line-numbers language-bash"><code class="language-bash">-v /data/bookstack/app:/app -v /data/bookstack/config:/config
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>bookstack</category>
      </categories>
  </entry>
  <entry>
    <title>etcd监控命令</title>
    <url>/etcd-jian-kong-ming-ling/</url>
    <content><![CDATA[<h3 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a>etcd</h3><p>ETCD对磁盘要求较高，官方推荐SSD起步。</p>
<pre class="line-numbers language-bash"><code class="language-bash">ENDPOINTS<span class="token operator">=</span>https://192.168.3.28:2379,https://192.168.3.29:2379,https://192.168.3.30:2379

<span class="token comment" spellcheck="true"># 查看集群状态</span>
/usr/local/bin/etcdctl --cacert<span class="token operator">=</span>/etc/ssl/etcd/ssl/ca.pem --cert<span class="token operator">=</span>/etc/ssl/etcd/ssl/member-05.pem --key<span class="token operator">=</span>/etc/ssl/etcd/ssl/member-05-key.pem  --endpoints<span class="token operator">=</span><span class="token variable">$ENDPOINT</span> endpoint status

<span class="token comment" spellcheck="true"># 查看健康状态</span>
/usr/local/bin/etcdctl --cacert<span class="token operator">=</span>/etc/ssl/etcd/ssl/ca.pem --cert<span class="token operator">=</span>/etc/ssl/etcd/ssl/member-05.pem --key<span class="token operator">=</span>/etc/ssl/etcd/ssl/member-05-key.pem  --endpoints<span class="token operator">=</span><span class="token variable">$ENDPOINT</span> endpoint health

<span class="token comment" spellcheck="true"># 查看所有监控指标</span>
curl --cacert /etc/ssl/etcd/ssl/ca.pem --cert /etc/ssl/etcd/ssl/member-05.pem --key /etc/ssl/etcd/ssl/member-05-key.pem  https://10.201.112.28:2379/metrics 
<span class="token comment" spellcheck="true"># 查看和磁盘相关的</span>
curl --cacert /etc/ssl/etcd/ssl/ca.pem --cert /etc/ssl/etcd/ssl/member-05.pem --key /etc/ssl/etcd/ssl/member-05-key.pem  https://10.201.112.28:2379/metrics <span class="token operator">|</span> <span class="token function">grep</span> disk_backend_commit_duration_seconds
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>etcd</category>
      </categories>
  </entry>
  <entry>
    <title>k8s使用新版nfs-client</title>
    <url>/k8s-shi-yong-xin-ban-nfs-client/</url>
    <content><![CDATA[<h3 id="nfs-client"><a href="#nfs-client" class="headerlink" title="nfs-client"></a>nfs-client</h3><ul>
<li><a href="https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner">官方github地址</a></li>
</ul>
<h3 id="安装NFS"><a href="#安装NFS" class="headerlink" title="安装NFS"></a>安装NFS</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 安装并设置自动启动</span>
yum <span class="token function">install</span> nfs-utils
systemctl <span class="token function">enable</span> rpcbind
systemctl <span class="token function">enable</span> nfs
<span class="token comment" spellcheck="true"># 启动</span>
systemctl start rpcbind
systemctl start nfs
<span class="token comment" spellcheck="true"># 服务启动之后，我们在服务端配置一个共享目录</span>
<span class="token function">mkdir</span> /data
<span class="token function">chmod</span> 755 /data
<span class="token comment" spellcheck="true"># 根据这个目录，相应配置导出目录</span>
<span class="token function">vi</span> /etc/exports
<span class="token comment" spellcheck="true"># 添加如下配置</span>
/data/     192.168.0.0/24<span class="token punctuation">(</span>rw,sync,no_root_squash,no_all_squash<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 保存设置之后，重启 NFS 服务</span>
systemctl restart nfs
<span class="token comment" spellcheck="true"># 可以检查一下本地的共享目录</span>
showmount -e localhost
Export list <span class="token keyword">for</span> localhost:
/data 192.168.0.0/24
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="helm安装nfs-client"><a href="#helm安装nfs-client" class="headerlink" title="helm安装nfs-client"></a>helm安装nfs-client</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 添加仓库</span>
helm repo add nfs-subdir-external-provisioner https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner/
<span class="token comment" spellcheck="true"># 更新</span>
helm repo update
<span class="token comment" spellcheck="true"># 安装</span>
helm <span class="token function">install</span> my-nfs nfs-subdir-external-provisioner/nfs-subdir-external-provisioner \
    --set nfs.server<span class="token operator">=</span>x.x.x.x \
    --set nfs.path<span class="token operator">=</span>/data

<span class="token comment" spellcheck="true"># 设置镜像仓库,默认仓库拉不下来</span>
--set image.repository<span class="token operator">=</span>hub.deri.org.cn/k8s/nfs-subdir-external-provisioner
<span class="token comment" spellcheck="true"># 设置SC名字,默认nfs-client</span>
--set storageClass.name<span class="token operator">=</span>my-nfs
<span class="token comment" spellcheck="true"># 设置供应商名字,默认自动生成一个</span>
--set storageClass.provisionerName<span class="token operator">=</span>cluster.local/nfsxxx
<span class="token comment" spellcheck="true"># 完整安装命令</span>
helm <span class="token function">install</span> nfs-client nfs-subdir-external-provisioner/nfs-subdir-external-provisioner --set nfs.server<span class="token operator">=</span>192.168.3.22 --set nfs.path<span class="token operator">=</span>/data/nfs --set image.repository<span class="token operator">=</span>hub.deri.org.cn/k8s/nfs-subdir-external-provisioner --set storageClass.name<span class="token operator">=</span>nfs-client --set storageClass.provisionerName<span class="token operator">=</span>cluster.local/nfs-client
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>nfs</tag>
        <tag>nfs-client</tag>
      </tags>
  </entry>
  <entry>
    <title>xml和bean互转</title>
    <url>/xml-he-bean-hu-zhuan/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>本文通过 <code>JDK</code> 中原生的 <code>JAXB</code> 实现 <code>XML</code> 和 <code>java bean</code> 之间的互转，不依赖任何第三方包.</p>
<ul>
<li><code>JAXBContext</code> 类，是应用的入口，用于管理XML/Java绑定信息</li>
<li><code>Marshaller</code> 接口，将Java对象序列化为XML数据</li>
<li><code>Unmarshaller</code> 接口，将XML数据反序列化为Java对象</li>
</ul>
<h3 id="常用Annotation"><a href="#常用Annotation" class="headerlink" title="常用Annotation"></a>常用Annotation</h3><ol>
<li><code>@XmlAccessorType(XmlAccessType.NONE)</code> ，控制字段或属性的序列化</li>
</ol>
<ul>
<li><code>FIELD</code>: JAXB 绑定类中的每个非静态、非瞬态字段将会自动绑定到 XML，除非由 XmlTransient 注释。</li>
<li><code>NONE</code>: 所有字段或属性都不能绑定到 XML，除非使用一些 JAXB 注释专门对它们进行注释。</li>
<li><code>PROPERTY</code>: JAXB 绑定类中的每个获取方法/设置方法对将会自动绑定到 XML，除非由 XmlTransient 注释。</li>
<li><code>PUBLIC_MEMBER</code>:每个公共获取方法/设置方法对和每个公共字段将会自动绑定到 XML，除非由 XmlTransient 注释。</li>
</ul>
<ol start="2">
<li><p><code>@XmlRootElement</code><br>xml 文件的根元素</p>
</li>
<li><p><code>@XmlElement</code><br>代表的生成xml的属性名称，一般用在属性上，或者set方法上。</p>
</li>
</ol>
<ul>
<li>用法 <code>@XmlElement(name="elementName")</code></li>
</ul>
<ol start="4">
<li><p><code>@XmlTransient</code><br>放在属性上，或者set方法上，代表不进行序列化</p>
</li>
<li><p><code>@XmlAttribute</code><br>该属性作为xml的attribute</p>
</li>
</ol>
<ul>
<li><code>@XmlAttribute(name = "NAME")</code></li>
</ul>
<ol start="6">
<li><p><code>@XmlAccessorOrder</code><br>控制JAXB 绑定类中属性和字段的排序</p>
</li>
<li><p><code>@XmlJavaTypeAdapter</code><br>使用定制的适配器（即扩展抽象类XmlAdapter并覆盖marshal()和unmarshal()方法），以序列化Java类为XML</p>
</li>
<li><p><code>@XmlElementWrapper</code><br>对于数组或集合（即包含多个元素的成员变量），生成一个包装该数组或集合的XML元素（称为包装器）</p>
</li>
</ol>
<h3 id="XML和Bean互转Util"><a href="#XML和Bean互转Util" class="headerlink" title="XML和Bean互转Util"></a>XML和Bean互转Util</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>JAXBContext<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>JAXBException<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>Marshaller<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>Unmarshaller<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>StringReader<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>StringWriter<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @ClassName: FormatUtil
 * @Description: XML 和 JSON 互转工具
 * @Author: wuzhiyong
 * @Time: 2023/4/4 14:39
 * @Version: v1.0
 **/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FormatUtil</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">xmlToBean</span><span class="token punctuation">(</span>String xml<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> tClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Object object <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            JAXBContext context <span class="token operator">=</span> JAXBContext<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>tClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
            Unmarshaller unmarshaller <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createUnmarshaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            object <span class="token operator">=</span> unmarshaller<span class="token punctuation">.</span><span class="token function">unmarshal</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JAXBException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> object<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 对象转xml
     *
     * @param obj
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">beanToXml</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        StringWriter writer <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            JAXBContext context <span class="token operator">=</span> JAXBContext<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Marshaller marshaller <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createMarshaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 格式化</span>
            marshaller<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>Marshaller<span class="token punctuation">.</span>JAXB_FORMATTED_OUTPUT<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 去掉生成xml的默认报文头 &lt;?xml version="1.0" encoding="utf-8" standalone="yes"?></span>
            marshaller<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>Marshaller<span class="token punctuation">.</span>JAXB_FRAGMENT<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            marshaller<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>Marshaller<span class="token punctuation">.</span>JAXB_ENCODING<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            marshaller<span class="token punctuation">.</span><span class="token function">marshal</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> writer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JAXBException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> writer <span class="token operator">!=</span> null <span class="token operator">?</span> writer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul>
<li>School.java</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@XmlRootElement</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"SCHOOL"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@XmlAccessorType</span><span class="token punctuation">(</span>XmlAccessType<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">School</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@XmlElement</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"ADDRESS"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String addr<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@XmlElement</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"NUMBER"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@XmlElement</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"TEACHERS"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> Teachers teachers<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>Teachers.java</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@XmlAccessorType</span><span class="token punctuation">(</span>XmlAccessType<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teachers</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@XmlElement</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"TEACHER"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Teacher<span class="token operator">></span> teachers<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>Teacher.java</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@XmlAccessorType</span><span class="token punctuation">(</span>XmlAccessType<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@XmlAttribute</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"NAME"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@XmlValue</span>
    <span class="token keyword">private</span> String desc<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>测试.java</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 测试数据</span>
        School school <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">School</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        school<span class="token punctuation">.</span><span class="token function">setAddr</span><span class="token punctuation">(</span><span class="token string">"Nanjing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        school<span class="token punctuation">.</span><span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>Teacher<span class="token operator">></span> teachers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        teachers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"高级教师"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        teachers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token string">"中级教师"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        teachers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">,</span> <span class="token string">"初级教师"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        school<span class="token punctuation">.</span><span class="token function">setTeachers</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Teachers</span><span class="token punctuation">(</span>teachers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">beanToXml</span><span class="token punctuation">(</span>school<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/**
         * 输出
         * &lt;SCHOOL>
         *     &lt;ADDRESS>Nanjing&lt;/ADDRESS>
         *     &lt;NUMBER>1000&lt;/NUMBER>
         *     &lt;TEACHERS>
         *         &lt;TEACHER NAME="张三">高级教师&lt;/TEACHER>
         *         &lt;TEACHER NAME="李四">中级教师&lt;/TEACHER>
         *         &lt;TEACHER NAME="王五">初级教师&lt;/TEACHER>
         *     &lt;/TEACHERS>
         * &lt;/SCHOOL>
         */</span>

        String xml <span class="token operator">=</span> <span class="token string">"&lt;SCHOOL>\n"</span> <span class="token operator">+</span>
                <span class="token string">"    &lt;ADDRESS>Nanjing&lt;/ADDRESS>\n"</span> <span class="token operator">+</span>
                <span class="token string">"    &lt;NUMBER>1000&lt;/NUMBER>\n"</span> <span class="token operator">+</span>
                <span class="token string">"    &lt;TEACHERS>\n"</span> <span class="token operator">+</span>
                <span class="token string">"        &lt;TEACHER NAME=\"张三\">高级教师&lt;/TEACHER>\n"</span> <span class="token operator">+</span>
                <span class="token string">"        &lt;TEACHER NAME=\"李四\">中级教师&lt;/TEACHER>\n"</span> <span class="token operator">+</span>
                <span class="token string">"        &lt;TEACHER NAME=\"王五\">初级教师&lt;/TEACHER>\n"</span> <span class="token operator">+</span>
                <span class="token string">"    &lt;/TEACHERS>\n"</span> <span class="token operator">+</span>
                <span class="token string">"&lt;/SCHOOL>"</span><span class="token punctuation">;</span>
        School school1 <span class="token operator">=</span> <span class="token function">xmlToBean</span><span class="token punctuation">(</span>xml<span class="token punctuation">,</span> School<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>school<span class="token punctuation">.</span><span class="token function">getAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>school<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>school<span class="token punctuation">.</span><span class="token function">getTeachers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/**
         * 输出
         * Nanjing
         * 1000
         * Teachers(teachers=[Teacher(name=张三, desc=高级教师), Teacher(name=李四, desc=中级教师), Teacher(name=王五, desc=初级教师)])
         */</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>xml</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot自适应redis配置</title>
    <url>/springboot-zi-gua-ying-redis-pei-zhi/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>通过配置实现redis连接单机还是哨兵.</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul>
<li>application.yml</li>
</ul>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true">#  引入的自定义配置告知是使用单机还是哨兵：standalone / sentinel / cluster</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>REDIS_TYPE<span class="token punctuation">:</span>sentinel<span class="token punctuation">}</span>
    <span class="token key atrule">port</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>REDIS_PORT<span class="token punctuation">:</span><span class="token number">6379</span><span class="token punctuation">}</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>REDIS_HOST<span class="token punctuation">:</span>192.168.3.27<span class="token punctuation">}</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>REDIS_PASSWORD<span class="token punctuation">}</span>
    <span class="token key atrule">database</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>REDIS_DATABASE<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">}</span>
    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>
      <span class="token key atrule">master</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>REDIS_SENTINEL_MASTER<span class="token punctuation">:</span>mymaster<span class="token punctuation">}</span>
      <span class="token key atrule">nodes</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>REDIS_SENTINEL_NODES<span class="token punctuation">:</span>192.168.3.17<span class="token punctuation">:</span><span class="token number">26379</span><span class="token punctuation">,</span>192.168.3.19<span class="token punctuation">:</span><span class="token number">26379</span><span class="token punctuation">,</span>192.168.3.20<span class="token punctuation">:</span><span class="token number">26379</span><span class="token punctuation">}</span>
      <span class="token key atrule">password</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>REDIS_SENTINEL_PASSWORD<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>RedisConfig.java</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>RedisProperties<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>lettuce<span class="token punctuation">.</span>LettuceConnectionFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>RedisSerializer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>StringRedisSerializer<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * redis 配置
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis.type}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String type<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    RedisProperties properties<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token function">keySerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span><span class="token function">keySerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span><span class="token function">valueSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span><span class="token function">valueSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> RedisSerializer<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">keySerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//使用Jackson序列化器</span>
    <span class="token keyword">private</span> StringRedisSerializer <span class="token function">valueSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 根据配置的type创建RedisConnectionFactory</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> RedisConnectionFactory <span class="token function">connectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token string">"standalone"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                RedisStandaloneConfiguration redisConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisStandaloneConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                redisConfig<span class="token punctuation">.</span><span class="token function">setHostName</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                redisConfig<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                redisConfig<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                redisConfig<span class="token punctuation">.</span><span class="token function">setDatabase</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LettuceConnectionFactory</span><span class="token punctuation">(</span>redisConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">case</span> <span class="token string">"sentinel"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                RedisProperties<span class="token punctuation">.</span>Sentinel sentinel <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getSentinel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                RedisSentinelConfiguration redisConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisSentinelConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                redisConfig<span class="token punctuation">.</span><span class="token function">master</span><span class="token punctuation">(</span>sentinel<span class="token punctuation">.</span><span class="token function">getMaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                redisConfig<span class="token punctuation">.</span><span class="token function">setSentinelPassword</span><span class="token punctuation">(</span>sentinel<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                redisConfig<span class="token punctuation">.</span><span class="token function">setDatabase</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span>String node <span class="token operator">:</span> sentinel<span class="token punctuation">.</span><span class="token function">getNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    String split<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    redisConfig<span class="token punctuation">.</span><span class="token function">addSentinel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedisNode</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LettuceConnectionFactory</span><span class="token punctuation">(</span>redisConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">case</span> <span class="token string">"cluster"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 集群的不常用，暂未实现,可以参考 https://www.zhuqiaolun.com/2020/11/1605606341401/1605606341401/ 实现</span>
                RedisClusterConfiguration redisConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisClusterConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"redis cluster config not support."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"redis config type not support."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>springboot</category>
        <category>redis</category>
      </categories>
  </entry>
  <entry>
    <title>springboot集成mqtt</title>
    <url>/springboot-ji-cheng-mqtt/</url>
    <content><![CDATA[<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--mqtt相关依赖--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.integration<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-integration-stream<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-integration<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.integration<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-integration-mqtt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul>
<li>application.yml</li>
</ul>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">mqtt</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true">#tcp://127.0.0.1:1883,tcp://192.168.60.133:1883</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> tcp<span class="token punctuation">:</span>//192.168.3.27<span class="token punctuation">:</span><span class="token number">1883</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
    <span class="token key atrule">clientId</span><span class="token punctuation">:</span> client<span class="token punctuation">-</span>test
    <span class="token key atrule">cleanSession</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">qos</span><span class="token punctuation">:</span> <span class="token number">2</span>
    <span class="token key atrule">retained</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">connectionTimeout</span><span class="token punctuation">:</span> <span class="token number">60</span>
    <span class="token key atrule">keepAliveInterval</span><span class="token punctuation">:</span> <span class="token number">30</span>
    <span class="token key atrule">subscribeTopics</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> test/<span class="token comment" spellcheck="true">#</span>
      <span class="token punctuation">-</span> topic/+
      <span class="token punctuation">-</span> top/+/iic
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>MqttConfig.java</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>ConfigurationProperties<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @ClassName: MqttConfig
 * @Description: TODO
 * @Author: wuzhiyong
 * @Time: 2023/4/13 14:37
 * @Version: v1.0
 **/</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.mqtt"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MqttConfig</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String clientId<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">///是否清空session，设置false表示服务器会保留客户端的连接记录（订阅主题，qos）,</span>
    <span class="token comment" spellcheck="true">// 客户端重连之后能获取到服务器在客户端断开连接期间推送的消息</span>
    <span class="token comment" spellcheck="true">//设置为true表示每次连接服务器都是以新的身份</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> cleanSession <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//QoS 0，最多交付一次。</span>
    <span class="token comment" spellcheck="true">//QoS 1，至少交付一次。</span>
    <span class="token comment" spellcheck="true">//QoS 2，只交付一次。</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> qos <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//发布者发布消息时，如果 Retained 标记被设置为 true，则该消息即是 MQTT 中的保留消息（Retained Message）。</span>
    <span class="token comment" spellcheck="true">// MQTT 服务器会为每个主题存储最新一条保留消息，以方便消息发布后才上线的客户端在订阅主题时仍可以接收到该消息。</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> retained <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 连接超时</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> connectionTimeout <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 设置心跳时间 单位为秒</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> keepAliveInterval <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 默认订阅的主题</span>
    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> subscribeTopics<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="连接-x2F-发布-x2F-订阅-x2F-重连"><a href="#连接-x2F-发布-x2F-订阅-x2F-重连" class="headerlink" title="连接/发布/订阅/重连"></a>连接/发布/订阅/重连</h3><ul>
<li>MqttService.java</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>eclipse<span class="token punctuation">.</span>paho<span class="token punctuation">.</span>client<span class="token punctuation">.</span>mqttv3<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>eclipse<span class="token punctuation">.</span>paho<span class="token punctuation">.</span>client<span class="token punctuation">.</span>mqttv3<span class="token punctuation">.</span>persist<span class="token punctuation">.</span>MemoryPersistence<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PostConstruct<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @ClassName: MqttService
 * @Description: TODO
 * @Author: wuzhiyong
 * @Time: 2023/4/13 14:39
 * @Version: v1.0
 **/</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MqttService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    MqttConfig config<span class="token punctuation">;</span>
    <span class="token keyword">private</span> MqttClient client<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MqttClient</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">getClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MemoryPersistence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            MqttConnectOptions options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MqttConnectOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            options<span class="token punctuation">.</span><span class="token function">setCleanSession</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">isCleanSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 设置自动重连</span>
            options<span class="token punctuation">.</span><span class="token function">setAutomaticReconnect</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            options<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            options<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            options<span class="token punctuation">.</span><span class="token function">setConnectionTimeout</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getConnectionTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            options<span class="token punctuation">.</span><span class="token function">setKeepAliveInterval</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getKeepAliveInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//设置遗嘱消息的话题，若客户端和服务器之间的连接意外断开，服务器将发布客户端的遗嘱信息</span>
<span class="token comment" spellcheck="true">//            options.setWill("willTopic", (config.getClientId() + "与服务器断开连接").getBytes(), 0, false);</span>
            client<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MqttCallBack</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> client<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            client<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span>String topic<span class="token punctuation">,</span> String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        MqttMessage mqttMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MqttMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mqttMessage<span class="token punctuation">.</span><span class="token function">setQos</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getQos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mqttMessage<span class="token punctuation">.</span><span class="token function">setRetained</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">isRetained</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mqttMessage<span class="token punctuation">.</span><span class="token function">setPayload</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        MqttTopic mqttTopic <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
        MqttDeliveryToken token<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            token <span class="token operator">=</span> mqttTopic<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>mqttMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
            token<span class="token punctuation">.</span><span class="token function">waitForCompletion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消息ID: {}, topic: {}, message {} 已发送."</span><span class="token punctuation">,</span> token<span class="token punctuation">.</span><span class="token function">getMessageId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> topic<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MqttException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"topic: {} message {} 发送异常."</span><span class="token punctuation">,</span> topic<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>MqttCallBack.java</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>eclipse<span class="token punctuation">.</span>paho<span class="token punctuation">.</span>client<span class="token punctuation">.</span>mqttv3<span class="token punctuation">.</span>IMqttDeliveryToken<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>eclipse<span class="token punctuation">.</span>paho<span class="token punctuation">.</span>client<span class="token punctuation">.</span>mqttv3<span class="token punctuation">.</span>MqttCallbackExtended<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>eclipse<span class="token punctuation">.</span>paho<span class="token punctuation">.</span>client<span class="token punctuation">.</span>mqttv3<span class="token punctuation">.</span>MqttClient<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>eclipse<span class="token punctuation">.</span>paho<span class="token punctuation">.</span>client<span class="token punctuation">.</span>mqttv3<span class="token punctuation">.</span>MqttMessage<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @ClassName: MqttCallBack
 * @Description: TODO
 * @Author: wuzhiyong
 * @Time: 2023/4/13 15:04
 * @Version: v1.0
 **/</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MqttCallBack</span> <span class="token keyword">implements</span> <span class="token class-name">MqttCallbackExtended</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> MqttConfig config<span class="token punctuation">;</span>
    <span class="token keyword">private</span> MqttClient client<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">MqttCallBack</span><span class="token punctuation">(</span>MqttConfig config<span class="token punctuation">,</span> MqttClient client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>config <span class="token operator">=</span> config<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>client <span class="token operator">=</span> client<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connectionLost</span><span class="token punctuation">(</span>Throwable throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"{} 断开连接."</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">getClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">messageArrived</span><span class="token punctuation">(</span>String topic<span class="token punctuation">,</span> MqttMessage message<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"收到 {} 消息 {}."</span><span class="token punctuation">,</span> topic<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deliveryComplete</span><span class="token punctuation">(</span>IMqttDeliveryToken token<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消息ID: {} 发送成功."</span><span class="token punctuation">,</span> token<span class="token punctuation">.</span><span class="token function">getMessageId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connectComplete</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> b<span class="token punctuation">,</span> String url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"MQTT {} 连接 {} 成功."</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">getClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">isConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span>String topic <span class="token operator">:</span> config<span class="token punctuation">.</span><span class="token function">getSubscribeTopics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    client<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">getQos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>springboot</category>
        <category>mqtt</category>
        <category>java</category>
      </categories>
  </entry>
</search>
