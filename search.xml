<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>flinkSQL用户自定义函数(UDX)</title>
      <link href="/2020/03/25/flinksql-yong-hu-zi-ding-yi-han-shu/"/>
      <url>/2020/03/25/flinksql-yong-hu-zi-ding-yi-han-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="UDX分类"><a href="#UDX分类" class="headerlink" title="UDX分类"></a>UDX分类</h3><p><a href="https://help.aliyun.com/document_detail/69463.html" target="_blank" rel="noopener">参考</a></p><table><thead><tr><th>UDX分类</th><th>描述</th></tr></thead><tbody><tr><td>UDF（User Defined Function）</td><td>用户自定义标量函数（User Defined Scalar Function）。其输入与输出是一对一的关系，即读入一行数据，写出一条输出值。</td></tr><tr><td>UDAF（User Defined Aggregation Function）</td><td>自定义聚合函数，其输入与输出是多对一的关系， 即将多条输入记录聚合成一条输出值。可以与SQL中的GROUP BY语句一起使用。</td></tr><tr><td>UDTF（User Defined Table-valued Function）</td><td>自定义表函数，调用一次函数输出多行或多列数据。</td></tr></tbody></table><h3 id="注册用户定义的函数"><a href="#注册用户定义的函数" class="headerlink" title="注册用户定义的函数"></a>注册用户定义的函数</h3><p>在大多数情况下，必须先注册用户定义的函数，然后才能在查询中使用它。没有必要为<code>Scala Table API</code>注册函数。</p><p><code>TableEnvironment</code>通过调用<code>registerFunction()</code>方法来注册函数。注册用户定义的函数时，会将其插入到函数目录中<code>TableEnvironment</code>，以便 <code>Table API</code>或<code>SQL</code>解析器可以识别并正确转换它。</p><p>请找到如何注册，如何调用每个类型的用户定义函数（详细的例子<code>ScalarFunction</code>，<code>TableFunction</code>和<code>AggregateFunction</code>下面的子会话）。</p><h3 id="自定义标量函数UDF"><a href="#自定义标量函数UDF" class="headerlink" title="自定义标量函数UDF"></a>自定义标量函数UDF</h3><h3 id="自定义聚合函数UDAF"><a href="#自定义聚合函数UDAF" class="headerlink" title="自定义聚合函数UDAF"></a>自定义聚合函数UDAF</h3><h3 id="自定义表值函数UDTF"><a href="#自定义表值函数UDTF" class="headerlink" title="自定义表值函数UDTF"></a>自定义表值函数UDTF</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flink </tag>
            
            <tag> udf </tag>
            
            <tag> udaf </tag>
            
            <tag> udtf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flinkSQL时间戳转换成日期格式</title>
      <link href="/2020/03/25/flinksql-shi-jian-chuo-zhuan-huan-cheng-ri-qi-ge-shi/"/>
      <url>/2020/03/25/flinksql-shi-jian-chuo-zhuan-huan-cheng-ri-qi-ge-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token property">"price"</span><span class="token operator">:</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token property">"ts"</span><span class="token operator">:</span><span class="token number">1585125854697</span><span class="token punctuation">,</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"math"</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token property">"price"</span><span class="token operator">:</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token property">"ts"</span><span class="token operator">:</span><span class="token number">1585125861687</span><span class="token punctuation">,</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"ph"</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"price"</span><span class="token operator">:</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token property">"ts"</span><span class="token operator">:</span><span class="token number">1585125862380</span><span class="token punctuation">,</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"cs"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>模拟数据如上所示，时间字段是13位时间戳格式，在flink sql中直接转成TIMESTAMP格式会有问题。</p><p>参考<a href="https://helpcdn.aliyun.com/knowledge_list/62717.html?spm=a2c4g.11186623.6.662.3f6ba3c50vKfDl" target="_blank" rel="noopener">阿里云日期函数</a><code>TO_TIMESTAMP</code>，文档中示例支持三种入参，</p><pre class="line-numbers language-SQL"><code class="language-SQL">TIMESTAMP TO_TIMESTAMP(BIGINT time)TIMESTAMP TO_TIMESTAMP(VARCHAR date)TIMESTAMP TO_TIMESTAMP(VARCHAR date, VARCHAR format)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实际使用<code>flink 1.10</code>版本测试，<code>TO_TIMESTAMP</code>不能直接将<code>BIGINT</code>转成<code>TIMESTAMP</code>.</p><pre class="line-numbers language-s"><code class="language-s">[ERROR] Could not execute SQL statement. Reason:org.apache.calcite.sql.validate.SqlValidatorException: Cannot apply 'TO_TIMESTAMP' to arguments of type 'TO_TIMESTAMP(<BIGINT>)'. Supported form(s): 'TO_TIMESTAMP(<CHARACTER>)' 'TO_TIMESTAMP(<CHARACTER>, <CHARACTER>)'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="创建UDF，并用SQL-client测试"><a href="#创建UDF，并用SQL-client测试" class="headerlink" title="创建UDF，并用SQL client测试"></a>创建UDF，并用SQL client测试</h3><p>创建一个<code>UDF</code>,传入一个<code>Long</code>型时间戳，返回<code>Timestamp</code>格式</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeUdf</span> <span class="token keyword">extends</span> <span class="token class-name">ScalarFunction</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long timestamp<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TimeUdf</span><span class="token punctuation">(</span>Long timestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>timestamp <span class="token operator">=</span> timestamp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Timestamp <span class="token function">eval</span><span class="token punctuation">(</span>Long timestamp<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Timestamp</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>UDF需要的依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--Table Program Dependencies--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flink-table-api-java-bridge_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.10.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flink-table-planner-blink_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.10.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flink-streaming-scala_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.10.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flink-table-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.10.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用maven打包成jar，并拷贝到flink目录lib中，重启flink。</p><pre class="line-numbers language-sh"><code class="language-sh">mvn clean package<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改<code>sql-client-defaults.yaml</code>配置</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">...</span><span class="token comment" spellcheck="true">#创建表</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> bookpojo    <span class="token key atrule">type</span><span class="token punctuation">:</span> source<span class="token punctuation">-</span>table    <span class="token key atrule">connector</span><span class="token punctuation">:</span>       <span class="token key atrule">property-version</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> kafka      <span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"universal"</span>      <span class="token key atrule">topic</span><span class="token punctuation">:</span> pojo      <span class="token key atrule">startup-mode</span><span class="token punctuation">:</span> earliest<span class="token punctuation">-</span>offset      <span class="token key atrule">properties</span><span class="token punctuation">:</span>        <span class="token key atrule">zookeeper.connect</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">2181</span>        <span class="token key atrule">bootstrap.servers</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">9092</span>        <span class="token key atrule">group.id</span><span class="token punctuation">:</span> testGroup    <span class="token key atrule">format</span><span class="token punctuation">:</span>       <span class="token key atrule">property-version</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> json      <span class="token comment" spellcheck="true"># derive-schema: true</span>      <span class="token key atrule">schema</span><span class="token punctuation">:</span> <span class="token string">"ROW&lt;id INT, type STRING, price INT, ts BIGINT>"</span>    <span class="token key atrule">schema</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> id        <span class="token key atrule">data-type</span><span class="token punctuation">:</span> INT      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> type        <span class="token key atrule">data-type</span><span class="token punctuation">:</span> STRING      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> price        <span class="token key atrule">data-type</span><span class="token punctuation">:</span> INT      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ts        <span class="token key atrule">data-type</span><span class="token punctuation">:</span> BIGINT<span class="token comment" spellcheck="true"># 创建UDF</span><span class="token key atrule">functions</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> TimeUdf    <span class="token key atrule">from</span><span class="token punctuation">:</span> class    <span class="token key atrule">class</span><span class="token punctuation">:</span> com.deri.udx.TimeUdf    <span class="token key atrule">constructor</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> BIGINT        <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token number">111111111</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动<code>SQL client</code></p><pre class="line-numbers language-sh"><code class="language-sh">./bin/sql-client.sh embedded<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>SQL查询</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 时间戳</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> bookpojo<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 转成日期</span><span class="token keyword">select</span> id<span class="token punctuation">,</span>price<span class="token punctuation">,</span><span class="token keyword">type</span><span class="token punctuation">,</span>TimeUdf<span class="token punctuation">(</span>ts<span class="token punctuation">)</span> <span class="token keyword">AS</span> ts <span class="token keyword">from</span> bookpojo<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flink </tag>
            
            <tag> udf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flink中状态管理</title>
      <link href="/2020/03/25/flink-zhong-zhuang-tai-guan-li/"/>
      <url>/2020/03/25/flink-zhong-zhuang-tai-guan-li/</url>
      
        <content type="html"><![CDATA[<h3 id="流处理状态管理"><a href="#流处理状态管理" class="headerlink" title="流处理状态管理"></a>流处理状态管理</h3><p>有状态的计算是流处理框架要实现的重要功能，因为稍复杂的流处理场景都需要记录状态，然后在新流入数据的基础上不断更新状态。下面的几个场景都需要使用流处理的状态功能：</p><ul><li>数据流中的数据有重复，我们想对重复数据去重，需要记录哪些数据已经流入过应用，当新数据流入时，根据已流入过的数据来判断去重。</li><li>检查输入流是否符合某个特定的模式，需要将之前流入的元素以状态的形式缓存下来。比如，判断一个温度传感器数据流中的温度是否在持续上升。</li><li>对一个时间窗口内的数据进行聚合分析，分析一个小时内某项指标的75分位或99分位的数值。</li><li>在线机器学习场景下，需要根据新流入数据不断更新机器学习的模型参数。</li></ul><h3 id="flink状态管理"><a href="#flink状态管理" class="headerlink" title="flink状态管理"></a>flink状态管理</h3><p>Flink的一个算子有多个子任务，每个子任务分布在不同实例上，我们可以把状态理解为某个算子子任务在其当前实例上的一个变量，变量记录了数据流的历史信息。当新数据流入时，我们可以结合历史信息来进行计算。实际上，Flink的状态是由算子的子任务来创建和管理的。一个状态更新和获取的流程如下图所示，一个算子子任务接收输入流，获取对应的状态，根据新的计算结果更新状态。一个简单的例子是对一个时间窗口内输入流的某个整数字段求和，那么当算子子任务接收到新元素时，会获取已经存储在状态中的数值，然后将当前输入加到状态上，并将状态数据更新。<br><img src="/images/flink20.png" alt="状态管理"></p><p>获取和更新状态的逻辑其实并不复杂，但流处理框架还需要解决以下几类问题：</p><ul><li>数据的产出要保证实时性，延迟不能太高。</li><li>需要保证数据不丢不重，恰好计算一次，尤其是当状态数据非常大或者应用出现故障需要恢复时，要保证状态的计算不出任何错误。</li><li>一般流处理任务都是7*24小时运行的，程序的可靠性非常高。</li></ul><p>基于上述要求，我们不能将状态直接交由内存管理，因为内存的容量是有限制的，当状态数据稍微大一些时，就会出现内存不够的问题。作为一个计算框架，Flink提供了有状态的计算，封装了一些底层的实现，比如状态的高效存储、Checkpoint和Savepoint持久化备份机制、计算资源扩缩容等问题。因为Flink接管了这些问题，开发者只需调用Flink API，这样可以更加专注于业务逻辑。</p><h3 id="Flink的几种状态类型"><a href="#Flink的几种状态类型" class="headerlink" title="Flink的几种状态类型"></a>Flink的几种状态类型</h3><h4 id="Managed-State和Raw-State"><a href="#Managed-State和Raw-State" class="headerlink" title="Managed State和Raw State"></a>Managed State和Raw State</h4><p>Flink有两种基本类型的状态：托管状态（Managed State）和原生状态（Raw State）。从名称中也能读出两者的区别：Managed State是由Flink管理的，Flink帮忙存储、恢复和优化，Raw State是开发者自己管理的，需要自己序列化。<br>| |Managed State|Raw State|<br>|—|—|—|<br>|状态管理方式|Flink Runtime自动管理，自动存储，自动恢复，内存管理优化|用户自己管理；需要自己序列化|<br>|状态数据结构|已知的数据结构：value，list，map…|字节数组：byte[]|<br>|推荐使用场景|大多数场景|自定义Operator时可使用|</p><p>两者的具体区别有：</p><ul><li>从状态管理的方式上来说，Managed State由Flink Runtime托管，状态是自动存储、自动恢复的，Flink在存储管理和持久化上做了一些优化。当我们横向伸缩，或者说我们修改Flink应用的并行度时，状态也能自动重新分布到多个并行实例上。Raw State是用户自定义的状态。</li><li>从状态的数据结构上来说，Managed State支持了一系列常见的数据结构，如ValueState、ListState、MapState等。Raw State只支持字节，任何上层数据结构需要序列化为字节数组。使用时，需要用户自己序列化，以非常底层的字节数组形式存储，Flink并不知道存储的是什么样的数据结构。</li><li>从具体使用场景来说，绝大多数的算子都可以通过继承Rich函数类或其他提供好的接口类，在里面使用Managed State。Raw State是在已有算子和Managed State不够用时，用户自定义算子时使用。</li></ul><h4 id="Keyed-State和Operator-State"><a href="#Keyed-State和Operator-State" class="headerlink" title="Keyed State和Operator State"></a>Keyed State和Operator State</h4><p>对Managed State继续细分，它又有两种类型：Keyed State和Operator State。</p><h4 id="Keyed-State"><a href="#Keyed-State" class="headerlink" title="Keyed State"></a><strong>Keyed State</strong></h4><p>Keyed State是<code>KeyedStream</code>上的状态。假如输入流按照id为Key进行了keyBy分组，形成一个KeyedStream，数据流中所有id为1的数据共享一个状态，可以访问和更新这个状态，以此类推，每个Key对应一个自己的状态。下图展示了Keyed State，因为一个算子子任务可以处理一到多个Key，算子子任务1处理了两种Key，两种Key分别对应自己的状态。</p><p><img src="/images/flink21.png" alt="状态管理"></p><h4 id="Operator-State"><a href="#Operator-State" class="headerlink" title="Operator State"></a><strong>Operator State</strong></h4><p>Operator State可以用在所有算子上，每个算子子任务或者说每个算子实例共享一个状态，流入这个算子子任务的数据可以访问和更新这个状态。下图展示了Operator State，算子子任务1上的所有数据可以共享第一个Operator State，以此类推，每个算子子任务上的数据共享自己的状态。</p><p><img src="/images/flink22.png" alt="状态管理"></p><p>无论是Keyed State还是Operator State，Flink的状态都是基于本地的，即每个算子子任务维护着这个算子子任务对应的状态存储，算子子任务之间的状态不能相互访问。</p><p>在之前各算子的介绍中曾提到，为了自定义Flink的算子，我们可以重写Rich Function接口类，比如<code>RichFlatMapFunction</code>。使用Keyed State时，我们也可以通过重写<code>Rich Function</code>接口类，在里面创建和访问状态。对于Operator State，我们还需进一步实现<code>CheckpointedFunction</code>接口。</p><table><thead><tr><th></th><th>Keyed State</th><th>Operator State</th></tr></thead><tbody><tr><td>适用算子类型</td><td>只适用<code>keyedStream</code>上的算子</td><td>适用所有算子</td></tr><tr><td>状态分配</td><td>每一个key对应一个状态</td><td>一个算子上的子任务对应一个状态</td></tr><tr><td>创建和访问方式</td><td>重写<code>Rich Function</code>,通过里面的<code>RuntimeContext</code>访问</td><td>实现<code>CheckpointedFunction</code>或<code>ListCheckpointed</code>接口</td></tr><tr><td>横向扩展</td><td>状态随着key自动在多个算子子任务上迁移</td><td>有多种状态重新分配的方式:均匀分配、合并后每个得到全量</td></tr><tr><td>支持的数据结构</td><td><code>ValueState</code>、<code>ListState</code>、<code>MapState</code>、<code>ReducingState</code>等</td><td><code>ListState</code></td></tr></tbody></table><h4 id="几种KeyedState之间的关系"><a href="#几种KeyedState之间的关系" class="headerlink" title="几种KeyedState之间的关系"></a>几种KeyedState之间的关系</h4><p><img src="/images/flink23.png" alt="状态管理"></p><h4 id="几种KeyedState之间的差异"><a href="#几种KeyedState之间的差异" class="headerlink" title="几种KeyedState之间的差异"></a>几种KeyedState之间的差异</h4><p><img src="/images/flink24.png" alt="状态管理"></p><h3 id="状态的保存与恢复"><a href="#状态的保存与恢复" class="headerlink" title="状态的保存与恢复"></a>状态的保存与恢复</h3><p><img src="/images/flink25.png" alt="状态管理"></p><h3 id="可选的状态存储方式"><a href="#可选的状态存储方式" class="headerlink" title="可选的状态存储方式"></a>可选的状态存储方式</h3><h4 id="MemoryStateBackend"><a href="#MemoryStateBackend" class="headerlink" title="MemoryStateBackend"></a>MemoryStateBackend</h4><p>Checkpoint 的存储，第一种是内存存储，即 <code>MemoryStateBackend</code>，构造方法是设置最大的StateSize，选择是否做异步快照，这种存储状态本身存储在 TaskManager 节点也就是执行节点内存中的，因为内存有容量限制，所以单个 State maxStateSize 默认 5 M，且需要注意 maxStateSize &lt;= akka.framesize 默认 10 M。Checkpoint 存储在 JobManager 内存中，因此总大小不超过 JobManager 的内存。<strong>推荐使用的场景为：本地测试、几乎无状态的作业，比如 ETL、JobManager 不容易挂，或挂掉影响不大的情况。不推荐在生产场景使用</strong>。</p><h4 id="FsStateBackend"><a href="#FsStateBackend" class="headerlink" title="FsStateBackend"></a>FsStateBackend</h4><p>在文件系统上的 <code>FsStateBackend</code> ，构建方法是需要传一个文件路径和是否异步快照。State 依然在 TaskManager 内存中，但不会像 MemoryStateBackend 有 5 M 的设置上限，Checkpoint 存储在外部文件系统（本地或 HDFS），打破了总大小 Jobmanager 内存的限制。容量限制上，单 TaskManager 上 State 总量不超过它的内存，总大小不超过配置的文件系统容量。<strong>推荐使用的场景、常规使用状态的作业、例如分钟级窗口聚合或 join、需要开启HA的作业</strong>。</p><h4 id="RocksDBStateBacked"><a href="#RocksDBStateBacked" class="headerlink" title="RocksDBStateBacked"></a>RocksDBStateBacked</h4><p>还有一种存储为 <code>RocksDBStateBackend</code> ，RocksDB 是一个 key/value 的内存存储系统，和其他的 key/value 一样，先将状态放到内存中，如果内存快满时，则写入到磁盘中，但需要注意 <strong>RocksDB 不支持同步的 Checkpoint</strong>，构造方法中没有同步快照这个选项。不过 <strong>RocksDB 支持增量的 Checkpoint</strong>，也是目前唯一增量 Checkpoint 的 Backend，意味着并不需要把所有 sst 文件上传到 Checkpoint 目录，仅需要上传新生成的 sst 文件即可。它的 Checkpoint 存储在外部文件系统（本地或HDFS），其容量限制只要单个 TaskManager 上 State 总量不超过它的内存+磁盘，单 Key最大 2G，总大小不超过配置的文件系统容量即可。<strong>推荐使用的场景为：超大状态的作业，例如天级窗口聚合、需要开启 HA 的作业、最好是对状态读写性能要求不高的作业</strong>。</p><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ul><li><p><a href="https://mp.weixin.qq.com/s/JLl-LMjcnVrIyHCCq7Yv7A" target="_blank" rel="noopener">Flink状态管理详解：Keyed State和Operator List State深度解析</a></p></li><li><p><a href="https://ververica.cn/developers/state-management/" target="_blank" rel="noopener">Apache Flink 零基础入门（七）：状态管理及容错机制</a></p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flink </tag>
            
            <tag> 状态管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flink中ProcessFunction</title>
      <link href="/2020/03/25/flink-zhong-processfunction/"/>
      <url>/2020/03/25/flink-zhong-processfunction/</url>
      
        <content type="html"><![CDATA[<h3 id="ProcessFunction简介"><a href="#ProcessFunction简介" class="headerlink" title="ProcessFunction简介"></a>ProcessFunction简介</h3><p><code>ProcessFunction</code>是flink中最底层的API。<br><img src="/images/flink26.png" alt="low-api"></p><p>Flink的一些算子和函数能够进行一些时间上的操作，但是不能获取算子当前的<code>Processing Time</code>或者是<code>Watermark时间戳</code>，调用起来简单但功能相对受限。如果想获取数据流中Watermark的时间戳，或者在时间上前后穿梭，需要使用<code>ProcessFunction</code>系列函数，它们是Flink体系中<strong>最底层的API</strong>，提供了对数据流<strong>更细粒度的操作权限</strong>。Flink SQL是基于这些函数实现的，一些需要高度个性化的业务场景也需要使用这些函数。</p><p>目前，这个系列函数主要包括<code>KeyedProcessFunction</code>、<code>ProcessFunction</code>、<code>CoProcessFunction</code>、<code>KeyedCoProcessFunction</code>、<code>ProcessJoinFunction</code>和<code>ProcessWindowFunction</code>等多种函数，这些函数各有侧重，但核心功能比较相似，主要包括两点：</p><ul><li>状态：我们可以在这些函数中访问和更新<code>Keyed State</code>。</li><li>定时器（Timer）：像定闹钟一样设置定时器，我们可以在时间维度上设计更复杂的业务逻辑。使用前先在Timer中注册一个未来的时间，当这个时间到达，闹钟会“响起”，程序会执行一个回调函数，回调函数中执行一定的业务逻辑。</li></ul><h3 id="ProcessFunction使用"><a href="#ProcessFunction使用" class="headerlink" title="ProcessFunction使用"></a>ProcessFunction使用</h3><p><code>ProcessFunction</code>有两个重要的接口<code>processElement</code>和<code>onTimer</code></p><p>其中processElement函数在源码中的Java签名如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 处理数据流中的一条元素</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">processElement</span><span class="token punctuation">(</span>I value<span class="token punctuation">,</span> Context ctx<span class="token punctuation">,</span> Collector<span class="token operator">&lt;</span>O<span class="token operator">></span> out<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>processElement</code>方法处理数据流中的一条元素，并通过<code>Collector&lt;O&gt;</code>输出出来。<code>Context</code>是它的区别于<code>FlatMapFunction</code>等普通函数的特色，<strong>开发者可以通过Context来获取时间戳，访问<code>TimerService</code>，设置Timer</strong>。</p><p>另外一个接口是<code>onTimer</code>：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 时间到达后的回调函数</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTimer</span><span class="token punctuation">(</span><span class="token keyword">long</span> timestamp<span class="token punctuation">,</span> OnTimerContext ctx<span class="token punctuation">,</span> Collector<span class="token operator">&lt;</span>O<span class="token operator">></span> out<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这是一个回调函数，当到了“闹钟”时间，<code>Flink</code>会调用<code>onTimer</code>，并执行一些业务逻辑。这里也有一个参数<code>OnTimerContext</code>，它实际上是继承了前面的<code>Context</code>，与<code>Context</code>几乎相同。</p><p>使用Timer的方法主要逻辑为：</p><ol><li>在<code>processElement</code>方法中通过<code>Context</code>注册一个未来的时间戳<code>t</code>。这个时间戳的语义可以是<code>Processing Time</code>，也可以是<code>Event Time</code>，根据业务需求来选择。</li><li>在<code>onTimer</code>方法中实现一些逻辑，到达<code>t</code>时刻，<code>onTimer</code>方法被自动调用。</li></ol><p><strong>获取、注册和删除<code>Timer</code></strong></p><ul><li><p>从<code>Context</code>中，我们可以获取一个<code>TimerService</code>，这是一个访问时间戳和Timer的接口。</p></li><li><p>我们可以通过<code>Context.timerService.registerProcessingTimeTimer</code>或<code>Context.timerService.registerEventTimeTimer</code>这两个方法来注册<code>Timer</code>，只需要传入一个时间戳即可。</p></li><li><p>我们可以通过<code>Context.timerService.deleteProcessingTimeTimer</code>和<code>Context.timerService.deleteEventTimeTimer</code>来删除之前注册的Timer。</p></li><li><p>此外，还可以从中获取当前的时间戳：<code>Context.timerService.currentProcessingTime</code>和<code>Context.timerService.currentWatermark</code>。</p></li></ul><blockquote><p>注意，我们只能在KeyedStream上注册Timer。每个Key下可以使用不同的时间戳注册不同的Timer，但是每个Key的每个时间戳只能注册一个Timer。如果想在一个DataStream上应用Timer，可以将所有数据映射到一个伪造的Key上，但这样所有数据会流入一个算子子任务。</p></blockquote><blockquote><p>Flink 框架会自动忽略同一时间的重复注册Timer。</p></blockquote><h3 id="使用ProcessFunction实现Join"><a href="#使用ProcessFunction实现Join" class="headerlink" title="使用ProcessFunction实现Join"></a>使用ProcessFunction实现Join</h3><p>如果想从更细的粒度上实现两个数据流的<code>Join</code>，可以使用<code>CoProcessFunction</code>或<code>KeyedCoProcessFunction</code>。这两个函数都有<code>processElement1</code>和<code>processElement2</code>方法，分别对第一个数据流和第二个数据流的每个元素进行处理。两个数据流的数据类型以及输出类型可以互不相同。尽管数据来自两个不同的流，但是他们可以共享同样的状态，所以可以参考下面的逻辑来实现<code>Join</code>：</p><ul><li>创建一到多个状态，两个数据流都能访问到这些状态，这里以状态<code>a</code>为例。</li><li><code>processElement1</code>方法处理第一个数据流，更新状态<code>a</code>。</li><li><code>processElement2</code>方法处理第二个数据流，根据状态<code>a</code>中的数据，生成相应的输出。</li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://juejin.im/post/5e3a7ebfe51d4526e03f8f8f" target="_blank" rel="noopener">ProcessFunction：Flink最底层API使用教程</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8中List&lt;&lt;Obj&gt;&gt;排序</title>
      <link href="/2020/03/24/java8-list-pai-xu/"/>
      <url>/2020/03/24/java8-list-pai-xu/</url>
      
        <content type="html"><![CDATA[<h3 id="List排序问题"><a href="#List排序问题" class="headerlink" title="List排序问题"></a>List排序问题</h3><p><code>java8</code>中引入了流的概念，还有<code>Lambda</code>函数的概念，那么针对<code>List&lt;Object&gt;</code>排序有哪些方法呢？</p><p>首先我们创建一个<code>User</code>实体类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> String name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//重写了toString方法，方便打印观察</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"User{"</span> <span class="token operator">+</span>                    <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                    <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                    <span class="token string">"}\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建<code>List&lt;User&gt;</code>对象</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"zhang1"</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"zhang2"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"zhang3"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"zhang4"</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"zhang5"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"zhang6"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们想根据年龄来做个排序</p><p>方法一：</p><pre class="line-numbers language-java"><code class="language-java">users<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>User o1<span class="token punctuation">,</span> User o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> o1<span class="token punctuation">.</span>age <span class="token operator">-</span> o2<span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>print<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有了<code>Lambda</code>，直接可以简写成</p><pre class="line-numbers language-java"><code class="language-java">users<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> o1<span class="token punctuation">.</span>age <span class="token operator">-</span> o2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>print<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>方法二：</p><pre class="line-numbers language-java"><code class="language-java">users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> o1<span class="token punctuation">.</span>age <span class="token operator">-</span> o2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>print<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上都可以实现<code>List&lt;User&gt;</code>根据年龄排序，打印结果</p><pre class="line-numbers language-json"><code class="language-json">User<span class="token punctuation">{</span>name='zhang6'<span class="token punctuation">,</span> age=<span class="token number">12</span><span class="token punctuation">}</span>User<span class="token punctuation">{</span>name='zhang1'<span class="token punctuation">,</span> age=<span class="token number">14</span><span class="token punctuation">}</span>User<span class="token punctuation">{</span>name='zhang3'<span class="token punctuation">,</span> age=<span class="token number">16</span><span class="token punctuation">}</span>User<span class="token punctuation">{</span>name='zhang5'<span class="token punctuation">,</span> age=<span class="token number">18</span><span class="token punctuation">}</span>User<span class="token punctuation">{</span>name='zhang2'<span class="token punctuation">,</span> age=<span class="token number">25</span><span class="token punctuation">}</span>User<span class="token punctuation">{</span>name='zhang4'<span class="token punctuation">,</span> age=<span class="token number">27</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8 </tag>
            
            <tag> list </tag>
            
            <tag> stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flink结合kafka实时处理分析案例</title>
      <link href="/2020/03/23/flink-jie-he-kafka-shi-shi-chu-li-fen-xi-an-li/"/>
      <url>/2020/03/23/flink-jie-he-kafka-shi-shi-chu-li-fen-xi-an-li/</url>
      
        <content type="html"><![CDATA[<h3 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h3><p>本案例主要结合kafka，实现：</p><ul><li>通过flink，向kafka中写入模拟数据book贩卖信息，包括书籍id、类型、价格、时间戳；</li><li>flink任务每五秒输出最近五分钟，根据id，不同书籍卖出的总价。</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="BookPojo-java"><a href="#BookPojo-java" class="headerlink" title="BookPojo.java"></a>BookPojo.java</h4><p>书籍book基本类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>deri<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>util<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @ClassName: BookPojo * @Description: TODO * @Author: wuzhiyong * @Time: 2020/3/20 9:48 * @Version: v1.0 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookPojo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String type<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> price<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> timestamp<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BookPojo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> type<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setType</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">int</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> timestamp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTimestamp</span><span class="token punctuation">(</span><span class="token keyword">long</span> timestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>timestamp <span class="token operator">=</span> timestamp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Books-java"><a href="#Books-java" class="headerlink" title="Books.java"></a>Books.java</h4><p>创建模拟数据，6本书，随机返回一本书。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>deri<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>util<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @ClassName: Books * @Description: TODO * @Author: wuzhiyong * @Time: 2020/3/20 10:52 * @Version: v1.0 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Books</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> BookPojo <span class="token function">getBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>BookPojo<span class="token operator">></span> bookPojos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">{</span>            BookPojo book1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookPojo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            book1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            book1<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"cs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            book1<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bookPojos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">{</span>            BookPojo book1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookPojo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            book1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            book1<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"math"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            book1<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bookPojos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">{</span>            BookPojo book1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookPojo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            book1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            book1<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"ph"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            book1<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bookPojos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">{</span>            BookPojo book1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookPojo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            book1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            book1<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"cs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            book1<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bookPojos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">{</span>            BookPojo book1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookPojo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            book1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            book1<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"math"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            book1<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bookPojos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">{</span>            BookPojo book1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookPojo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            book1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            book1<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"ph"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            book1<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bookPojos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> bookPojos<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="MyPojoSource-java"><a href="#MyPojoSource-java" class="headerlink" title="MyPojoSource.java"></a>MyPojoSource.java</h4><p>flink数据源，随机返回一本书并设置当时时间戳当作流水，并随机暂停几秒钟。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>deri<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>util<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>source<span class="token punctuation">.</span>SourceFunction<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @ClassName: MyNoParalleSource * @Description: TODO * @Author: wuzhiyong * @Time: 2020/3/4 10:15 * @Version: v1.0 **/</span><span class="token comment" spellcheck="true">//使用并行度为1的source</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPojoSource</span> <span class="token keyword">implements</span> <span class="token class-name">SourceFunction</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//1</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isRunning <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>SourceContext<span class="token operator">&lt;</span>String<span class="token operator">></span> ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>isRunning<span class="token punctuation">)</span> <span class="token punctuation">{</span>            BookPojo book <span class="token operator">=</span> Books<span class="token punctuation">.</span><span class="token function">getBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            book<span class="token punctuation">.</span><span class="token function">setTimestamp</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctx<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        isRunning <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="KafkaPojoProducer-java"><a href="#KafkaPojoProducer-java" class="headerlink" title="KafkaPojoProducer.java"></a>KafkaPojoProducer.java</h4><p>flink将书籍贩卖流水转成json字符串，输入到kafka中。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>deri<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>deri<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>util<span class="token punctuation">.</span>MyPojoSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>SimpleStringSchema<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStreamSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>connectors<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>FlinkKafkaProducer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @ClassName: KafkaProducer * @Description: TODO * @Author: wuzhiyong * @Time: 2020/3/4 10:16 * @Version: v1.0 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaPojoProducer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DataStreamSource<span class="token operator">&lt;</span>String<span class="token operator">></span> text <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">addSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyPojoSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*设置并行度*/</span><span class="token punctuation">;</span>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"bootstrap.servers"</span><span class="token punctuation">,</span> <span class="token string">"192.168.41.128:9092"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//new FlinkKafkaProducer("topn",new KeyedSerializationSchemaWrapper(new SimpleStringSchema()),properties,FlinkKafkaProducer.Semantic.EXACTLY_ONCE);</span>        FlinkKafkaProducer<span class="token operator">&lt;</span>String<span class="token operator">></span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlinkKafkaProducer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"pojosource"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SimpleStringSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*        //event-timestamp事件的发生时间        producer.setWriteTimestampToKafka(true);*/</span>        text<span class="token punctuation">.</span><span class="token function">addSink</span><span class="token punctuation">(</span>producer<span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"POJO Kafka Source"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="KafkaPojoStream-java"><a href="#KafkaPojoStream-java" class="headerlink" title="KafkaPojoStream.java"></a>KafkaPojoStream.java</h4><p>从上面pojosource主题中，获取书籍贩卖流水，每10秒打印出过去5分钟每种书贩卖的总价。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>deri<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>deri<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>util<span class="token punctuation">.</span>BookPojo<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>FlatMapFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>ReduceFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>SimpleStringSchema<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>typeinfo<span class="token punctuation">.</span>Types<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Tuple2<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>typeutils<span class="token punctuation">.</span>TupleTypeInfo<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>TimeCharacteristic<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>timestamps<span class="token punctuation">.</span>AscendingTimestampExtractor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Time<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>connectors<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>FlinkKafkaConsumer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>connectors<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>FlinkKafkaProducer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collector<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @ClassName: KafkaWordCount * @Description: 从kafka主题中读取数据，进行word count * @Author: wuzhiyong * @Time: 2020/3/18 15:05 * @Version: v1.0 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaPojoStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建Flink执行环境</span>        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"bootstrap.servers"</span><span class="token punctuation">,</span> <span class="token string">"192.168.41.128:9092"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"group.id"</span><span class="token punctuation">,</span> <span class="token string">"flink-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String inputTopic <span class="token operator">=</span> <span class="token string">"pojosource"</span><span class="token punctuation">;</span>        String outputTopic <span class="token operator">=</span> <span class="token string">"pojosink"</span><span class="token punctuation">;</span>        FlinkKafkaConsumer<span class="token operator">&lt;</span>String<span class="token operator">></span> consumer <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">FlinkKafkaConsumer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>inputTopic<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SimpleStringSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        FlinkKafkaProducer<span class="token operator">&lt;</span>String<span class="token operator">></span> producer <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">FlinkKafkaProducer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>outputTopic<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SimpleStringSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置EventTime，结合assignTimestampsAndWatermarks一起使用</span>        env<span class="token punctuation">.</span><span class="token function">setStreamTimeCharacteristic</span><span class="token punctuation">(</span>TimeCharacteristic<span class="token punctuation">.</span>EventTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">addSource</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> bookPojoDataStream <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> BookPojo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">assignTimestampsAndWatermarks</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AscendingTimestampExtractor</span><span class="token operator">&lt;</span>BookPojo<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">extractAscendingTimestamp</span><span class="token punctuation">(</span>BookPojo bookPojo<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> bookPojo<span class="token punctuation">.</span><span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//                .filter(bookPojo -> bookPojo.getType().equalsIgnoreCase("cs"))</span>                <span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//                .timeWindow(Time.seconds(10))</span>                <span class="token comment" spellcheck="true">//设置一个5分钟滑动窗口，每10秒滑动一次</span>                <span class="token punctuation">.</span><span class="token function">timeWindow</span><span class="token punctuation">(</span>Time<span class="token punctuation">.</span><span class="token function">minutes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Time<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//这边使用更加通用的reduce处理，累加书籍贩卖总流水</span>                <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReduceFunction</span><span class="token operator">&lt;</span>BookPojo<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> BookPojo <span class="token function">reduce</span><span class="token punctuation">(</span>BookPojo bookPojo<span class="token punctuation">,</span> BookPojo t1<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        BookPojo book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookPojo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        book<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>bookPojo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        book<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>bookPojo<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> t1<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        book<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        book<span class="token punctuation">.</span><span class="token function">setTimestamp</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span><span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> book<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        bookPojoDataStream.addSink(producer);</span>        bookPojoDataStream<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// execute</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"kafka streaming pojo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Tokenizer</span> <span class="token keyword">implements</span> <span class="token class-name">FlatMapFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">>></span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">flatMap</span><span class="token punctuation">(</span>String value<span class="token punctuation">,</span> Collector<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">>></span> out<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> tokens <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\W+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String token <span class="token operator">:</span> tokens<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--Licensed to the Apache Software Foundation (ASF) under oneor more contributor license agreements.  See the NOTICE filedistributed with this work for additional informationregarding copyright ownership.  The ASF licenses this fileto you under the Apache License, Version 2.0 (the"License"); you may not use this file except in compliancewith the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing,software distributed under the License is distributed on an"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANYKIND, either express or implied.  See the License for thespecific language governing permissions and limitationsunder the License.--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.deri<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flink_kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Flink Quickstart Job<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://www.myorganization.org<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>flink.version</span><span class="token punctuation">></span></span>1.10.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>flink.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scala.binary.version</span><span class="token punctuation">></span></span>2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scala.binary.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>${java.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>${java.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>apache.snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Apache Development Snapshot Repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://repository.apache.org/content/repositories/snapshots/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flink-connector-kafka_${scala.binary.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${flink.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Apache Flink dependencies --></span>        <span class="token comment" spellcheck="true">&lt;!-- These dependencies are provided, because they should not be packaged into the JAR file. --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flink-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${flink.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flink-streaming-java_${scala.binary.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${flink.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.54<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Add connector dependencies here. They must be in the default scope (compile). --></span>        <span class="token comment" spellcheck="true">&lt;!-- Example:        &lt;dependency>            &lt;groupId>org.apache.flink&lt;/groupId>            &lt;artifactId>flink-connector-kafka-0.10_${scala.binary.version}&lt;/artifactId>            &lt;version>${flink.version}&lt;/version>        &lt;/dependency>        --></span>        <span class="token comment" spellcheck="true">&lt;!-- Add logging framework, to produce console output when running in the IDE. --></span>        <span class="token comment" spellcheck="true">&lt;!-- These dependencies are excluded from the application JAR by default. --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- Java Compiler --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>${java.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>${java.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- We use the maven-shade plugin to create a fat jar that contains all necessary dependencies. --></span>            <span class="token comment" spellcheck="true">&lt;!-- Change the value of &lt;mainClass>...&lt;/mainClass> if your program entry point changes. --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-shade-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!-- Run shade goal on package phase --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>shade<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactSet</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>org.apache.flink:force-shading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>com.google.code.findbugs:jsr305<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>org.slf4j:*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>log4j:*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactSet</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filters</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>                                    <span class="token comment" spellcheck="true">&lt;!-- Do not copy the signatures in the META-INF folder.                                    Otherwise, this might cause SecurityExceptions when using the JAR. --></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifact</span><span class="token punctuation">></span></span>*:*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifact</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>META-INF/*.SF<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>META-INF/*.DSA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>META-INF/*.RSA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filters</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformers</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformer</span> <span class="token attr-name">implementation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.maven.plugins.shade.resource.ManifestResourceTransformer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">></span></span>com.deri.kafka.KafkaProducer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transformer</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transformers</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginManagement</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- This improves the out-of-the-box experience in Eclipse by resolving some warnings. --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.eclipse.m2e<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lifecycle-mapping<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lifecycleMappingMetadata</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginExecutions</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginExecution</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginExecutionFilter</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-shade-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>versionRange</span><span class="token punctuation">></span></span>[3.1.1,)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>versionRange</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>shade<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginExecutionFilter</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ignore</span><span class="token punctuation">/></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginExecution</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginExecution</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginExecutionFilter</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>versionRange</span><span class="token punctuation">></span></span>[3.1,)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>versionRange</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>testCompile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginExecutionFilter</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ignore</span><span class="token punctuation">/></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginExecution</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginExecutions</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lifecycleMappingMetadata</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flink </tag>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git拉取github项目比较慢解决办法</title>
      <link href="/2020/03/23/git-la-qu-github-xiang-mu-bi-jiao-man-jie-jue-ban-fa/"/>
      <url>/2020/03/23/git-la-qu-github-xiang-mu-bi-jiao-man-jie-jue-ban-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>国内git clone github项目由于网络原因比较慢</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>如</p><pre><code>git clone https://github.com/apache/flink.git</code></pre><p>改成</p><pre><code>git clone https://github.com.cnpmjs.org/apache/flink.git</code></pre><p>亲测有效。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flink常用算子及代码</title>
      <link href="/2020/03/19/flink-chang-yong-suan-zi-ji-dai-ma/"/>
      <url>/2020/03/19/flink-chang-yong-suan-zi-ji-dai-ma/</url>
      
        <content type="html"><![CDATA[<p>以下列举下常用的算子，用到的代码例子都是Flink监听9000端口做为数据源。以下方法可以启动一个9000的socket端口服务。</p><p>Linux平台上可以使用</p><pre class="line-numbers language-sh"><code class="language-sh">bashnc -lk 9000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果是 Windows 平台，可以通过 <code>https://nmap.org/ncat/</code> 安装 ncat 然后运行：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">bash</span>ncat -lk 9000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>map可以理解为映射，对每个元素进行一定的变换后，映射为另一个元素。</p><p>举例1：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> operators<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个例子是监听9000 socket端口，对于发送来的数据，以\n为分隔符分割后进行处理，</span><span class="token comment" spellcheck="true">//将分割后的每个元素，添加上一个字符串后，打印出来。</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.获取执行环境配置信息</span>        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.定义加载或创建数据源（source）,监听9000端口的socket消息</span>        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> textStream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.map操作。</span>        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> textStream<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".您输入的是："</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.打印输出sink</span>        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.开始执行</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例2：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>dataStreamMapOperator<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>UserAction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>MapFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStreamSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>SingleOutputStreamOperator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Summary: *      Map: 一对一转换 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataStreamMapOperator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输入: 用户行为。某个用户在某个时刻点击或浏览了某个商品，以及商品的价格。</span>        DataStreamSource<span class="token operator">&lt;</span>UserAction<span class="token operator">></span> source <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">fromCollection</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">,</span> <span class="token number">1293984000</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"productID1"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID2"</span><span class="token punctuation">,</span> <span class="token number">1293984001</span><span class="token punctuation">,</span> <span class="token string">"browse"</span><span class="token punctuation">,</span> <span class="token string">"productID2"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">,</span> <span class="token number">1293984002</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"productID1"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 转换: 商品的价格乘以8</span>        SingleOutputStreamOperator<span class="token operator">&lt;</span>UserAction<span class="token operator">></span> result <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MapFunction</span><span class="token operator">&lt;</span>UserAction<span class="token punctuation">,</span> UserAction<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> UserAction <span class="token function">map</span><span class="token punctuation">(</span>UserAction value<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token keyword">int</span> newPrice <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">getProductPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">getUserID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">getEventTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">getEventType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">getProductID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newPrice<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出: 输出到控制台</span>        <span class="token comment" spellcheck="true">// UserAction(userID=userID1, eventTime=1293984002, eventType=click, productID=productID1, productPrice=80)</span>        <span class="token comment" spellcheck="true">// UserAction(userID=userID1, eventTime=1293984000, eventType=click, productID=productID1, productPrice=80)</span>        <span class="token comment" spellcheck="true">// UserAction(userID=userID2, eventTime=1293984001, eventType=browse, productID=productID2, productPrice=64)</span>        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="flatmap"><a href="#flatmap" class="headerlink" title="flatmap"></a>flatmap</h3><p>flatmap可以理解为将元素摊平，每个元素可以变为0个、1个、或者多个元素。</p><p>举例1：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> operators<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>typeinfo<span class="token punctuation">.</span>Types<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collector<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个例子是用Flink监听9000端口，将接受的字符串用\n分割为一个个的元素</span><span class="token comment" spellcheck="true">//然后将每个元素拆为一个个的字符，并打印出来</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlatMapDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> index1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> index2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.获取执行环境配置信息</span>        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.定义加载或创建数据源（source）,监听9000端口的socket消息</span>        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> textStream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.flatMap操作，对每一行字符串进行分割</span>        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> textStream<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> Collector<span class="token operator">&lt;</span>String<span class="token operator">></span> collector<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String str <span class="token operator">:</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                collector<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//这个地方要注意，在flatMap这种参数里有泛型算子中。</span>        <span class="token comment" spellcheck="true">//如果用lambda表达式，必须将参数的类型显式地定义出来。</span>        <span class="token comment" spellcheck="true">//并且要有returns，指定返回的类型</span>        <span class="token comment" spellcheck="true">//详情可以参考Flink官方文档：https://ci.apache.org/projects/flink/flink-docs-release-1.6/dev/java_lambdas.html</span>        <span class="token punctuation">.</span><span class="token function">returns</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span>STRING<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.打印输出sink</span>        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.开始执行</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例2：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>dataStreamFlatMapOperator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>FlatMapFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStreamSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>SingleOutputStreamOperator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collector<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Summary: *      FlatMap: 一行变任意行(0~多行) */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataStreamFlatMapOperator</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>      StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 输入: 英文电影台词</span>      DataStreamSource<span class="token operator">&lt;</span>String<span class="token operator">></span> source <span class="token operator">=</span> env              <span class="token punctuation">.</span><span class="token function">fromElements</span><span class="token punctuation">(</span>                      <span class="token string">"You jump I jump"</span><span class="token punctuation">,</span>                      <span class="token string">"Life was like a box of chocolates"</span>              <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 转换: 将包含chocolates的句子转换为每行一个单词</span>      SingleOutputStreamOperator<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlatMapFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">flatMap</span><span class="token punctuation">(</span>String value<span class="token punctuation">,</span> Collector<span class="token operator">&lt;</span>String<span class="token operator">></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"chocolates"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  String<span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">for</span> <span class="token punctuation">(</span>String word <span class="token operator">:</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 输出: 输出到控制台</span>      <span class="token comment" spellcheck="true">// Life</span>      <span class="token comment" spellcheck="true">// was</span>      <span class="token comment" spellcheck="true">// like</span>      <span class="token comment" spellcheck="true">// a</span>      <span class="token comment" spellcheck="true">// box</span>      <span class="token comment" spellcheck="true">// of</span>      <span class="token comment" spellcheck="true">// chocolates</span>      result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>filter是进行筛选。</p><p>举例：</p><pre><code>package operators;import org.apache.flink.streaming.api.datastream.DataStream;import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;public class FilterDemo {    private static int index = 1;    public static void main(String[] args) throws Exception {        //1.获取执行环境配置信息        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();        //2.定义加载或创建数据源（source）,监听9000端口的socket消息        DataStream&lt;String&gt; textStream = env.socketTextStream("localhost", 9000, "\n");        //3.filter操作，筛选非空行。        DataStream&lt;String&gt; result = textStream.filter(line-&gt;!line.trim().equals(""));        //4.打印输出sink        result.print();        //5.开始执行        env.execute();    }}</code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>dataStreamFilterOperator<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>UserAction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>FilterFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStreamSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>SingleOutputStreamOperator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Summary: *      Fliter: 过滤出需要的数据 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataStreamFilterOperator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输入: 用户行为。某个用户在某个时刻点击或浏览了某个商品，以及商品的价格。</span>        DataStreamSource<span class="token operator">&lt;</span>UserAction<span class="token operator">></span> source <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">fromCollection</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">,</span> <span class="token number">1293984000</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"productID1"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID2"</span><span class="token punctuation">,</span> <span class="token number">1293984001</span><span class="token punctuation">,</span> <span class="token string">"browse"</span><span class="token punctuation">,</span> <span class="token string">"productID2"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">,</span> <span class="token number">1293984002</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"productID1"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 过滤: 过滤出用户ID为userID1的用户行为</span>        SingleOutputStreamOperator<span class="token operator">&lt;</span>UserAction<span class="token operator">></span> result <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FilterFunction</span><span class="token operator">&lt;</span>UserAction<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">filter</span><span class="token punctuation">(</span>UserAction value<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">getUserID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出: 输出到控制台</span>        <span class="token comment" spellcheck="true">// UserAction(userID=userID1, eventTime=1293984002, eventType=click, productID=productID1, productPrice=10)</span>        <span class="token comment" spellcheck="true">// UserAction(userID=userID1, eventTime=1293984000, eventType=click, productID=productID1, productPrice=10)</span>        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="keyBy"><a href="#keyBy" class="headerlink" title="keyBy"></a>keyBy</h3><p>KeyBy: 按指定的Key对数据重分区。将同一Key的数据放到同一个分区。</p><p>注意:</p><ul><li>分区结果和KeyBy下游算子的并行度强相关。如下游算子只有一个并行度,不管怎么分，都会分到一起。</li><li>对于POJO类型，KeyBy可以通过keyBy(fieldName)指定字段进行分区。</li><li>对于Tuple类型，KeyBy可以通过keyBy(fieldPosition)指定字段进行分区。</li><li>对于一般类型，如上, KeyBy可以通过keyBy(new KeySelector {…})指定字段进行分区。</li></ul><p>举例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> operators<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>typeinfo<span class="token punctuation">.</span>Types<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Tuple2<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Time<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个例子是每行输入一个单词，以单词为key进行计数</span><span class="token comment" spellcheck="true">//每10秒统计一次每个单词的个数</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KeyByDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.获取执行环境配置信息</span>        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.定义加载或创建数据源（source）,监听9000端口的socket消息</span>        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> textStream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.</span>        DataStream<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">>></span> result <span class="token operator">=</span> textStream                <span class="token comment" spellcheck="true">//map是将每一行单词变为一个tuple2</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line <span class="token operator">-</span><span class="token operator">></span> Tuple2<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//如果要用Lambda表示是，Tuple2是泛型，那就得用returns指定类型。</span>                <span class="token punctuation">.</span><span class="token function">returns</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span><span class="token function">TUPLE</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span>STRING<span class="token punctuation">,</span> Types<span class="token punctuation">.</span>INT<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//keyBy进行分区，按照第一列，也就是按照单词进行分区</span>                <span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//指定窗口，每10秒个计算一次</span>                <span class="token punctuation">.</span><span class="token function">timeWindow</span><span class="token punctuation">(</span>Time<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//计算个数，计算第1列</span>                <span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.打印输出sink</span>        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.开始执行</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>dataStreamKeyByOperator<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>UserAction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>KeySelector<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStreamSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>KeyedStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Summary: *      KeyBy: 按指定的Key对数据重分区。将同一Key的数据放到同一个分区。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataStreamKeyByOperator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输入: 用户行为。某个用户在某个时刻点击或浏览了某个商品，以及商品的价格。</span>        DataStreamSource<span class="token operator">&lt;</span>UserAction<span class="token operator">></span> source <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">fromCollection</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">,</span> <span class="token number">1293984000</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"productID1"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID2"</span><span class="token punctuation">,</span> <span class="token number">1293984001</span><span class="token punctuation">,</span> <span class="token string">"browse"</span><span class="token punctuation">,</span> <span class="token string">"productID2"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">,</span> <span class="token number">1293984002</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"productID1"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 转换: 按指定的Key(这里,用户ID)对数据重分区，将相同Key(用户ID)的数据分到同一个分区</span>        KeyedStream<span class="token operator">&lt;</span>UserAction<span class="token punctuation">,</span> String<span class="token operator">></span> result <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">KeySelector</span><span class="token operator">&lt;</span>UserAction<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> String <span class="token function">getKey</span><span class="token punctuation">(</span>UserAction value<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">getUserID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出: 输出到控制台</span>        <span class="token comment" spellcheck="true">//3> UserAction(userID=userID1, eventTime=1293984000, eventType=click, productID=productID1, productPrice=10)</span>        <span class="token comment" spellcheck="true">//3> UserAction(userID=userID1, eventTime=1293984002, eventType=click, productID=productID1, productPrice=10)</span>        <span class="token comment" spellcheck="true">//2> UserAction(userID=userID2, eventTime=1293984001, eventType=browse, productID=productID2, productPrice=8)</span>        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p>reduce是归并操作，它可以将KeyedStream 转变为 DataStream。</p><p>Reduce: 基于ReduceFunction进行滚动聚合，并向下游算子输出每次滚动聚合后的结果。<br>注意: Reduce会输出每一次滚动聚合的结果。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> operators<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>typeinfo<span class="token punctuation">.</span>Types<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Tuple2<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Time<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个例子是对流进行分组，分组后进归并操作。</span><span class="token comment" spellcheck="true">//是wordcount的另外一种实现方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReduceDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.获取执行环境配置信息</span>        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.定义加载或创建数据源（source）,监听9000端口的socket消息</span>        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> textStream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.</span>        DataStream<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">>></span> result <span class="token operator">=</span> textStream                <span class="token comment" spellcheck="true">//map是将每一行单词变为一个tuple2</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line <span class="token operator">-</span><span class="token operator">></span> Tuple2<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//如果要用Lambda表示是，Tuple2是泛型，那就得用returns指定类型。</span>                <span class="token punctuation">.</span><span class="token function">returns</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span><span class="token function">TUPLE</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span>STRING<span class="token punctuation">,</span> Types<span class="token punctuation">.</span>INT<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//keyBy进行分区，按照第一列，也就是按照单词进行分区</span>                <span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//指定窗口，每10秒个计算一次</span>                <span class="token punctuation">.</span><span class="token function">timeWindow</span><span class="token punctuation">(</span>Time<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//对每一组内的元素进行归并操作，即第一个和第二个归并，结果再与第三个归并...</span>                <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> t1<span class="token punctuation">,</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> t2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>f0<span class="token punctuation">,</span> t1<span class="token punctuation">.</span>f1 <span class="token operator">+</span> t2<span class="token punctuation">.</span>f1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.打印输出sink</span>        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.开始执行</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>dataStreamReduceOperator<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>UserAction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>ReduceFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>KeySelector<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStreamSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>KeyedStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>SingleOutputStreamOperator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Summary: *     Reduce: 基于ReduceFunction进行滚动聚合，并向下游算子输出每次滚动聚合后的结果。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataStreamReduceOperator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输入: 用户行为。某个用户在某个时刻点击或浏览了某个商品，以及商品的价格。</span>        DataStreamSource<span class="token operator">&lt;</span>UserAction<span class="token operator">></span> source <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">fromCollection</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">,</span> <span class="token number">1293984000</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"productID1"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID2"</span><span class="token punctuation">,</span> <span class="token number">1293984001</span><span class="token punctuation">,</span> <span class="token string">"browse"</span><span class="token punctuation">,</span> <span class="token string">"productID2"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID2"</span><span class="token punctuation">,</span> <span class="token number">1293984002</span><span class="token punctuation">,</span> <span class="token string">"browse"</span><span class="token punctuation">,</span> <span class="token string">"productID2"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID2"</span><span class="token punctuation">,</span> <span class="token number">1293984003</span><span class="token punctuation">,</span> <span class="token string">"browse"</span><span class="token punctuation">,</span> <span class="token string">"productID2"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">,</span> <span class="token number">1293984002</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"productID1"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">,</span> <span class="token number">1293984003</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"productID3"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">,</span> <span class="token number">1293984004</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"productID1"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 转换: KeyBy对数据重分区</span>        KeyedStream<span class="token operator">&lt;</span>UserAction<span class="token punctuation">,</span> String<span class="token operator">></span> keyedStream <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">KeySelector</span><span class="token operator">&lt;</span>UserAction<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> String <span class="token function">getKey</span><span class="token punctuation">(</span>UserAction value<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">getUserID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 转换: Reduce滚动聚合。这里,滚动聚合每个用户对应的商品总价格。</span>        SingleOutputStreamOperator<span class="token operator">&lt;</span>UserAction<span class="token operator">></span> result <span class="token operator">=</span> keyedStream<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReduceFunction</span><span class="token operator">&lt;</span>UserAction<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> UserAction <span class="token function">reduce</span><span class="token punctuation">(</span>UserAction value1<span class="token punctuation">,</span> UserAction value2<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token keyword">int</span> newProductPrice <span class="token operator">=</span> value1<span class="token punctuation">.</span><span class="token function">getProductPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> value2<span class="token punctuation">.</span><span class="token function">getProductPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span>value1<span class="token punctuation">.</span><span class="token function">getUserID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> newProductPrice<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出: 将每次滚动聚合后的结果输出到控制台。</span>        <span class="token comment" spellcheck="true">//3> UserAction(userID=userID2, eventTime=1293984001, eventType=browse, productID=productID2, productPrice=8)</span>        <span class="token comment" spellcheck="true">//3> UserAction(userID=userID2, eventTime=-1, eventType=, productID=, productPrice=16)</span>        <span class="token comment" spellcheck="true">//3> UserAction(userID=userID2, eventTime=-1, eventType=, productID=, productPrice=24)</span>        <span class="token comment" spellcheck="true">//4> UserAction(userID=userID1, eventTime=1293984000, eventType=click, productID=productID1, productPrice=10)</span>        <span class="token comment" spellcheck="true">//4> UserAction(userID=userID1, eventTime=-1, eventType=, productID=, productPrice=20)</span>        <span class="token comment" spellcheck="true">//4> UserAction(userID=userID1, eventTime=-1, eventType=, productID=, productPrice=30)</span>        <span class="token comment" spellcheck="true">//4> UserAction(userID=userID1, eventTime=-1, eventType=, productID=, productPrice=40)</span>        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="fold"><a href="#fold" class="headerlink" title="fold"></a>fold</h3><p>基于初始值和FoldFunction进行滚动折叠(Fold)，并向下游算子输出每次滚动折叠后的结果。<br>注意: Fold会输出每一次滚动折叠的结果。</p><p>举例1：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> operators<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>typeinfo<span class="token punctuation">.</span>Types<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Tuple2<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Time<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FoldDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.获取执行环境配置信息</span>        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.定义加载或创建数据源（source）,监听9000端口的socket消息</span>        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> textStream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.</span>        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> textStream                <span class="token comment" spellcheck="true">//map是将每一行单词变为一个tuple2</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line <span class="token operator">-</span><span class="token operator">></span> Tuple2<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//如果要用Lambda表示是，Tuple2是泛型，那就得用returns指定类型。</span>                <span class="token punctuation">.</span><span class="token function">returns</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span><span class="token function">TUPLE</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span>STRING<span class="token punctuation">,</span> Types<span class="token punctuation">.</span>INT<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//keyBy进行分区，按照第一列，也就是按照单词进行分区</span>                <span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//指定窗口，每10秒个计算一次</span>                <span class="token punctuation">.</span><span class="token function">timeWindow</span><span class="token punctuation">(</span>Time<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//指定一个开始的值，对每一组内的元素进行归并操作，即第一个和第二个归并，结果再与第三个归并...</span>                <span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span><span class="token string">"结果："</span><span class="token punctuation">,</span><span class="token punctuation">(</span>String current<span class="token punctuation">,</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> t2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> current<span class="token operator">+</span>t2<span class="token punctuation">.</span>f0<span class="token operator">+</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.打印输出sink</span>        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.开始执行</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>dataStreamFoldOperator<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>UserAction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>FoldFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>KeySelector<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStreamSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>KeyedStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>SingleOutputStreamOperator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Summary: *      Fold: 基于初始值和自定义的FoldFunction滚动折叠后发出新值 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataStreamFoldOperator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输入: 用户行为。某个用户在某个时刻点击或浏览了某个商品，以及商品的价格。</span>        DataStreamSource<span class="token operator">&lt;</span>UserAction<span class="token operator">></span> source <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">fromCollection</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">,</span> <span class="token number">1293984000</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"productID1"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID2"</span><span class="token punctuation">,</span> <span class="token number">1293984001</span><span class="token punctuation">,</span> <span class="token string">"browse"</span><span class="token punctuation">,</span> <span class="token string">"productID2"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID2"</span><span class="token punctuation">,</span> <span class="token number">1293984002</span><span class="token punctuation">,</span> <span class="token string">"browse"</span><span class="token punctuation">,</span> <span class="token string">"productID2"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID2"</span><span class="token punctuation">,</span> <span class="token number">1293984003</span><span class="token punctuation">,</span> <span class="token string">"browse"</span><span class="token punctuation">,</span> <span class="token string">"productID2"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">,</span> <span class="token number">1293984002</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"productID1"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">,</span> <span class="token number">1293984003</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"productID3"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">UserAction</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">,</span> <span class="token number">1293984004</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"productID1"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 转换: KeyBy对数据重分区</span>        KeyedStream<span class="token operator">&lt;</span>UserAction<span class="token punctuation">,</span> String<span class="token operator">></span> keyedStream <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">KeySelector</span><span class="token operator">&lt;</span>UserAction<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> String <span class="token function">getKey</span><span class="token punctuation">(</span>UserAction value<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">getUserID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 转换: Fold 基于初始值和FoldFunction滚动折叠</span>        SingleOutputStreamOperator<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> keyedStream<span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span><span class="token string">"浏览的商品及价格:"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FoldFunction</span><span class="token operator">&lt;</span>UserAction<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> String <span class="token function">fold</span><span class="token punctuation">(</span>String accumulator<span class="token punctuation">,</span> UserAction value<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"userID"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> accumulator <span class="token operator">+</span> <span class="token string">" -> "</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">getProductID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>value<span class="token punctuation">.</span><span class="token function">getProductPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">getUserID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span> <span class="token operator">+</span>accumulator <span class="token operator">+</span> <span class="token string">" -> "</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">getProductID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>value<span class="token punctuation">.</span><span class="token function">getProductPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出: 输出到控制台</span>        <span class="token comment" spellcheck="true">// 每一条数据都会触发计算并输出</span>        <span class="token comment" spellcheck="true">// userID1 浏览的商品及价格: -> productID1:10</span>        <span class="token comment" spellcheck="true">// userID1 浏览的商品及价格: -> productID1:10 -> productID1:10</span>        <span class="token comment" spellcheck="true">// userID1 浏览的商品及价格: -> productID1:10 -> productID1:10 -> productID3:10</span>        <span class="token comment" spellcheck="true">// userID1 浏览的商品及价格: -> productID1:10 -> productID1:10 -> productID3:10 -> productID1:10</span>        <span class="token comment" spellcheck="true">// userID2 浏览的商品及价格: -> productID2:8</span>        <span class="token comment" spellcheck="true">// userID2 浏览的商品及价格: -> productID2:8 -> productID2:8</span>        <span class="token comment" spellcheck="true">// userID2 浏览的商品及价格: -> productID2:8 -> productID2:8 -> productID2:8</span>        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Aggregate"><a href="#Aggregate" class="headerlink" title="Aggregate"></a>Aggregate</h3><p>Aggregate 对KeyedStream按指定字段滚动聚合并输出每一次滚动聚合后的结果。默认的聚合函数有:sum、min、minBy、max、mabBy。</p><p>注意:</p><ul><li>max(field)与maxBy(field)的区别: maxBy返回field最大的那条数据;而max则是将最大的field的值赋值给第一条数据并返回第一条数据。同理,min与minBy。</li><li>Aggregate聚合算子会滚动输出每一次聚合后的结果。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>dataStreamAggregateOperator<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>UserActionLogPOJO<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>KeySelector<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStreamSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>KeyedStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Summary: *     Aggregate: min()、minBy()、max()、maxBy() 滚动聚合并输出每次滚动聚合后的结果 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataStreamAggregateOperator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输入: 用户行为。某个用户在某个时刻点击或浏览了某个商品，以及商品的价格。</span>        ArrayList<span class="token operator">&lt;</span>UserActionLogPOJO<span class="token operator">></span> userActionLogs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserActionLogPOJO userActionLog1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserActionLogPOJO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userActionLog1<span class="token punctuation">.</span><span class="token function">setUserID</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userActionLog1<span class="token punctuation">.</span><span class="token function">setProductID</span><span class="token punctuation">(</span><span class="token string">"productID3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userActionLog1<span class="token punctuation">.</span><span class="token function">setProductPrice</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userActionLogs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userActionLog1<span class="token punctuation">)</span><span class="token punctuation">;</span>        UserActionLogPOJO userActionLog2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserActionLogPOJO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userActionLog2<span class="token punctuation">.</span><span class="token function">setUserID</span><span class="token punctuation">(</span><span class="token string">"userID2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userActionLog2<span class="token punctuation">.</span><span class="token function">setProductPrice</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userActionLogs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userActionLog2<span class="token punctuation">)</span><span class="token punctuation">;</span>        UserActionLogPOJO userActionLog3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserActionLogPOJO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userActionLog3<span class="token punctuation">.</span><span class="token function">setUserID</span><span class="token punctuation">(</span><span class="token string">"userID1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userActionLog3<span class="token punctuation">.</span><span class="token function">setProductID</span><span class="token punctuation">(</span><span class="token string">"productID5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userActionLog3<span class="token punctuation">.</span><span class="token function">setProductPrice</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userActionLogs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userActionLog3<span class="token punctuation">)</span><span class="token punctuation">;</span>        DataStreamSource<span class="token operator">&lt;</span>UserActionLogPOJO<span class="token operator">></span> source <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">fromCollection</span><span class="token punctuation">(</span>userActionLogs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 转换: KeyBy对数据重分区</span>        <span class="token comment" spellcheck="true">// 这里, UserActionLog是POJO类型,也可通过keyBy("userID")进行分区</span>        KeyedStream<span class="token operator">&lt;</span>UserActionLogPOJO<span class="token punctuation">,</span> String<span class="token operator">></span> keyedStream <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">KeySelector</span><span class="token operator">&lt;</span>UserActionLogPOJO<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> String <span class="token function">getKey</span><span class="token punctuation">(</span>UserActionLogPOJO value<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">getUserID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 转换: Aggregate并输出</span>        <span class="token comment" spellcheck="true">// 滚动求和并输出</span>        <span class="token comment" spellcheck="true">//keyedStream.sum("productPrice").print();</span>        <span class="token comment" spellcheck="true">// 滚动求最大值并输出</span>        keyedStream<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token string">"productPrice"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 滚动求最大值并输出</span>        keyedStream<span class="token punctuation">.</span><span class="token function">maxBy</span><span class="token punctuation">(</span><span class="token string">"productPrice"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 滚动求最小值并输出</span>        <span class="token comment" spellcheck="true">//keyedStream.min("productPrice").print();</span>        <span class="token comment" spellcheck="true">// 滚动求最小值并输出</span>        <span class="token comment" spellcheck="true">//keyedStream.minBy("productPrice").print();</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="union"><a href="#union" class="headerlink" title="union"></a>union</h3><p>union可以将多个流合并到一个流中，以便对合并的流进行统一处理。是对多个流的水平拼接。</p><p>参与合并的流必须是同一种类型。</p><p>举例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> operators<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个例子是将三个socket端口发送来的数据合并到一个流中</span><span class="token comment" spellcheck="true">//可以对这三个流发送来的数据，集中处理。</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnionDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.获取执行环境配置信息</span>        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.定义加载或创建数据源（source）,监听9000端口的socket消息</span>        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> textStream9000 <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> textStream9001 <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9001</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> textStream9002 <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9002</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> mapStream9000<span class="token operator">=</span>textStream9000<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span><span class="token string">"来自9000端口："</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> mapStream9001<span class="token operator">=</span>textStream9001<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span><span class="token string">"来自9001端口："</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> mapStream9002<span class="token operator">=</span>textStream9002<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span><span class="token string">"来自9002端口："</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.union用来合并两个或者多个流的数据，统一到一个流中</span>        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span>  mapStream9000<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>mapStream9001<span class="token punctuation">,</span>mapStream9002<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.打印输出sink</span>        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.开始执行</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>根据指定的Key将两个流进行关联。</p><p>举例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> operators<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>MapFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Tuple2<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>assigners<span class="token punctuation">.</span>TumblingProcessingTimeWindows<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Time<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowJoinDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.获取执行环境配置信息</span>        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.定义加载或创建数据源（source）,监听9000端口的socket消息</span>        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> textStream9000 <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> textStream9001 <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9001</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将输入处理一下，变为tuple2</span>        DataStream<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">>></span> mapStream9000<span class="token operator">=</span>textStream9000                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MapFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">map</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        <span class="token keyword">return</span> Tuple2<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">"来自9000端口："</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DataStream<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">>></span> mapStream9001<span class="token operator">=</span>textStream9001                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MapFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">map</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        <span class="token keyword">return</span> Tuple2<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">"来自9001端口："</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.两个流进行join操作，是inner join，关联上的才能保留下来</span>        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span>  mapStream9000<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>mapStream9001<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//关联条件，以第0列关联（两个source输入的字符串）</span>                <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>t1<span class="token operator">-</span><span class="token operator">></span>t1<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equalTo</span><span class="token punctuation">(</span>t2<span class="token operator">-</span><span class="token operator">></span>t2<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//以处理时间，每10秒一个滚动窗口</span>                <span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span>TumblingProcessingTimeWindows<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>Time<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//关联后输出</span>                <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span>t2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>t1<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"|"</span><span class="token operator">+</span>t2<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.打印输出sink</span>        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.开始执行</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="coGroup"><a href="#coGroup" class="headerlink" title="coGroup"></a>coGroup</h3><p>关联两个流，关联不上的也保留下来。</p><p>举例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> operators<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>CoGroupFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>MapFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Tuple2<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>assigners<span class="token punctuation">.</span>TumblingProcessingTimeWindows<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Time<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collector<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoGroupDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.获取执行环境配置信息</span>        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.定义加载或创建数据源（source）,监听9000端口的socket消息</span>        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> textStream9000 <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> textStream9001 <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9001</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将输入处理一下，变为tuple2</span>        DataStream<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> mapStream9000 <span class="token operator">=</span> textStream9000                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MapFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">map</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        <span class="token keyword">return</span> Tuple2<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"来自9000端口："</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DataStream<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> mapStream9001 <span class="token operator">=</span> textStream9001                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MapFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">map</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        <span class="token keyword">return</span> Tuple2<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"来自9001端口："</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.两个流进行coGroup操作,没有关联上的也保留下来，功能更强大</span>        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> mapStream9000<span class="token punctuation">.</span><span class="token function">coGroup</span><span class="token punctuation">(</span>mapStream9001<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//关联条件，以第0列关联（两个source输入的字符串）</span>                <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>t1 <span class="token operator">-</span><span class="token operator">></span> t1<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equalTo</span><span class="token punctuation">(</span>t2 <span class="token operator">-</span><span class="token operator">></span> t2<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//以处理时间，每10秒一个滚动窗口</span>                <span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span>TumblingProcessingTimeWindows<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>Time<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//关联后输出</span>                <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CoGroupFunction</span><span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">,</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">coGroup</span><span class="token punctuation">(</span>Iterable<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> iterable<span class="token punctuation">,</span> Iterable<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> iterable1<span class="token punctuation">,</span> Collector<span class="token operator">&lt;</span>String<span class="token operator">></span> collector<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        StringBuffer stringBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"来自9000的stream:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> item <span class="token operator">:</span> iterable<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>f1 <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"来自9001的stream:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> item <span class="token operator">:</span> iterable1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>f1 <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        collector<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.打印输出sink</span>        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.开始执行</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h3><p>参考：<a href="https://www.jianshu.com/p/5b0574d466f8" target="_blank" rel="noopener">https://www.jianshu.com/p/5b0574d466f8</a></p><p>将两个流纵向地连接起来。DataStream的connect操作创建的是ConnectedStreams或BroadcastConnectedStream，它用了两个泛型，即不要求两个dataStream的element是同一类型。</p><p>举例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> operators<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Tuple2<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>SingleOutputStreamOperator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>co<span class="token punctuation">.</span>CoMapFunction<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Matcher<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Pattern<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConnectDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.获取执行环境配置信息</span>        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.定义加载或创建数据源（source）,监听9000端口的socket消息</span>        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> textStream9000 <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> textStream9001 <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9001</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//转为Integer类型流</span>        DataStream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> intStream <span class="token operator">=</span> textStream9000<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> <span class="token function">isNumeric</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//连接起来，分别处理，返回同样的一种类型。</span>        SingleOutputStreamOperator result <span class="token operator">=</span> intStream<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>textStream9001<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CoMapFunction</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Tuple2<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">map1</span><span class="token punctuation">(</span>Integer value<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        <span class="token keyword">return</span> Tuple2<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">map2</span><span class="token punctuation">(</span>String value<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        <span class="token keyword">return</span> Tuple2<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.打印输出sink</span>        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.开始执行</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isNumeric</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Pattern pattern <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"[0-9]*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Matcher isNum <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isNum<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><p>参考：<a href="https://cloud.tencent.com/developer/article/1382892" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1382892</a></p><p>将一个流拆分为多个流。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> operators<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>typeinfo<span class="token punctuation">.</span>Types<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Tuple2<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>SplitStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Matcher<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Pattern<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SplitDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.获取执行环境配置信息</span>        StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.定义加载或创建数据源（source）,监听9000端口的socket消息</span>        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> textStream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.</span>        SplitStream<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">>></span> result <span class="token operator">=</span> textStream                <span class="token comment" spellcheck="true">//map是将每一行单词变为一个tuple2</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line <span class="token operator">-</span><span class="token operator">></span> Tuple2<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//如果要用Lambda表示是，Tuple2是泛型，那就得用returns指定类型。</span>                <span class="token punctuation">.</span><span class="token function">returns</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span><span class="token function">TUPLE</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span>STRING<span class="token punctuation">,</span> Types<span class="token punctuation">.</span>INT<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>t <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//根据逻辑拆分，并定义outputName</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNumeric</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>f0<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"str"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span> list<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//选择指定名称的流</span>        DataStream<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">>></span> strSplitStream <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"str"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>t <span class="token operator">-</span><span class="token operator">></span> Tuple2<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"字符串："</span> <span class="token operator">+</span> t<span class="token punctuation">.</span>f0<span class="token punctuation">,</span> t<span class="token punctuation">.</span>f1<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">returns</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span><span class="token function">TUPLE</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span>STRING<span class="token punctuation">,</span>Types<span class="token punctuation">.</span>INT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//选择指定名称的流</span>        DataStream<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">>></span> intSplitStream <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>t <span class="token operator">-</span><span class="token operator">></span> Tuple2<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"数字："</span> <span class="token operator">+</span> t<span class="token punctuation">.</span>f0<span class="token punctuation">,</span> t<span class="token punctuation">.</span>f1<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">returns</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span><span class="token function">TUPLE</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span>STRING<span class="token punctuation">,</span>Types<span class="token punctuation">.</span>INT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.打印输出sink</span>        strSplitStream<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        intSplitStream<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.开始执行</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isNumeric</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Pattern pattern <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"[0-9]*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Matcher isNum <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isNum<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h3><ul><li><a href="https://blog.csdn.net/chybin500/article/details/87260869" target="_blank" rel="noopener">原文链接1</a></li><li><a href="https://blog.csdn.net/wangpei1949/article/details/101625394" target="_blank" rel="noopener">原文链接2</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flink中returns函数使用</title>
      <link href="/2020/03/18/flink-zhong-returns-han-shu-shi-yong/"/>
      <url>/2020/03/18/flink-zhong-returns-han-shu-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>Java8出来之后，lambda表达式由于简单易读，在流式计算中的使用开始变得普遍。</p><p>同样,Flink也支持lambda表达式，例如我们改写一下wordcount样例</p><pre class="line-numbers language-java"><code class="language-java">DataSource<span class="token operator">&lt;</span>String<span class="token operator">></span> lines <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">fromElements</span><span class="token punctuation">(</span>    <span class="token string">"Apache Flink is a community-driven open source framework for distributed big data analytics,"</span><span class="token punctuation">,</span>    <span class="token string">"like Hadoop and Spark. The core of Apache Flink is a distributed streaming dataflow engine written"</span><span class="token punctuation">,</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lines<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlatMapFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">flatMap</span><span class="token punctuation">(</span>String line<span class="token punctuation">,</span> Collector<span class="token operator">&lt;</span> Object<span class="token operator">></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String word <span class="token operator">:</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\W+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码很简单，先把每一行按空格拆分成若干单词，并将每个单词和数字1组成一个Tuple，然后把所有Tuple按照单词聚合，计算出每个单词的出现次数</p><p>尝试用lambda表达式来替换FlatMapFunction，代码如下</p><pre class="line-numbers language-java"><code class="language-java">lines<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> out<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String word <span class="token operator">:</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\W+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但当运行这段代码时，会抛出如下异常：</p><pre class="line-numbers language-java"><code class="language-java">Caused by<span class="token operator">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>InvalidTypesException<span class="token operator">:</span> The generic type parameters of <span class="token string">'Collector'</span> are missing<span class="token punctuation">.</span> It seems that your compiler has not stored them into the <span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">file<span class="token punctuation">.</span></span> Currently<span class="token punctuation">,</span> only the Eclipse JDT compiler preserves the type information necessary to use the lambdas feature type<span class="token operator">-</span>safely<span class="token punctuation">.</span> See the documentation <span class="token keyword">for</span> more information about how to compile jobs containing lambda expressions<span class="token punctuation">.</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>typeutils<span class="token punctuation">.</span>TypeExtractor<span class="token punctuation">.</span><span class="token function">validateLambdaGenericParameter</span><span class="token punctuation">(</span>TypeExtractor<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1653</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>typeutils<span class="token punctuation">.</span>TypeExtractor<span class="token punctuation">.</span><span class="token function">validateLambdaGenericParameters</span><span class="token punctuation">(</span>TypeExtractor<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1639</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>typeutils<span class="token punctuation">.</span>TypeExtractor<span class="token punctuation">.</span><span class="token function">getUnaryOperatorReturnType</span><span class="token punctuation">(</span>TypeExtractor<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">573</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>typeutils<span class="token punctuation">.</span>TypeExtractor<span class="token punctuation">.</span><span class="token function">getFlatMapReturnTypes</span><span class="token punctuation">(</span>TypeExtractor<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">188</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>DataSet<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>DataSet<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">266</span><span class="token punctuation">)</span>    at TestFlink<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>TestFlink<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">21</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是因为Flink在用户自定义的函数中会使用泛型来创建serializer，当我们使用匿名函数时，类型信息会被保留。但Lambda表达式并不是匿名函数，所以javac编译的时候并不会把泛型保存到class文件里。</p><p>解决办法有两种:</p><p>第一种办法在异常中已经提示，使用Eclipse JDT编译器会保留对lambda表达式来说必要的类型信息。在Maven中使用Eclipse JDT编译器，只需要在把下面的插件加入到pom.xml中</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>compilerId</span><span class="token punctuation">></span></span>jdt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>compilerId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.eclipse.tycho<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tycho-compiler-jdt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.21.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另一种办法是，使用Flink提供的returns方法来指定flatMap的返回类型，</p><pre class="line-numbers language-java"><code class="language-java">text<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> out<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String word <span class="token operator">:</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\W+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">returns</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TypeInformation<span class="token punctuation">)</span> TupleTypeInfo<span class="token punctuation">.</span><span class="token function">getBasicTupleTypeInfo</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">text<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> out<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String word <span class="token operator">:</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\W+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">returns</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span><span class="token function">TUPLE</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span>STRING<span class="token punctuation">,</span> Types<span class="token punctuation">.</span>INT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>returns</code>函数接收TypeInformation类型的参数，这里我们创建TupleTypeInfo来指定Tuple的参数类型。</p><ul><li><p><a href="http://kane-xie.github.io/2017/07/12/2017-07-12_Flink%E4%BD%BF%E7%94%A8lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/" target="_blank" rel="noopener">参考链接1</a></p></li><li><p><a href="https://blog.csdn.net/November_28/article/details/100020400" target="_blank" rel="noopener">参考链接2</a></p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flink多数据流转换操作：join、union、connect</title>
      <link href="/2020/03/18/flink-duo-shu-ju-liu-zhuan-huan-cao-zuo/"/>
      <url>/2020/03/18/flink-duo-shu-ju-liu-zhuan-huan-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h3 id="操作概览"><a href="#操作概览" class="headerlink" title="操作概览"></a>操作概览</h3><p><img src="/images/flink13.png" alt="操作概览"></p><p>本文主要讲flink中多条数据流转换操作：join、union、connect</p><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>批处理经常要解决的问题是将两个数据源做关联Join操作。比如，很多手机APP都有一个用户数据源User，同时APP会记录用户的行为，我们称之为Behavior，两个表按照userId来进行Join。在流处理场景下，Flink也支持了Join，只不过Flink是在一个时间窗口上来进行两个表的Join。<br><img src="/images/flink14.png" alt="操作概览"><br>目前，Flink支持了两种Join：<code>Window Join</code>（窗口连接）和<code>Interval Join</code>（时间间隔连接）。</p><h4 id="Window-Join"><a href="#Window-Join" class="headerlink" title="Window Join"></a>Window Join</h4><p>从名字中能猜到，Window Join主要在Flink的窗口上进行操作，它将两个流中落在相同窗口的元素按照某个Key进行Join。一个Window Join的大致骨架结构为：</p><pre class="line-numbers language-java"><code class="language-java">input1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>input2<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>KeySelector<span class="token operator">></span><span class="token punctuation">)</span>      <span class="token operator">&lt;</span><span class="token operator">-</span> input1使用哪个字段作为Key    <span class="token punctuation">.</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>KeySelector<span class="token operator">></span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">-</span> input2使用哪个字段作为Key    <span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>WindowAssigner<span class="token operator">></span><span class="token punctuation">)</span>  <span class="token operator">&lt;</span><span class="token operator">-</span> 指定WindowAssigner    <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Trigger<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">]</span>      <span class="token operator">&lt;</span><span class="token operator">-</span> 指定Trigger（可选）    <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token function">evictor</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Evictor<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">]</span>      <span class="token operator">&lt;</span><span class="token operator">-</span> 指定Evictor（可选）    <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>JoinFunction<span class="token operator">></span><span class="token punctuation">)</span>     <span class="token operator">&lt;</span><span class="token operator">-</span> 指定JoinFunction<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下图展示了Join的大致过程。两个输入数据流先分别按Key进行分组，然后将元素划分到窗口中。窗口的划分需要使用WindowAssigner来定义，这里可以使用Flink提供的滚动窗口、滑动窗口或会话窗口等默认的WindowAssigner。随后两个数据流中的元素会被分配到各个窗口上，也就是说一个窗口会包含来自两个数据流的元素。相同窗口内的数据会以INNER JOIN的语义来相互关联，形成一个数据对。当窗口的时间结束，Flink会调用JoinFunction来对窗口内的数据对进行处理。当然，我们也可以使用Trigger或Evictor做一些自定义优化，他们的使用方法和普通窗口的使用方法一样。<br><img src="/images/flink15.png" alt="join"></p><p>接下来我们重点分析一下两个数据流是如何INNER JOIN的：<br><img src="/images/flink16.png" alt="join"><br>一般滴，INNER JOIN只对两个数据源都出现的元素做Join，形成一个数据对，即数据源input1中的某个元素与数据源input2中的所有元素逐个配对。当数据源某个窗口内没数据时，比如图中的第三个窗口，Join的结果也是空的。</p><p>如果INNER JOIN不能满足我们的需求，CoGroupFunction提供了更多可自定义的功能。需要注意的是，在调用时，要写成<code>input1.coGroup(input2).where(&lt;KeySelector&gt;).equalTo(&lt;KeySelecotr&gt;)</code>。</p><h4 id="Interval-Join"><a href="#Interval-Join" class="headerlink" title="Interval Join"></a>Interval Join</h4><p>与Window Join不同，Interval Join不依赖Flink的WindowAssigner，而是根据一个时间间隔（Interval）界定时间。Interval需要一个时间下界（<code>lower bound</code>）和上界（<code>upper bound</code>），如果我们将input1和input2进行Interval Join，input1中的某个元素为<code>input1.element1</code>，时间戳为<code>input1.element1.ts</code>，那么一个Interval就是<code>[input1.element1.ts + lower bound, input1.element1.ts + upper bound]</code>，input2中落在这个时间段内的元素将会和<code>input1.element1</code>组成一个数据对。</p><p>用数学公式表达为，凡是符合下面公式<code>input1.element1.ts + lower bound &lt;= input2.elementx.ts &lt;=input1.element1.ts + upper bound</code>的元素使用INNER JOIN语义，两两组合在一起。上下界可以是正数也可以是负数。</p><p>注意，目前Flink（1.9）的Interval Join只支持<code>Event Time</code>语义。</p><p><img src="/images/flink17.png" alt="join"></p><p>默认的时间间隔是包含上下界的，我们可以使用<code>.lowerBoundExclusive()</code> 和<code>.upperBoundExclusive</code>来确定是否需要包含上下界。</p><pre class="line-numbers language-java"><code class="language-java">val intervalJoinResult <span class="token operator">=</span> input1<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_1<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">intervalJoin</span><span class="token punctuation">(</span>input2<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>_1<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>Time<span class="token punctuation">.</span><span class="token function">milliseconds</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Time<span class="token punctuation">.</span><span class="token function">milliseconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">upperBoundExclusive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">lowerBoundExclusive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyProcessFunction</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Interval Join内部是用缓存来存储所有数据的，因此需要注意缓存数据不能太大，以免对内存造成绝大压力。</p><h3 id="union"><a href="#union" class="headerlink" title="union"></a>union</h3><p>在<code>DataStream</code>上使用union算子可以合并多个同类型的数据流，并生成同类型的数据流，即可以将多个<code>DataStream[T]</code>合并为一个新的<code>DataStream[T]</code>。数据将按照先进先出（<code>First In First Out</code>）的模式合并，且<strong>不去重</strong>。下图<code>union</code>对白色和深色两个数据流进行合并，生成一个数据流。</p><p><img src="/images/flink18.png" alt="union"></p><h3 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h3><p><code>union</code>虽然可以合并多个数据流，但有一个限制，即多个数据流的数据类型必须相同。<code>connect</code>提供了和<code>union</code>类似的功能，用来连接两个数据流，它与<code>union</code>的区别在于：</p><ul><li><code>connect</code>只能连接<strong>两个数据流</strong>，<code>union</code>可以连接<strong>多个数据流</strong>。</li><li><code>connect</code>所连接的两个数据流的<strong>数据类型可以不一致</strong>，<code>union</code>所连接的两个数据流的<strong>数据类型必须一致</strong>。</li><li>两个<code>DataStream</code>经过<code>connect</code>之后被转化为<code>ConnectedStreams</code>，<code>ConnectedStreams</code>会对两个流的数据应用不同的处理方法，且双流之间可以<strong>共享状态</strong>。</li></ul><p><code>connect</code>经常被应用在对一个数据流使用另外一个流进行控制处理的场景上，如下图所示。控制流可以是阈值、规则、机器学习模型或其他参数。<br><img src="/images/flink19.png" alt="connect"></p><ul><li>对于ConnectedStreams，我们需要重写CoMapFunction或CoFlatMapFunction。这两个接口都提供了三个泛型，这三个泛型分别对应第一个输入流的数据类型、第二个输入流的数据类型和输出流的数据类型。</li><li>在重写函数时，对于CoMapFunction，map1处理第一个流的数据，map2处理第二个流的数据；对于CoFlatMapFunction，flatMap1处理第一个流的数据，flatMap2处理第二个流的数据。</li><li>Flink并不能保证两个函数调用顺序，两个函数的调用依赖于两个数据流数据的流入先后顺序，即第一个数据流有数据到达时，map1或flatMap1会被调用，第二个数据流有数据到达时，map2或flatMap2会被调用。</li><li>Flink允许我们将connect和keyBy或broadcast结合起来使用。</li></ul><h3 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/103342602" target="_blank" rel="noopener">Flink时间系列：如何在两个DataStream上进行Join操作</a></li><li><a href="https://zhuanlan.zhihu.com/p/99425612" target="_blank" rel="noopener">Flink算子使用方法及实例演示：union和connect</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flink数据类型转换</title>
      <link href="/2020/03/18/flink-shu-ju-lei-xing-zhuan-huan/"/>
      <url>/2020/03/18/flink-shu-ju-lei-xing-zhuan-huan/</url>
      
        <content type="html"><![CDATA[<h3 id="转换关系总图"><a href="#转换关系总图" class="headerlink" title="转换关系总图"></a>转换关系总图</h3><p><img src="/images/flink8.png" alt="转换关系"></p><h3 id="DataStream"><a href="#DataStream" class="headerlink" title="DataStream"></a>DataStream</h3><p>DataStream 是 Flink 流处理 API 中最核心的数据结构。它代表了一个运行在多个分区上的并行流。一个 DataStream 可以从 StreamExecutionEnvironment 通过env.addSource(SourceFunction) 获得。</p><p>DataStream 上的转换操作都是逐条的，比如 map()，flatMap()，filter()。DataStream 也可以执行 rebalance（再平衡，用来减轻数据倾斜）和 broadcaseted（广播）等分区转换。</p><h3 id="KeyedStream"><a href="#KeyedStream" class="headerlink" title="KeyedStream"></a>KeyedStream</h3><p>KeyedStream用来表示根据指定的key进行分组的数据流。一个KeyedStream可以通过调用DataStream.keyBy()来获得。而在KeyedStream上进行任何transformation都将转变回DataStream。在实现中，KeyedStream是把key的信息写入到了transformation中。每条记录只能访问所属key的状态，其上的聚合函数可以方便地操作和保存对应key的状态。</p><h3 id="WindowedStream-amp-AllWindowedStream"><a href="#WindowedStream-amp-AllWindowedStream" class="headerlink" title="WindowedStream &amp; AllWindowedStream"></a>WindowedStream &amp; AllWindowedStream</h3><p>WindowedStream代表了根据key分组，并且基于WindowAssigner切分窗口的数据流。所以WindowedStream都是从KeyedStream衍生而来的。而在WindowedStream上进行任何transformation也都将转变回DataStream。</p><p>在key分组的流上进行窗口切分是比较常用的场景，也能够很好地并行化（不同的key上的窗口聚合可以分配到不同的task去处理）。不过有时候我们也需要在普通流上进行窗口的操作，这就是 AllWindowedStream。AllWindowedStream是直接在DataStream上进行windowAll(…)操作。</p><p>Flink 的窗口实现中会将到达的数据缓存在对应的窗口buffer中（一个数据可能会对应多个窗口）。当到达窗口发送的条件时（由Trigger控制），Flink 会对整个窗口中的数据进行处理。Flink 在聚合类窗口有一定的优化，即不会保存窗口中的所有值，而是每到一个元素执行一次聚合函数，最终只保存一份数据即可。</p><p><img src="/images/flink9.png" alt="window"></p><h3 id="JoinedStreams-amp-CoGroupedStreams"><a href="#JoinedStreams-amp-CoGroupedStreams" class="headerlink" title="JoinedStreams &amp; CoGroupedStreams"></a>JoinedStreams &amp; CoGroupedStreams</h3><h3 id="ConnectedStreams"><a href="#ConnectedStreams" class="headerlink" title="ConnectedStreams"></a>ConnectedStreams</h3><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://wuchong.me/blog/2016/05/20/flink-internals-streams-and-operations-on-streams/" target="_blank" rel="noopener">http://wuchong.me/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8流-Stream用法</title>
      <link href="/2020/03/16/java8-liu-stream-yong-fa/"/>
      <url>/2020/03/16/java8-liu-stream-yong-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="用法"><a href="#用法" class="headerlink" title="::用法"></a><code>::</code>用法</h3><p>jdk8中使用了<code>::</code>的用法。就是把方法当做参数传到stream内部，使stream的每个元素都传入到该方法里面执行一下，双冒号运算就是Java中的<code>[方法引用]</code>,<code>[方法引用]</code>的格式是：</p><pre><code>类名：：方法名</code></pre><p><strong>例如：</strong></p><p>表达式：</p><pre class="line-numbers language-java"><code class="language-java">person <span class="token operator">-</span><span class="token operator">></span> person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用双冒号：</p><pre class="line-numbers language-java"><code class="language-java">Person <span class="token operator">:</span><span class="token operator">:</span> getAge<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="stream和parallelStream"><a href="#stream和parallelStream" class="headerlink" title="stream和parallelStream"></a>stream和parallelStream</h3><p>用于生成数据流</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> strings <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"bc"</span><span class="token punctuation">,</span> <span class="token string">"efg"</span><span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"jkl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//生成顺序流</span>strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//生成并行流</span>strings<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><p>用于迭代数据流中每个数据</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> strings <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"bc"</span><span class="token punctuation">,</span> <span class="token string">"efg"</span><span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"jkl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>对数据流中每个数据执行方法</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> strings <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 每个数据加1操作</span>strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">-</span><span class="token operator">></span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h3><p>去重</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> strings <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 去除重复的4,5,5</span>strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>过滤</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span>strings <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"bc"</span><span class="token punctuation">,</span> <span class="token string">"efg"</span><span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"jkl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取空字符串的数量</span><span class="token keyword">long</span> count <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>string <span class="token operator">-</span><span class="token operator">></span> string<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取非空数量</span><span class="token keyword">long</span> count <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>string <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>string<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h3><p>限制流的大小</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> strings <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 只会打印前4个</span>strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h3><p>排序</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> strings <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 排序打印</span>strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Collectors"><a href="#Collectors" class="headerlink" title="Collectors"></a>Collectors</h3><p>归约操作</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span>strings <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"bc"</span><span class="token punctuation">,</span> <span class="token string">"efg"</span><span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"jkl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> filtered <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>string <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>string<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"筛选列表: "</span> <span class="token operator">+</span> filtered<span class="token punctuation">)</span><span class="token punctuation">;</span>String mergedString <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>string <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>string<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"合并字符串: "</span> <span class="token operator">+</span> mergedString<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="summaryStatistics"><a href="#summaryStatistics" class="headerlink" title="summaryStatistics"></a>summaryStatistics</h3><p>统计</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> numbers <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IntSummaryStatistics stats <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">summaryStatistics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"列表中最大的数 : "</span> <span class="token operator">+</span> stats<span class="token punctuation">.</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"列表中最小的数 : "</span> <span class="token operator">+</span> stats<span class="token punctuation">.</span><span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有数之和 : "</span> <span class="token operator">+</span> stats<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"平均数 : "</span> <span class="token operator">+</span> stats<span class="token punctuation">.</span><span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.runoob.com/java/java8-streams.html" target="_blank" rel="noopener">参考1</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8 </tag>
            
            <tag> stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flink代码学习笔记</title>
      <link href="/2020/03/16/flink-dai-ma-xue-xi-bi-ji/"/>
      <url>/2020/03/16/flink-dai-ma-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="一些关键字的解释说明"><a href="#一些关键字的解释说明" class="headerlink" title="一些关键字的解释说明"></a>一些关键字的解释说明</h2><h3 id="split-“-s”"><a href="#split-“-s”" class="headerlink" title=".split(“\s”)"></a>.split(“\s”)</h3><p><code>\\s</code>表示空格、回车、换行等空白符<br><code>\\s+</code>表示一个或多个空格、回车、换行等空白符</p><h3 id="split-“-w-”"><a href="#split-“-w-”" class="headerlink" title=".split(“\w+”)"></a>.split(“\w+”)</h3><p>表示匹配数字和字母下划线的多个字符</p><h3 id="tuple元组"><a href="#tuple元组" class="headerlink" title="tuple元组"></a>tuple元组</h3><p><code>tuple</code>是flink中自定义的一种组合类型，类似java中Map&lt;String,String&gt;，只不过Map只有两个字段，相当于<code>Tuple2</code>。</p><p>flink中<code>tuple</code>最多支持25个字段，不支持空字段.</p><blockquote><p>复合类型有：</p><ul><li>Flink Java Tuples(Flink Java API的一部分)：最多25个字段，空字段不支持</li><li>Scala Case classes(包括Scala tuples):最多25个字段，空字段不支持</li><li>Row:具有任意数量字段的元组，并支持空字段</li><li>POJO:遵循某种Bean模式的类</li></ul></blockquote><h4 id="tuple使用"><a href="#tuple使用" class="headerlink" title="tuple使用"></a>tuple使用</h4><p>最简单的情况是在元组的一个或多个字段上对元组进行分组：</p><pre class="line-numbers language-java"><code class="language-java">DataStream<span class="token operator">&lt;</span>Tuple3<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>String<span class="token punctuation">,</span>Long<span class="token operator">>></span> input <span class="token operator">=</span> <span class="token comment" spellcheck="true">// [...]</span>KeyedStream<span class="token operator">&lt;</span>Tuple3<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>String<span class="token punctuation">,</span>Long<span class="token operator">></span><span class="token punctuation">,</span>Tuple<span class="token operator">></span> keyed <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>元组在第一个字段（整数类型）上分组。</p><pre class="line-numbers language-java"><code class="language-java">DataStream<span class="token operator">&lt;</span>Tuple3<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>String<span class="token punctuation">,</span>Long<span class="token operator">>></span> input <span class="token operator">=</span> <span class="token comment" spellcheck="true">// [...]</span>KeyedStream<span class="token operator">&lt;</span>Tuple3<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>String<span class="token punctuation">,</span>Long<span class="token operator">></span><span class="token punctuation">,</span>Tuple<span class="token operator">></span> keyed <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在这里，我们将元组分组在由第一个和第二个字段组成的复合键上。</p><p>关于嵌套元组的注释：如果你有一个带有嵌套元组的DataStream，例如：</p><pre class="line-numbers language-java"><code class="language-java">DataStream<span class="token operator">&lt;</span>Tuple3<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Float<span class="token operator">></span><span class="token punctuation">,</span>String<span class="token punctuation">,</span>Long<span class="token operator">>></span> ds<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>指定keyBy(0)将导致系统使用full Tuple2作为键（以Integer和Float为键）。</p><p>更多参考<a href="https://flink.sojb.cn/dev/api_concepts.html" target="_blank" rel="noopener">官网</a></p><h3 id="map和flatMap"><a href="#map和flatMap" class="headerlink" title="map和flatMap"></a>map和flatMap</h3><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>把数组流中的每一个值，使用所提供的函数执行一遍，一一对应。得到元素个数相同的数组流。<br><img src="/images/flink6.png" alt="map"></p><p>map算子对一个DataStream中的每个元素使用用户自定义的map函数进行处理，每个输入元素对应一个输出元素，最终整个数据流被转换成一个新的DataStream。输出的数据流DataStream[OUT]类型可能和输入的数据流DataStream[IN]不同。</p><h4 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h4><p>flat是扁平的意思。它把数组流中的每一个值，使用所提供的函数执行一遍，一一对应。得到元素相同的数组流。只不过，里面的元素也是一个子数组流。把这些子数组合并成一个数组以后，元素个数大概率会和原数组流的个数不同。<br><img src="/images/flink7.png" alt="flatMap"></p><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>filter算子对每个元素进行过滤，过滤的过程使用一个filter函数进行逻辑判断。对于输入的每个元素，如果filter函数返回True，则保留，如果返回False，则丢弃。<br><img src="/images/flink12.png" alt="filter"></p><h3 id="keyBy"><a href="#keyBy" class="headerlink" title="keyBy"></a><a href="https://zhuanlan.zhihu.com/p/98975650" target="_blank" rel="noopener">keyBy</a></h3><p>绝大多数情况，我们要根据事件的某种属性或数据的某个字段进行分组，对一个分组内的数据进行处理。如下图所示，keyBy算子根据元素的形状对数据进行分组，相同形状的元素被分到了一起，可被后续算子统一处理。比如，多支股票数据流处理时，可以根据股票代号进行分组，然后对同一股票代号的数据统计其价格变动。又如，电商用户行为日志把所有用户的行为都记录了下来，如果要分析某一个用户行为，需要先按用户ID进行分组。<br><img src="/images/flink10.png" alt="keyby"></p><h3 id="aggregation"><a href="#aggregation" class="headerlink" title="aggregation"></a>aggregation</h3><p>常见的聚合操作有sum、max、min等，这些聚合操作统称为aggregation。aggregation需要一个参数来指定按照哪个字段进行聚合。跟keyBy相似，我们可以使用数字位置来指定对哪个字段进行聚合，也可以使用字段名。</p><p>与批处理不同，这些聚合函数是对流数据进行数据，流数据是依次进入Flink的，聚合操作是对之前流入的数据进行统计聚合。</p><ul><li>max算子对该字段求最大值，并将结果保存在该字段上。对于其他字段，该操作并不能保证其数值。</li><li>maxBy算子对该字段求最大值，maxBy与max的区别在于，maxBy同时保留其他字段的数值，即maxBy可以得到数据流中最大的元素。</li><li>同样，min和minBy的区别在于，min算子对某字段求最小值，minBy返回具有最小值的元素。</li></ul><blockquote><p>其实，这些aggregation操作里已经封装了状态数据，比如，sum算子内部记录了当前的和，max算子内部记录了当前的最大值。由于内部封装了状态数据，而且状态数据并不会被清理，因此一定要避免在一个无限数据流上使用aggregation。</p></blockquote><blockquote><p>注意，对于一个KeyedStream,一次只能使用一个aggregation操作，无法链式使用多个。</p></blockquote><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p>前面几个aggregation是几个较为特殊的操作，对分组数据进行处理更为通用的方法是使用reduce算子。<br><img src="/images/flink11.png" alt="reduce"></p><p>上图展示了reduce算子的原理：reduce在按照同一个Key分组的数据流上生效，它接受两个输入，生成一个输出，即两两合一地进行汇总操作，生成一个同类型的新元素。</p><pre class="line-numbers language-java"><code class="language-java">DataStream<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">>></span> counts <span class="token operator">=</span>    <span class="token comment" spellcheck="true">// split up the lines in pairs (2-tuples) containing: (word,1)</span>    text<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Tokenizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// group by the tuple field "0" and sum up tuple field "1"</span>        <span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//ReduceFunction定义了reduce方法，它主要是用来将两个同类型的值操作为一个同类型的值，第一个参数为前面reduce的结果，第二参数为当前的元素</span>        <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReduceFunction</span><span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token function">reduce</span><span class="token punctuation">(</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> value1<span class="token punctuation">,</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> value2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"value1:"</span><span class="token operator">+</span>value1<span class="token punctuation">.</span>f1<span class="token operator">+</span><span class="token string">";value2:"</span><span class="token operator">+</span>value2<span class="token punctuation">.</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>value1<span class="token punctuation">.</span>f0<span class="token punctuation">,</span> value1<span class="token punctuation">.</span>f1 <span class="token operator">+</span> value2<span class="token punctuation">.</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zhuanlan.zhihu.com/c_1127896820252299264" target="_blank" rel="noopener">皮皮鲁的AI星球</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flink典型应用场景</title>
      <link href="/2020/03/12/flink-dian-xing-ying-yong-chang-jing/"/>
      <url>/2020/03/12/flink-dian-xing-ying-yong-chang-jing/</url>
      
        <content type="html"><![CDATA[<h2 id="flink应用场景"><a href="#flink应用场景" class="headerlink" title="flink应用场景"></a><a href="https://flink.apache.org/zh/usecases.html" target="_blank" rel="noopener">flink应用场景</a></h2><p>Apache Flink 功能强大，支持开发和运行多种不同种类的应用程序。它的主要特性包括：批流一体化、精密的状态管理、事件时间支持以及精确一次的状态一致性保障等。Flink 不仅可以运行在包括 YARN、 Mesos、Kubernetes 在内的多种资源管理框架上，还支持在裸机集群上独立部署。在启用高可用选项的情况下，它不存在单点失效问题。事实证明，Flink 已经可以扩展到数千核心，其状态可以达到 TB 级别，且仍能保持高吞吐、低延迟的特性。世界各地有很多要求严苛的流处理应用都运行在 Flink 之上。</p><h3 id="事件驱动型应用"><a href="#事件驱动型应用" class="headerlink" title="事件驱动型应用"></a>事件驱动型应用</h3><h4 id="什么是事件驱动型应用？"><a href="#什么是事件驱动型应用？" class="headerlink" title="什么是事件驱动型应用？"></a>什么是事件驱动型应用？</h4><p>事件驱动型应用是一类具有状态的应用，它从一个或多个事件流提取数据，并根据到来的事件触发计算、状态更新或其他外部动作。</p><p>事件驱动型应用是在计算存储分离的传统应用基础上进化而来。在传统架构中，应用需要读写远程事务型数据库。</p><p>相反，事件驱动型应用是基于状态化流处理来完成。在该设计中，数据和计算不会分离，应用只需访问本地（内存或磁盘）即可获取数据。系统容错性的实现依赖于定期向远程持久化存储写入 checkpoint。下图描述了传统应用和事件驱动型应用架构的区别。<br><img src="/images/flink1.png" alt="事件驱动型应用"></p><h4 id="事件驱动型应用的优势？"><a href="#事件驱动型应用的优势？" class="headerlink" title="事件驱动型应用的优势？"></a>事件驱动型应用的优势？</h4><p>事件驱动型应用无须查询远程数据库，本地数据访问使得它具有更高的吞吐和更低的延迟。而由于定期向远程持久化存储的 checkpoint 工作可以异步、增量式完成，因此对于正常事件处理的影响甚微。事件驱动型应用的优势不仅限于本地数据访问。传统分层架构下，通常多个应用会共享同一个数据库，因而任何对数据库自身的更改（例如：由应用更新或服务扩容导致数据布局发生改变）都需要谨慎协调。反观事件驱动型应用，由于只需考虑自身数据，因此在更改数据表示或服务扩容时所需的协调工作将大大减少。</p><h4 id="Flink-如何支持事件驱动型应用？"><a href="#Flink-如何支持事件驱动型应用？" class="headerlink" title="Flink 如何支持事件驱动型应用？"></a>Flink 如何支持事件驱动型应用？</h4><p>事件驱动型应用会受制于底层流处理系统对时间和状态的把控能力，Flink 诸多优秀特质都是围绕这些方面来设计的。它提供了一系列丰富的状态操作原语，允许以精确一次的一致性语义合并海量规模（TB 级别）的状态数据。此外，Flink 还支持事件时间和自由度极高的定制化窗口逻辑，而且它内置的 ProcessFunction 支持细粒度时间控制，方便实现一些高级业务逻辑。同时，Flink 还拥有一个复杂事件处理（CEP）类库，可以用来检测数据流中的模式。</p><p>Flink 中针对事件驱动应用的明星特性当属 savepoint。Savepoint 是一个一致性的状态映像，它可以用来初始化任意状态兼容的应用。在完成一次 savepoint 后，即可放心对应用升级或扩容，还可以启动多个版本的应用来完成 A/B 测试。</p><h4 id="典型的事件驱动型应用实例"><a href="#典型的事件驱动型应用实例" class="headerlink" title="典型的事件驱动型应用实例"></a>典型的事件驱动型应用实例</h4><ul><li>反欺诈</li><li>异常检测</li><li>基于规则的报警</li><li>业务流程监控</li><li>（社交网络）Web 应用</li></ul><h3 id="数据分析应用"><a href="#数据分析应用" class="headerlink" title="数据分析应用"></a>数据分析应用</h3><h4 id="什么是数据分析应用？"><a href="#什么是数据分析应用？" class="headerlink" title="什么是数据分析应用？"></a>什么是数据分析应用？</h4><p>数据分析任务需要从原始数据中提取有价值的信息和指标。传统的分析方式通常是利用批查询，或将事件记录下来并基于此有限数据集构建应用来完成。为了得到最新数据的分析结果，必须先将它们加入分析数据集并重新执行查询或运行应用，随后将结果写入存储系统或生成报告。</p><p>借助一些先进的流处理引擎，还可以实时地进行数据分析。和传统模式下读取有限数据集不同，流式查询或应用会接入实时事件流，并随着事件消费持续产生和更新结果。这些结果数据可能会写入外部数据库系统或以内部状态的形式维护。仪表展示应用可以相应地从外部数据库读取数据或直接查询应用的内部状态。</p><p>如下图所示，Apache Flink 同时支持流式及批量分析应用。<br><img src="/images/flink2.png" alt="数据分析应用"></p><h4 id="流式分析应用的优势？"><a href="#流式分析应用的优势？" class="headerlink" title="流式分析应用的优势？"></a>流式分析应用的优势？</h4><p>和批量分析相比，由于流式分析省掉了周期性的数据导入和查询过程，因此从事件中获取指标的延迟更低。不仅如此，批量查询必须处理那些由定期导入和输入有界性导致的人工数据边界，而流式查询则无须考虑该问题。</p><p>另一方面，流式分析会简化应用抽象。批量查询的流水线通常由多个独立部件组成，需要周期性地调度提取数据和执行查询。如此复杂的流水线操作起来并不容易，一旦某个组件出错将会影响流水线的后续步骤。而流式分析应用整体运行在 Flink 之类的高端流处理系统之上，涵盖了从数据接入到连续结果计算的所有步骤，因此可以依赖底层引擎提供的故障恢复机制。</p><h4 id="Flink-如何支持数据分析类应用？"><a href="#Flink-如何支持数据分析类应用？" class="headerlink" title="Flink 如何支持数据分析类应用？"></a>Flink 如何支持数据分析类应用？</h4><p>Flink 为持续流式分析和批量分析都提供了良好的支持。具体而言，它内置了一个符合 ANSI 标准的 SQL 接口，将批、流查询的语义统一起来。无论是在记录事件的静态数据集上还是实时事件流上，相同 SQL 查询都会得到一致的结果。同时 Flink 还支持丰富的用户自定义函数，允许在 SQL 中执行定制化代码。如果还需进一步定制逻辑，可以利用 Flink DataStream API 和 DataSet API 进行更低层次的控制。此外，Flink 的 Gelly 库为基于批量数据集的大规模高性能图分析提供了算法和构建模块支持。</p><h4 id="典型的数据分析应用实例"><a href="#典型的数据分析应用实例" class="headerlink" title="典型的数据分析应用实例"></a>典型的数据分析应用实例</h4><ul><li>电信网络质量监控</li><li>移动应用中的产品更新及实验评估分析</li><li>消费者技术中的实时数据即席分析</li><li>大规模图分析</li></ul><h3 id="数据管道应用"><a href="#数据管道应用" class="headerlink" title="数据管道应用"></a>数据管道应用</h3><h4 id="什么是数据管道？"><a href="#什么是数据管道？" class="headerlink" title="什么是数据管道？"></a>什么是数据管道？</h4><p>提取-转换-加载（ETL）是一种在存储系统之间进行数据转换和迁移的常用方法。ETL 作业通常会周期性地触发，将数据从事务型数据库拷贝到分析型数据库或数据仓库。</p><p>数据管道和 ETL 作业的用途相似，都可以转换、丰富数据，并将其从某个存储系统移动到另一个。但数据管道是以持续流模式运行，而非周期性触发。因此它支持从一个不断生成数据的源头读取记录，并将它们以低延迟移动到终点。例如：数据管道可以用来监控文件系统目录中的新文件，并将其数据写入事件日志；另一个应用可能会将事件流物化到数据库或增量构建和优化查询索引。</p><p>下图描述了周期性 ETL 作业和持续数据管道的差异。<br><img src="/images/flink3.png" alt="数据管道应用"></p><h4 id="数据管道的优势？"><a href="#数据管道的优势？" class="headerlink" title="数据管道的优势？"></a>数据管道的优势？</h4><p>和周期性 ETL 作业相比，持续数据管道可以明显降低将数据移动到目的端的延迟。此外，由于它能够持续消费和发送数据，因此用途更广，支持用例更多。</p><h4 id="Flink-如何支持数据管道应用？"><a href="#Flink-如何支持数据管道应用？" class="headerlink" title="Flink 如何支持数据管道应用？"></a>Flink 如何支持数据管道应用？</h4><p>很多常见的数据转换和增强操作可以利用 Flink 的 SQL 接口（或 Table API）及用户自定义函数解决。如果数据管道有更高级的需求，可以选择更通用的 DataStream API 来实现。Flink 为多种数据存储系统（如：Kafka、Kinesis、Elasticsearch、JDBC数据库系统等）内置了连接器。同时它还提供了文件系统的连续型数据源及数据汇，可用来监控目录变化和以时间分区的方式写入文件。</p><h4 id="典型的数据管道应用实例"><a href="#典型的数据管道应用实例" class="headerlink" title="典型的数据管道应用实例"></a>典型的数据管道应用实例</h4><ul><li>电子商务中的实时查询索引构建</li><li>电子商务中的持续 ETL</li></ul><h2 id="阿里蒋晓伟谈计算引擎Flink和Spark的对比"><a href="#阿里蒋晓伟谈计算引擎Flink和Spark的对比" class="headerlink" title="阿里蒋晓伟谈计算引擎Flink和Spark的对比"></a><a href="https://www.cnblogs.com/xiaodf/p/11751110.html" target="_blank" rel="noopener">阿里蒋晓伟谈计算引擎Flink和Spark的对比</a></h2><h3 id="相比Spark、Hadoop、Storm等，是什么样的场景需求让阿里搜索团队选择了Flink？"><a href="#相比Spark、Hadoop、Storm等，是什么样的场景需求让阿里搜索团队选择了Flink？" class="headerlink" title="相比Spark、Hadoop、Storm等，是什么样的场景需求让阿里搜索团队选择了Flink？"></a>相比Spark、Hadoop、Storm等，是什么样的场景需求让阿里搜索团队选择了Flink？</h3><p>首先我们希望有个流计算和批处理的一体化处理方案。Spark和Flink都具有流和批处理能力，但是他们的做法是相反的。Spark Streaming是把流转化成一个个小的批来处理，这种方案的一个问题是我们需要的延迟越低，额外开销占的比例就会越大，这导致了Spark Streaming很难做到秒级甚至亚秒级的延迟。Flink是把批当作一种有限的流，这种做法的一个特点是在流和批共享大部分代码的同时还能够保留批处理特有的一系列的优化。因为这个原因，如果要用一套引擎来解决流和批处理，那就必须以流处理为基础，所以我们决定先选择一个优秀的流处理引擎。从功能上流处理可以分为无状态的和有状态两种。在流处理的框架里引入状态管理大大提升了系统的表达能力，让用户能够很方便地实现复杂的处理逻辑，是流处理在功能上的一个飞跃。流处理引擎对一致性的支持可以分为：best effort，at least once 和 exactly once。Exactly once的语义才能真正保证完全的一致性，Flink采用的架构比较优雅地实现了exactly once的有状态流处理。另外在保证了一致性的前提下Flink在性能上也是相当优秀的。</p><p>总结一下:</p><ul><li>我们觉得在流处理方面Flink在功能，延迟，一致性和性能上综合来看是目前社区最优秀的。</li><li>实现流和批的一体化方案。</li><li>Flink有一个比较活跃的社区。</li></ul><h3 id="您认为Flink未来的杀手级应用会是什么？"><a href="#您认为Flink未来的杀手级应用会是什么？" class="headerlink" title="您认为Flink未来的杀手级应用会是什么？"></a>您认为Flink未来的杀手级应用会是什么？</h3><p>…,我觉得Flink在流计算上的优势是非常大的，随着在线学习等流计算需求的增长，在这方面Flink一定会大放异彩。</p><h2 id="企业实践经典案例"><a href="#企业实践经典案例" class="headerlink" title="企业实践经典案例"></a><a href="https://ververica.cn/corporate-practice/" target="_blank" rel="noopener">企业实践经典案例</a></h2><h3 id="日均处理万亿数据！Apache-Flink在快手的应用实践与技术演进之路"><a href="#日均处理万亿数据！Apache-Flink在快手的应用实践与技术演进之路" class="headerlink" title="日均处理万亿数据！Apache Flink在快手的应用实践与技术演进之路"></a><a href="https://ververica.cn/corporate_practice/kuaishou/" target="_blank" rel="noopener">日均处理万亿数据！Apache Flink在快手的应用实践与技术演进之路</a></h3><p><img src="/images/flink4.png" alt="快手"></p><p>快手计算链路是从 DB/Binlog 以及 WebService Log 实时入到 Kafka 中，然后接入 Flink 做实时计算，其中包括实时 ETL、实时分析、Interval Join 以及实时训练，最后的结果存到 Druid、ES 或者 HBase 里面，后面接入一些数据应用产品；同时这一份 Kafka 数据实时 Dump 一份到 Hadoop 集群，然后接入离线计算。</p><h4 id="Flink-在快手应用的类别主要分为三大类："><a href="#Flink-在快手应用的类别主要分为三大类：" class="headerlink" title="Flink 在快手应用的类别主要分为三大类："></a>Flink 在快手应用的类别主要分为三大类：</h4><ul><li>80% 统计监控：实时统计，包括各项数据的指标，监控项报警，用于辅助业务进行实时分析和监控；</li><li>15% 数据处理：对数据的清洗、拆分、Join 等逻辑处理，例如大 Topic 的数据拆分、清洗；</li><li>5% 数据处理：实时业务处理，针对特定业务逻辑的实时处理，例如实时调度。</li></ul><h4 id="Flink-在快手应用的典型场景包括："><a href="#Flink-在快手应用的典型场景包括：" class="headerlink" title="Flink 在快手应用的典型场景包括："></a>Flink 在快手应用的典型场景包括：</h4><ul><li>快手是分享短视频跟直播的平台，快手短视频、直播的质量监控是通过 Flink 进行实时统计，比如直播观众端、主播端的播放量、卡顿率、开播失败率等跟直播质量相关的多种监控指标；</li><li>用户增长分析，实时统计各投放渠道拉新情况，根据效果实时调整各渠道的投放量；</li><li>实时数据处理，广告展现流、点击流实时 Join，客户端日志的拆分等；</li><li>直播 CDN 调度，实时监控各 CDN 厂商质量，通过 Flink 实时训练调整各个 CDN 厂商流量配比。</li></ul><h4 id="规模"><a href="#规模" class="headerlink" title="规模"></a>规模</h4><p>快手目前集群规模有 1500 台左右，作业数量大约是 500 左右，日处理条目数总共有 1.7 万亿，峰值处理条目数大约是 3.7 千万。集群部署都是 On Yarn 模式，分为离线集群和实时集群两类集群，其中离线集群混合部署，机器通过标签进行物理隔离，实时集群是 Flink 专用集群，针对隔离性、稳定性要求极高的业务部署。</p><h4 id="Interval-Join-应用场景"><a href="#Interval-Join-应用场景" class="headerlink" title="Interval Join 应用场景"></a>Interval Join 应用场景</h4><p><img src="/images/flink5.png" alt="快手"></p><p>Interval Join 在快手的一个应用场景是广告展现点击流实时 Join 场景：打开快手 App 可能会收到广告服务推荐的广告视频，用户有时会点击展现的广告视频。这样在后端形成两份数据流，一份是广告展现日志，一份是客户端点击日志。这两份数据需进行实时 Join，将 Join 结果作为样本数据用于模型训练，训练出的模型会被推送到线上的广告服务。</p><p>该场景下展现以后 20 分钟的点击被认为是有效点击，实时 Join 逻辑则是点击数据 Join 过去 20 分钟展现。其中，展现流的数据量相对比较大，20 分钟数据在 1 TB 以上。最初实时 Join 过程是业务自己实现，通过 Redis 缓存广告展现日志，Kafka 延迟消费客户端点击日志实现 Join 逻辑，该方式缺点是实时性不高，并且随着业务增长需要堆积更多机器，运维成本非常高。基于 Flink 使用 Interval Join 完美契合此场景，并且实时性高，能够实时输出 Join 后的结果数据，对业务来说维护成本非常低，只需要维护一个 Flink 作业即可。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flink视频教程学习笔记</title>
      <link href="/2020/03/10/flink-shi-pin-jiao-cheng-xue-xi-bi-ji/"/>
      <url>/2020/03/10/flink-shi-pin-jiao-cheng-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="视频地址"><a href="#视频地址" class="headerlink" title="视频地址"></a>视频地址</h1><p><a href="https://ververica.cn/developers/flink-training-course1/" target="_blank" rel="noopener">视频地址</a></p><h2 id="基础定义"><a href="#基础定义" class="headerlink" title="基础定义"></a>基础定义</h2><h3 id="有界-无界数据流"><a href="#有界-无界数据流" class="headerlink" title="有界/无界数据流"></a>有界/无界数据流</h3><h3 id="有状态计算"><a href="#有状态计算" class="headerlink" title="有状态计算"></a>有状态计算</h3><blockquote><p>例如：过去一段时间的点击量<br><strong>状态可持久化</strong></p></blockquote><h3 id="时间官网"><a href="#时间官网" class="headerlink" title="时间官网"></a>时间<a href="https://flink.apache.org/zh/flink-applications.html" target="_blank" rel="noopener">官网</a></h3><ul><li>事件发生时间</li><li>事件进入flink时间</li><li>flink处理事件时间</li></ul><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>3层API</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>Data Pipeline</li><li>Data Analytics</li><li>Data Driven</li></ul><h1 id="flink-maven构建项目命令"><a href="#flink-maven构建项目命令" class="headerlink" title="flink - maven构建项目命令"></a>flink - maven构建项目命令</h1><pre><code>mvn archetype:generate -DarchetypeGroupId=org.apache.flink -DarchetypeArtifactId=flink-quickstart-java -DarchetypeVersion=1.10.0</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka单机版部署</title>
      <link href="/2020/03/03/kafka-dan-ji-ban-bu-shu/"/>
      <url>/2020/03/03/kafka-dan-ji-ban-bu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="下载kafka"><a href="#下载kafka" class="headerlink" title="下载kafka"></a>下载kafka</h1><p>在官网<a href="https://kafka.apache.org/downloads" target="_blank" rel="noopener">下载</a>kafka最新版本。</p><p>如：当前最新<code>2.4.0</code>，针对Scala不同版本有不同的编译包，下载<code>Scala 2.12</code>的测试。</p><pre><code>wget http://mirrors.tuna.tsinghua.edu.cn/apache/kafka/2.4.0/kafka_2.12-2.4.0.tgz</code></pre><pre class="line-numbers language-sh"><code class="language-sh"># 解压tar -xzf kafka_2.12-2.4.0.tgz#进入目录cd kafka_2.12-2.4.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><h2 id="启动zookeeper"><a href="#启动zookeeper" class="headerlink" title="启动zookeeper"></a>启动zookeeper</h2><pre><code>bin/zookeeper-server-start.sh config/zookeeper.properties</code></pre><h2 id="启动kafka"><a href="#启动kafka" class="headerlink" title="启动kafka"></a>启动kafka</h2><pre><code>bin/kafka-server-start.sh config/server.properties</code></pre><blockquote><p>如果需要放到后台运行，可以加上<code>&amp;</code>或者 <code>nohup</code>命令.<br><code>nohup bin/zookeeper-server-start.sh config/zookeeper.properties &amp;</code></p></blockquote><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="创建主题"><a href="#创建主题" class="headerlink" title="创建主题"></a>创建主题</h2><pre><code>bin/kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic test</code></pre><h2 id="查看主题列表"><a href="#查看主题列表" class="headerlink" title="查看主题列表"></a>查看主题列表</h2><pre><code>bin/kafka-topics.sh --list --bootstrap-server localhost:9092</code></pre><h2 id="向主题发送消息"><a href="#向主题发送消息" class="headerlink" title="向主题发送消息"></a>向主题发送消息</h2><pre><code>bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test</code></pre><h2 id="从主题消费消息"><a href="#从主题消费消息" class="headerlink" title="从主题消费消息"></a>从主题消费消息</h2><pre><code>bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning</code></pre><h1 id="搭建kafka集群"><a href="#搭建kafka集群" class="headerlink" title="搭建kafka集群"></a>搭建kafka集群</h1><p>参考<a href="https://kafka.apache.org/quickstart" target="_blank" rel="noopener">官网</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper单机版部署</title>
      <link href="/2020/03/03/zookeeper-dan-ji-ban-bu-shu/"/>
      <url>/2020/03/03/zookeeper-dan-ji-ban-bu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="下载压缩包"><a href="#下载压缩包" class="headerlink" title="下载压缩包"></a>下载压缩包</h1><pre class="line-numbers language-sh"><code class="language-sh">wget http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.5.7/apache-zookeeper-3.5.7-bin.tar.gztar -zxvf apache-zookeeper-3.5.7-bin.tar.gz cd apache-zookeeper-3.5.7-bin/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：<code>zookeeper</code>从<code>3.5.5</code>版本开始，需要下载<code>*-bin.tar.gz</code>的包才能运行，否则启动会报错，缺少类。</p></blockquote><h1 id="拷贝zoo-cfg"><a href="#拷贝zoo-cfg" class="headerlink" title="拷贝zoo.cfg"></a>拷贝zoo.cfg</h1><p>用默认配置即可</p><pre><code>cp conf/zoo_sample.cfg conf/zoo.cfg</code></pre><h1 id="启动-amp-检查"><a href="#启动-amp-检查" class="headerlink" title="启动&amp;检查"></a>启动&amp;检查</h1><p>启动</p><pre><code>./bin/zkServer.sh start</code></pre><p>检查</p><pre><code>./bin/zkServer.sh status</code></pre><p>停止</p><pre><code>./bin/zkServer.sh stop</code></pre><p>重启</p><pre><code>./bin/zkServer.sh restart</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国内提升github访问速度</title>
      <link href="/2020/03/03/guo-nei-ti-sheng-github-fang-wen-su-du/"/>
      <url>/2020/03/03/guo-nei-ti-sheng-github-fang-wen-su-du/</url>
      
        <content type="html"><![CDATA[<h1 id="修改hosts文件"><a href="#修改hosts文件" class="headerlink" title="修改hosts文件"></a>修改hosts文件</h1><pre><code>151.101.72.133 assets-cdn.github.com151.101.73.194 github.global.ssl.fastly.net192.30.253.113 github.com11.238.159.92 git.node5.mirror.et2sqa</code></pre><blockquote><p>如果使用<code>Windows</code>系统，则是配置在<code>C:\Windows\System32\drivers\etc\hosts</code>文件中。<br>如果使用<code>Linux</code>系统，则是配置在的<code>/etc/hosts</code>文件中。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos卸载openjdk，并安装jdk</title>
      <link href="/2020/02/28/centos-xie-zai-openjdk-bing-an-zhuang-jdk/"/>
      <url>/2020/02/28/centos-xie-zai-openjdk-bing-an-zhuang-jdk/</url>
      
        <content type="html"><![CDATA[<h1 id="查找本机安装的openjdk"><a href="#查找本机安装的openjdk" class="headerlink" title="查找本机安装的openjdk"></a>查找本机安装的openjdk</h1><pre class="line-numbers language-sh"><code class="language-sh">rpm -qa | grep javapython-javapackages-3.4.1-11.el7.noarchjava-1.8.0-openjdk-1.8.0.181-7.b13.el7.x86_64java-1.8.0-openjdk-headless-1.8.0.181-7.b13.el7.x86_64tzdata-java-2018e-3.el7.noarchjavapackages-tools-3.4.1-11.el7.noarch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h1><p>依次使用命令<code>rpm -e --nodeps</code>卸载</p><pre><code>rpm -e --nodeps java-1.8.0-openjdk-1.8.0.181-7.b13.el7.x86_64</code></pre><h1 id="安装jdk1-8"><a href="#安装jdk1-8" class="headerlink" title="安装jdk1.8"></a>安装jdk1.8</h1><pre><code>#进入到安装目录cd /usr/local/tar -zxvf jdk-8u112-linux-x64.tar.gz</code></pre><pre><code>vim /etc/profile</code></pre><p>文件末尾增加</p><pre><code>#java_homeexport JAVA_HOME=/usr/local/bin/jdk1.8.0_112export PATH=$PATH:$JAVA_HOME/bin</code></pre><p>测试</p><pre class="line-numbers language-sh"><code class="language-sh">[root@node1 jdk1.8.0_112]# java -versionjava version "1.8.0_112"Java(TM) SE Runtime Environment (build 1.8.0_112-b15)Java HotSpot(TM) 64-Bit Server VM (build 25.112-b15, mixed mode)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> jdk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openjdk </tag>
            
            <tag> jdk </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis总结</title>
      <link href="/2020/02/28/redis-zong-jie/"/>
      <url>/2020/02/28/redis-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="redis高可用"><a href="#redis高可用" class="headerlink" title="redis高可用"></a>redis高可用</h1><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p><img src="/images/redis1.png" alt="主从复制"></p><ul><li>一个master可以拥有多个slave，一个slave又可以拥有多个slave，如此下去，形成了强大的多级服务器集群架构</li><li>master用来写数据，slave用来读数据，经统计：网站的读写比率是10:1</li><li>通过主从配置可以实现读写分离</li><li>master和slave都是一个redis实例(redis服务)</li></ul><h3 id="全量同步过程"><a href="#全量同步过程" class="headerlink" title="全量同步过程"></a>全量同步过程</h3><p><img src="/images/redis2.png" alt="主从复制"></p><ol><li>当一个从数据库启动时，会向主数据库发送sync命令</li><li>主数据库接收到sync命令后会开始在后台保存快照（执行rdb操作），并用缓存区记录后续的所有写操作</li><li>当主服务器快照保存完成后，redis会将快照文件发送给从数据库。</li><li>从数据库收到快照文件后，会丢弃所有旧数据，载入收到的快照。</li><li>主服务器快照发送完毕后开始向从服务器发送缓冲区中的写命令。</li><li>从服务器完成对快照的载入，开始接收命令请求，并执行来自主服务器缓冲区的写命令。</li></ol><h3 id="增量同步的过程"><a href="#增量同步的过程" class="headerlink" title="增量同步的过程"></a>增量同步的过程</h3><p>Redis增量复制是指slave初始化后开始正常工作时主服务器发生的写操作同步到从服务器的过程。 </p><p>增量复制的过程主要是主服务器每执行一个写命令就会向从服务器发送相同的写命令，从服务器接收并执行收到的写命令。</p><h3 id="Redis主从复制全量与增量同步的选择"><a href="#Redis主从复制全量与增量同步的选择" class="headerlink" title="Redis主从复制全量与增量同步的选择"></a>Redis主从复制全量与增量同步的选择</h3><p>主从服务器刚刚连接的时候，会先进行全量同步；全同步结束后，再进行增量同步。当然，如果有需要，slave 在任何时候都可以发起全量同步。redis 策略是，无论如何，首先会尝试进行增量同步，如不成功，要求从机进行全量同步。</p><h3 id="主从复制优缺点："><a href="#主从复制优缺点：" class="headerlink" title="主从复制优缺点："></a>主从复制优缺点：</h3><p><strong>优点：</strong></p><ul><li>支持主从复制，主机会自动将数据同步到从机，可以进行读写分离</li><li>为了分载Master的读操作压力，Slave服务器可以为客户端提供只读操作的服务，写服务仍然必须由Master来完成</li><li>Slave同样可以接受其它Slaves的连接和同步请求，这样可以有效的分载Master的同步压力。</li><li>Master Server是以非阻塞的方式为Slaves提供服务。所以在Master-Slave同步期间，客户端仍然可以提交查询或修改请求。</li><li>Slave Server同样是以非阻塞的方式完成数据同步。在同步期间，如果有客户端提交查询请求，Redis则返回同步之前的数据</li></ul><p><strong>缺点：</strong></p><ul><li>Redis不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的IP才能恢复。</li><li>主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题，降低了系统的可用性。</li><li>Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。</li></ul><h2 id="哨兵模式（Redis-Sentinel）"><a href="#哨兵模式（Redis-Sentinel）" class="headerlink" title="哨兵模式（Redis Sentinel）"></a>哨兵模式（Redis Sentinel）</h2><p><img src="/images/redis3.png" alt="哨兵模式"></p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>Sentinel 的主要功能包括 主节点存活检测、主从运行情况检测、自动故障转移 （failover）、主从切换。Redis 的 Sentinel 最小配置是 一主一从。<br>Redis 的 Sentinel 系统可以用来管理多个 Redis 服务器，该系统可以执行以下四个任务：</p><ul><li><p>监控</p><blockquote><p>Sentinel 会不断的检查 主服务器 和 从服务器 是否正常运行。</p></blockquote></li><li><p>通知</p><blockquote><p>当被监控的某个 Redis 服务器出现问题，Sentinel 通过 API 脚本 向 管理员 或者其他的 应用程序 发送通知。</p></blockquote></li></ul><p>-自动故障转移</p><blockquote><p>当 主节点 不能正常工作时，Sentinel 会开始一次 自动的 故障转移操作，它会将与 失效主节点 是 主从关系 的其中一个 从节点 升级为新的 主节点，并且将其他的 从节点 指向 新的主节点。</p></blockquote><ul><li>配置提供者<blockquote><p>在 Redis Sentinel 模式下，客户端应用 在初始化时连接的是 Sentinel 节点集合，从中获取 主节点 的信息。</p></blockquote></li></ul><h3 id="主观下线和客观下线"><a href="#主观下线和客观下线" class="headerlink" title="主观下线和客观下线"></a>主观下线和客观下线</h3><p>默认情况下，每个 Sentinel 节点会以 每秒一次 的频率对 Redis 节点和 其它 的 Sentinel 节点发送 PING 命令，并通过节点的 回复 来判断节点是否在线。</p><h4 id="主观下线"><a href="#主观下线" class="headerlink" title="主观下线"></a>主观下线</h4><p>主观下线 适用于所有 主节点 和 从节点。如果在 down-after-milliseconds 毫秒内，Sentinel 没有收到 目标节点 的有效回复，则会判定 该节点 为 主观下线。</p><h4 id="客观下线"><a href="#客观下线" class="headerlink" title="客观下线"></a>客观下线</h4><p>客观下线 只适用于 主节点。如果 主节点 出现故障，Sentinel 节点会通过 sentinel is-master-down-by-addr 命令，向其它 Sentinel 节点询问对该节点的 状态判断。如果超过 <quorum> 个数的节点判定 主节点 不可达，则该 Sentinel 节点会判断 主节点 为 客观下线。</quorum></p><p><a href="https://juejin.im/post/5b7d226a6fb9a01a1e01ff64" target="_blank" rel="noopener">更多参考</a></p><h3 id="哨兵模式的优缺点"><a href="#哨兵模式的优缺点" class="headerlink" title="哨兵模式的优缺点"></a>哨兵模式的优缺点</h3><p><strong>优点</strong></p><ul><li>哨兵模式是基于主从模式的，所有主从的优点，哨兵模式都具有。</li><li>主从可以自动切换，系统更健壮，可用性更高。</li></ul><p><strong>缺点</strong></p><ul><li>Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。</li></ul><h2 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h2><p>在 <code>Redis 3.0</code> 之前，使用 哨兵（<code>sentinel</code>）机制来监控各个节点之间的状态。Redis Cluster 是 Redis 的 分布式解决方案，在 3.0 版本正式推出，有效地解决了 Redis 在 分布式 方面的需求。当遇到 单机内存、并发、流量 等瓶颈时，可以采用 Cluster 架构方案达到 负载均衡 的目的。</p><h3 id="数据分区"><a href="#数据分区" class="headerlink" title="数据分区"></a>数据分区</h3><p><img src="/images/redis4.png" alt="虚拟槽分区"></p><p>redis集群中数据是和槽（slot）挂钩的，其总共定义了16384个槽，所有的数据根据一致哈希算法会被映射到这16384个槽中的某个槽中；</p><p>另一方面，这16384个槽是按照设置被分配到不同的redis节点上的，比如启动了三个redis实例：cluster-A，cluster-B和cluster-C，这里将0-5460号槽分配给cluster-A，将5461-10922号槽分配给cluster-B，将10923-16383号槽分配给cluster-C（总共有16384个槽，但是其标号类似数组下标，是从0到16383）。也就是说数据的存储只和槽有关，并且槽的数量是一定的，由于一致hash算法是一定的，因而将这16384个槽分配给无论多少个redis实例，对于确认的数据其都将被分配到确定的槽位上。redis集群通过这种方式来达到redis的高效和高可用性目的。</p><p><a href="https://juejin.im/post/5b8fc5536fb9a05d2d01fb11#heading-4" target="_blank" rel="noopener">更多参考</a></p><h3 id="Redis虚拟槽分区的特点"><a href="#Redis虚拟槽分区的特点" class="headerlink" title="Redis虚拟槽分区的特点"></a>Redis虚拟槽分区的特点</h3><ul><li>解耦数据和节点之间的关系，简化了节点扩容和收缩难度。</li><li>节点自身维护槽的映射关系，不需要客户端或者代理服务维护槽分区元数据。</li><li>支持节点、槽、键 之间的映射查询，用于数据路由、在线伸缩等场景</li></ul><h3 id="Redis集群的功能限制"><a href="#Redis集群的功能限制" class="headerlink" title="Redis集群的功能限制"></a>Redis集群的功能限制</h3><p>Redis 集群相对单机在功能上存在一些限制。</p><ul><li><p>key批量操作支持有限。</p><blockquote><p>类似mset、mget操作，目前只支持对具有相同slot值的key执行 批量操作。对于映射为不同slot值的key由于执行mget、mget等操作可能存在于多个节点上，因此不被支持。</p></blockquote></li><li><p>key事务操作支持有限。</p><blockquote><p>只支持多key在同一节点上的事务操作，当多个key分布在不同的节点上时无法使用事务功能。</p></blockquote></li><li><p>key作为数据分区的最小粒度</p><blockquote><p>不能将一个大的键值对象如hash、list等映射到不同的节点。</p></blockquote></li><li><p>不支持多数据库空间</p><blockquote><p>单机下的<code>Redis</code>可以支持<code>16</code>个数据库（db0 ~ db15），集群模式 下只能使用一个数据库空间，即<code>db0</code>。</p></blockquote></li><li><p>复制结构只支持一层</p><blockquote><p>从节点只能复制主节点，不支持<code>嵌套树状复制</code>结构。</p></blockquote></li></ul><h1 id="redis常见问题"><a href="#redis常见问题" class="headerlink" title="redis常见问题"></a>redis常见问题</h1><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p>缓存雪崩我们可以简单的理解为：由于原有缓存失效，新缓存未到期间(例如：我们设置缓存时采用了相同的过期时间，在同一时刻出现大面积的缓存过期)，所有原本应该访问缓存的请求都去查询数据库了，而对数据库CPU和内存造成巨大压力，严重的会造成数据库宕机。从而形成一系列连锁反应，造成整个系统崩溃。</p><p>解决方案：</p><ul><li>排队加锁</li><li>缓存增加标记，过期前就更新</li><li>缓存时间增加随机属性，错开同一时间过期</li></ul><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p>缓存穿透是指用户查询数据，在数据库没有，自然在缓存中也不会有。这样就导致用户查询的时候，在缓存中找不到，每次都要去数据库再查询一遍，然后返回空（相当于进行了两次无用的查询）。这样请求就绕过缓存直接查数据库，这也是经常提的缓存命中率问题。</p><p>解决方案：</p><ul><li>采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被这个bitmap拦截掉，从而避免了对底层存储系统的查询压力。</li><li>如果一个查询返回的数据为空（不管是数据不存在，还是系统故障），我们仍然把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。通过这个直接设置的默认值存放到缓存，这样第二次到缓存中获取就有值了，而不会继续访问数据库，这种办法最简单粗暴！</li></ul><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p>对于一些设置了过期时间的key，如果这些key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑一个问题：缓存被“击穿”的问题，这个和缓存雪崩的区别在于这里针对某一key缓存，前者则是很多key。</p><p>缓存在某个时间点过期的时候，恰好在这个时间点对这个Key有大量的并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。</p><p>解决方案：</p><ul><li>使用互斥锁(mutex key)</li><li>“设置永不过期”，<a href="https://blog.csdn.net/zeb_perfect/article/details/54135506" target="_blank" rel="noopener">参考</a></li></ul><h2 id="缓存预热"><a href="#缓存预热" class="headerlink" title="缓存预热"></a>缓存预热</h2><p>缓存预热就是系统上线后，提前将相关的缓存数据直接加载到缓存系统。避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据！</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流式计算</title>
      <link href="/2020/02/27/liu-shi-ji-suan/"/>
      <url>/2020/02/27/liu-shi-ji-suan/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是流式计算"><a href="#什么是流式计算" class="headerlink" title="什么是流式计算"></a>什么是流式计算</h1><p>流式计算一般被用来和批量计算做比较。批量计算往往有一个固定的数据集作为输入并计算结果。而流式计算的输入往往是“无界”的（Unbounded Data），持续输入的，即永远拿不到全量数据去做计算；同时，计算结果也是持续输出的，只能拿到某一个时刻的结果，而不是最终的结果。（批量计算是全量的：拿到一批数据，计算一个结果；流式计算是增量的：数据持续输入，持续计算最新的结果）</p><h1 id="流式计算框架"><a href="#流式计算框架" class="headerlink" title="流式计算框架"></a>流式计算框架</h1><table><thead><tr><th></th><th>Storm</th><th>Trident</th><th>Spark Streaming</th><th>Flink</th><th>Samza</th><th>Kafka streams</th></tr></thead><tbody><tr><td>数据流模型</td><td>原生</td><td>微批</td><td>微批</td><td>原生</td><td>原生</td><td>原生</td></tr><tr><td>状态存储</td><td>不支持状态管理</td><td>本地存储，外部数据库</td><td>多种状态存储方式</td><td>多种状态存储方式</td><td>本地存储，Kafka主题</td><td>本地存储，日志变更主题</td></tr><tr><td>时延</td><td>低</td><td>高</td><td>高</td><td>低</td><td>低</td><td>低</td></tr><tr><td>吞吐量</td><td>低</td><td>高</td><td>高</td><td>高</td><td>高</td><td>高</td></tr><tr><td>保障机制</td><td>at-least-once</td><td>exactly-once</td><td>exactly-once</td><td>exactly-once</td><td>at-least-once</td><td>exactly-once</td></tr><tr><td>容错机制</td><td>record ack</td><td>record ack</td><td>RDD based，checkpoint</td><td>checkpoint</td><td>Kafka log-base</td><td>Kafka log</td></tr><tr><td>成熟度</td><td>较多不足，但实际应用比较广泛</td><td>Storm基础上改进</td><td>流行的框架之一，Spark大环境</td><td>较新的流处理框架，性能非常优秀</td><td>基于Kafka作为数据源</td><td>完全基于Kafka集群实现</td></tr><tr><td>定位</td><td>框架</td><td>框架</td><td>框架</td><td>框架</td><td>框架</td><td>类库</td></tr></tbody></table><h1 id="Kafka-Streams"><a href="#Kafka-Streams" class="headerlink" title="Kafka Streams"></a>Kafka Streams</h1><blockquote><p>Kafka Streams is a client library for building applications and microservices, where the input and output data are stored in Kafka clusters. It combines the simplicity of writing and deploying standard Java and Scala applications on the client side with the benefits of Kafka’s server-side cluster technology.</p></blockquote><p>Kafka Streams是一个构建应用程序和微服务的<strong>客户端库</strong>，并且输入数据个输出数据均是保存在Kafka集群上的。Kafka Streams主要有如下特点：</p><ul><li>非常简单的客户端库，可以非常容易的嵌入到任何java应用程序与任何应用程序进行封装集成。</li><li>使用Kafka集群作为消息层，没有外部依赖。</li><li>支持本地状态存储。</li><li>提供了快速故障切换分布式处理和容错能力。</li><li>提供了非常方便的API。</li><li>支持<code>exactly-once</code>语义</li><li>支持纪录级的处理，实现毫秒级的延迟</li><li>提供High-Level的Stream DSL和Low-Level的Processor API</li></ul><p>采用<code>one-record-at-a-time</code>的消息处理方式，实现消息处理的低延迟。<br>但是Kafka Streams的设计目标是足够轻量，所以很难满足对大体量的复杂计算需求，并且数据的输入和输出均是依靠Kafka集群，对于其他的数据源需要借助Kafka connect将数据输入到Kafka主题中，然后在通过Kafka Streams程序进行处理，并通过Kafka connect将主题中的数据转存到其他数据源。</p><p>所以Kafka Streams更适合计算复杂度较小，数据流动过程是<code>Kafka-&gt;Kafka</code>的场景。</p><h1 id="Storm"><a href="#Storm" class="headerlink" title="Storm"></a>Storm</h1><p>在Storm中，需要先设计一个实时计算结构，我们称之为拓扑（topology）。之后，这个拓扑结构会被提交给集群，其中主节点（master node）负责给工作节点（worker node）分配代码，工作节点负责执行代码。在一个拓扑结构中，包含spout和bolt两种角色。数据在spouts之间传递，这些spouts将数据流以tuple元组的形式发送；而bolt则负责转换数据流。</p><ul><li>状态管理：无状态，需用户自行进行状态管理</li><li>窗口支持：对事件窗口支持较弱，缓存整个窗口的所有数据，窗口结束时一起计算</li><li>消息投递：At Most Once/At Least Once</li><li>容错方式：对每个消息进行全链路跟踪，失败或超时进行重发。</li></ul><h1 id="Spark-Streaming"><a href="#Spark-Streaming" class="headerlink" title="Spark Streaming"></a>Spark Streaming</h1><p>采用微批的方式，提高了吞吐性能。Spark streaming批量读取数据源中的数据，然后把每个batch转化成内部的RDD。Spark streaming以batch为单位进行计算，而不是以record为单位，大大减少了ack所需的开销，显著满足了高吞吐、低延迟的要求，同时也提供exactly once功能。但也因为处理数据的粒度变大，导致Spark streaming的数据延时不如Storm，Spark streaming是秒级返回结果（与设置的batch间隔有关），Storm则是毫秒级。</p><p>但是Spark Streaming的优点是可以与Spark大环境进行有效的结合。</p><h1 id="Flink"><a href="#Flink" class="headerlink" title="Flink"></a>Flink</h1><p>Flink 是一种可以处理批处理任务的流处理框架。Flink 流处理为先的方法可提供低延迟，高吞吐率，近乎逐项处理的能力，并且提供了复杂计算的能力。</p><p>Flink 完全支持流处理，也就是说作为流处理看待时，输入数据流是无界的；批处理被作为一种特殊的流处理，只是它的输入数据流被定义为有界的。这与 Spark streaming 不同，Spark streaming 是将流处理视为无限个有界的批处理（microbatch）。</p><ul><li>有状态计算的 Exactly-once 语义。状态是指 flink 能够维护数据在时序上的聚类和聚合，同时它的 checkpoint 机制可以方便快速的做出失败重试； </li><li>支持带有事件时间（event time）语义的流处理和窗口处理。事件时间的语义使流计算的结果更加精确，尤其在事件到达无序或者延迟的情况下； </li><li>支持高度灵活的窗口（window）操作。支持基于 time、count、session，以及 data-driven 的窗口操作，能很好的对现实环境中的创建的数据进行建模；</li><li>轻量的容错处理（fault tolerance）。它使得系统既能保持高的吞吐率又能保证 exactly-once 的一致性。通过轻量的 state snapshots 实现；</li><li>支持高吞吐、低延迟、高性能的流处理；</li><li>支持 savepoints 机制（一般手动触发），可以将应用的运行状态保存下来；在升级应用或者处理历史数据上，能够做到无状态丢失和最小停机时间；</li><li>支持大规模的集群模式，支持 yarn、Mesos。可运行在成千上万的节点上；</li><li>支持具有 Backpressure 功能的持续流模型； </li><li>Flink 在 JVM 内部实现了自己的内存管理，包括完善的内存架构和 OOM error prevention；</li><li>支持迭代计算；</li><li>支持程序自动优化：避免特定情况下 Shuffle、排序等昂贵操作，中间结果进行缓存。</li></ul><h1 id="说明一"><a href="#说明一" class="headerlink" title="说明一"></a>说明一</h1><p>通常来说，对于单独的消息系统而言，语义分为如下三种：</p><p><strong>至多一次（At most once）</strong>：不管 Writer 在等待 ACK 时是否发生超时或者得到错误异常，Writer 都不会重新发送 Event，因此会有数据丢失的风险。在具体的实现过程中，这一种语义无需做任何额外的控制，实现起来最为简单，因此也通常有着最优的性能。在某些特定的场景中，我们只希望追求极致的性能而不关心数据的丢失，可能会选用此方案。</p><p><strong>至少一次（At least once）</strong>：如果 Writer 在等待 ACK 时发生超时或者得到错误异常，Writer 将会重新发送消息，这样能保证每个 Event 至少被处理一次，保证了数据不会丢失，从而提高了系统的可靠性，但同时会带来数据重复的问题，例如，当 Writer 往 Stream 中成功写入一个 Event，但是当系统尝试给 Writer 返回 ACK 的时候出现网络异常，Writer 因没有收到 ACK 而判断为写入 Event 失败，因此 Writer 还是会重新发送此 Event，导致数据重复。</p><p><strong>仅一次（Exactly once）</strong>：在系统发生异常时，Writer 可以尝试多次重新发送 Event，同时能保证最终每个 Event 只被写入一次。一些对数据准确性要求非常高的系统需要保证 exactly-once 语义，譬如支付系统，当用户在移动端付款时，很有可能会因为网络原因导致延时较长甚至超时，用户可能会手动进行刷新操作，如果没有 exactly-once 的语义支持，很有可能会发生两次扣费，我们绝对不希望此类错误发生。</p><h1 id="说明二"><a href="#说明二" class="headerlink" title="说明二"></a>说明二</h1><p><a href="https://tech.meituan.com/2017/11/17/flink-benchmark.html" target="_blank" rel="noopener">美团flink测试</a></p><p><strong>测试结论</strong></p><p>推荐使用 Flink 的场景</p><ul><li>实时计算场景建议考虑使用 Flink 框架进行计算：</li><li>要求消息投递语义为 Exactly Once 的场景；</li><li>数据量较大，要求高吞吐低延迟的场景； </li><li>需要进行状态管理或窗口统计的场景。</li></ul><h1 id="说明三-语言支持"><a href="#说明三-语言支持" class="headerlink" title="说明三 - 语言支持"></a>说明三 - 语言支持</h1><p>Spark和flink都是JVM语言开发，在API层对java和Scala语言支持较好，python语言API支持，但是效率不高，其它语言几乎不支持。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 流式计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 流式计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Serverless简介</title>
      <link href="/2020/02/27/serverless-jian-jie/"/>
      <url>/2020/02/27/serverless-jian-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是serverless？"><a href="#什么是serverless？" class="headerlink" title="什么是serverless？"></a>什么是serverless？</h1><h2 id="简单的定义"><a href="#简单的定义" class="headerlink" title="简单的定义"></a>简单的定义</h2><p>Serverless（无服务器架构）指的是服务端逻辑由开发者实现，运行在无状态的计算容器中，由事件触发，完全被第三方管理，而业务层面的状态则记录在数据库或存储资源中。</p><h2 id="进阶的定义"><a href="#进阶的定义" class="headerlink" title="进阶的定义"></a>进阶的定义</h2><p>Serverless是由事件（event）驱动（例如 HTTP、pub/sub）的全托管计算服务。用户无需管理服务器等基础设施，只需编写代码和选择触发器（trigger)，比如 RPC 请求、定时器等并上传，其余的工作（如实例选择、扩缩容、部署、容灾、监控、日志、安全补丁等）全部由 serverless 系统托管。用户只需要为代码实际运行消耗的资源付费——代码未运行则不产生费用。</p><h2 id="对比serverful"><a href="#对比serverful" class="headerlink" title="对比serverful"></a>对比serverful</h2><p>Serverless 相对于 serverful，对业务用户强调 noserver（serverless 并不是说没有服务器，只是业务人员无需关注服务器了，代码仍然是运行在真实存在的服务器上）的运维理念，业务人员只需要聚焦业务逻辑代码。</p><p>Serverless 相比 serverful，有以下 3 个改变（来自 Berkeley 的总结）：</p><ul><li>弱化了存储和计算之间的联系。服务的储存和计算被分开部署和收费，存储不再是服务本身的一部分，而是演变成了独立的云服务，这使得计算变得无状态化，更容易调度和扩缩容，同时也降低了数据丢失的风险。</li><li>代码的执行不再需要手动分配资源。不需要为服务的运行指定需要的资源（比如使用几台机器、多大的带宽、多大的磁盘等），只需要提供一份代码，剩下的交由 serverless 平台去处理就行了。当前阶段的实现平台分配资源时还需要用户方提供一些策略，例如单个实例的规格和最大并发数，单实例的最大 CPU 使用率。理想的情况是通过某些学习算法来进行完全自动的自适应分配。</li><li>按使用量计费。Serverless按照服务的使用量（调用次数、时长等）计费，而不是像传统的 serverful 服务那样，按照使用的资源（ECS 实例、VM 的规格等）计费。</li></ul><h1 id="serverless分类"><a href="#serverless分类" class="headerlink" title="serverless分类"></a>serverless分类</h1><p>Serverless 不如 IaaS 和 PaaS 那么好理解，因为它通常包含了两个领域 BaaS（Backend as a Service）和 FaaS（Function as a Service）。</p><h2 id="BaaS"><a href="#BaaS" class="headerlink" title="BaaS"></a>BaaS</h2><p>BaaS（Backend as a Service）后端即服务，一般是一个个的 API 调用后端或别人已经实现好的程序逻辑，比如身份验证服务 Auth0，这些 BaaS 通常会用来管理数据，还有很多公有云上提供的我们常用的开源软件的商用服务，比如亚马逊的 RDS 可以替代我们自己部署的 MySQL，还有各种其它数据库和存储服务。</p><h2 id="FaaS"><a href="#FaaS" class="headerlink" title="FaaS"></a>FaaS</h2><p>FaaS（Functions as a Service）函数即服务，FaaS 是无服务器计算的一种形式，当前使用最广泛的是 AWS 的 Lambada。</p><h1 id="Serverless-的使用场景"><a href="#Serverless-的使用场景" class="headerlink" title="Serverless 的使用场景"></a>Serverless 的使用场景</h1><p>虽然 Serverless 的应用很广泛，但是其也有局限性，Serverless 比较适合以下场景：</p><ul><li>异步的并发，组件可独立部署和扩展</li><li>应对突发或服务使用量不可预测（主要是为了节约成本，因为 Serverless 应用在不运行时不收费）</li><li>短暂、无状态的应用，对冷启动时间不敏感</li><li>需要快速开发迭代的业务（因为无需提前申请资源，因此可以加快业务上线速度）</li></ul><p>Serverless 的使用场景示例如：</p><ul><li>ETL</li><li>机器学习及 AI 模型处理</li><li>图片处理</li><li>IoT 传感器数据分析</li><li>流处理</li><li>聊天机器人</li></ul><h1 id="serverless与云原生"><a href="#serverless与云原生" class="headerlink" title="serverless与云原生"></a>serverless与云原生</h1><p>Serverless 是云原生技术发展的高级阶段，可以使开发者更聚焦在业务逻辑，而减少对基础设施的关注。<br><img src="/images/serverless1.jpg" alt="Serverless 在云原生技术中的地位"></p><h1 id="开源serverless框架"><a href="#开源serverless框架" class="headerlink" title="开源serverless框架"></a>开源serverless框架</h1><p>Kubernetes 的蓬勃发展由催生了一系列以它为基础的 Serverless 应用，目前开源的 Serverless 框架大多以 Kubernetes 为基础。</p><p><img src="/images/serverless2.png" alt="开源框架"></p><ul><li>Apache OpenWhisk，一种多功能、具有行业优势的 Serverless 解决方案</li><li>Fission，第一个真正的 Kubernetes Serverless 平台</li><li>Kubeless，在 Serverless 中使用 Kubernetes API 的早期先驱</li><li>OpenFaaS，Kubernetes 上的简单 serverless</li><li>Knative，又被戏称为：所有你的 OSS serverless（和 Ingress）均属于我们</li><li>其他开源 serverless 平台,仔细观察#serverless 空间，你还会注意到还有很多其他产品，比如 -来自Oracle 的Fn , Pivotal 的Riff, VMWare 的 Dispatch, Galatic Fog , Nuclio , Virtual Kubelet ，PipelineAI, Nuclio ，可能还有更多。对不起，乍一眼看的话，它们中的大多数都很快就会不敌 Knative。</li></ul><blockquote><p><a href="https://jimmysong.io/awesome-cloud-native/#serverless。" target="_blank" rel="noopener">更多请点击…</a></p></blockquote><h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><p><a href="https://jimmysong.io/serverless-handbook/concepts/what-is-serverless.html" target="_blank" rel="noopener">原文链接</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> serverless </category>
          
      </categories>
      
      
        <tags>
            
            <tag> serverless </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>influxdb2.0-k8s部署</title>
      <link href="/2020/02/25/influxdb2-0-k8s-bu-shu/"/>
      <url>/2020/02/25/influxdb2-0-k8s-bu-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code>kubectl apply -f https://raw.githubusercontent.com/influxdata/docs-v2/master/static/downloads/influxdb-k8-minikube.yaml</code></pre><pre><code>kubectl get pods -n influxdb</code></pre><pre><code>kubectl describe service -n influxdb influxdb</code></pre><pre><code>kubectl port-forward -n influxdb service/influxdb 9999:9999</code></pre><h3 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Namespace<span class="token key atrule">metadata</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> influxdb<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> StatefulSet<span class="token key atrule">metadata</span><span class="token punctuation">:</span>    <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> influxdb    <span class="token key atrule">name</span><span class="token punctuation">:</span> influxdb    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> influxdb<span class="token key atrule">spec</span><span class="token punctuation">:</span>    <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token key atrule">selector</span><span class="token punctuation">:</span>        <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>            <span class="token key atrule">app</span><span class="token punctuation">:</span> influxdb    <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> influxdb    <span class="token key atrule">template</span><span class="token punctuation">:</span>        <span class="token key atrule">metadata</span><span class="token punctuation">:</span>            <span class="token key atrule">labels</span><span class="token punctuation">:</span>                <span class="token key atrule">app</span><span class="token punctuation">:</span> influxdb        <span class="token key atrule">spec</span><span class="token punctuation">:</span>            <span class="token key atrule">containers</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> quay.io/influxdb/influxdb<span class="token punctuation">:</span>2.0.0<span class="token punctuation">-</span>beta                <span class="token key atrule">name</span><span class="token punctuation">:</span> influxdb                <span class="token key atrule">ports</span><span class="token punctuation">:</span>                  <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">9999</span>                    <span class="token key atrule">name</span><span class="token punctuation">:</span> influxdb                <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>                  <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /root/.influxdbv2                    <span class="token key atrule">name</span><span class="token punctuation">:</span> data    <span class="token key atrule">volumeClaimTemplates</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">metadata</span><span class="token punctuation">:</span>            <span class="token key atrule">name</span><span class="token punctuation">:</span> data            <span class="token key atrule">namespace</span><span class="token punctuation">:</span> influxdb        <span class="token key atrule">spec</span><span class="token punctuation">:</span>            <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> ReadWriteOnce            <span class="token key atrule">resources</span><span class="token punctuation">:</span>                <span class="token key atrule">requests</span><span class="token punctuation">:</span>                    <span class="token key atrule">storage</span><span class="token punctuation">:</span> 10G<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> influxdb    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> influxdb<span class="token key atrule">spec</span><span class="token punctuation">:</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> influxdb        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9999</span>        <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">9999</span>    <span class="token key atrule">selector</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> influxdb    <span class="token key atrule">type</span><span class="token punctuation">:</span> ClusterIP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> influxdb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> influxdb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>influxdb2.0-docker部署</title>
      <link href="/2020/02/25/influxdb2-0-docker-bu-shu/"/>
      <url>/2020/02/25/influxdb2-0-docker-bu-shu/</url>
      
        <content type="html"><![CDATA[<pre><code>docker run --name influxdb -p 9999:9999 quay.io/influxdb/influxdb:2.0.0-beta</code></pre><pre><code>docker run -p 9999:9999 quay.io/influxdb/influxdb:2.0.0-beta --reporting-disabled</code></pre><pre><code>docker exec -it influxdb /bin/bash</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> influxdb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> influxdb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>influxdb-schema设计</title>
      <link href="/2020/02/25/influxdb-schema-she-ji/"/>
      <url>/2020/02/25/influxdb-schema-she-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="tag的使用"><a href="#tag的使用" class="headerlink" title="tag的使用"></a>tag的使用</h3><ul><li>把你经常查询的字段作为tag</li><li>如果你要对其使用GROUP BY()，也要放在tag中</li><li>如果你要对其使用InfluxQL函数，则将其放到field中</li><li>如果你需要存储的值不是字符串，则需要放到field中，因为tag value只能是字符串</li><li>tags不要包含高度可变的信息，如UUID，哈希值和随机字符串，这将导致数据库中的大量series cardinality。<blockquote><p>series cardinality高是许多数据库高内存使用的主要原因</p></blockquote></li><li>用tag区分数据比使用详细的measurement名字更好</li><li>不要把多条信息放到一个tag里面</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> influxdb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> influxdb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>influxdb-javaAPI</title>
      <link href="/2020/02/25/influxdb-javaapi/"/>
      <url>/2020/02/25/influxdb-javaapi/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> influxdb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> influxdb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>influxdb-写入性能测试</title>
      <link href="/2020/02/25/influxdb-xie-ru-xing-neng-ce-shi/"/>
      <url>/2020/02/25/influxdb-xie-ru-xing-neng-ce-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="influx-stress"><a href="#influx-stress" class="headerlink" title="influx-stress"></a>influx-stress</h3><pre><code>Flags:  -b, --batch-size uint      number of points in a batch (default 10000)  -c, --consistency string   Write consistency (only applicable to clusters) (default "one")      --create string        Use a custom create database command      --db string            Database that will be written to (default "stress")      --dump string          Dump to given file instead of writing over HTTP  -f, --fast                 Run as fast as possible      --gzip int             If non-zero, gzip write bodies with given compression level. 1=best speed, 9=best compression, -1=gzip default.      --host string          Address of InfluxDB instance (default "http://localhost:8086")      --pass string          Password for user  -n, --points uint          number of points that will be written (default 18446744073709551615)      --pps uint             Points Per Second (default 200000)  -p, --precision string     Resolution of data being written (default "n")  -q, --quiet                Only print the write throughput      --rp string            Retention Policy that will be written to  -r, --runtime duration     Total time that the test will run (default 2562047h47m16.854775807s)  -s, --series int           number of series that will be written (default 100000)      --strict               Strict mode will exit as soon as an error or unexpected status is encountered      --user string          User to write data as</code></pre><h4 id="Example-Usage"><a href="#Example-Usage" class="headerlink" title="Example Usage"></a>Example Usage</h4><pre><code>Runs forever$ influx-stress insertRuns forever writing as fast as possible$ influx-stress insert -fRuns for 1 minute writing as fast as possible$ influx-stress insert -r 1m -fWriting an example series key$ influx-stress insert cpu,host=server,location=us-west,id=myidWriting an example series key with 20,000 series$ influx-stress insert -s 20000 cpu,host=server,location=us-west,id=myidWriting an example point$ influx-stress insert cpu,host=server,location=us-west,id=myid busy=100,idle=10,random=5i</code></pre><h4 id="测试命令"><a href="#测试命令" class="headerlink" title="测试命令"></a>测试命令</h4><pre><code>influx_stress.exe insert -r 1m -fTotal Requests: 2000        Success: 2000        Fail: 0Average Response Time: 93.270662msPoints Per Second: 484339Total Queries: 250Average Query Response Time: 3.372889ms</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> influxdb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> influxdb </tag>
            
            <tag> influx-stress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>influxdb-数学运算符</title>
      <link href="/2020/02/25/influxdb-shu-xue-yun-suan-fu/"/>
      <url>/2020/02/25/influxdb-shu-xue-yun-suan-fu/</url>
      
        <content type="html"><![CDATA[<h3 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#加一个常数</span><span class="token keyword">SELECT</span> <span class="token string">"A"</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token keyword">FROM</span> <span class="token string">"add"</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">"add"</span> <span class="token keyword">WHERE</span> <span class="token string">"A"</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">></span> <span class="token number">10</span><span class="token comment" spellcheck="true">#两个字段相加。</span><span class="token keyword">SELECT</span> <span class="token string">"A"</span> <span class="token operator">+</span> <span class="token string">"B"</span> <span class="token keyword">FROM</span> <span class="token string">"add"</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">"add"</span> <span class="token keyword">WHERE</span> <span class="token string">"A"</span> <span class="token operator">+</span> <span class="token string">"B"</span> <span class="token operator">>=</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#减法里带常数。</span><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token string">"A"</span> <span class="token keyword">FROM</span> <span class="token string">"sub"</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">"sub"</span> <span class="token keyword">WHERE</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token string">"A"</span> <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token comment" spellcheck="true">#两个字段做减法。</span><span class="token keyword">SELECT</span> <span class="token string">"A"</span> <span class="token operator">-</span> <span class="token string">"B"</span> <span class="token keyword">FROM</span> <span class="token string">"sub"</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">"sub"</span> <span class="token keyword">WHERE</span> <span class="token string">"A"</span> <span class="token operator">-</span> <span class="token string">"B"</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#乘以一个常数。</span><span class="token keyword">SELECT</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token string">"A"</span> <span class="token keyword">FROM</span> <span class="token string">"mult"</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">"mult"</span> <span class="token keyword">WHERE</span> <span class="token string">"A"</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">>=</span> <span class="token number">20</span><span class="token comment" spellcheck="true">#两个字段相乘。</span><span class="token keyword">SELECT</span> <span class="token string">"A"</span> <span class="token operator">*</span> <span class="token string">"B"</span> <span class="token operator">*</span> <span class="token string">"C"</span> <span class="token keyword">FROM</span> <span class="token string">"mult"</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">"mult"</span> <span class="token keyword">WHERE</span> <span class="token string">"A"</span> <span class="token operator">*</span> <span class="token string">"B"</span> <span class="token operator">&lt;=</span> <span class="token number">80</span><span class="token comment" spellcheck="true">#乘法和其他运算符混用。</span><span class="token keyword">SELECT</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token string">"A"</span> <span class="token operator">+</span> <span class="token string">"B"</span> <span class="token operator">+</span> <span class="token string">"C"</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token string">"mult"</span><span class="token keyword">SELECT</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token string">"A"</span> <span class="token operator">-</span> <span class="token string">"B"</span> <span class="token operator">-</span> <span class="token string">"C"</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token string">"mult"</span><span class="token keyword">SELECT</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token string">"A"</span> <span class="token operator">+</span> <span class="token string">"B"</span> <span class="token operator">-</span> <span class="token string">"C"</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token string">"mult"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#除法里带常数。</span><span class="token keyword">SELECT</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token string">"A"</span> <span class="token keyword">FROM</span> <span class="token string">"div"</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">"div"</span> <span class="token keyword">WHERE</span> <span class="token string">"A"</span> <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token comment" spellcheck="true">#两个字段相除。</span><span class="token keyword">SELECT</span> <span class="token string">"A"</span> <span class="token operator">/</span> <span class="token string">"B"</span> <span class="token keyword">FROM</span> <span class="token string">"div"</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">"div"</span> <span class="token keyword">WHERE</span> <span class="token string">"A"</span> <span class="token operator">/</span> <span class="token string">"B"</span> <span class="token operator">>=</span> <span class="token number">10</span><span class="token comment" spellcheck="true">#除法和其他运算符混用。</span><span class="token keyword">SELECT</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token string">"A"</span> <span class="token operator">+</span> <span class="token string">"B"</span> <span class="token operator">+</span> <span class="token string">"C"</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token string">"mult"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="求模"><a href="#求模" class="headerlink" title="求模"></a>求模</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#模一个常数。</span><span class="token keyword">SELECT</span> <span class="token string">"B"</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token keyword">FROM</span> <span class="token string">"modulo"</span><span class="token keyword">SELECT</span> <span class="token string">"B"</span> <span class="token keyword">FROM</span> <span class="token string">"modulo"</span> <span class="token keyword">WHERE</span> <span class="token string">"B"</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">#两个字段求模。</span><span class="token keyword">SELECT</span> <span class="token string">"A"</span> <span class="token operator">%</span> <span class="token string">"B"</span> <span class="token keyword">FROM</span> <span class="token string">"modulo"</span><span class="token keyword">SELECT</span> <span class="token string">"A"</span> <span class="token keyword">FROM</span> <span class="token string">"modulo"</span> <span class="token keyword">WHERE</span> <span class="token string">"A"</span> <span class="token operator">%</span> <span class="token string">"B"</span> <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="按位与"><a href="#按位与" class="headerlink" title="按位与"></a>按位与</h3><p>你可以在任何整数和布尔值中使用这个操作符，无论是字段或常数。该操作符不支持浮点数或字符串数据类型。并且不能混合使用整数和布尔值。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token string">"A"</span> <span class="token operator">&amp;</span> <span class="token number">255</span> <span class="token keyword">FROM</span> <span class="token string">"bitfields"</span><span class="token keyword">SELECT</span> <span class="token string">"A"</span> <span class="token operator">&amp;</span> <span class="token string">"B"</span> <span class="token keyword">FROM</span> <span class="token string">"bitfields"</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">"data"</span> <span class="token keyword">WHERE</span> <span class="token string">"bitfield"</span> <span class="token operator">&amp;</span> <span class="token number">15</span> <span class="token operator">></span> <span class="token number">0</span><span class="token keyword">SELECT</span> <span class="token string">"A"</span> <span class="token operator">&amp;</span> <span class="token string">"B"</span> <span class="token keyword">FROM</span> <span class="token string">"booleans"</span><span class="token keyword">SELECT</span> <span class="token punctuation">(</span><span class="token string">"A"</span> <span class="token operator">^</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token string">"B"</span> <span class="token keyword">FROM</span> <span class="token string">"booleans"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="按位或"><a href="#按位或" class="headerlink" title="按位或"></a>按位或</h3><p>你可以在任何整数和布尔值中使用这个操作符，无论是字段或常数。该操作符不支持浮点数或字符串数据类型。并且不能混合使用整数和布尔值。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token string">"A"</span> <span class="token operator">|</span> <span class="token number">5</span> <span class="token keyword">FROM</span> <span class="token string">"bitfields"</span><span class="token keyword">SELECT</span> <span class="token string">"A"</span> <span class="token operator">|</span> <span class="token string">"B"</span> <span class="token keyword">FROM</span> <span class="token string">"bitfields"</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">"data"</span> <span class="token keyword">WHERE</span> <span class="token string">"bitfield"</span> <span class="token operator">|</span> <span class="token number">12</span> <span class="token operator">=</span> <span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="按位异或"><a href="#按位异或" class="headerlink" title="按位异或"></a>按位异或</h3><p>你可以在任何整数和布尔值中使用这个操作符，无论是字段或常数。该操作符不支持浮点数或字符串数据类型。并且不能混合使用整数和布尔值。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token string">"A"</span> <span class="token operator">^</span> <span class="token number">255</span> <span class="token keyword">FROM</span> <span class="token string">"bitfields"</span><span class="token keyword">SELECT</span> <span class="token string">"A"</span> <span class="token operator">^</span> <span class="token string">"B"</span> <span class="token keyword">FROM</span> <span class="token string">"bitfields"</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">"data"</span> <span class="token keyword">WHERE</span> <span class="token string">"bitfield"</span> <span class="token operator">^</span> <span class="token number">6</span> <span class="token operator">></span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="原文链接与常见问题"><a href="#原文链接与常见问题" class="headerlink" title="原文链接与常见问题"></a><a href="https://jasper-zhang1.gitbooks.io/influxdb/content/Query_language/math_operators.html" target="_blank" rel="noopener">原文链接与常见问题</a></h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> influxdb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> influxdb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>influxdb-查询函数</title>
      <link href="/2020/02/25/influxdb-cha-xun-han-shu/"/>
      <url>/2020/02/25/influxdb-cha-xun-han-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="COUNT计数"><a href="#COUNT计数" class="headerlink" title="COUNT计数"></a>COUNT计数</h3><h3 id="DISTINCT查找不同"><a href="#DISTINCT查找不同" class="headerlink" title="DISTINCT查找不同"></a>DISTINCT查找不同</h3><h3 id="INTEGRAL积分"><a href="#INTEGRAL积分" class="headerlink" title="INTEGRAL积分"></a>INTEGRAL积分</h3><h3 id="MEAN平均值"><a href="#MEAN平均值" class="headerlink" title="MEAN平均值"></a>MEAN平均值</h3><h3 id="MEDIAN中位数"><a href="#MEDIAN中位数" class="headerlink" title="MEDIAN中位数"></a>MEDIAN中位数</h3><h3 id="MODE频率最高的数"><a href="#MODE频率最高的数" class="headerlink" title="MODE频率最高的数"></a>MODE频率最高的数</h3><h3 id="SPREAD最大和最小差值"><a href="#SPREAD最大和最小差值" class="headerlink" title="SPREAD最大和最小差值"></a>SPREAD最大和最小差值</h3><h3 id="STDDEV标准差"><a href="#STDDEV标准差" class="headerlink" title="STDDEV标准差"></a>STDDEV标准差</h3><h3 id="SUM求和"><a href="#SUM求和" class="headerlink" title="SUM求和"></a>SUM求和</h3><h3 id="BOTTOM返回最小的N个数"><a href="#BOTTOM返回最小的N个数" class="headerlink" title="BOTTOM返回最小的N个数"></a>BOTTOM返回最小的N个数</h3><h3 id="TOP返回最大的N个field值"><a href="#TOP返回最大的N个field值" class="headerlink" title="TOP返回最大的N个field值"></a>TOP返回最大的N个field值</h3><h3 id="FIRST返回时间戳最早的数"><a href="#FIRST返回时间戳最早的数" class="headerlink" title="FIRST返回时间戳最早的数"></a>FIRST返回时间戳最早的数</h3><h3 id="LAST返回时间戳最近的数"><a href="#LAST返回时间戳最近的数" class="headerlink" title="LAST返回时间戳最近的数"></a>LAST返回时间戳最近的数</h3><h3 id="MAX最大值"><a href="#MAX最大值" class="headerlink" title="MAX最大值"></a>MAX最大值</h3><h3 id="MIN最小值"><a href="#MIN最小值" class="headerlink" title="MIN最小值"></a>MIN最小值</h3><h3 id="PERCENTILE返回较大百分之N的字段值"><a href="#PERCENTILE返回较大百分之N的字段值" class="headerlink" title="PERCENTILE返回较大百分之N的字段值"></a>PERCENTILE返回较大百分之N的字段值</h3><h3 id="SAMPLE返回N个随机抽样的字段值"><a href="#SAMPLE返回N个随机抽样的字段值" class="headerlink" title="SAMPLE返回N个随机抽样的字段值"></a>SAMPLE返回N个随机抽样的字段值</h3><h3 id="CUMULATIVE-SUM返回字段实时前序字段值的和"><a href="#CUMULATIVE-SUM返回字段实时前序字段值的和" class="headerlink" title="CUMULATIVE_SUM返回字段实时前序字段值的和"></a>CUMULATIVE_SUM返回字段实时前序字段值的和</h3><h3 id="DERIVATIVE返回字段的相邻两个点的变化率"><a href="#DERIVATIVE返回字段的相邻两个点的变化率" class="headerlink" title="DERIVATIVE返回字段的相邻两个点的变化率"></a>DERIVATIVE返回字段的相邻两个点的变化率</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> influxdb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> influxdb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>influxdb-连续查询</title>
      <link href="/2020/02/25/influxdb-lian-xu-cha-xun/"/>
      <url>/2020/02/25/influxdb-lian-xu-cha-xun/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>InfluxDB每秒可以处理数十万的数据点。如果要长时间地存储大量的数据，对于存储会是很大的压力。一个很自然的方式就是对数据进行采样，对于高精度的裸数据存储较短的时间，而对于低精度的的数据可以保存得久一些甚至永久保存。<br>InfluxDB提供了两个特性——连续查询(<code>Continuous Queries</code>简称<code>CQ</code>)和保留策略(<code>Retention Policies</code>简称<code>RP</code>)，分别用来处理数据采样和管理老数据的。</p><blockquote><p><code>Continuous Query</code> (CQ)是在数据库内部自动周期性跑着的一个InfluxQL的查询，CQs需要在SELECT语句中使用一个函数，并且一定包括一个GROUP BY time()语句。</p></blockquote><blockquote><p><code>Retention Policy</code> (RP)是InfluxDB数据架构的一部分，它描述了InfluxDB保存数据的时间。InfluxDB会比较服务器本地的时间戳和请求数据里的时间戳，并删除比你在RPs里面用DURATION设置的更老的数据。一个数据库中可以有多个RPs但是每个数据库的RPs是唯一的。</p></blockquote><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> CONTINUOUS QUERY <span class="token operator">&lt;</span>cq_name<span class="token operator">></span> <span class="token keyword">ON</span> <span class="token operator">&lt;</span>database_name<span class="token operator">></span><span class="token keyword">BEGIN</span>  <span class="token operator">&lt;</span>cq_query<span class="token operator">></span><span class="token keyword">END</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="cq-query"><a href="#cq-query" class="headerlink" title="cq_query"></a>cq_query</h4><p>cq_query需要一个函数，一个<code>INTO</code>子句和一个<code>GROUP BY time()</code>子句：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span><span class="token keyword">function</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">></span> <span class="token keyword">INTO</span> <span class="token operator">&lt;</span>destination_measurement<span class="token operator">></span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>measurement<span class="token operator">></span> <span class="token punctuation">[</span><span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>stuff<span class="token operator">></span><span class="token punctuation">]</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> time<span class="token punctuation">(</span><span class="token operator">&lt;</span>interval<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token operator">&lt;</span>tag_key<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：请注意，在<code>WHERE</code>子句中，cq_query不需要时间范围。 InfluxDB在执行CQ时自动生成cq_query的时间范围。cq_query的WHERE子句中的任何用户指定的时间范围将被系统忽略。</p></blockquote><h4 id="运行时间点以及覆盖的时间范围"><a href="#运行时间点以及覆盖的时间范围" class="headerlink" title="运行时间点以及覆盖的时间范围"></a>运行时间点以及覆盖的时间范围</h4><ul><li>CQ对实时数据进行操作。他们使用本地服务器的时间戳，GROUP BY time()间隔和InfluxDB的预设时间边界来确定何时执行以及查询中涵盖的时间范围。</li><li>CQs以与cq_query的GROUP BY time()间隔相同的间隔执行，并且它们在InfluxDB的预设时间边界开始时运行。如果GROUP BY time()间隔为1小时，则CQ每小时开始执行一次。</li><li>当CQ执行时，它对于now()和now()减去GROUP BY time()间隔的时间范围运行单个查询。 如果GROUP BY time()间隔为1小时，当前时间为17:00，查询的时间范围为16:00至16:59999999999。</li></ul><h3 id="高级语法"><a href="#高级语法" class="headerlink" title="高级语法"></a>高级语法</h3><p><a href="https://jasper-zhang1.gitbooks.io/influxdb/content/Query_language/continuous_queries.html" target="_blank" rel="noopener">链接</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> influxdb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> influxdb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>influxQL</title>
      <link href="/2020/02/25/influxql/"/>
      <url>/2020/02/25/influxql/</url>
      
        <content type="html"><![CDATA[<p>InfluxQL是一种类似于SQL的查询语言，用于与InfluxDB进行交互。它经过精心设计，可以使来自其他SQL或类似SQL环境的用户熟悉，同时还提供特定于存储和分析时间序列数据的功能。</p><p>InfluxQL的SELECT语句遵循SQL SELECT语句的形式：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>stuff<span class="token operator">></span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>measurement_name<span class="token operator">></span> <span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>some_conditions<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>WHERE是可选的。</p><p>要在上面的部分中获取InfluxDB输出，请输入：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">"foodships"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果您只想查看有关该行的数据<code>Saturn</code>，请输入：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">"foodships"</span> <span class="token keyword">WHERE</span> <span class="token string">"planet"</span> <span class="token operator">=</span> <span class="token string">'Saturn'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果您想Saturn在2015年4月16日世界标准时间<code>12:00:01</code>之后查看行星的数据，请输入：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">"foodships"</span> <span class="token keyword">WHERE</span> <span class="token string">"planet"</span> <span class="token operator">=</span> <span class="token string">'Saturn'</span> <span class="token operator">AND</span> time <span class="token operator">></span> <span class="token string">'2015-04-16 12:00:01'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如上面的示例所示，InfluxQL允许您在WHERE子句中指定查询的时间范围。您可以使用日期时间字符串，这些日期时间字符串用单引号引起来，其格式为<code>YYYY-MM-DD HH:MM:SS.mmm</code> （mmm是毫秒，是可选的，还可以指定微秒或纳秒）。您还可以使用相对时间now()来引用服务器的当前时间戳：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">"foodships"</span> <span class="token keyword">WHERE</span> time <span class="token operator">></span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> 1h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该查询foodships以时间戳记比服务器当前时间减去一小时新的量度输出数据。用于指定持续时间的选项<code>now()</code>有：</p><table><thead><tr><th>格式</th><th>单位</th></tr></thead><tbody><tr><td>ns</td><td>纳秒</td></tr><tr><td>u或µ</td><td>微秒</td></tr><tr><td>ms</td><td>毫秒</td></tr><tr><td>s</td><td>秒</td></tr><tr><td>m</td><td>分钟</td></tr><tr><td>H</td><td>小时</td></tr><tr><td>d</td><td>天</td></tr><tr><td>w</td><td>周</td></tr></tbody></table><ul><li><p>InfluxQL还支持正则表达式，表达式，SHOW语句和GROUP BY语句中的算术运算。</p></li><li><p>InfluxQL功能包括<code>COUNT</code>，<code>MIN</code>，<code>MAX</code>，<code>MEDIAN</code>，<code>DERIVATIVE</code>等等。</p></li><li><p>查询中的基本计算<br>SELECT声明支持使用基本数学运算符，如+，-，/，*，()，等。<br>```sql</p></li><li><ul><li>Add two field keys<br>SELECT field_key1 + field_key2 AS “field_key_sum” FROM “measurement_name” WHERE time &lt; now() - 15m</li></ul></li></ul><p>– Subtract one field from another<br>SELECT field_key1 - field_key2 AS “field_key_difference” FROM “measurement_name” WHERE time &lt; now() - 15m</p><p>– Grouping and chaining mathematical calculations<br>SELECT (field_key1 + field_key2) - (field_key3 + field_key4) AS “some_calculation” FROM “measurement_name” WHERE time &lt; now() - 15m</p><pre><code>- 计算查询中的百分比使用基本的数学函数，您可以通过将一个字段值除以另一字段值并将结果乘以100来计算百分比：```sqlSELECT (field_key1 / field_key2) * 100 AS "calculated_percentage" FROM "measurement_name" WHERE time &lt; now() - 15m</code></pre><ul><li>使用聚合函数计算百分比<br>如果在百分比计算中使用汇总函数，则必须使用汇总函数引用所有数据。 您不能混合使用汇总数据和非汇总数据。</li></ul><p>所有聚合功能都需要一个<code>GROUP BY time()</code>子句，该子句定义将数据点分组和聚合的时间间隔。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>field_key1<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">sum</span><span class="token punctuation">(</span>field_key2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token keyword">AS</span> <span class="token string">"calculated_percentage"</span> <span class="token keyword">FROM</span> <span class="token string">"measurement_name"</span> <span class="token keyword">WHERE</span> time <span class="token operator">&lt;</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> 15m <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> time<span class="token punctuation">(</span>1m<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> influxdb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> influxQL </tag>
            
            <tag> influxdb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>influxdb-API</title>
      <link href="/2020/02/25/influxdb-api/"/>
      <url>/2020/02/25/influxdb-api/</url>
      
        <content type="html"><![CDATA[<h3 id="支持的API-client"><a href="#支持的API-client" class="headerlink" title="支持的API client"></a>支持的API client</h3><p><a href="https://docs.influxdata.com/influxdb/v1.7/tools/api_client_libraries/" target="_blank" rel="noopener">参考官网</a></p><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><pre><code>curl -i -XPOST http://localhost:8086/query --data-urlencode "q=CREATE DATABASE mydb"</code></pre><h4 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h4><pre><code>curl -i -XPOST 'http://localhost:8086/write?db=mydb' --data-binary 'cpu_load_short,host=server01,region=us-west value=0.64 1434055562000000000'</code></pre><h4 id="配置gzip压缩"><a href="#配置gzip压缩" class="headerlink" title="配置gzip压缩"></a>配置gzip压缩</h4><p>InfluxDB支持gzip压缩。要减少网络流量，请考虑以下选项：</p><ul><li>要接受来自InfluxDB的压缩数据，请将Accept-Encoding: gzip标头添加到InfluxDB API请求中。</li><li>要在将数据发送到InfluxDB之前压缩数据，请将Content-Encoding: gzip标头添加到InfluxDB API请求中。</li></ul><h4 id="批量写入"><a href="#批量写入" class="headerlink" title="批量写入"></a>批量写入</h4><pre><code>curl -i -XPOST 'http://localhost:8086/write?db=mydb' --data-binary 'cpu_load_short,host=server02 value=0.67cpu_load_short,host=server02,region=us-west value=0.55 1422568543702900257cpu_load_short,direction=in,host=server01,region=us-west value=2.0 1422568543702900257</code></pre><h4 id="从文件写入"><a href="#从文件写入" class="headerlink" title="从文件写入"></a>从文件写入</h4><p>通过传递<code>@filename</code>到文件来写入文件中的点curl。文件中的数据应遵循InfluxDB行协议语法。</p><p>格式正确的文件（cpu_data.txt）的示例：</p><pre><code>cpu_load_short,host=server02 value=0.67cpu_load_short,host=server02,region=us-west value=0.55 1422568543702900257cpu_load_short,direction=in,host=server01,region=us-west value=2.0 1422568543702900257</code></pre><p>写入数据<code>cpu_data.txt</code>到<code>mydb</code>与数据库：</p><pre><code>curl -i -XPOST 'http://localhost:8086/write?db=mydb' --data-binary @cpu_data.txt</code></pre><blockquote><p>注意：如果您的数据文件具有5,000个以上的点，则可能有必要将该文件拆分为几个文件，以便将数据批量写入InfluxDB。默认情况下，HTTP请求在五秒钟后超时。超时后，InfluxDB仍将尝试写入这些点，但是不会确认它们已成功写入。</p></blockquote><h4 id="HTTP响应摘要"><a href="#HTTP响应摘要" class="headerlink" title="HTTP响应摘要"></a>HTTP响应摘要</h4><ul><li>2xx：如果收到您的写请求HTTP 204 No Content，那就成功了！</li><li>4xx：InfluxDB无法理解该请求。</li><li>5xx：系统过载或严重损坏</li></ul><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><pre><code>curl -G 'http://localhost:8086/query?pretty=true' --data-urlencode "db=mydb" --data-urlencode "q=SELECT \"value\" FROM \"cpu_load_short\" WHERE \"region\"='us-west'"</code></pre><p>InfluxDB返回JSON。您的查询结果将显示在”results”数组中。如果发生错误，InfluxDB会设置一个”error”包含错误说明的密钥。</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"results"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"statement_id"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"series"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cpu_load_short"</span><span class="token punctuation">,</span>                    <span class="token property">"columns"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token string">"time"</span><span class="token punctuation">,</span>                        <span class="token string">"value"</span>                    <span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token property">"values"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token punctuation">[</span>                            <span class="token string">"2015-01-29T21:55:43.702900257Z"</span><span class="token punctuation">,</span>                            <span class="token number">2</span>                        <span class="token punctuation">]</span><span class="token punctuation">,</span>                        <span class="token punctuation">[</span>                            <span class="token string">"2015-01-29T21:55:43.702900257Z"</span><span class="token punctuation">,</span>                            <span class="token number">0.55</span>                        <span class="token punctuation">]</span><span class="token punctuation">,</span>                        <span class="token punctuation">[</span>                            <span class="token string">"2015-06-11T20:46:02Z"</span><span class="token punctuation">,</span>                            <span class="token number">0.64</span>                        <span class="token punctuation">]</span>                    <span class="token punctuation">]</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：附加pretty=true到URL会启用精美打印的JSON输出。尽管这对于调试或在使用诸如之类的工具直接查询时很有用curl，但不建议用于生产环境，因为它会消耗不必要的网络带宽。</p></blockquote><h4 id="多个查询"><a href="#多个查询" class="headerlink" title="多个查询"></a>多个查询</h4><p>通过单个API调用将多个查询发送到InfluxDB。只需使用分号分隔每个查询，例如：</p><pre><code>curl -G 'http://localhost:8086/query?pretty=true' --data-urlencode "db=mydb" --data-urlencode "q=SELECT \"value\" FROM \"cpu_load_short\" WHERE \"region\"='us-west';SELECT count(\"value\") FROM \"cpu_load_short\" WHERE \"region\"='us-west'"</code></pre><p>返回：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"results"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"statement_id"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"series"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cpu_load_short"</span><span class="token punctuation">,</span>                    <span class="token property">"columns"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token string">"time"</span><span class="token punctuation">,</span>                        <span class="token string">"value"</span>                    <span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token property">"values"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token punctuation">[</span>                            <span class="token string">"2015-01-29T21:55:43.702900257Z"</span><span class="token punctuation">,</span>                            <span class="token number">2</span>                        <span class="token punctuation">]</span><span class="token punctuation">,</span>                        <span class="token punctuation">[</span>                            <span class="token string">"2015-01-29T21:55:43.702900257Z"</span><span class="token punctuation">,</span>                            <span class="token number">0.55</span>                        <span class="token punctuation">]</span><span class="token punctuation">,</span>                        <span class="token punctuation">[</span>                            <span class="token string">"2015-06-11T20:46:02Z"</span><span class="token punctuation">,</span>                            <span class="token number">0.64</span>                        <span class="token punctuation">]</span>                    <span class="token punctuation">]</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"statement_id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"series"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cpu_load_short"</span><span class="token punctuation">,</span>                    <span class="token property">"columns"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token string">"time"</span><span class="token punctuation">,</span>                        <span class="token string">"count"</span>                    <span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token property">"values"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token punctuation">[</span>                            <span class="token string">"1970-01-01T00:00:00Z"</span><span class="token punctuation">,</span>                            <span class="token number">3</span>                        <span class="token punctuation">]</span>                    <span class="token punctuation">]</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><p><a href="https://github.com/influxdata/influxdb-java" target="_blank" rel="noopener">influxdb-java</a></p><blockquote><ul><li>Java 1.8+ (tested with jdk8 and jdk11)</li><li>Maven 3.0+ (tested with maven 3.5.0)</li></ul></blockquote><pre class="line-numbers language-maven"><code class="language-maven"><dependency>  <groupId>org.influxdb</groupId>  <artifactId>influxdb-java</artifactId>  <version>2.17</version></dependency><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-gradle"><code class="language-gradle">compile 'org.influxdb:influxdb-java:2.17'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><p><a href="https://github.com/influxdb/influxdb-python" target="_blank" rel="noopener">influxdb-python</a></p><h3 id="go"><a href="#go" class="headerlink" title="go"></a>go</h3><p><a href="https://github.com/influxdata/influxdb1-client" target="_blank" rel="noopener">influxdb1-client</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> influxdb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> influxdb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>influxdb使用</title>
      <link href="/2020/02/25/influxdb-shi-yong/"/>
      <url>/2020/02/25/influxdb-shi-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="CLI连接"><a href="#CLI连接" class="headerlink" title="CLI连接"></a>CLI连接</h3><p><a href="https://docs.influxdata.com/influxdb/v1.7/introduction/getting-started" target="_blank" rel="noopener">参考链接</a></p><pre><code>influx -precision rfc3339</code></pre><ul><li><code>influx</code>默认使用本地<code>8086</code>端口和<code>localhost</code>连接，更多参考<code>influx --help</code></li><li><code>-precision</code>格式化时间，<code>rfc3339</code>使用<code>RFC3339</code> format (<code>YYYY-MM-DDTHH:MM:SS.nnnnnnnnnZ</code>).</li></ul><h3 id="管理连接"><a href="#管理连接" class="headerlink" title="管理连接"></a>管理连接</h3><p><code>exit</code></p><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><pre><code>CREATE DATABASE &lt;db-name&gt;</code></pre><p>例如<code>CREATE DATABASE mydb</code>.<code>default</code>是默认关键字，不能用于数据库名.</p><h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><p>创建完数据库可以用<code>SHOW DATABASES</code>查看所有数据库.</p><pre><code>&gt; SHOW DATABASESname: databasesname----_internalmydb</code></pre><h3 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h3><pre><code>USE &lt;db-name&gt;&gt; USE mydbUsing database mydb</code></pre><h3 id="存储策略"><a href="#存储策略" class="headerlink" title="存储策略"></a>存储策略</h3><p>查看当前数据库Retention Policies</p><pre><code>show retention policies on "db_name"</code></pre><p>创建新的Retention Policies</p><pre><code>create retention policy "rp_name" on "db_name" duration 3w replication 1 default</code></pre><h3 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h3><pre><code>&lt;measurement&gt;[,&lt;tag-key&gt;=&lt;tag-value&gt;...] &lt;field-key&gt;=&lt;field-value&gt;[,&lt;field2-key&gt;=&lt;field2-value&gt;...] [unix-nano-timestamp]</code></pre><blockquote><ul><li><code>measurement</code>相当于表名.  </li><li><code>tag</code>是数据的标签，可以有多个  </li><li><code>field</code>是数据的值，可以有多个，例如 “value=0.64”, or “temperature=21.2”  </li><li><code>timestamp</code>是数据的时间戳</li></ul></blockquote><blockquote><p>每一条数据称之为<code>points</code>.</p></blockquote><h3 id="插入一条数据"><a href="#插入一条数据" class="headerlink" title="插入一条数据"></a>插入一条数据</h3><pre><code>INSERT cpu,host=serverA,region=us_west value=0.64</code></pre><pre><code>INSERT temperature,machine=unit42,type=assembly external=25,internal=37</code></pre><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><pre><code>SELECT "host", "region", "value" FROM "cpu"</code></pre><pre><code>SELECT * FROM "temperature"</code></pre><pre><code>&gt; SELECT * FROM /.*/ LIMIT 1--&gt; SELECT * FROM "cpu_load_short"--&gt; SELECT * FROM "cpu_load_short" WHERE "value" &gt; 0.9</code></pre><pre><code>SELECT * FROM cpu where time = '2020-02-20T06:43:42.9206681Z'</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> influxdb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> influxdb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>influxdb安装</title>
      <link href="/2020/02/25/influxdb-an-zhuang/"/>
      <url>/2020/02/25/influxdb-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h3 id="influxdb简介"><a href="#influxdb简介" class="headerlink" title="influxdb简介"></a>influxdb简介</h3><p>influxdb是一款常年在db-engine使用排名第一的时序数据库，提供存储管理、用户管理、http接口、各类语言API接口。</p><h4 id="TSM"><a href="#TSM" class="headerlink" title="TSM"></a>TSM</h4><p>时序数据使用类似 LSM Tree 的 TSM Tree （<code>Time Series Merge Tree</code>）存储，而且是一种「列式」存储结构。</p><p>数据写入时：</p><ul><li>先保存到 cache 和 WAL 当中</li><li>当 WAL 当中数据超出阈值时，将 WAL 文件写入到 level 1 的 TSM 文件当中，cache 和 WAL 也随之清空</li><li>每个 TSM 文件主要分成两部分：时序数据，以及时序数据的索引，通过索引可以使用二分查找找到我们需要的数据</li><li>随着 TSM 文件变多，系统会将多个小 的TSM 文件会合并成一个的更大的 TSM 文件，持续这个过程保证文件数量不会过多</li><li>TSM 文件的合并策略是比较老的 size-tiered 策略，将小的文件压缩成大的文件，这一点和 leveldb 不太一样，leveldb 要严格保证每个 level 下的文件没有重叠，但是 influxdb 不会。</li></ul><p>之所以这么设计，应该是因为查询时序数据的时候，一般会根据时间进行筛选，而大部分时候每个 TSM 文件当中都是越老的文件数据也越老，数据天然会按照时间排序，虽然会有重叠的情况，但是权衡利弊，最终可以容忍这种情况，查询的时候做数据合并的成本更小。</p><h4 id="TSI"><a href="#TSI" class="headerlink" title="TSI"></a>TSI</h4><p>TSI 是 <code>Time Series Index</code> 的缩写，influxdb 用 TSI 来保存时序数据的倒排索引。可以通过 TSI 快速查询到某个表中，包含某个 tag 的 series 都有哪些。</p><p>TSI 的另一个工作是将倒排索引保存在磁盘当中，在 TSI 之前，influxdb 完全是使用内存存储倒排索引的，当时序数据变多的时候，特别是「表」变多的时候，倒排索引消耗的内存会飙升。TSI 使用类似 TSM 的文件结构来存储索引。</p><h3 id="inflxdb数据库安装"><a href="#inflxdb数据库安装" class="headerlink" title="inflxdb数据库安装"></a>inflxdb数据库安装</h3><h4 id="centos安装"><a href="#centos安装" class="headerlink" title="centos安装"></a>centos安装</h4><ol><li>下载<a href="https://portal.influxdata.com/downloads/" target="_blank" rel="noopener">地址</a><pre><code>wget https://dl.influxdata.com/influxdb/releases/influxdb-1.7.10.x86_64.rpmsudo yum localinstall influxdb-1.7.10.x86_64.rpm</code></pre></li><li>安装<pre><code>yum localinstall influxdb-1.7.10.x86_64.rpm</code></pre></li><li>卸载<pre><code>rpm -qa | grep influxrpm -e influxdb-1.7.10.x86_64</code></pre></li><li>启动<pre><code>service influxdb startsystemctl enable influxdbsystemctl start influxdbsystemctl restart influxdbsystemctl stop influxdb</code></pre></li></ol><h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><p><code>https://dl.influxdata.com/influxdb/releases/influxdb-1.7.10_windows_amd64.zipunzip influxdb-1.7.10_windows_amd64.zip</code></p><h4 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h4><pre><code>docker pull influxdb</code></pre><h3 id="可视化UI-Chronograf"><a href="#可视化UI-Chronograf" class="headerlink" title="可视化UI-Chronograf"></a>可视化UI-Chronograf</h3><h4 id="docker安装-1"><a href="#docker安装-1" class="headerlink" title="docker安装"></a>docker安装</h4><pre><code>docker pull quay.io/influxdb/chronograf:1.7.17</code></pre><h4 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h4><pre><code>wget https://dl.influxdata.com/chronograf/releases/chronograf-1.7.17.x86_64.rpmsudo yum localinstall chronograf-1.7.17.x86_64.rpm</code></pre><h4 id="windows-1"><a href="#windows-1" class="headerlink" title="windows"></a>windows</h4><pre><code>https://dl.influxdata.com/chronograf/releases/chronograf-1.7.17_windows_amd64.zipunzip chronograf-1.7.17_windows_amd64.zip</code></pre><h3 id="数据收集器-Telegraf"><a href="#数据收集器-Telegraf" class="headerlink" title="数据收集器-Telegraf"></a>数据收集器-Telegraf</h3><h4 id="docker安装-2"><a href="#docker安装-2" class="headerlink" title="docker安装"></a>docker安装</h4><pre><code>docker pull telegraf</code></pre><h4 id="centos-1"><a href="#centos-1" class="headerlink" title="centos"></a>centos</h4><pre><code>wget https://dl.influxdata.com/telegraf/releases/telegraf-1.13.3-1.x86_64.rpmsudo yum localinstall telegraf-1.13.3-1.x86_64.rpm</code></pre><h4 id="windows-2"><a href="#windows-2" class="headerlink" title="windows"></a>windows</h4><pre><code>wget https://dl.influxdata.com/telegraf/releases/telegraf-1.13.3_windows_amd64.zipunzip telegraf-1.13.3_windows_amd64.zip</code></pre><h3 id="处理和监控服务-Kapacitor"><a href="#处理和监控服务-Kapacitor" class="headerlink" title="处理和监控服务-Kapacitor"></a>处理和监控服务-Kapacitor</h3><h4 id="docker安装-3"><a href="#docker安装-3" class="headerlink" title="docker安装"></a>docker安装</h4><pre><code>docker pull kapacitor</code></pre><h4 id="centos-2"><a href="#centos-2" class="headerlink" title="centos"></a>centos</h4><pre><code>wget https://dl.influxdata.com/kapacitor/releases/kapacitor-1.5.4-1.x86_64.rpmsudo yum localinstall kapacitor-1.5.4-1.x86_64.rpm</code></pre><h4 id="windows-3"><a href="#windows-3" class="headerlink" title="windows"></a>windows</h4><pre><code>wget https://dl.influxdata.com/kapacitor/releases/kapacitor-1.5.4_windows_amd64.zipunzip kapacitor-1.5.4_windows_amd64.zip</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> influxdb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> influxdb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>istio架构【数据平面与控制平面】</title>
      <link href="/2020/01/15/istio-jia-gou/"/>
      <url>/2020/01/15/istio-jia-gou/</url>
      
        <content type="html"><![CDATA[<h3 id="架构综述"><a href="#架构综述" class="headerlink" title="架构综述"></a>架构综述</h3><p><code>Istio</code>在逻辑上分为数据平面(<code>data plane</code>)和控制平面(<code>control plane</code>)两部分：</p><ul><li><strong>数据平面</strong>：由一系列以<code>sidecar</code>形式部署的智能代理(<code>Envoy</code>)组成。这些代理可以调节和控制微服务及混合器(Mixer)之间的所有网络通信</li><li><strong>控制平面</strong>：负责管理和配置代理来路由流量，除此之外控制平面还配置混合器(<code>Mixer</code>)以执行策略和收集遥测数据</li></ul><p><img src="/images/istio2.png" alt="istio 架构"></p><h3 id="数据平面"><a href="#数据平面" class="headerlink" title="数据平面"></a>数据平面</h3><ul><li><code>Envoy</code>是以C++开发的高性能代理，用于接管服务网格中所有服务的所有<code>inbound</code>和<code>outbound</code>流量。 Istio实际上利用了很多Envoy已有的特性，例如：服务的动态发现、负载均衡、TSL终止、HTTP/2和gRPC代理、断路器、健康检查、基于百分比流量拆分的灰度发布、故障注入以及丰富的度量指标。</li><li>Envoy以sidecar部署，与对应的服务在同一个Kubernetes Pod中。这样的部署方式使得Istio可以将大量了关于流量行为的信号作为属性(<code>Attribute</code>)提取出来。这些属性可以被用来在混合器(Mixer)中执行策略决策，并发送给监控系统，以提供整个Service Mesh的行为信息。Sidecar模式允许我们将istio的功能添加到现有的部署中，而无需重构或重写现有的代码。</li></ul><h3 id="控制平面"><a href="#控制平面" class="headerlink" title="控制平面"></a>控制平面</h3><ul><li><p><strong>Pilot为</strong> Envoy <code>sidecar</code> 提供服务发现功能，为智能路由（例如 A/B 测试、金丝雀部署等）和弹性（超时、重试、熔断器等）提供流量管理功能。 将控制流量行为的高级路由规则转换为Envoy的相关配置，并在运行时将它们传播到sidecar。</p></li><li><p><strong>Mixer</strong>分为<code>Policy</code>和<code>Telemetry</code>两个子模块。<code>Policy</code>用于向Envoy提供准入策略控制，黑白名单控制，速率限制等相关策略；<code>Telemetry</code>为Envoy提供了数据上报和日志搜集服务，以用于监控告警和日志查询。</p></li><li><p><strong>Galley</strong>在Istio中，承担配置的导入、处理和分发任务，为Istio提供了配置管理服务,提供在k8s服务端验证Istio的<code>CRD</code> 资源的合法性的方法，是整个控制面的配置管理中心。</p></li><li><p><strong>Citadel</strong>主要关注安全，为服务之间以及与终端用户提供认证、授权、凭据管理等功能。</p></li></ul><h3 id="类比"><a href="#类比" class="headerlink" title="类比"></a>类比</h3><p><img src="/images/istio3.jpg" alt="istio 架构"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> istio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> istio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Service Mesh简介</title>
      <link href="/2020/01/15/fu-wu-wang-ge/"/>
      <url>/2020/01/15/fu-wu-wang-ge/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>服务网格（<code>Service mesh</code>）是服务间通信的基础设施层</strong>。它对全局流量和通信进行监控和管理，提供包括可观察性、流量转移（用于灰度发布）、弹性能力（例如断路和重试/超时）等一系列功能，并为服务之间的通信提供双向 TLS 认证能力，让网格能够对请求和响应进行自动加密和解密。<br><img src="/images/sm1.jpg" alt="Service Mesh"></p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>治理能力独立（Sidecar）</li><li>应用程序无感知</li><li>服务通信的基础设施层</li></ul><h4 id="关注的方面"><a href="#关注的方面" class="headerlink" title="关注的方面"></a>关注的方面</h4><ul><li>可观察性</li><li>安全性</li><li>可运维性</li><li>可拓展性</li></ul><h3 id="为什么需要？"><a href="#为什么需要？" class="headerlink" title="为什么需要？"></a>为什么需要？</h3><p><img src="/images/sm4.png" alt="Service Mesh"><br><code>Kubernetes</code> 提供平台基础设施层强大的容器编排与调度能力</p><ul><li>服务部署与弹性伸缩：<code>Deployment</code></li><li>服务拆分与服务发现：<code>Service</code></li></ul><p><code>Kubernetes</code> 提供简单的负载均衡</p><ul><li>负载均衡：基于<code>IPVS</code>或<code>Iptables</code>的简单均衡机制</li></ul><p>但是<code>Kubernetes</code>在服务治理方面并不完备，缺少了动态路由、熔断、灰度发布等等功能，需要由服务网格互补。</p><h3 id="什么时候用Service-Mesh？"><a href="#什么时候用Service-Mesh？" class="headerlink" title="什么时候用Service Mesh？"></a>什么时候用Service Mesh？</h3><p><img src="/images/sm2.jpg" alt="Service Mesh"></p><p>随着我们的微服务越来越细分，我们所要管理的服务正在成倍的增长着，<code>Kubernetes</code> 提供了丰富的功能，使得我们可以快速的部署和调度这些服务，同时也提供了我们熟悉的方式来实现那些复杂的功能，但是随着部署的应该越来越多，复杂度越来越高，当临界点到来时，可能就是我们真正要去考虑使用 <code>Service Mesh</code> 的时候了。</p><h3 id="Istio问世"><a href="#Istio问世" class="headerlink" title="Istio问世"></a>Istio问世</h3><p><img src="/images/sm3.jpg" alt="Service Mesh"><br><code>Istio</code>是一个开放服务网格，是<code>Service Mesh</code>标准实现，也是当下最流行的，提供了一种连接，管理和保护微服务的统一方法。它支持管理服务之间的流量，执行访问策略以及汇总遥测数据，所有这些都无需更改微服务代码。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 服务网格 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> istio </tag>
            
            <tag> service mesh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志聚合工具Loki使用【LogQL】</title>
      <link href="/2020/01/13/ri-zhi-ju-he-gong-ju-loki-shi-yong-logql/"/>
      <url>/2020/01/13/ri-zhi-ju-he-gong-ju-loki-shi-yong-logql/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/grafana/loki/blob/master/docs/logql.md" target="_blank" rel="noopener">LogQL github</a></p><h3 id="LogQL简介"><a href="#LogQL简介" class="headerlink" title="LogQL简介"></a>LogQL简介</h3><p>LogQL: Log Query Language<br>Loki comes with its very own language for querying logs called LogQL. LogQL can be considered a distributed grep with labels for filtering.</p><p>A basic LogQL query consists of two parts: the log stream selector and a filter expression. Due to Loki’s design, all LogQL queries are required to contain a log stream selector.</p><p>The log stream selector will reduce the number of log streams to a manageable volume. Depending how many labels you use to filter down the log streams will affect the relative performance of the query’s execution. The filter expression is then used to do a distributed grep over the retrieved log streams.</p><h3 id="Loki选择器"><a href="#Loki选择器" class="headerlink" title="Loki选择器"></a>Loki选择器</h3><p>对于查询表达式的标签部分，将其包装在花括号中<code>{}</code>，然后使用键值对的语法来选择标签，多个标签表达式用逗号分隔，比如：</p><pre><code>{app="mysql",name="mysql-backup"}</code></pre><p>目前支持以下标签匹配运算符：</p><ul><li>=等于</li><li>!=不相等</li><li>=~正则表达式匹配</li><li>!~不匹配正则表达式</li><li>比如：<pre><code>{name=~"mysql.+"}{name!~"mysql.+"}</code></pre></li></ul><h3 id="日志过滤器"><a href="#日志过滤器" class="headerlink" title="日志过滤器"></a>日志过滤器</h3><p>编写日志流选择器后，您可以通过编写搜索表达式来进一步过滤结果。搜索表达式可以只是文本或正则表达式。<br>查询示例：</p><pre><code>{job="mysql"} |= "error"{name="kafka"} |~ "tsdb-ops.*io:2003"{instance=~"kafka-[23]",name="kafka"} != kafka.server:type=ReplicaManager</code></pre><p>过滤器运算符可以被链接，并将顺序过滤表达式-结果日志行将满足每个过滤器。例如：</p><pre><code>{job="mysql"} |= "error" != "timeout"</code></pre><p>已实现以下过滤器类型：</p><ul><li>|= 行包含字符串。</li><li>!= 行不包含字符串。</li><li>|~ 行匹配正则表达式。</li><li>!~ 行与正则表达式不匹配。<br><code>regex</code>表达式接受<code>RE2</code>语法。默认情况下，匹配项区分大小写，并且可以将<code>regex</code>切换为不区分大小写的前缀<code>(?i)</code>。</li></ul><h3 id="日志统计"><a href="#日志统计" class="headerlink" title="日志统计"></a>日志统计</h3><ul><li>rate: calculate the number of entries per second</li></ul><pre><code>rate( ( {job="mysql"} |= "error" != "timeout)[10s] ) )</code></pre><ul><li>count_over_time: counts the entries for each log stream within the given range.</li></ul><pre><code>count_over_time({job="mysql"}[5m])</code></pre><h3 id="聚合运算"><a href="#聚合运算" class="headerlink" title="聚合运算"></a>聚合运算</h3><ul><li>sum: Calculate sum over labels</li><li>min: Select minimum over labels</li><li>max: Select maximum over labels</li><li>avg: Calculate the average over labels</li><li>stddev: Calculate the population standard deviation over labels</li><li>stdvar: Calculate the population standard variance over labels</li><li>count: Count number of elements in the vector</li><li>bottomk: Select smallest k elements by sample value</li><li>topk: Select largest k elements by sample value</li></ul><p>示例：<br>Get the top 10 applications by the highest log throughput:</p><pre><code>topk(10,sum(rate({region="us-east1"}[5m])) by (name))</code></pre><p>Get the count of logs during the last five minutes, grouping by level:</p><pre><code>sum(count_over_time({job="mysql"}[5m])) by (level)</code></pre><p>Get the rate of HTTP GET requests from NGINX logs:</p><pre><code>avg(rate(({job="nginx"} |= "GET")[10s])) by (region)</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> loki </category>
          
      </categories>
      
      
        <tags>
            
            <tag> logQL </tag>
            
            <tag> loki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统磁盘使用情况相关命令</title>
      <link href="/2020/01/08/linux-xi-tong-ci-pan-shi-yong-qing-kuang-xiang-guan-ming-ling/"/>
      <url>/2020/01/08/linux-xi-tong-ci-pan-shi-yong-qing-kuang-xiang-guan-ming-ling/</url>
      
        <content type="html"><![CDATA[<h3 id="df命令"><a href="#df命令" class="headerlink" title="df命令"></a>df命令</h3><p>Linux df命令用于显示目前在Linux系统上的文件系统的磁盘使用情况统计。</p><pre><code>df -h</code></pre><pre><code>df -h /home</code></pre><pre><code>df --total</code></pre><h3 id="du命令"><a href="#du命令" class="headerlink" title="du命令"></a>du命令</h3><p>Linux du命令用于显示目录或文件的大小。<br>du会显示指定的目录或文件所占用的磁盘空间。</p><ul><li>查看当前目录下文件夹所占磁盘大小<pre><code>du</code></pre></li><li>查看当前目录下文件夹所占磁盘大小，并格式单位<pre><code>du -h</code></pre></li><li>查看当前目录下文件夹所占磁盘大小，并显示时间<pre><code>du --time</code></pre></li><li>查看文件占用空间<pre><code>du test.log</code></pre></li><li>查看文件占用空间<pre><code>du test</code></pre></li><li>以M为单位<pre><code>du -m</code></pre></li><li>以K为单位<pre><code>du -k</code></pre></li><li>只显示总计，不显示子目录<pre><code>du -s</code></pre></li><li>设置目录层数<pre><code>du --max-depth=1</code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 磁盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker垃圾收集</title>
      <link href="/2020/01/08/docker-la-ji-shou-ji/"/>
      <url>/2020/01/08/docker-la-ji-shou-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="查看tag为none的镜像"><a href="#查看tag为none的镜像" class="headerlink" title="查看tag为none的镜像"></a>查看tag为none的镜像</h3><pre class="line-numbers language-bash"><code class="language-bash">docker images -f <span class="token string">"dangling=true"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除tag为none的镜像"><a href="#删除tag为none的镜像" class="headerlink" title="删除tag为none的镜像"></a>删除tag为none的镜像</h3><pre class="line-numbers language-bash"><code class="language-bash">docker rmi <span class="token punctuation">$(</span>docker images -f <span class="token string">"dangling=true"</span> -q<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看docker占用的磁盘空间"><a href="#查看docker占用的磁盘空间" class="headerlink" title="查看docker占用的磁盘空间"></a>查看docker占用的磁盘空间</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker system df</span>TYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLEImages              35                  3                   5.039GB             4.603GB <span class="token punctuation">(</span>91%<span class="token punctuation">)</span>Containers          3                   2                   19.69kB             19.5kB <span class="token punctuation">(</span>99%<span class="token punctuation">)</span>Local Volumes       28                  0                   3.782MB             3.782MB <span class="token punctuation">(</span>100%<span class="token punctuation">)</span>Build Cache         0                   0                   0B                  0B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查找所有无用的volume"><a href="#查找所有无用的volume" class="headerlink" title="查找所有无用的volume"></a>查找所有无用的volume</h3><pre class="line-numbers language-bash"><code class="language-bash">docker volume <span class="token function">ls</span> -qf dangling<span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除所有无用的volume"><a href="#删除所有无用的volume" class="headerlink" title="删除所有无用的volume"></a>删除所有无用的volume</h3><pre class="line-numbers language-bash"><code class="language-bash">docker volume <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span>docker volume <span class="token function">ls</span> -qf dangling<span class="token operator">=</span>true<span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看所有docker文件夹"><a href="#查看所有docker文件夹" class="headerlink" title="查看所有docker文件夹"></a>查看所有docker文件夹</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span> / -name docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>可以使用<code>df</code>或者<code>du</code>命令查看文件夹具体使用情况，参考<a href="https://haolin.club/2020/01/08/linux-xi-tong-ci-pan-shi-yong-qing-kuang-xiang-guan-ming-ling/">Linux系统磁盘使用情况相关命令</a>.<br>如:  </p><pre><code>du -hs /var/lib/docker/</code></pre></blockquote><h3 id="查找所有未运行的容器"><a href="#查找所有未运行的容器" class="headerlink" title="查找所有未运行的容器"></a>查找所有未运行的容器</h3><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">ps</span> -a<span class="token operator">|</span><span class="token function">grep</span> Exited<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">ps</span> -qf status<span class="token operator">=</span>exited<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除所有未运行的容器"><a href="#删除所有未运行的容器" class="headerlink" title="删除所有未运行的容器"></a>删除所有未运行的容器</h3><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">rm</span> <span class="token punctuation">$(</span>docker <span class="token function">ps</span> -a<span class="token operator">|</span><span class="token function">grep</span> Exited <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="prune命令"><a href="#prune命令" class="headerlink" title="prune命令"></a><font color="red"><strong>prune命令</strong></font></h3><ul><li>删除所有无用的容器</li></ul><pre class="line-numbers language-bash"><code class="language-bash">docker container prune<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>删除所有无用的镜像</li></ul><pre class="line-numbers language-bash"><code class="language-bash">docker image prune<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>删除所有无用的volume</li></ul><pre class="line-numbers language-bash"><code class="language-bash">docker volume prune<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>删除所有无用的network</li></ul><pre class="line-numbers language-bash"><code class="language-bash">docker network prune<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>删除docker系统中所有无用的，包括容器、镜像、volume、网络等</li></ul><pre class="line-numbers language-bash"><code class="language-bash">docker system prune<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>注意</strong><code>docker system prune</code>和<code>docker system prune -a</code>两者的区别：  </p><hr><p>[root@node1 ~]# <code>docker system prune</code><br>WARNING! This will remove:</p><ul><li>all stopped containers</li><li>all networks not used by at least one container</li><li>all dangling images</li><li>all dangling build cache<br>Are you sure you want to continue? [y/N]</li></ul><hr><p>[root@node1 ~]# <code>docker system prune -a</code><br>WARNING! This will remove:</p><ul><li>all stopped containers</li><li>all networks not used by at least one container</li><li>all images without at least one container associated to them</li><li>all build cache<br>Are you sure you want to continue? [y/N]</li></ul></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 垃圾清理 </tag>
            
            <tag> prune </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s证书管理【Cert-manager自动签发/更新证书】</title>
      <link href="/2020/01/07/k8s-zheng-shu-guan-li-cert-manager-zi-dong-qian-fa-geng-xin-zheng-shu/"/>
      <url>/2020/01/07/k8s-zheng-shu-guan-li-cert-manager-zi-dong-qian-fa-geng-xin-zheng-shu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Cert-manager 是一个云原生证书管理开源项目，用于在 Kubernetes 集群中提供 HTTPS 证书并自动续期，支持 Let’s Encrypt, HashiCorp Vault 这些免费证书的签发。在Kubernetes集群中，我们可以通过 Kubernetes Ingress 和 Let’s Encrypt 实现外部服务的自动化 HTTPS。<br>本文 Cert manager使用版本：<font color="red"><strong>v0.12.0</strong></font><br><img src="/images/cert-manager.png" alt="cert-manager"><br>强烈建议参考官方文档：<a href="https://cert-manager.io/docs" target="_blank" rel="noopener">https://cert-manager.io/docs</a></p></blockquote><h3 id="添加helm源"><a href="#添加helm源" class="headerlink" title="添加helm源"></a>添加helm源</h3><blockquote><p>注意<a href="https://github.com/helm/charts/tree/master/stable/cert-manager" target="_blank" rel="noopener">stable/cert-manager</a>已经过时不再维护了，转到<a href="https://github.com/jetstack/cert-manager/tree/master/deploy/charts/cert-manager" target="_blank" rel="noopener">jetstack/cert-manager</a>。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">helm repo add jetstack https://charts.jetstack.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h3><pre class="line-numbers language-bash"><code class="language-bash">helm repo update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建CRDs"><a href="#创建CRDs" class="headerlink" title="创建CRDs"></a>创建CRDs</h3><pre class="line-numbers language-bash"><code class="language-bash">kubectl apply --validate<span class="token operator">=</span>false -f https://raw.githubusercontent.com/jetstack/cert-manager/release-0.12/deploy/manifests/00-crds.yaml或kubectl create -f https://raw.githubusercontent.com/jetstack/cert-manager/release-0.12/deploy/manifests/00-crds.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote><p>这里设置了两个默认值<br>–set ingressShim.defaultIssuerName=<font color="red"><strong>letsencrypt-prod</strong></font><br>–set ingressShim.defaultIssuerKind=ClusterIssuer<br>–set ingressShim.defaultIssuerGroup=cert-manager.io<br>用于在后续创建Ingress时，配合annotations<br>kubernetes.io/tls-acme: “true”<br>kubernetes.io/ingress.class: “nginx”<br>实现<strong>自动创建</strong>证书。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">helm <span class="token function">install</span> --name cert-manager --namespace cert-manager --set ingressShim.defaultIssuerName<span class="token operator">=</span>letsencrypt-prod --set ingressShim.defaultIssuerKind<span class="token operator">=</span>ClusterIssuer --set ingressShim.defaultIssuerGroup<span class="token operator">=</span>cert-manager.io jetstack/cert-manager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看安装是否完成"><a href="#查看安装是否完成" class="headerlink" title="查看安装是否完成"></a>查看安装是否完成</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master cert<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get pod -n cert-manager</span>NAME                                      READY   STATUS    RESTARTS   AGEcert-manager-5cd477f7bb-fxpvf             1/1     Running   0          22mcert-manager-cainjector-df4dc78cd-l527b   1/1     Running   0          22mcert-manager-webhook-5f78ff89bc-ggvqt     1/1     Running   0          22m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master cert<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get crd | grep cert-manager</span>certificaterequests.cert-manager.io         2020-01-07T01:38:32Zcertificates.cert-manager.io                2020-01-07T01:38:32Zchallenges.acme.cert-manager.io             2020-01-07T01:38:32Zclusterissuers.cert-manager.io              2020-01-07T01:38:32Zissuers.cert-manager.io                     2020-01-07T01:38:32Zorders.acme.cert-manager.io                 2020-01-07T01:38:32Z<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建默认签发机构"><a href="#创建默认签发机构" class="headerlink" title="创建默认签发机构"></a>创建默认签发机构</h3><p>刚刚安装时已经指定了默认签发类型是<code>ClusterIssuer</code> ，签发机构名称是<code>letsencrypt-prod</code> ，但是我们还没有创建，现在需要创建<code>cluster-issuer.yaml</code>。 </p><blockquote><p>cert-manager 给我们提供了 <code>Issuer</code> 和 <code>ClusterIssuer</code> 这两种用于创建签发机构的自定义资源对象，<code>Issuer</code> 只能用来签发自己所在 namespace 下的证书，<code>ClusterIssuer</code> 可以签发任意 namespace 下的证书.</p></blockquote><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> cert<span class="token punctuation">-</span>manager.io/v1alpha2<span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterIssuer<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> letsencrypt<span class="token punctuation">-</span>prod<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">acme</span><span class="token punctuation">:</span>    <span class="token key atrule">server</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//acme<span class="token punctuation">-</span>v02.api.letsencrypt.org/directory    <span class="token key atrule">email</span><span class="token punctuation">:</span> 1154365135@qq.com    <span class="token key atrule">privateKeySecretRef</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> letsencrypt<span class="token punctuation">-</span>prod    <span class="token key atrule">solvers</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">http01</span><span class="token punctuation">:</span>        <span class="token key atrule">ingress</span><span class="token punctuation">:</span>          <span class="token key atrule">class</span><span class="token punctuation">:</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上述配置，更多配置参考<a href="https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1alpha2.ClusterIssuer" target="_blank" rel="noopener">ClusterIssuer</a></p><ul><li><code>metadata.name</code> 是我们创建的签发机构的名称，后面我们创建证书的时候会引用它</li><li><code>spec.acme.email</code> 是你自己的邮箱，证书快过期的时候会有邮件提醒，不过 cert-manager 会利用 acme 协议自动给我们重新颁发证书来续期</li><li><code>spec.acme.server</code> 是 acme 协议的服务端，我们这里用 Let’s Encrypt，这个地址就写死成这样就行</li><li><code>spec.acme.privateKeySecretRef</code> 指示此签发机构的私钥将要存储到哪个 Secret 对象中，名称不重要</li><li><code>spec.acme.solvers.http01</code> 这里指示签发机构使用 HTTP-01 的方式进行 acme 协议 (还可以用 DNS 方式，acme 协议的目的是证明这台机器和域名都是属于你的，然后才准许给你颁发证书)</li></ul></blockquote><pre class="line-numbers language-bash"><code class="language-bash">kubectl create -f cluster-issuer.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">kubectl get clusterissuer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置ingress"><a href="#配置ingress" class="headerlink" title="配置ingress"></a>配置ingress</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> extensions/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Ingress<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>    <span class="token key atrule">kubernetes.io/ingress.class</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">kubernetes.io/tls-acme</span><span class="token punctuation">:</span> <span class="token string">"true"</span>    <span class="token key atrule">nginx.ingress.kubernetes.io/backend-protocol</span><span class="token punctuation">:</span> HTTPS    <span class="token key atrule">nginx.ingress.kubernetes.io/ssl-redirect</span><span class="token punctuation">:</span> <span class="token string">"true"</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard    <span class="token key atrule">chart</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard<span class="token punctuation">-</span>1.10.0    <span class="token key atrule">heritage</span><span class="token punctuation">:</span> Tiller    <span class="token key atrule">release</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard  <span class="token key atrule">name</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> k8s.deri.com    <span class="token key atrule">http</span><span class="token punctuation">:</span>      <span class="token key atrule">paths</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">backend</span><span class="token punctuation">:</span>          <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard          <span class="token key atrule">servicePort</span><span class="token punctuation">:</span> <span class="token number">443</span>        <span class="token key atrule">path</span><span class="token punctuation">:</span> /  <span class="token key atrule">tls</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> k8s.deri.com    <span class="token key atrule">secretName</span><span class="token punctuation">:</span> deri<span class="token punctuation">-</span>com<span class="token punctuation">-</span>tls<span class="token punctuation">-</span>secret<span class="token punctuation">-</span>cc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于添加了<code>annotations kubernetes.io/tls-acme: "true"</code>，tls这个secret会自动创建。</p><blockquote><p>创建完成后隔一会儿我们可以看到会多出现一个随机名称的 Ingress 对象<code>cm-acme-http-solver-hl5sx</code>，这个 Ingress 对象就是用来专门验证证书的：</p><pre class="line-numbers language-bash"><code class="language-bash">$ kubectl get ingress -n gatewayNAME                        HOSTS                   ADDRESS   PORTS     AGEcm-acme-http-solver-hl5sx   cs.deri.com             80        37skube-ui                     cs.deri.com             80, 443   41s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>验证成功后，这个 Ingress 对象会自动删除.</p><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><pre class="line-numbers language-bash"><code class="language-bash">helm delete --purge cert-manager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">kubectl delete -f https://raw.githubusercontent.com/jetstack/cert-manager/release-0.12/deploy/manifests/00-crds.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Check"><a href="#Check" class="headerlink" title="Check"></a>Check</h3><p>检查服务是否正常</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get certificate -n gateway </span>NAME              READY   SECRET            AGEconsul-tls-test   True    consul-tls-test   19m<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get clusterissuer</span>NAME               READY   AGEletsencrypt-prod   True    157m<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get certificate -n gateway </span>NAME              READY   SECRET            AGEconsul-tls-test   True    consul-tls-test   19m<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get Order -n gateway</span>NAME                                    STATE   AGEconsul-tls-test-3546184973-1845474898   valid   20m<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get  CertificateRequest -n gateway</span>NAME                         READY   AGEconsul-tls-test-3546184973   True    27m<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get secret -ngateway</span>NAME                      TYPE                                  DATA   AGEconsul-tls-test           kubernetes.io/tls                     3      29m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用到的镜像"><a href="#用到的镜像" class="headerlink" title="用到的镜像"></a>用到的镜像</h3><pre><code>quay.io/jetstack/cert-manager-cainjector:v0.12.0quay.io/jetstack/cert-manager-webhook:v0.12.0quay.io/jetstack/cert-manager-controller:v0.12.0#这里由于上面配置solve是acme所以用到这个镜像，如果你配置别的，可能不一致quay.io/jetstack/cert-manager-acmesolver:v0.12.0</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> cert-manager </tag>
            
            <tag> 证书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker拉取国外镜像失败【quay.io和gcr.io解决办法】</title>
      <link href="/2020/01/07/docker-la-qu-guo-wai-jing-xiang-shi-bai-quay-io-he-gcr-io-jie-jue-ban-fa/"/>
      <url>/2020/01/07/docker-la-qu-guo-wai-jing-xiang-shi-bai-quay-io-he-gcr-io-jie-jue-ban-fa/</url>
      
        <content type="html"><![CDATA[<blockquote><p>使用国内镜像源。</p></blockquote><h3 id="quay-io"><a href="#quay-io" class="headerlink" title="quay.io"></a>quay.io</h3><p>例如下面拉取比较慢</p><pre class="line-numbers language-bash"><code class="language-bash">docker pull quay.io/jetstack/cert-manager-cainjector:v0.12.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以换成</p><pre class="line-numbers language-bash"><code class="language-bash">docker pull quay-mirror.qiniu.com/jetstack/cert-manager-cainjector:v0.12.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="gcr-io"><a href="#gcr-io" class="headerlink" title="gcr.io"></a>gcr.io</h3><p>例如下面拉取比较慢</p><pre class="line-numbers language-bash"><code class="language-bash">docker pull gcr.io/google_containers/kube-proxy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以换成阿里云的</p><pre class="line-numbers language-bash"><code class="language-bash">docker pull registry.aliyuncs.com/google_containers/kube-proxy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="下载完成"><a href="#下载完成" class="headerlink" title="下载完成"></a>下载完成</h3><p>可以使用tag命令改回去</p><pre class="line-numbers language-bash"><code class="language-bash">docker tag <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> quay.io </tag>
            
            <tag> gcr.io </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s问题【删除namespace一直处于Terminating状态】</title>
      <link href="/2020/01/03/k8s-wen-ti-shan-chu-namespace-yi-zhi-chu-yu-terminating-zhuang-tai/"/>
      <url>/2020/01/03/k8s-wen-ti-shan-chu-namespace-yi-zhi-chu-yu-terminating-zhuang-tai/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>kubernetes</code>在删除<code>namespace</code>时，或多或少出现过删除后一直处于<code>Terminating</code>状态，这时又该如何删除呢？<br>本文介绍各种手段删除处于<code>Terminating</code>状态的<code>namespace</code>。</p></blockquote><h3 id="一般删除"><a href="#一般删除" class="headerlink" title="一般删除"></a>一般删除</h3><pre class="line-numbers language-bash"><code class="language-bash">kubectl delete namespace NAMESPACENAME<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="强制删除"><a href="#强制删除" class="headerlink" title="强制删除"></a>强制删除</h3><pre class="line-numbers language-bash"><code class="language-bash">kubectl delete namespace NAMESPACENAME --force --grace-period<span class="token operator">=</span>0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除finalizers"><a href="#删除finalizers" class="headerlink" title="删除finalizers"></a>删除finalizers</h3><blockquote><p>修改<code>namespace</code>配置，删除<font color="red">红色框</font>中内容</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">kubectl edit namespace NAMESPACE_NAME<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/k8s_namespace.jpg" alt="NAMESPACE"></p><h3 id="调用接口删除"><a href="#调用接口删除" class="headerlink" title="调用接口删除"></a>调用接口删除</h3><blockquote><p>也有可能，上述方法中没有看到<code>finalizers</code>，这时可以通过调用接口的方式删除</p></blockquote><ul><li>第一步：将namespace内容导出到tmp.json文件中：</li></ul><pre class="line-numbers language-bash"><code class="language-bash">kubectl get namespace NAMESPACE_NAME -o json <span class="token operator">></span> tmp.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>第二步：修改tmp.json内容，删除json中以下内容：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  //删除spec整个内容  <span class="token property">"spec"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"finalizers"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token string">"kubernetes"</span>      <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"status"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"phase"</span><span class="token operator">:</span> <span class="token string">"Terminating"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>第三步：开启k8s接口代理，新开一个窗口，执行</p></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl proxy</span>Starting to serve on 127.0.0.1:8001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>第四步：调用接口删除<code>Namespace</code>，注意URL中修改成要删除的<code>NAMESPACE_NAME</code></li></ul><pre class="line-numbers language-bash"><code class="language-bash">curl -k -H <span class="token string">"Content-Type: application/json"</span> -X PUT --data-binary @tmp.json http://127.0.0.1:8001/api/v1/namespaces/NAMESPACE_NAME/finalize<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> namespace </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>istio使用【CRDs】</title>
      <link href="/2020/01/03/istio-shi-yong-crds/"/>
      <url>/2020/01/03/istio-shi-yong-crds/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>本文使用istio版本号：<font size="4" color="#D2691E">1.4.2</font></strong></p></blockquote><blockquote><p> Istio安装时，第一步就是创建了各种自定义资源类型（CRD），参考<a href="">istio部署【在kubernetes上部署】</a>，其中最重要的几个CRD包括：<strong>Gateway</strong>、<strong>VirtualService</strong>、<strong>DestinationRule</strong>、<strong>ServiceEntry</strong>。主要架构如下图：<br><img src="/images/istio_CRDs.jpg" alt="CRDs"></p></blockquote><h2 id="DestinationRule"><a href="#DestinationRule" class="headerlink" title="DestinationRule"></a>DestinationRule</h2><p>DestinationRule用于定义目标服务的访问策略，如在subset定义版本，定义负载均衡策略，熔断，一级TLS等。</p><h3 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3<span class="token key atrule">kind</span><span class="token punctuation">:</span> DestinationRule<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> reviews<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">host</span><span class="token punctuation">:</span> reviews  <span class="token key atrule">subsets</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> v1    <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">version</span><span class="token punctuation">:</span> v1  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> v2    <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">version</span><span class="token punctuation">:</span> v2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义负载均衡策略"><a href="#定义负载均衡策略" class="headerlink" title="定义负载均衡策略"></a>定义负载均衡策略</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3<span class="token key atrule">kind</span><span class="token punctuation">:</span> DestinationRule<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> reviews<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">host</span><span class="token punctuation">:</span> reviews  <span class="token key atrule">trafficPolicy</span><span class="token punctuation">:</span>    <span class="token key atrule">loadBalancer</span><span class="token punctuation">:</span>      <span class="token key atrule">simple</span><span class="token punctuation">:</span> RANDOM  <span class="token key atrule">subsets</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> v1    <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">version</span><span class="token punctuation">:</span> v1  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> v2    <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">version</span><span class="token punctuation">:</span> v2    <span class="token key atrule">trafficPolicy</span><span class="token punctuation">:</span>      <span class="token key atrule">loadBalancer</span><span class="token punctuation">:</span>        <span class="token key atrule">simple</span><span class="token punctuation">:</span> ROUND_ROBIN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义熔断器"><a href="#定义熔断器" class="headerlink" title="定义熔断器"></a>定义熔断器</h3><p>参考<a href="https://istio.io/docs/tasks/traffic-management/circuit-breaking/" target="_blank" rel="noopener">官网</a></p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3<span class="token key atrule">kind</span><span class="token punctuation">:</span> DestinationRule<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> reviews<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">host</span><span class="token punctuation">:</span> reviews  <span class="token key atrule">subsets</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> v1    <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">version</span><span class="token punctuation">:</span> v1    <span class="token key atrule">trafficPolicy</span><span class="token punctuation">:</span>      <span class="token key atrule">connectionPool</span><span class="token punctuation">:</span>        <span class="token key atrule">tcp</span><span class="token punctuation">:</span>          <span class="token key atrule">maxConnections</span><span class="token punctuation">:</span> <span class="token number">100</span>      <span class="token key atrule">http</span><span class="token punctuation">:</span>        <span class="token key atrule">http1MaxPendingRequests</span><span class="token punctuation">:</span> <span class="token number">100</span>        <span class="token key atrule">maxRequestsPerConnection</span><span class="token punctuation">:</span> <span class="token number">100</span>    <span class="token key atrule">outlierDetection</span><span class="token punctuation">:</span>      <span class="token key atrule">consecutiveErrors</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">interval</span><span class="token punctuation">:</span> 1s      <span class="token key atrule">baseEjectionTime</span><span class="token punctuation">:</span> 3m      <span class="token key atrule">maxEjectionPercent</span><span class="token punctuation">:</span> <span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="VirtualService"><a href="#VirtualService" class="headerlink" title="VirtualService"></a>VirtualService</h2><p>VirtualService是最重要的配置接口，定义服务的所有路由规则，包括条件判断、权重、路径重写等。</p><h3 id="定义权重示例"><a href="#定义权重示例" class="headerlink" title="定义权重示例"></a>定义权重示例</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3<span class="token key atrule">kind</span><span class="token punctuation">:</span> VirtualService<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> reviews<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> reviews  <span class="token key atrule">http</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">route</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">destination</span><span class="token punctuation">:</span>        <span class="token key atrule">host</span><span class="token punctuation">:</span> reviews        <span class="token key atrule">subset</span><span class="token punctuation">:</span> v1      <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">90</span>    <span class="token punctuation">-</span> <span class="token key atrule">destination</span><span class="token punctuation">:</span>        <span class="token key atrule">host</span><span class="token punctuation">:</span> reviews        <span class="token key atrule">subset</span><span class="token punctuation">:</span> v2      <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义超时和重试策略"><a href="#定义超时和重试策略" class="headerlink" title="定义超时和重试策略"></a>定义超时和重试策略</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3<span class="token key atrule">kind</span><span class="token punctuation">:</span> VirtualService<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> ratings<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ratings  <span class="token key atrule">http</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">route</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">destination</span><span class="token punctuation">:</span>        <span class="token key atrule">host</span><span class="token punctuation">:</span> ratings        <span class="token key atrule">subset</span><span class="token punctuation">:</span> v1    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 10s    <span class="token key atrule">retries</span><span class="token punctuation">:</span>      <span class="token key atrule">attempts</span><span class="token punctuation">:</span> <span class="token number">3</span>      <span class="token key atrule">perTryTimeout</span><span class="token punctuation">:</span> 2s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="故障注入：模拟失败的场景"><a href="#故障注入：模拟失败的场景" class="headerlink" title="故障注入：模拟失败的场景"></a>故障注入：模拟失败的场景</h3><p>参考<a href="https://istio.io/docs/tasks/traffic-management/fault-injection/" target="_blank" rel="noopener">Fault Injection</a></p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3<span class="token key atrule">kind</span><span class="token punctuation">:</span> VirtualService<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> ratings<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> ratings  <span class="token key atrule">http</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">fault</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true">#定义10%请求+5秒延迟， 也可以是percent: 10</span>      <span class="token key atrule">delay</span><span class="token punctuation">:</span>        <span class="token key atrule">percentage</span><span class="token punctuation">:</span>          <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token number">10</span>        <span class="token key atrule">fixedDelay</span><span class="token punctuation">:</span> 5s      <span class="token comment" spellcheck="true">#定义10%请求返回400错误， 也可以是percent: 10</span>      <span class="token key atrule">abort</span><span class="token punctuation">:</span>        <span class="token key atrule">percentage</span><span class="token punctuation">:</span>          <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token number">10</span>        <span class="token key atrule">httpStatus</span><span class="token punctuation">:</span> <span class="token number">400</span>    <span class="token key atrule">route</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">destination</span><span class="token punctuation">:</span>        <span class="token key atrule">host</span><span class="token punctuation">:</span> ratings        <span class="token key atrule">subset</span><span class="token punctuation">:</span> v1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="条件判断——标签"><a href="#条件判断——标签" class="headerlink" title="条件判断——标签"></a>条件判断——标签</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3<span class="token key atrule">kind</span><span class="token punctuation">:</span> VirtualService<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> ratings<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> ratings  <span class="token key atrule">http</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">match</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">sourceLabels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> reviews        <span class="token key atrule">version</span><span class="token punctuation">:</span> v2    <span class="token punctuation">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="条件判断——Header"><a href="#条件判断——Header" class="headerlink" title="条件判断——Header"></a>条件判断——Header</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3<span class="token key atrule">kind</span><span class="token punctuation">:</span> VirtualService<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> reviews<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> reviews  <span class="token key atrule">http</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">match</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">headers</span><span class="token punctuation">:</span>        <span class="token key atrule">end-user</span><span class="token punctuation">:</span>          <span class="token key atrule">exact</span><span class="token punctuation">:</span> jason    <span class="token key atrule">route</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">destination</span><span class="token punctuation">:</span>        <span class="token key atrule">host</span><span class="token punctuation">:</span> reviews        <span class="token key atrule">subset</span><span class="token punctuation">:</span> v2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="条件判断——URI路径"><a href="#条件判断——URI路径" class="headerlink" title="条件判断——URI路径"></a>条件判断——URI路径</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3<span class="token key atrule">kind</span><span class="token punctuation">:</span> VirtualService<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> productpage<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> productpage  <span class="token key atrule">http</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">match</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">uri</span><span class="token punctuation">:</span>        <span class="token key atrule">prefix</span><span class="token punctuation">:</span> /api/v1    <span class="token punctuation">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多条件判断"><a href="#多条件判断" class="headerlink" title="多条件判断"></a>多条件判断</h3><p>如果是嵌套在一个匹配语句中，为<font color="red"><strong>AND</strong></font>关系。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3<span class="token key atrule">kind</span><span class="token punctuation">:</span> VirtualService<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> ratings<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> ratings  <span class="token key atrule">http</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">match</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">sourceLabels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> reviews        <span class="token key atrule">version</span><span class="token punctuation">:</span> v2      <span class="token key atrule">headers</span><span class="token punctuation">:</span>        <span class="token key atrule">end-user</span><span class="token punctuation">:</span>          <span class="token key atrule">exact</span><span class="token punctuation">:</span> jason    <span class="token punctuation">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是单独的匹配语句，为<font color="red"><strong>OR</strong></font>关系。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3<span class="token key atrule">kind</span><span class="token punctuation">:</span> VirtualService<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> ratings<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> ratings  <span class="token key atrule">http</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">match</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">sourceLabels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> reviews        <span class="token key atrule">version</span><span class="token punctuation">:</span> v2    <span class="token punctuation">-</span> <span class="token key atrule">headers</span><span class="token punctuation">:</span>        <span class="token key atrule">end-user</span><span class="token punctuation">:</span>          <span class="token key atrule">exact</span><span class="token punctuation">:</span> jason    <span class="token punctuation">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ServiceEntry"><a href="#ServiceEntry" class="headerlink" title="ServiceEntry"></a>ServiceEntry</h2><p>将外部服务接入到服务注册表中，让Istio中自动发现的服务能够访问和路由到这些手工加入的服务。与<code>VirtualService</code>或<code>DestinationRule</code>配合使用。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3<span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceEntry<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> foo<span class="token punctuation">-</span>ext<span class="token punctuation">-</span>svc<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> *.foo.com  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">number</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> http    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> HTTP  <span class="token punctuation">-</span> <span class="token key atrule">number</span><span class="token punctuation">:</span> <span class="token number">443</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> https    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> HTTPS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3<span class="token key atrule">kind</span><span class="token punctuation">:</span> VirtualService<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> bar<span class="token punctuation">-</span>foo<span class="token punctuation">-</span>ext<span class="token punctuation">-</span>svc<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> bar.foo.com  <span class="token key atrule">http</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">route</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">destination</span><span class="token punctuation">:</span>        <span class="token key atrule">host</span><span class="token punctuation">:</span> bar.foo.com    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 10s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h2><p>提供外部服务访问接入，可发布任意内部端口的服务，供外部访问。配合<code>VirtualService</code>使用。</p><p>Bookinfo示例:</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3<span class="token key atrule">kind</span><span class="token punctuation">:</span> Gateway<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> bookinfo<span class="token punctuation">-</span>gateway<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">istio</span><span class="token punctuation">:</span> ingressgateway <span class="token comment" spellcheck="true"># use istio default controller</span>  <span class="token key atrule">servers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span>      <span class="token key atrule">number</span><span class="token punctuation">:</span> <span class="token number">80</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> http      <span class="token key atrule">protocol</span><span class="token punctuation">:</span> HTTP    <span class="token key atrule">hosts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">"*"</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3<span class="token key atrule">kind</span><span class="token punctuation">:</span> VirtualService<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> bookinfo<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token string">"*"</span>  <span class="token key atrule">gateways</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> bookinfo<span class="token punctuation">-</span>gateway  <span class="token key atrule">http</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">match</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">uri</span><span class="token punctuation">:</span>        <span class="token key atrule">exact</span><span class="token punctuation">:</span> /productpage    <span class="token punctuation">-</span> <span class="token key atrule">uri</span><span class="token punctuation">:</span>        <span class="token key atrule">prefix</span><span class="token punctuation">:</span> /static    <span class="token punctuation">-</span> <span class="token key atrule">uri</span><span class="token punctuation">:</span>        <span class="token key atrule">exact</span><span class="token punctuation">:</span> /login    <span class="token punctuation">-</span> <span class="token key atrule">uri</span><span class="token punctuation">:</span>        <span class="token key atrule">exact</span><span class="token punctuation">:</span> /logout    <span class="token punctuation">-</span> <span class="token key atrule">uri</span><span class="token punctuation">:</span>        <span class="token key atrule">prefix</span><span class="token punctuation">:</span> /api/v1/products    <span class="token key atrule">route</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">destination</span><span class="token punctuation">:</span>        <span class="token key atrule">host</span><span class="token punctuation">:</span> productpage        <span class="token key atrule">port</span><span class="token punctuation">:</span>          <span class="token key atrule">number</span><span class="token punctuation">:</span> <span class="token number">9080</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> istio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> istio </tag>
            
            <tag> CRDs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker镜像导入导出</title>
      <link href="/2019/12/31/docker-jing-xiang-dao-ru-dao-chu/"/>
      <url>/2019/12/31/docker-jing-xiang-dao-ru-dao-chu/</url>
      
        <content type="html"><![CDATA[<p>docker镜像导入导出有两种方式</p><ul><li>export/import</li><li>load/save</li></ul><h3 id="export-import"><a href="#export-import" class="headerlink" title="export/import"></a>export/import</h3><pre><code>docker export -o "导出的镜像文件名.tar" CONTATINERdocker import "导出的镜像文件名.tar" "镜像名:版本号"</code></pre><h3 id="load-save"><a href="#load-save" class="headerlink" title="load/save"></a>load/save</h3><pre><code>docker load --input "导出的镜像文件名.tar"docker save -o "导出的镜像文件名.tar" "要导出的镜像名"</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> docker镜像导入/导出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s修改POD内核参数【sysctl】</title>
      <link href="/2019/12/31/k8s-xiu-gai-pod-nei-he-can-shu-sysctl/"/>
      <url>/2019/12/31/k8s-xiu-gai-pod-nei-he-can-shu-sysctl/</url>
      
        <content type="html"><![CDATA[<p>有时候需要在启动POD前，修改POD内核相关参数，除了使用<code>initContainer</code>还可以使用<code>sysctl</code>。<br>参考<a href="https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/" target="_blank" rel="noopener">链接Using sysctls in a Kubernetes Cluster</a></p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> sysctl<span class="token punctuation">-</span>example<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>    <span class="token key atrule">sysctls</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> kernel.shm_rmid_forced      <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"0"</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> net.core.somaxconn      <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"1024"</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> kernel.msgmax      <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"65536"</span>  <span class="token punctuation">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
          <category> sysctl </category>
          
          <category> pod </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> sysctl </tag>
            
            <tag> pod </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DevOps与CI/CD</title>
      <link href="/2019/12/31/devops-yu-cicd/"/>
      <url>/2019/12/31/devops-yu-cicd/</url>
      
        <content type="html"><![CDATA[<h2 id="了解-DevOps"><a href="#了解-DevOps" class="headerlink" title="了解 DevOps"></a>了解 DevOps</h2><p>DevOps 是指对企业文化、业务自动化和平台设计等方面进行全方位变革，从而实现迅捷、优质的服务交付，提升企业响应能力和价值。只有通过快速迭代的 IT 服务交付，这一切才能实现。<code>DevOps</code>可以将传统应用和最新的云原生应用与基础架构彼此相连。</p><h2 id="DevOps简介"><a href="#DevOps简介" class="headerlink" title="DevOps简介"></a>DevOps简介</h2><p>DevOps 就是开发（Development）、测试（QA）、运维（Operations）这三个领域的合并。<br><img src="/images/DevOps.jpg" alt="DevOps"></p><p>从字面上来看，”DevOps”一词是由英文 <code>Development</code>（开发）和 <code>Operations</code> （运维）组合而成，但它所代表的理念和实践要比这广阔的多。DevOps 涵盖了安全、协作方式、数据分析等许多方面。</p><p>DevOps 强调通过一系列手段来实现既快又稳的工作流程，使每个想法（比如一个新的软件功能，一个功能增强请求或者一个 bug 修复）在从开发到生产环境部署的整个流程中，都能不断地为用户带来价值。这种方式需要开发团队和运维团队密切交流、高效协作并且彼此体谅。此外，DevOps 还要能够方便扩展，灵活部署。有了 DevOps，需求最迫切的工作就能通过自助服务和自动化得到解决；通常在标准开发环境编写代码的开发人员也可与 IT 运维人员紧密合作，加速软件的构建、测试和发布，同时保障开发成果的稳定可靠。</p><h2 id="容器与-DevOps-有什么关系？"><a href="#容器与-DevOps-有什么关系？" class="headerlink" title="容器与 DevOps 有什么关系？"></a>容器与 DevOps 有什么关系？</h2><p>DevOps 可以加快一个想法从提出到部署的整个过程。DevOps 的核心在于，在应用的整个生命周期中，都要确保日常<strong>运维任务自动化和环境的标准化</strong>。容器可以提供标准化的环境，你需要一个平台来管理它们，同时提供内置的自动化功能并支持各种基础架构。</p><h2 id="DevOps-与-CI-CD"><a href="#DevOps-与-CI-CD" class="headerlink" title="DevOps 与 CI/CD"></a>DevOps 与 CI/CD</h2><p>选择支持流程的工具对于 DevOps 的成功至关重要。运维团队要跟上快速开发周期，就需要利用高度灵活的平台，并像开发团队对待代码一样，对待平台的基础架构。手动部署不仅速度慢，而且可能出错。因此，您也可通过自动化来简化平台调配和部署。</p><p>持续集成和持续部署管道（CI/CD）是实施 DevOps 的一大重要成果。CI/CD 可帮助您频繁地向客户交付应用并检验软件质量，而且只需极少的人工干预。</p><p>具体而言，CI/CD 在整个应用生命周期内（从集成和测试阶段，到交付和部署）都引入了持续自动化和持续监控，让您能够快速识别和改正问题与缺陷。这些彼此关联的实践通常被统称为“CI/CD 管道”，需要开发和运维团队以敏捷方式协同支持。</p><h2 id="CICD简介"><a href="#CICD简介" class="headerlink" title="CICD简介"></a>CICD简介</h2><ul><li>持续集成（Continuous Integration ，CI）</li><li>持续交付（Continuous Delivery）</li><li>持续部署（Continuous Deploy）</li></ul><p>参考<a href="https://www.jianshu.com/p/654505d42180" target="_blank" rel="noopener">链接</a></p><h2 id="云原生CICD实现"><a href="#云原生CICD实现" class="headerlink" title="云原生CICD实现"></a>云原生CICD实现</h2><p><img src="/images/CICD.jpg" alt="CICD"><br>流程：</p><ol><li>用户本地完成开发；</li><li>代码提交到<code>GitLab</code>上；</li><li>Gitlab收到代码提交请求后通过webhook触发Jenkins;</li><li><code>Jenkins</code>被触发后，首先从代码仓库拉取源码，进行构建、静态分析和单元测试，然后创建镜像推送到镜像仓库<code>Harbor</code>，最后调用<code>Kubernetes API</code>更新应用；</li><li>Kubernetes从Harbor拉取最新镜像，更新应用。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> CI/CD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
            <tag> CI/CD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis注解方式动态拼接SQL</title>
      <link href="/2019/12/31/mybatis-zhu-jie-fang-shi-dong-tai-pin-jie-sql/"/>
      <url>/2019/12/31/mybatis-zhu-jie-fang-shi-dong-tai-pin-jie-sql/</url>
      
        <content type="html"><![CDATA[<p>在spring boot中，集成Mybatis可以使用完全注解的方式，完全不用新增任何配置文件。多条件判断，可以使用<code>&lt;script&gt;</code>和<code>&lt;set&gt;</code>搭配实现。</p><h3 id="Update"><a href="#Update" class="headerlink" title="@Update"></a>@Update</h3><pre><code>@Update("&lt;script&gt;update t_user " +        "&lt;set&gt; " +        "&lt;if test='userName != null'&gt; user_name = #{userName},&lt;/if&gt;" +        "&lt;if test='userPwd != null'&gt; user_pwd = #{userPwd},&lt;/if&gt;" +        "&lt;if test='userRemark != null'&gt; user_remark = #{userRemark},&lt;/if&gt;" +        "&lt;if test='userPhone != null'&gt; user_phone = #{userPhone},&lt;/if&gt;" +        "&lt;if test='userEmail != null'&gt; user_email = #{userEmail},&lt;/if&gt;" +        "&lt;/set&gt; " +        "where user_id = #{userId}&lt;/script&gt;")</code></pre><h3 id="Select"><a href="#Select" class="headerlink" title="@Select"></a>@Select</h3><pre><code>@Select("select id,name,description,enabled,deleted,date_created as dateCreated,last_modified as lastModified from admin_role (#{roleParam})")</code></pre><h3 id="Insert"><a href="#Insert" class="headerlink" title="@Insert"></a>@Insert</h3><pre><code>@Insert("insert into t_alert_log (alert_name,severity,message,start_at,end_at) " +            "values(#{alertName},#{severity},#{message},#{startAt},#{endAt})")@Options(useGeneratedKeys = true, keyProperty = "id", keyColumn = "id")</code></pre><h3 id="Update-1"><a href="#Update-1" class="headerlink" title="@Update"></a>@Update</h3><pre><code>@Update("update t_alert_log set status=true,remark=#{remark} where token=#{token}")</code></pre><h3 id="ResultType"><a href="#ResultType" class="headerlink" title="@ResultType"></a>@ResultType</h3><pre><code>@ResultType(String.class)</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> mybatis </category>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis注解 </tag>
            
            <tag> 动态sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>helm常用命令总结</title>
      <link href="/2019/12/30/helm-chang-yong-ming-ling-zong-jie/"/>
      <url>/2019/12/30/helm-chang-yong-ming-ling-zong-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="Helm用途"><a href="#Helm用途" class="headerlink" title="Helm用途"></a>Helm用途</h2><p>做为Kubernetes的一个包管理工具，Helm具有如下功能：</p><ul><li>创建新的chart</li><li>chart打包成tgz格式</li><li>上传chart到chart仓库或从仓库中下载chart</li><li>在Kubernetes集群中安装或卸载chart</li><li>管理用Helm安装的chart的发布周期<br>Helm有三个重要概念：</li><li>chart：包含了创建Kubernetes的一个应用实例的必要信息</li><li>config：包含了应用发布配置信息</li><li>release：是一个chart及其配置的一个运行实例</li></ul></blockquote><h2 id="Helm常用命令"><a href="#Helm常用命令" class="headerlink" title="Helm常用命令"></a>Helm常用命令</h2><table><thead><tr><th>操作类型</th><th>命令</th></tr></thead><tbody><tr><td>添加仓库</td><td>helm repo add loki <a href="https://grafana.github.io/loki/charts" target="_blank" rel="noopener">https://grafana.github.io/loki/charts</a></td></tr><tr><td>更新仓库</td><td>helm repo update</td></tr><tr><td>查看helm仓库列表</td><td>helm repo list</td></tr><tr><td>查看本地已安装的包</td><td>helm list (ls)</td></tr><tr><td>查看全部release(包括删除的…)</td><td>helm list -a</td></tr><tr><td>查看helm版本</td><td>helm version</td></tr><tr><td>删除release</td><td>helm delete loki</td></tr><tr><td>设置安装release名称</td><td>–name test</td></tr><tr><td>设置安装的namespace</td><td>–namespace test</td></tr><tr><td>设置自定义属性</td><td>–set “loki.serviceName=loki”</td></tr><tr><td>从文件读取自定义属性集合</td><td>-f values.yaml</td></tr><tr><td>查找本地release的版本列表</td><td>helm search testapi -l</td></tr><tr><td>指定charts版本</td><td>–version 8.2.4</td></tr><tr><td>查看安装历史</td><td>helm history prometheus-operator</td></tr><tr><td>版本回滚</td><td>helm rollback prometheus-operator 1</td></tr><tr><td>打包chart</td><td>helm package mychart</td></tr><tr><td>获取charts</td><td>helm fetch stable/mysql –version 0.2.8 –untar</td></tr><tr><td>检查chart是否存在问题</td><td>helm lint mysql</td></tr><tr><td>创建一个本地仓库</td><td>helm serve –address 0.0.0.0:8879 –repo-path ./charts</td></tr><tr><td>创建一个chart</td><td>helm create mychart</td></tr><tr><td>查看release状态</td><td>helm status mysql</td></tr><tr><td>更新release</td><td>helm upgrade mysql -f mysql/values.yaml –set resources.requests.memory=1024Mi mysql</td></tr><tr><td>查看指定release的历史版本部署时部分配置信息</td><td>helm get –revision 1 mysql</td></tr><tr><td>对chart的模板和配置进行测试</td><td>helm install –dry-run –debug ./</td></tr><tr><td>查看release默认配置</td><td>helm inspect values stable/prometheus-operator</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> helm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> helm常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Istio使用【Bookinfo示例之简单路由管理】</title>
      <link href="/2019/12/30/istio-shi-yong-bookinfo-shi-li-zhi-jian-dan-lu-you-guan-li/"/>
      <url>/2019/12/30/istio-shi-yong-bookinfo-shi-li-zhi-jian-dan-lu-you-guan-li/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>本文使用的istio版本：<code>1.4.2</code></strong></p></blockquote><blockquote><p>上章内容只是简单运行了<code>Bookinfo</code>示例（<a href="">Istio使用【Bookinfo示例】</a>），访问页面，<code>Reviews</code>虽然有三个版本，但是刷新浏览器，三个版本是随机返回。本章内容仍然使用官方样例配置，定义一些自定义路由规则。在这之前最好了解下<a href="https://haolin.club/2020/01/03/istio-shi-yong-crds/">Istio使用【CRDs】</a>。</p></blockquote><h3 id="创建所有服务的DestinationRule"><a href="#创建所有服务的DestinationRule" class="headerlink" title="创建所有服务的DestinationRule"></a>创建所有服务的<code>DestinationRule</code></h3><pre class="line-numbers language-bash"><code class="language-bash">kubectl apply -f samples/bookinfo/networking/destination-rule-all.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="定义V1和V2版本8-2比重，V3不返回"><a href="#定义V1和V2版本8-2比重，V3不返回" class="headerlink" title="定义V1和V2版本8:2比重，V3不返回"></a>定义<code>V1</code>和<code>V2</code>版本<code>8:2</code>比重，<code>V3</code>不返回</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3<span class="token key atrule">kind</span><span class="token punctuation">:</span> VirtualService<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> reviews<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> reviews  <span class="token key atrule">http</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">route</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">destination</span><span class="token punctuation">:</span>        <span class="token key atrule">host</span><span class="token punctuation">:</span> reviews        <span class="token key atrule">subset</span><span class="token punctuation">:</span> v1      <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token punctuation">-</span> <span class="token key atrule">destination</span><span class="token punctuation">:</span>        <span class="token key atrule">host</span><span class="token punctuation">:</span> reviews        <span class="token key atrule">subset</span><span class="token punctuation">:</span> v2      <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义如果Header中包含jason用户返回V2版本，否则返回V3版本"><a href="#定义如果Header中包含jason用户返回V2版本，否则返回V3版本" class="headerlink" title="定义如果Header中包含jason用户返回V2版本，否则返回V3版本"></a>定义如果<code>Header</code>中包含<code>jason</code>用户返回<code>V2</code>版本，否则返回<code>V3</code>版本</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3<span class="token key atrule">kind</span><span class="token punctuation">:</span> VirtualService<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> reviews<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> reviews  <span class="token key atrule">http</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">match</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">headers</span><span class="token punctuation">:</span>        <span class="token key atrule">end-user</span><span class="token punctuation">:</span>          <span class="token key atrule">exact</span><span class="token punctuation">:</span> jason    <span class="token key atrule">route</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">destination</span><span class="token punctuation">:</span>        <span class="token key atrule">host</span><span class="token punctuation">:</span> reviews        <span class="token key atrule">subset</span><span class="token punctuation">:</span> v2  <span class="token punctuation">-</span> <span class="token key atrule">route</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">destination</span><span class="token punctuation">:</span>        <span class="token key atrule">host</span><span class="token punctuation">:</span> reviews        <span class="token key atrule">subset</span><span class="token punctuation">:</span> v3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其它可以参考<code>samples/bookinfo/networking/</code>目录下配置。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> istio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> istio </tag>
            
            <tag> bookinfo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Istio使用【Bookinfo示例】</title>
      <link href="/2019/12/26/istio-shi-yong-bookinfo-shi-li/"/>
      <url>/2019/12/26/istio-shi-yong-bookinfo-shi-li/</url>
      
        <content type="html"><![CDATA[<h3 id="Bookinfo示例简介"><a href="#Bookinfo示例简介" class="headerlink" title="Bookinfo示例简介"></a>Bookinfo示例简介</h3><p><code>Bookinfo</code>是<code>istio</code>官网示例，应用程序分为四个单独的微服务：</p><ul><li><code>productpage</code>。该<code>productpage</code>微服务调用<code>details</code>和<code>reviews</code>微服务来填充页面。</li><li><code>details</code>。该<code>details</code>微服务包含图书信息。</li><li><code>reviews</code>。该<code>reviews</code>微服务包含了书评。它们调用<code>ratings</code>微服务。</li><li><code>ratings</code>。该<code>ratings</code>微服务包含预定伴随书评排名信息。</li></ul><p><code>reviews</code>微服务有3个版本：</p><ul><li>版本<code>v1</code>不会调用该<code>ratings</code>服务。</li><li>版本<code>v2</code>调用该<code>ratings</code>服务，并将每个等级显示为1到5个黑星<font color="black">★</font>。</li><li>版本<code>v3</code>调用该<code>ratings</code>服务，并将每个等级显示为1到5个红色星号<font color="red">★</font>。</li></ul><p><img src="/images/bookinfo1.jpg" alt="Bookinfo架构图"></p><h3 id="Bookinfo在Istio中架构"><a href="#Bookinfo在Istio中架构" class="headerlink" title="Bookinfo在Istio中架构"></a><code>Bookinfo</code>在<code>Istio</code>中架构</h3><p>如果想要在<code>Istio</code>中运行<code>Bookinfo</code>，<code>Bookinfo</code>本身不需要任何改动，只需要为<code>Bookinfo</code>的微服务注入<code>Istio</code>的<code>Sidecar</code>。最终架构图如下：</p><p><img src="/images/bookinfo2.jpg" alt="Bookinfo架构图"></p><p>所有的微服务都与<code>Envoy</code>边车打包在一起，该<code>Envoy</code>边车拦截对服务的出/入请求，并与<code>Istio</code>控制面交互，提供路由、采集、实施各种策略等。</p><h3 id="启动Bookinfo服务，参考官网"><a href="#启动Bookinfo服务，参考官网" class="headerlink" title="启动Bookinfo服务，参考官网"></a>启动<code>Bookinfo</code>服务，参考<a href="https://istio.io/docs/examples/bookinfo/" target="_blank" rel="noopener">官网</a></h3><h4 id="进入istio目录"><a href="#进入istio目录" class="headerlink" title="进入istio目录"></a>进入istio目录</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master istio-1.4.2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># pwd</span>/root/istio/istio-1.4.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="设置namespace自动注入sidecar"><a href="#设置namespace自动注入sidecar" class="headerlink" title="设置namespace自动注入sidecar"></a>设置namespace自动注入sidecar</h4><pre class="line-numbers language-bash"><code class="language-bash">kubectl label namespace default istio-injection<span class="token operator">=</span>enabled<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="部署bookinfo服务"><a href="#部署bookinfo服务" class="headerlink" title="部署bookinfo服务"></a>部署bookinfo服务</h4><pre class="line-numbers language-bash"><code class="language-bash">kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你也可以手动为这个yaml注入sidecar再部署，参考<a href="">Istio使用【sidecar注入】</a></p><pre class="line-numbers language-bash"><code class="language-bash">kubectl apply -f <span class="token operator">&lt;</span><span class="token punctuation">(</span>istioctl kube-inject -f samples/bookinfo/platform/kube/bookinfo.yaml<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="确定启动完成"><a href="#确定启动完成" class="headerlink" title="确定启动完成"></a>确定启动完成</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master istio-1.4.2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get pod</span>NAME                                                       READY   STATUS    RESTARTS   AGEdetails-v1-74f858558f-7gx6r                                2/2     Running   0          31hproductpage-v1-8554d58bff-fwcj4                            2/2     Running   0          31hratings-v1-7855f5bcb9-r7z5l                                2/2     Running   0          31hreviews-v1-59fd8b965b-jppqr                                2/2     Running   0          31hreviews-v2-d6cfdb7d6-rx648                                 2/2     Running   0          31hreviews-v3-75699b5cfb-qpdjm                                2/2     Running   0          31h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master istio-1.4.2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get svc</span>NAME          TYPE        CLUSTER-IP       EXTERNAL-IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>     AGEdetails       ClusterIP   10.102.10.128    <span class="token operator">&lt;</span>none<span class="token operator">></span>        9080/TCP    31hproductpage   ClusterIP   10.110.251.239   <span class="token operator">&lt;</span>none<span class="token operator">></span>        9080/TCP    31hratings       ClusterIP   10.99.146.247    <span class="token operator">&lt;</span>none<span class="token operator">></span>        9080/TCP    31hreviews       ClusterIP   10.102.77.22     <span class="token operator">&lt;</span>none<span class="token operator">></span>        9080/TCP    31h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="确定程序运行正常"><a href="#确定程序运行正常" class="headerlink" title="确定程序运行正常"></a>确定程序运行正常</h4><pre class="line-numbers language-bash"><code class="language-bash">kubectl <span class="token function">exec</span> -it <span class="token punctuation">$(</span>kubectl get pod -l app<span class="token operator">=</span>ratings -o jsonpath<span class="token operator">=</span><span class="token string">'{.items[0].metadata.name}'</span><span class="token punctuation">)</span> -c ratings -- curl productpage:9080/productpage <span class="token operator">|</span> <span class="token function">grep</span> -o <span class="token string">"&lt;title>.*&lt;/title>"</span><span class="token operator">&lt;</span>title<span class="token operator">></span>Simple Bookstore App<span class="token operator">&lt;</span>/title<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="定义应用的入口网关"><a href="#定义应用的入口网关" class="headerlink" title="定义应用的入口网关"></a>定义应用的入口网关</h4><pre class="line-numbers language-bash"><code class="language-bash">kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="确认网关已创建"><a href="#确认网关已创建" class="headerlink" title="确认网关已创建"></a>确认网关已创建</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master istio-1.4.2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get gateway</span>NAME               AGEbookinfo-gateway   30h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>下面可以通过<code>Isito</code>的入口网关来访问了，在访问前，需要确定<code>Isito网关IP和端口</code>。</p><h3 id="获取Istio入口网关IP和端口：参考官网"><a href="#获取Istio入口网关IP和端口：参考官网" class="headerlink" title="获取Istio入口网关IP和端口：参考官网"></a>获取Istio入口网关IP和端口：参考<a href="https://istio.io/docs/tasks/traffic-management/ingress/ingress-control/#determining-the-ingress-ip-and-ports" target="_blank" rel="noopener">官网</a></h3><pre class="line-numbers language-bash"><code class="language-bash">kubectl get svc istio-ingressgateway -n istio-systemNAME                   TYPE           CLUSTER-IP      EXTERNAL-IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>                                                                                                                                      AGEistio-ingressgateway   LoadBalancer   10.110.94.234   <span class="token operator">&lt;</span>pending<span class="token operator">></span>     15020:32344/TCP,80:31380/TCP,443:31390/TCP,31400:31400/TCP,15029:31933/TCP,15030:30470/TCP,15031:31361/TCP,15032:31151/TCP,15443:31081/TCP   2d2h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果<code>EXTERNAL-IP</code>设置了该值，则您的环境具有可用于入口网关的外部负载平衡器。如果<code>EXTERNAL-IP</code>值是<code>&lt;none&gt;</code>（或永久<code>&lt;pending&gt;</code>），则您的环境不为入口网关提供外部负载平衡器。在这种情况下，您可以使用服务的节点端口来访问网关。</p><h4 id="确定端口"><a href="#确定端口" class="headerlink" title="确定端口"></a>确定端口</h4><ul><li><p>这里<code>80</code>对应的端口是<code>Http</code>服务的端口，映射的主机端口<code>31380</code>；</p></li><li><p>这里<code>443</code>对应的端口是<code>Https</code>服务的端口，映射的主机端口<code>31390</code>；</p></li></ul><h4 id="确定IP"><a href="#确定IP" class="headerlink" title="确定IP"></a>确定IP</h4><p>可以通过下面命令找个<code>hostIP</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master istio-1.4.2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get po -l istio=ingressgateway -n istio-system -o yaml | grep hostIP: -C3</span>---      state:        running:          startedAt: <span class="token string">"2019-12-24T06:46:29Z"</span>    hostIP: 192.168.1.212    phase: Running    podIP: 10.244.3.136    qosClass: Burstable---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以通过下面的命令找到Ingress部署的节点。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master istio-1.4.2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get po -l istio=ingressgateway -n istio-system -o wide</span>NAME                                    READY   STATUS    RESTARTS   AGE    IP             NODE     NOMINATED NODE   READINESS GATESistio-ingressgateway-6b7bfd7459-wljhh   1/1     Running   0          2d2h   10.244.3.136   k8s-02   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="访问Bookinfo应用"><a href="#访问Bookinfo应用" class="headerlink" title="访问Bookinfo应用"></a>访问Bookinfo应用</h3><p>浏览器访问刚刚或者的<code>IP</code>+<code>端口</code>+<code>/productpage</code>，例如我的是<a href="">http://192.168.1.212:31380/productpage</a></p><p><img src="/images/bookinfo3.jpg" alt="Reviewer-v1"><br><img src="/images/bookinfo4.jpg" alt="Reviewer-v2"><br><img src="/images/bookinfo5.jpg" alt="Reviewer-v3"></p><p>不停的刷新页面，可以看到返回的<code>Reviewer</code>是不同的版本。</p><h3 id="简单分析下"><a href="#简单分析下" class="headerlink" title="简单分析下"></a>简单分析下</h3><p>针对<code>samples/bookinfo/networking/bookinfo-gateway.yaml</code>，我们可以看看默认配置做了啥。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">[</span>root@k8s<span class="token punctuation">-</span>master istio<span class="token punctuation">-</span>1.4.2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat samples/bookinfo/networking/bookinfo-gateway.yaml</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3<span class="token key atrule">kind</span><span class="token punctuation">:</span> Gateway<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> bookinfo<span class="token punctuation">-</span>gateway<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">istio</span><span class="token punctuation">:</span> ingressgateway <span class="token comment" spellcheck="true"># use istio default controller</span>  <span class="token key atrule">servers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span>      <span class="token key atrule">number</span><span class="token punctuation">:</span> <span class="token number">80</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> http      <span class="token key atrule">protocol</span><span class="token punctuation">:</span> HTTP    <span class="token key atrule">hosts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">"*"</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3<span class="token key atrule">kind</span><span class="token punctuation">:</span> VirtualService<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> bookinfo<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token string">"*"</span>  <span class="token key atrule">gateways</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> bookinfo<span class="token punctuation">-</span>gateway  <span class="token key atrule">http</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">match</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">uri</span><span class="token punctuation">:</span>        <span class="token key atrule">exact</span><span class="token punctuation">:</span> /productpage    <span class="token punctuation">-</span> <span class="token key atrule">uri</span><span class="token punctuation">:</span>        <span class="token key atrule">prefix</span><span class="token punctuation">:</span> /static    <span class="token punctuation">-</span> <span class="token key atrule">uri</span><span class="token punctuation">:</span>        <span class="token key atrule">exact</span><span class="token punctuation">:</span> /login    <span class="token punctuation">-</span> <span class="token key atrule">uri</span><span class="token punctuation">:</span>        <span class="token key atrule">exact</span><span class="token punctuation">:</span> /logout    <span class="token punctuation">-</span> <span class="token key atrule">uri</span><span class="token punctuation">:</span>        <span class="token key atrule">prefix</span><span class="token punctuation">:</span> /api/v1/products    <span class="token key atrule">route</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">destination</span><span class="token punctuation">:</span>        <span class="token key atrule">host</span><span class="token punctuation">:</span> productpage        <span class="token key atrule">port</span><span class="token punctuation">:</span>          <span class="token key atrule">number</span><span class="token punctuation">:</span> <span class="token number">9080</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>首先创建一个<code>Gateway</code>，这是<code>Istio</code>的一个自定义资源类型(<code>CRD</code>)，它创建了这个<code>bookinfo</code>应用的网关<code>bookinfo-gateway</code>，使用了<code>istio</code>默认的<code>controller——ingressgateway</code>，如上文，<code>istio</code>的<code>ingress</code>网关定义了很多类型端口，这里<code>bookinfo-gateway</code>使用了<code>80</code>端口，域名使用的通配符 <code>*</code> 。</p></li><li><p>定义<code>VirtualService</code>，这里需要绑定刚刚创建的<code>bookinfo-gateway</code>，定义了匹配的<code>URI</code>和后台服务。</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> istio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> istio </tag>
            
            <tag> bookinfo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Istio使用【链路监控】</title>
      <link href="/2019/12/26/istio-shi-yong-lian-lu-jian-kong/"/>
      <url>/2019/12/26/istio-shi-yong-lian-lu-jian-kong/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>本文使用的istio版本：<code>1.4.2</code></strong></p></blockquote><h3 id="开启链路监控"><a href="#开启链路监控" class="headerlink" title="开启链路监控"></a>开启链路监控</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">...</span>.<span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># addon jaeger tracing configuration</span><span class="token comment" spellcheck="true">#</span><span class="token key atrule">tracing</span><span class="token punctuation">:</span>  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">...</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出。<code>istio</code>链路监控集成使用的是<code>Jaeger</code>，<code>Jaeger</code>是什么，参考<a href="https://blog.csdn.net/wzy_168/article/details/103628084" target="_blank" rel="noopener">开发分布式追踪OpenTracing与Jaeger相关文档整理</a>。</p><h3 id="查看是否启动成功"><a href="#查看是否启动成功" class="headerlink" title="查看是否启动成功"></a>查看是否启动成功</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master istio-1.4.2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get po -n istio-system --show-labels | grep jaeger</span>istio-tracing-795c9c64c4-224wm            1/1     Running     0          47h   app<span class="token operator">=</span>jaeger,chart<span class="token operator">=</span>tracing,heritage<span class="token operator">=</span>Tiller,pod-template-hash<span class="token operator">=</span>795c9c64c4,release<span class="token operator">=</span>istio<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="访问jaeger-UI"><a href="#访问jaeger-UI" class="headerlink" title="访问jaeger UI"></a>访问<code>jaeger UI</code></h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master istio-1.4.2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get svc -n istio-system | grep jaeger</span>jaeger-agent             ClusterIP      None             <span class="token operator">&lt;</span>none<span class="token operator">></span>        5775/UDP,6831/UDP,6832/UDP                                                                                                                   47hjaeger-collector         ClusterIP      10.110.206.207   <span class="token operator">&lt;</span>none<span class="token operator">></span>        14267/TCP,14268/TCP,14250/TCP                                                                                                                47hjaeger-query             NodePort       10.101.53.38     <span class="token operator">&lt;</span>none<span class="token operator">></span>        16686:31944/TCP <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如上所示，默认情况下，<code>jaeger-query</code>类型也是<code>ClusterIP</code>，为了便于访问，直接修改成<code>NodePort</code>类型:</p><pre class="line-numbers language-bash"><code class="language-bash">kubectl edit svc jaeger-query  -n istio-system<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后访问<code>IP:31944</code>即可。</p><h3 id="UI预览"><a href="#UI预览" class="headerlink" title="UI预览"></a>UI预览</h3><p><img src="/images/jaeger1.jpg" alt="Jaeger UI"><br><img src="/images/jaeger2.jpg" alt="Jaeger UI"><br><img src="/images/jaeger3.jpg" alt="Jaeger UI"></p><h3 id="采集频率控制"><a href="#采集频率控制" class="headerlink" title="采集频率控制"></a>采集频率控制</h3><p>如果所有的请求都采集监控，不管出于性能考虑还是资源考虑，都是不实际的。</p><p><code>pilot</code>组件中<code>PILOT_TRACE_SAMPLING</code>环境变量用于控制采集率，默认为<code>1</code>（<code>0~100</code>），测试的时候可以改大点便于分析:</p><pre class="line-numbers language-bash"><code class="language-bash"> kubectl -n istio-system get deploy istio-pilot -oyaml <span class="token operator">|</span> <span class="token function">grep</span> PILOT_TRACE_SAMPLING -A5--        - name: PILOT_TRACE_SAMPLING          value: <span class="token string">"1"</span>        - name: PILOT_ENABLE_PROTOCOL_SNIFFING_FOR_OUTBOUND          value: <span class="token string">"true"</span>        - name: PILOT_ENABLE_PROTOCOL_SNIFFING_FOR_INBOUND          value: <span class="token string">"false"</span>---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="监控数据采集存储"><a href="#监控数据采集存储" class="headerlink" title="监控数据采集存储"></a>监控数据采集存储</h3><p>参考<a href="https://blog.csdn.net/wzy_168/article/details/103699618" target="_blank" rel="noopener">控制台kiali配置</a>，其中配置了<code>Prometheus</code>和<code>grafana</code>。参考<a href="https://cloud.tencent.com/developer/article/1435739" target="_blank" rel="noopener">Istio链路监控和监控可视化</a></p><ul><li><code>prometheus</code>作为基础数据采集和存储方式，可以通过<code>PromQL</code>查询指标。</li><li><code>grafana</code>可定制化报表展示。</li></ul><p><img src="/images/istio1.jpg" alt="grafana"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> istio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> istio </tag>
            
            <tag> 链路监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>istio简介</title>
      <link href="/2019/12/25/istio/"/>
      <url>/2019/12/25/istio/</url>
      
        <content type="html"><![CDATA[<h2 id="Istio简介"><a href="#Istio简介" class="headerlink" title="Istio简介"></a>Istio简介</h2><p>Istio是一个开放服务网格，提供了一种连接，管理和保护微服务的统一方法。它支持管理服务之间的流量，执行访问策略以及汇总遥测数据，所有这些都无需更改微服务代码。<br>Istio：</p><ul><li>HTTP，gRPC，WebSocket，MongoDB和TCP通信的自动负载平衡。  </li><li>通过丰富的路由规则，重试，故障转移和故障注入对流量行为进行细粒度控制。  </li><li>可配置的策略层和API，支持访问控制，速率限制和配额。  </li><li>群集内所有流量的自动指标，日志和跟踪，包括群集入口和出口。  </li><li>通过强大的基于身份的身份验证和授权，在群集中进行安全的服务间通信。  </li></ul><h2 id="Istio架构图"><a href="#Istio架构图" class="headerlink" title="Istio架构图"></a>Istio架构图</h2><p><img src="/images/istio.jpg" alt="istio" title="istio架构图"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> istio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> istio </tag>
            
            <tag> service mesh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>logback配置文件模板</title>
      <link href="/2019/12/25/logback-pei-zhi-wen-jian-mo-ban/"/>
      <url>/2019/12/25/logback-pei-zhi-wen-jian-mo-ban/</url>
      
        <content type="html"><![CDATA[<h2 id="logback配置文件模板"><a href="#logback配置文件模板" class="headerlink" title="logback配置文件模板"></a>logback配置文件模板</h2><pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.padual.com/java/logback.xsd" debug="false"               scan="true" scanPeriod="30 second"&gt;    &lt;property name="PROJECT" value="app-demo" /&gt;    &lt;property name="ROOT" value="${catalina.base}/logs/${PROJECT}/" /&gt;    &lt;property name="FILESIZE" value="100MB" /&gt;    &lt;property name="MAXHISTORY" value="100" /&gt;    &lt;timestamp key="DATETIME" datePattern="yyyy-MM-dd HH:mm:ss" /&gt;    &lt;!-- 控制台打印 --&gt;    &lt;appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender"&gt;        &lt;encoder&gt;            &lt;pattern&gt;[%-5level] %d{${DATETIME}} [%thread] %logger{36} - %m%n&lt;/pattern&gt;        &lt;/encoder&gt;    &lt;/appender&gt;    &lt;!-- ERROR 输入到文件，按日期和文件大小 --&gt;    &lt;appender name="ERROR-OUT" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt;        &lt;encoder&gt;            &lt;pattern&gt;[%-5level] %d{${DATETIME}} [%thread] %logger{36} - %m%n&lt;/pattern&gt;        &lt;/encoder&gt;        &lt;filter class="ch.qos.logback.classic.filter.LevelFilter"&gt;            &lt;level&gt;ERROR&lt;/level&gt;            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;        &lt;/filter&gt;        &lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt;            &lt;fileNamePattern&gt;${ROOT}%d/error.%i.log&lt;/fileNamePattern&gt;            &lt;maxHistory&gt;${MAXHISTORY}&lt;/maxHistory&gt;            &lt;timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"&gt;                &lt;maxFileSize&gt;${FILESIZE}&lt;/maxFileSize&gt;            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;        &lt;/rollingPolicy&gt;    &lt;/appender&gt;    &lt;!-- WARN 输入到文件，按日期和文件大小 --&gt;    &lt;appender name="WARN-OUT" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt;        &lt;encoder&gt;            &lt;pattern&gt;[%-5level] %d{${DATETIME}} [%thread] %logger{36} - %m%n&lt;/pattern&gt;        &lt;/encoder&gt;        &lt;filter class="ch.qos.logback.classic.filter.LevelFilter"&gt;            &lt;level&gt;WARN&lt;/level&gt;            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;        &lt;/filter&gt;        &lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt;            &lt;fileNamePattern&gt;${ROOT}%d/warn.%i.log&lt;/fileNamePattern&gt;            &lt;maxHistory&gt;${MAXHISTORY}&lt;/maxHistory&gt;            &lt;timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"&gt;                &lt;maxFileSize&gt;${FILESIZE}&lt;/maxFileSize&gt;            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;        &lt;/rollingPolicy&gt;    &lt;/appender&gt;    &lt;!-- INFO 输入到文件，按日期和文件大小 --&gt;    &lt;appender name="INFO-OUT" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt;        &lt;encoder&gt;            &lt;pattern&gt;[%-5level] %d{${DATETIME}} [%thread] %logger{36} - %m%n&lt;/pattern&gt;        &lt;/encoder&gt;        &lt;filter class="ch.qos.logback.classic.filter.LevelFilter"&gt;            &lt;level&gt;INFO&lt;/level&gt;            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;        &lt;/filter&gt;        &lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt;            &lt;fileNamePattern&gt;${ROOT}%d/info.%i.log&lt;/fileNamePattern&gt;            &lt;maxHistory&gt;${MAXHISTORY}&lt;/maxHistory&gt;            &lt;timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"&gt;                &lt;maxFileSize&gt;${FILESIZE}&lt;/maxFileSize&gt;            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;        &lt;/rollingPolicy&gt;    &lt;/appender&gt;    &lt;!-- DEBUG 输入到文件，按日期和文件大小 --&gt;    &lt;appender name="DEBUG-OUT" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt;        &lt;encoder&gt;            &lt;pattern&gt;[%-5level] %d{${DATETIME}} [%thread] %logger{36} - %m%n&lt;/pattern&gt;        &lt;/encoder&gt;        &lt;filter class="ch.qos.logback.classic.filter.LevelFilter"&gt;            &lt;level&gt;DEBUG&lt;/level&gt;            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;        &lt;/filter&gt;        &lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt;            &lt;fileNamePattern&gt;${ROOT}%d/debug.%i.log&lt;/fileNamePattern&gt;            &lt;maxHistory&gt;${MAXHISTORY}&lt;/maxHistory&gt;            &lt;timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"&gt;                &lt;maxFileSize&gt;${FILESIZE}&lt;/maxFileSize&gt;            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;        &lt;/rollingPolicy&gt;    &lt;/appender&gt;    &lt;!-- TRACE 输入到文件，按日期和文件大小 --&gt;    &lt;appender name="TRACE-OUT" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt;        &lt;encoder&gt;            &lt;pattern&gt;[%-5level] %d{${DATETIME}} [%thread] %logger{36} - %m%n&lt;/pattern&gt;        &lt;/encoder&gt;        &lt;filter class="ch.qos.logback.classic.filter.LevelFilter"&gt;            &lt;level&gt;TRACE&lt;/level&gt;            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;        &lt;/filter&gt;        &lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt;            &lt;fileNamePattern&gt;${ROOT}%d/trace.%i.log&lt;/fileNamePattern&gt;            &lt;maxHistory&gt;${MAXHISTORY}&lt;/maxHistory&gt;            &lt;timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"&gt;                &lt;maxFileSize&gt;${FILESIZE}&lt;/maxFileSize&gt;            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;        &lt;/rollingPolicy&gt;    &lt;/appender&gt;    &lt;!-- Logger 根目录 --&gt;    &lt;root level="INFO"&gt;        &lt;appender-ref ref="STDOUT" /&gt;        &lt;appender-ref ref="ERROR-OUT" /&gt;        &lt;appender-ref ref="WARN-OUT" /&gt;        &lt;appender-ref ref="INFO-OUT" /&gt;    &lt;/root&gt;&lt;/configuration&gt;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> logback </category>
          
      </categories>
      
      
        <tags>
            
            <tag> logback </tag>
            
            <tag> logback配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/12/25/hello-world/"/>
      <url>/2019/12/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Istio使用【sidecar注入】</title>
      <link href="/2019/12/25/istio-shi-yong-sidecar-zhu-ru/"/>
      <url>/2019/12/25/istio-shi-yong-sidecar-zhu-ru/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>本文使用的istio版本：<code>1.4.2</code></strong></p></blockquote><h3 id="查看默认sidecar配置"><a href="#查看默认sidecar配置" class="headerlink" title="查看默认sidecar配置"></a>查看默认sidecar配置</h3><pre class="line-numbers language-bash"><code class="language-bash">kubectl get mutatingwebhookconfiguration istio-sidecar-injector -o yaml <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"namespaceSelector:"</span> -A5  namespaceSelector:    matchLabels:      istio-injection: enabled  objectSelector: <span class="token punctuation">{</span><span class="token punctuation">}</span>  reinvocationPolicy: Never  rules:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，<code>istio</code>默认<code>sidecar</code>注入规则是，<code>namespace</code>带有标签<code>istio-injection: enabled</code>才会注入sidecar。</p><p>查看哪些<code>namespace</code>已经配置注入：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master istio-1.4.2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get namespace -L istio-injection</span>NAME              STATUS   AGE   ISTIO-INJECTIONdefault           Active   70d   ingress-nginx     Active   69d   istio-system      Active   19h   kube-node-lease   Active   70d   kube-public       Active   70d   kube-system       Active   70d   naftis            Active   19h   test-deri         Active   47d <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为<code>namespace</code>打上注入<code>sidecar</code>标签：</p><pre class="line-numbers language-bash"><code class="language-bash">kubectl label namespace default istio-injection<span class="token operator">=</span>enabled --overwrite<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认情况，是没有设置。</p><h3 id="为namespace设置不注入sidecar"><a href="#为namespace设置不注入sidecar" class="headerlink" title="为namespace设置不注入sidecar"></a>为namespace设置不注入sidecar</h3><p>有些k8s系统组件<code>namespace</code>不应该注入<code>sidecar</code>，如<code>kube-system</code>等，参考如下设置</p><pre class="line-numbers language-bash"><code class="language-bash">kubectl get mutatingwebhookconfiguration istio-sidecar-injector -o yaml <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"namespaceSelector:"</span> -A5  namespaceSelector:    matchExpressions:    - key: istio-injection      operator: NotIn      values:      - disabled  rules:  - apiGroups:    - <span class="token string">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为<code>namespace</code>打上不注入<code>sidecar</code>标签:</p><pre class="line-numbers language-bash"><code class="language-bash">kubectl label namespace istio-system istio-injection<span class="token operator">=</span>disabled --overwrite<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">kubectl get namespace -L istio-injectionNAME           STATUS    AGE       ISTIO-INJECTIONdefault        Active    18distio-system   Active    3d        disabledkube-public    Active    18d       disabledkube-system    Active    18d       disabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看sidecar配置策略"><a href="#查看sidecar配置策略" class="headerlink" title="查看sidecar配置策略"></a>查看sidecar配置策略</h3><p><code>sidecar</code>配置保存在<code>configmap-istio-sidecar-injector</code>中，更多配置可以在<code>install/kubernetes/helm/istio/charts/sidecarInjectorWebhook/values.yaml</code>中查看。</p><p>主要配置，默认策略：</p><pre class="line-numbers language-bash"><code class="language-bash">kubectl -n istio-system get configmap istio-sidecar-injector -o jsonpath<span class="token operator">=</span><span class="token string">'{.data.config}'</span> <span class="token operator">|</span> <span class="token function">grep</span> policy:<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>允许的值为<code>disabled</code>和<code>enabled</code>。仅当<code>Webhook namespaceSelector</code>匹配目标名称空间时，才应用默认策略。无法识别的策略导致注入被完全禁用。</p><blockquote><p><font color="red">注意</font>：①策略为<code>disabled</code>，但是想要为POD注入<code>sidecar</code>，增加<code>annotation sidecar.istio.io/inject: "true"</code>即可<br> ②策略为<code>enabled</code>，但是不想要为POD注入<code>sidecar</code>，增加<code>annotation sidecar.istio.io/inject: "false"</code>即可</p></blockquote><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> ignored<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">annotations</span><span class="token punctuation">:</span>        <span class="token key atrule">sidecar.istio.io/inject</span><span class="token punctuation">:</span> <span class="token string">"false"</span>    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ignored        <span class="token key atrule">image</span><span class="token punctuation">:</span> tutum/curl        <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/sleep"</span><span class="token punctuation">,</span><span class="token string">"infinity"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="手动注入sidecar"><a href="#手动注入sidecar" class="headerlink" title="手动注入sidecar"></a>手动注入<code>sidecar</code></h3><p>为一个写好的yaml文件手动注入sidecar，我们可以使用<code>istioctl kube-inject</code>:</p><pre class="line-numbers language-bash"><code class="language-bash">istioctl kube-inject -f samples/sleep/sleep.yaml <span class="token operator">|</span> kubectl apply -f -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认情况下，这将使用集群内配置。或者，可以使用配置的本地副本来完成注入。下面命令可以将默认配置导出到文件：</p><pre class="line-numbers language-bash"><code class="language-bash">kubectl -n istio-system get configmap istio-sidecar-injector -o<span class="token operator">=</span>jsonpath<span class="token operator">=</span><span class="token string">'{.data.config}'</span> <span class="token operator">></span> inject-config.yamlkubectl -n istio-system get configmap istio-sidecar-injector -o<span class="token operator">=</span>jsonpath<span class="token operator">=</span><span class="token string">'{.data.values}'</span> <span class="token operator">></span> inject-values.yamlkubectl -n istio-system get configmap istio -o<span class="token operator">=</span>jsonpath<span class="token operator">=</span><span class="token string">'{.data.mesh}'</span> <span class="token operator">></span> mesh-config.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后再将文件中配置注入到已建好的<code>YAML</code>中并运行：</p><pre class="line-numbers language-bash"><code class="language-bash">istioctl kube-inject \    --injectConfigFile inject-config.yaml \    --meshConfigFile mesh-config.yaml \    --valuesFile inject-values.yaml \    --filename samples/sleep/sleep.yaml \    <span class="token operator">|</span> kubectl apply -f -<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这和第一条命令效果一样。验证<code>sidecar</code>已经注入：</p><pre class="line-numbers language-bash"><code class="language-bash">kubectl get pod  -l app<span class="token operator">=</span>sleepNAME                     READY   STATUS    RESTARTS   AGEsleep-64c6f57bc8-f5n4x   2/2     Running   0          24s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="其它配置：neverInjectSelector-alwaysInjectSelector"><a href="#其它配置：neverInjectSelector-alwaysInjectSelector" class="headerlink" title="其它配置：neverInjectSelector/alwaysInjectSelector"></a>其它配置：<code>neverInjectSelector/alwaysInjectSelector</code></h3><p>参考<a href="https://istio.io/docs/setup/additional-setup/sidecar-injection/#more-control-adding-exceptions" target="_blank" rel="noopener">官网</a></p><p>示例：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> istio<span class="token punctuation">-</span>sidecar<span class="token punctuation">-</span>injector<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">config</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token punctuation">-</span>    <span class="token key atrule">policy</span><span class="token punctuation">:</span> enabled    <span class="token key atrule">neverInjectSelector</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">key</span><span class="token punctuation">:</span> openshift.io/build.name<span class="token punctuation">,</span> <span class="token key atrule">operator</span><span class="token punctuation">:</span> Exists<span class="token punctuation">}</span>      <span class="token punctuation">-</span> <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">key</span><span class="token punctuation">:</span> openshift.io/deployer<span class="token punctuation">-</span>pod<span class="token punctuation">-</span>for.name<span class="token punctuation">,</span> <span class="token key atrule">operator</span><span class="token punctuation">:</span> Exists<span class="token punctuation">}</span>    <span class="token key atrule">template</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token punctuation">-</span>      <span class="token key atrule">initContainers</span><span class="token punctuation">:</span><span class="token punctuation">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置优先级"><a href="#配置优先级" class="headerlink" title="配置优先级"></a>配置优先级</h3><p>如果<code>POD</code>配置了<code>注解</code>、<code>neverInjectSelector/alwaysInjectSelector</code>也都配置了，默认策略也配置了，那么他们之间的优先级参考如下：</p><pre><code>Pod Annotations → NeverInjectSelector → AlwaysInjectSelector → Default Policy</code></pre><h3 id="卸载自动注入sidecar"><a href="#卸载自动注入sidecar" class="headerlink" title="卸载自动注入sidecar"></a>卸载自动注入sidecar</h3><h4 id="卸载istio中sidecar组件"><a href="#卸载istio中sidecar组件" class="headerlink" title="卸载istio中sidecar组件"></a>卸载istio中sidecar组件</h4><pre class="line-numbers language-bash"><code class="language-bash">kubectl delete mutatingwebhookconfiguration istio-sidecar-injectorkubectl -n istio-system delete <span class="token function">service</span> istio-sidecar-injectorkubectl -n istio-system delete deployment istio-sidecar-injectorkubectl -n istio-system delete serviceaccount istio-sidecar-injector-service-accountkubectl delete clusterrole istio-sidecar-injector-istio-systemkubectl delete clusterrolebinding istio-sidecar-injector-admin-role-binding-istio-system<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除某个namespace自动注入"><a href="#删除某个namespace自动注入" class="headerlink" title="删除某个namespace自动注入"></a>删除某个namespace自动注入</h4><pre class="line-numbers language-bash"><code class="language-bash">kubectl label namespace default istio-injection-<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="sidecar注入问题"><a href="#sidecar注入问题" class="headerlink" title="sidecar注入问题"></a>sidecar注入问题</h3><p>更多可以参考<a href="https://istio.io/docs/ops/common-problems/injection/" target="_blank" rel="noopener">官网</a>.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> istio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> istio </tag>
            
            <tag> sidecar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开放分布式追踪OpenTracing与Jaeger相关文档整理</title>
      <link href="/2019/12/18/kai-fang-fen-bu-shi-zhui-zong-opentracing-yu-jaeger-xiang-guan-wen-dang-zheng-li/"/>
      <url>/2019/12/18/kai-fang-fen-bu-shi-zhui-zong-opentracing-yu-jaeger-xiang-guan-wen-dang-zheng-li/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么需要服务追踪？"><a href="#为什么需要服务追踪？" class="headerlink" title="为什么需要服务追踪？"></a>为什么需要服务追踪？</h1><p>开发和工程团队因为系统组件水平扩展、开发团队小型化、敏捷开发、CD（持续集成）、解耦等各种需求，正在使用现代的微服务架构替换老旧的单片机系统，当一个生产系统面对真正的高并发，或者解耦成大量微服务时，以前很容易实现的重点任务变得困难了，如<strong>用户体验优化</strong>、<strong>后台真实错误原因分析</strong>，<strong>分布式系统内各组件的调用情况</strong>等。 </p><h1 id="分布式服务追踪现状"><a href="#分布式服务追踪现状" class="headerlink" title="分布式服务追踪现状"></a>分布式服务追踪现状</h1><p>当代分布式跟踪系统（例如，<code>Zipkin</code>, <code>Dapper</code>, <code>HTrace</code>, <code>X-Trace</code>等）旨在解决这些问题，但是他们使用不兼容的<code>API</code>来实现各自的应用需求。尽管这些分布式追踪系统有着相似的API语法，但各种语言的开发人员依然很难将他们各自的系统（使用不同的语言和技术）和特定的分布式追踪系统进行整合。</p><h1 id="OpenTracing"><a href="#OpenTracing" class="headerlink" title="OpenTracing"></a>OpenTracing</h1><p>OpenTracing通过提供平台无关、厂商无关的API，使得开发人员能够方便的添加（或更换）追踪系统的实现。 OpenTracing提供了用于运营支撑系统的和针对特定平台的辅助程序库。</p><h1 id="典型服务追踪案例"><a href="#典型服务追踪案例" class="headerlink" title="典型服务追踪案例"></a>典型服务追踪案例</h1><p><img src="/images/ot1.png" alt="案例"></p><p>在一个分布式系统中，追踪一个事务或者调用流一般如上图所示。虽然这种图对于看清各组件的组合关系是很有用的，但是，它不能很好显示组件的调用时间，是串行调用还是并行调用，如果展现更复杂的调用关系，会更加复杂，甚至无法画出这样的图。这种图也无法显示调用间的时间间隔以及是否通过定时调用来启动调用.</p><p><img src="/images/ot2.png" alt="案例"></p><p>这种展现方式增加显示了执行时间的上下文，相关服务间的层次关系，进程或者任务的串行或并行调用关系。这样的视图有助于发现系统调用的关键路径。通过关注关键路径的执行过程，项目团队可能专注于优化路径中的关键位置，最大幅度的提升系统性能。例如：可以通过追踪一个资源定位的调用情况，明确底层的调用情况，发现哪些操作有阻塞的情况。</p><h1 id="Jaeger-架构"><a href="#Jaeger-架构" class="headerlink" title="Jaeger 架构"></a>Jaeger 架构</h1><p><code>Jaeger</code>是OpenTracing的一种实现。<br><img src="/images/jaeger.jpg" alt="jaeger"></p><p>如上图所示，<code>Jaeger</code> 主要由以下几部分组成。</p><ul><li><strong>Jaeger Client</strong> - 为不同语言实现了符合 OpenTracing 标准的 SDK。应用程序通过 API 写入数据，client library 把 trace 信息按照应用程序指定的采样策略传递给 jaeger-agent。在 Application 中调用 Jaeger Client Library 记录 Span 的过程通常被称为埋点。</li><li><strong>Agent</strong> - 它是一个监听在 UDP 端口上接收 span 数据的网络守护进程，它会将数据批量发送给 collector。它被设计成一个基础组件，部署到所有的宿主机上。Agent 将 client library 和 collector 解耦，为 client library 屏蔽了路由和发现 collector 的细节。</li><li><strong>Collector</strong> - 接收 jaeger-agent 发送来的数据，然后将数据写入后端存储。Collector 被设计成无状态的组件，因此您可以同时运行任意数量的 jaeger-collector。</li><li><strong>Data Store</strong> - 后端存储被设计成一个可插拔的组件，支持将数据写入 cassandra、elastic search。</li><li><strong>Query</strong> - 接收查询请求，然后从后端存储系统中检索 trace 并通过 UI 进行展示。Query 是无状态的，您可以启动多个实例，把它们部署在 nginx 这样的负载均衡器后面。</li></ul><h1 id="Istio-Trace链路追踪方案"><a href="#Istio-Trace链路追踪方案" class="headerlink" title="Istio Trace链路追踪方案"></a>Istio Trace链路追踪方案</h1><ul><li><p><code>Envoy</code>原生就支持分布式追踪系统的接入，如支持<code>jaeger</code>和<code>zipkin</code>；</p></li><li><p>生成<code>Request Id</code>，填充<code>HTTP</code>的<code>header</code>字段<code>x-request-id</code>;</p></li><li><p>如果<code>incoming</code>的请求没有trace相关的headers，则会在流量进入pods之前创建一个<code>root span</code>;</p></li><li><p>如果<code>incoming</code>的请求包含有trace相关的headers，Sidecar的proxy将会extract这些span的上下文信息，然后在流量进入pods之前创建一个继承上一个span的新的span;</p></li><li><p>Jaeger本身支持在client端调整和通过collector调整采样策略，但是在Istio中并没有Jaeger的client，只是envoy里面支持了trace，不过Istio中提供了一个全局的设置，通过设置pilot的参数可以用来控制采用策略。</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> jaeger </category>
          
      </categories>
      
      
        <tags>
            
            <tag> istio </tag>
            
            <tag> OpenTracing </tag>
            
            <tag> jaeger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志聚合工具Loki安装使用【采用helm安装】</title>
      <link href="/2019/12/17/ri-zhi-ju-he-gong-ju-loki-an-zhuang-shi-yong-cai-yong-helm-an-zhuang/"/>
      <url>/2019/12/17/ri-zhi-ju-he-gong-ju-loki-an-zhuang-shi-yong-cai-yong-helm-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Loki是 Grafana Labs 团队最新的开源项目，是一个水平可扩展，高可用性，多租户的日志聚合系统。它的设计非常经济高效且易于操作，因为它不会为日志内容编制索引，而是为每个日志流编制一组标签。项目受 Prometheus 启发，官方的介绍就是：Like Prometheus, but for logs.，类似于 Prometheus 的日志系统。</p><p>与其他日志聚合系统相比，Loki具有下面的一些特性：</p><ul><li>不对日志进行全文索引。通过存储压缩非结构化日志和仅索引元数据，Loki 操作起来会更简单，更省成本。</li><li>通过使用与 Prometheus 相同的标签记录流对日志进行索引和分组，这使得日志的扩展和操作效率更高。</li><li>特别适合储存 Kubernetes Pod 日志; 诸如 Pod 标签之类的元数据会被自动删除和编入索引。</li><li>受 Grafana 原生支持。</li></ul><p>Loki 由以下3个部分组成：<br><img src="/images/loki.png" alt="Loki"></p><ol><li>loki是主服务器，负责存储日志和处理查询。</li><li>promtail是代理，负责收集日志并将其发送给 loki 。</li><li>Grafana用于 UI 展示。</li></ol><h3 id="Loki安装"><a href="#Loki安装" class="headerlink" title="Loki安装"></a>Loki安装</h3><p>参考<a href="https://github.com/grafana/loki/blob/master/docs/installation/helm.md" target="_blank" rel="noopener">官网</a></p><h4 id="添加-更新helm"><a href="#添加-更新helm" class="headerlink" title="添加/更新helm"></a>添加/更新helm</h4><pre class="line-numbers language-bash"><code class="language-bash">helm repo add loki https://grafana.github.io/loki/chartshelm repo update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="安装loki（使用默认配置）"><a href="#安装loki（使用默认配置）" class="headerlink" title="安装loki（使用默认配置）"></a>安装loki（使用默认配置）</h4><pre class="line-numbers language-bash"><code class="language-bash">helm upgrade --install loki loki/loki-stack<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="安装loki（设置namespace）"><a href="#安装loki（设置namespace）" class="headerlink" title="安装loki（设置namespace）"></a>安装loki（设置namespace）</h4><pre class="line-numbers language-bash"><code class="language-bash">helm upgrade --install loki --namespace<span class="token operator">=</span>loki loki/loki<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="安装loki（更改一些配置）"><a href="#安装loki（更改一些配置）" class="headerlink" title="安装loki（更改一些配置）"></a>安装loki（更改一些配置）</h4><pre class="line-numbers language-bash"><code class="language-bash">helm upgrade --install loki loki/loki-stack  --set grafana.enabled<span class="token operator">=</span>true,prometheus.enabled<span class="token operator">=</span>true,prometheus.alertmanager.persistentVolume.enabled<span class="token operator">=</span>false,prometheus.server.persistentVolume.enabled<span class="token operator">=</span>false<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>这边loki使用的镜像是<code>grafana/loki:v1.2.0</code>，建议提前拉取下来。</p><pre class="line-numbers language-bash"><code class="language-bash">docker pull grafana/loki:v1.2.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其它一些信息，可以参考官网配置。</p></blockquote><h3 id="Promtail安装"><a href="#Promtail安装" class="headerlink" title="Promtail安装"></a>Promtail安装</h3><p>参考<a href="https://github.com/grafana/loki/blob/master/docs/clients/promtail/installation.md" target="_blank" rel="noopener">官网</a></p><pre class="line-numbers language-bash"><code class="language-bash">helm upgrade --install promtail loki/promtail --set <span class="token string">"loki.serviceName=loki"</span> --namespace<span class="token operator">=</span>loki<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>这边loki使用的镜像是<code>grafana/promtail:v1.2.0</code>，建议提前拉取下来。</p><pre class="line-numbers language-bash"><code class="language-bash">docker pull grafana/promtail:v1.2.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其它一些信息，可以参考官网配置。</p></blockquote><h3 id="集成Grafana，实现页面查询日志"><a href="#集成Grafana，实现页面查询日志" class="headerlink" title="集成Grafana，实现页面查询日志"></a>集成Grafana，实现页面查询日志</h3><blockquote><p>前文使用<a href="">Helm一键安装Prometheus Operator</a>已经安装了grafana服务，我们可以直接使用。</p></blockquote><h4 id="登录grafana，选择添加数据源"><a href="#登录grafana，选择添加数据源" class="headerlink" title="登录grafana，选择添加数据源"></a>登录grafana，选择添加数据源</h4><p><img src="/images/loki1.jpg" alt="添加Loki数据源"></p><h4 id="数据源列表中选择Loki，配置服务地址"><a href="#数据源列表中选择Loki，配置服务地址" class="headerlink" title="数据源列表中选择Loki，配置服务地址"></a>数据源列表中选择Loki，配置服务地址</h4><blockquote><p>如果<code>grafana</code>与<code>loki</code>在同一个<code>namespace</code>，只需写服务名即可。<br>如果是在不同的<code>namespace</code>，那么要写完整<code>DNS</code>地址。</p></blockquote><p><img src="/images/loki2.jpg" alt="添加Loki数据源"></p><h4 id="切换到grafana左侧区域的Explore，进入loki页面"><a href="#切换到grafana左侧区域的Explore，进入loki页面" class="headerlink" title="切换到grafana左侧区域的Explore，进入loki页面"></a>切换到<code>grafana</code>左侧区域的<code>Explore</code>，进入<code>loki</code>页面</h4><p><img src="/images/loki3.jpg" alt="添加Loki数据源"></p><p>点击Log labels就可以把当前系统采集的日志标签给显示出来，可以根据这些标签进行日志的过滤查询</p><p><img src="/images/loki4.jpg" alt="添加Loki数据源"></p><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><pre><code>...........level=error ts=2019-12-17T05:43:00.189385282Z caller=filetarget.go:272 msg="failed to tail file, stat failed" error="stat /var/log/pods/kube-system_kube-flannel-ds-amd64-btn7m_5088625c-bba8-41d6-86c8-dc738d3b43ab/kube-flannel/3.log: no such file or directory" filename=/var/log/pods/kube-system_kube-flannel-ds-amd64-btn7m_5088625c-bba8-41d6-86c8-dc738d3b43ab/kube-flannel/3.loglevel=error ts=2019-12-17T05:43:00.192476724Z caller=filetarget.go:272 msg="failed to tail file, stat failed" error="stat /var/log/pods/kube-system_kube-flannel-ds-amd64-btn7m_5088625c-bba8-41d6-86c8-dc738d3b43ab/install-cni/5.log: no such file or directory" filename=/var/log/pods/kube-system_kube-flannel-ds-amd64-btn7m_5088625c-bba8-41d6-86c8-dc738d3b43ab/install-cni/5.log......</code></pre><p>提示找不到<code>/var/log/pods</code>目录下的日志文件，无法<code>tail</code>。</p><p>首先我们可以进入<code>promtail</code>容器内，到该目录下查看下是否有该文件，通过<code>cat</code>命令看看是否有日志。</p><p>默认安装<code>promtail</code>，它会将主机<code>/var/log/pods</code>和<code>/var/lib/docker/containers</code>目录通过<code>volumes</code>方式挂载到<code>promtail</code>容器内。如果安装<code>docker</code>和<code>k8s</code>都是采用默认配置，应该不会存在读不到日志的问题。</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"docker"</span><span class="token punctuation">,</span>    <span class="token property">"hostPath"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"/var/lib/docker/containers"</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">""</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"pods"</span><span class="token punctuation">,</span>    <span class="token property">"hostPath"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"/var/log/pods"</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">""</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本人因为主机系统盘太小，设置了<code>docker</code>镜像的目录到挂载磁盘<code>/data</code>目录下，所以需要修改默认<code>volumes</code>配置。</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"docker"</span><span class="token punctuation">,</span>    <span class="token property">"hostPath"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"/data/docker/containers"</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">""</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"pods"</span><span class="token punctuation">,</span>    <span class="token property">"hostPath"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"/var/log/pods"</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">""</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>//注意对应的volumeMounts也要修改<span class="token property">"volumeMounts"</span><span class="token operator">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">{</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"docker"</span><span class="token punctuation">,</span>                <span class="token property">"readOnly"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token property">"mountPath"</span><span class="token operator">:</span> <span class="token string">"/data/docker/containers"</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">{</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"pods"</span><span class="token punctuation">,</span>                <span class="token property">"readOnly"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token property">"mountPath"</span><span class="token operator">:</span> <span class="token string">"/var/log/pods"</span>              <span class="token punctuation">}</span>            <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面<code>volumes</code>和<code>volumeMounts</code>都要修改，因为<code>/var/log/pods</code>目录下的日志文件其实是个软链接，指向的是<code>docker/containers</code>目录下的日志文件。如果只修改了<code>volumes</code>，那么<code>promtail</code>容器内可以找到日志文件，但是打开确实空的，因为它只是个软连接。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@node1 log<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll /var/log/pods/monitoring_promtail-bs5cs_5bc5bc90-bac9-480d-b291-4caadeff2236/promtail/</span>total 4lrwxrwxrwx 1 root root 162 Dec 17 14:04 0.log -<span class="token operator">></span> /data/docker/containers/db45d5118e9508817e1a2efa3c9da68cfe969a2b0a3ed42619ff61a29cc64e5f/db45d5118e9508817e1a2efa3c9da68cfe969a2b0a3ed42619ff61a29cc64e5f-json.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> loki </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> loki </tag>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql查询</title>
      <link href="/2019/11/17/mysql-cha-xun/"/>
      <url>/2019/11/17/mysql-cha-xun/</url>
      
        <content type="html"><![CDATA[<h3 id="多条件模糊查询"><a href="#多条件模糊查询" class="headerlink" title="多条件模糊查询"></a>多条件模糊查询</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_log <span class="token keyword">where</span> <span class="token punctuation">(</span>LOCATE<span class="token punctuation">(</span><span class="token string">'wu'</span><span class="token punctuation">,</span> user_name<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">or</span>  LOCATE<span class="token punctuation">(</span><span class="token string">'wu'</span><span class="token punctuation">,</span> params <span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">and</span>  <span class="token punctuation">(</span>method<span class="token operator">=</span><span class="token string">'POST'</span> <span class="token operator">or</span> method<span class="token operator">=</span><span class="token string">'GET'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查询id在列表中的所有结果"><a href="#查询id在列表中的所有结果" class="headerlink" title="查询id在列表中的所有结果"></a>查询id在列表中的所有结果</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_user <span class="token keyword">where</span> tenant_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7 安装使用NFS</title>
      <link href="/2019/11/15/an-zhuang-shi-yong-nfs/"/>
      <url>/2019/11/15/an-zhuang-shi-yong-nfs/</url>
      
        <content type="html"><![CDATA[<h3 id="yum-安装"><a href="#yum-安装" class="headerlink" title="yum 安装"></a>yum 安装</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> nfs-utils<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置-NFS-服务开机启动"><a href="#设置-NFS-服务开机启动" class="headerlink" title="设置 NFS 服务开机启动"></a>设置 NFS 服务开机启动</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl <span class="token function">enable</span> rpcbind<span class="token function">sudo</span> systemctl <span class="token function">enable</span> nfs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="启动-NFS-服务"><a href="#启动-NFS-服务" class="headerlink" title="启动 NFS 服务"></a>启动 NFS 服务</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start rpcbind<span class="token function">sudo</span> systemctl start nfs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="服务启动之后，我们在服务端配置一个共享目录"><a href="#服务启动之后，我们在服务端配置一个共享目录" class="headerlink" title="服务启动之后，我们在服务端配置一个共享目录"></a>服务启动之后，我们在服务端配置一个共享目录</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> /data<span class="token function">sudo</span> <span class="token function">chmod</span> 755 /data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="根据这个目录，相应配置导出目录"><a href="#根据这个目录，相应配置导出目录" class="headerlink" title="根据这个目录，相应配置导出目录"></a>根据这个目录，相应配置导出目录</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vi</span> /etc/exports<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="添加如下配置"><a href="#添加如下配置" class="headerlink" title="添加如下配置"></a>添加如下配置</h3><pre><code>/data/     192.168.0.0/24(rw,sync,no_root_squash,no_all_squash)</code></pre><blockquote><ol><li><code>/data</code>: 共享目录位置。</li><li><code>192.168.0.0/24</code>: 客户端 <code>IP</code> 范围，<code>*</code> 代表所有，即没有限制。</li><li><code>rw</code>: 权限设置，可读可写。</li><li><code>sync</code>: 同步共享目录。</li><li><code>no_root_squash</code>: 可以使用 <code>root</code> 授权。</li><li><code>no_all_squash</code>: 可以使用普通用户授权。</li></ol></blockquote><h3 id="wq保存设置之后，重启-NFS-服务"><a href="#wq保存设置之后，重启-NFS-服务" class="headerlink" title=":wq保存设置之后，重启 NFS 服务"></a><code>:wq</code>保存设置之后，重启 <code>NFS</code> 服务</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart nfs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="可以检查一下本地的共享目录"><a href="#可以检查一下本地的共享目录" class="headerlink" title="可以检查一下本地的共享目录"></a>可以检查一下本地的共享目录</h3><pre class="line-numbers language-bash"><code class="language-bash">showmount -e localhostExport list <span class="token keyword">for</span> localhost:/data 192.168.0.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://qizhanming.com/blog/2018/08/08/how-to-install-nfs-on-centos-7" target="_blank" rel="noopener">参考</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> nfs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s监控【metrics-server部署使用】</title>
      <link href="/2019/11/10/k8s-jian-kong-metrics-server-bu-shu-shi-yong/"/>
      <url>/2019/11/10/k8s-jian-kong-metrics-server-bu-shu-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>从<code>Heapster</code>的<a href="https://github.com/kubernetes/heapster" target="_blank" rel="noopener">github</a> 中可以看到已经，<code>heapster</code>已经<code>DEPRECATED</code>。 这里是<code>heapster</code>的<a href="https://github.com/kubernetes-retired/heapster/blob/master/docs/deprecation.md" target="_blank" rel="noopener">deprecation timeline</a>。 可以看出<code>heapster</code>从<code>Kubernetes 1.12</code>开始从<code>Kubernetes</code>各种安装脚本中移除。</p><p><code>Kubernetes</code>推荐使用<code>metrics-server</code>。我们这里也使用<code>helm</code>来部署<code>metrics-server</code>。</p><h3 id="创建配置metrics-server-yaml"><a href="#创建配置metrics-server-yaml" class="headerlink" title="创建配置metrics-server.yaml"></a>创建配置<code>metrics-server.yaml</code></h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">replicaCount</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token key atrule">image</span><span class="token punctuation">:</span>    <span class="token key atrule">repository</span><span class="token punctuation">:</span> hub.deri.org.cn/k8s/metrics<span class="token punctuation">-</span>server<span class="token punctuation">-</span>amd64    <span class="token key atrule">tag</span><span class="token punctuation">:</span> v0.3.5    <span class="token key atrule">pullPolicy</span><span class="token punctuation">:</span> IfNotPresent<span class="token key atrule">args</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>logtostderr<span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>kubelet<span class="token punctuation">-</span>insecure<span class="token punctuation">-</span>tls<span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>kubelet<span class="token punctuation">-</span>preferred<span class="token punctuation">-</span>address<span class="token punctuation">-</span>types=InternalIP<span class="token key atrule">nodeSelector</span><span class="token punctuation">:</span>    <span class="token key atrule">node-role.kubernetes.io/edge</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token key atrule">tolerations</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span>role.kubernetes.io/master      <span class="token key atrule">operator</span><span class="token punctuation">:</span> Exists      <span class="token key atrule">effect</span><span class="token punctuation">:</span> NoSchedule    <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span>role.kubernetes.io/master      <span class="token key atrule">operator</span><span class="token punctuation">:</span> Exists      <span class="token key atrule">effect</span><span class="token punctuation">:</span> PreferNoSchedule<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-bash"><code class="language-bash">helm <span class="token function">install</span> stable/metrics-server \-n metrics-server \--namespace kube-system \-f metrics-server.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-bash"><code class="language-bash">kubectl <span class="token function">top</span> nodeNAME    CPU<span class="token punctuation">(</span>cores<span class="token punctuation">)</span>   CPU%   MEMORY<span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>   MEMORY%node1   650m         32%    1276Mi          73%node2   73m          3%     527Mi           30%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">kubectl <span class="token function">top</span> pod -n kube-systemNAME                                    CPU<span class="token punctuation">(</span>cores<span class="token punctuation">)</span>   MEMORY<span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>   coredns-5c98db65d4-dr8lf                8m           7Mi             coredns-5c98db65d4-lp8dg                6m           8Mi             etcd-node1                              44m          46Mi            kube-apiserver-node1                    74m          295Mi           kube-controller-manager-node1           35m          50Mi            kube-flannel-ds-amd64-7lwm9             2m           8Mi             kube-flannel-ds-amd64-mm296             5m           9Mi             kube-proxy-7fsrg                        1m           11Mi            kube-proxy-k8vhm                        3m           11Mi            kube-scheduler-node1                    8m           15Mi            kubernetes-dashboard-848b8dd798-c4sc2   2m           14Mi            metrics-server-8456fb6676-fwh2t         10m          19Mi            tiller-deploy-7bf78cdbf7-9q94c          1m           16Mi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>遗憾的是，当前<code>Kubernetes Dashboard</code>还不支持<code>metrics-server</code>。因此如果使用<code>metrics-server</code>替代了<code>heapster</code>，将无法在<code>dashboard</code>中以图形展示<code>Pod</code>的内存和<code>CPU</code>情况。计划在<a href="https://github.com/kubernetes/dashboard" target="_blank" rel="noopener">dashboard 2.0</a>版本以后才会支持，尽情期待~</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> metrics-server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring boot自定义配置Boolean属性不能生效问题</title>
      <link href="/2019/11/08/spring-boot-zi-ding-yi-pei-zhi-boolean-shu-xing-bu-neng-sheng-xiao-wen-ti/"/>
      <url>/2019/11/08/spring-boot-zi-ding-yi-pei-zhi-boolean-shu-xing-bu-neng-sheng-xiao-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>有时候我们需要在 <code>application.yaml</code>文件中自定义配置，在程序中通过属性名映射过去，但是有时候定义错误的属性名会导致配置不生效。<br>属性名<font color="red"><strong>不能</strong>是<code>is</code>开头</font>，例如属性名为<code>isLog</code>，你在配置文件中不管怎么给这个属性设值都不会生效，需要改成log即可。</p><p>我使用<code>spring boot</code>版本：</p><pre><code>&lt;parent&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;    &lt;version&gt;2.0.6.RELEASE&lt;/version&gt;    &lt;relativePath/&gt;&lt;/parent&gt;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot </tag>
            
            <tag> config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s与harbor联合使用【k8s拉取harbor中镜像】</title>
      <link href="/2019/11/08/k8s-yu-harbor-lian-he-shi-yong-k8s-la-qu-harbor-zhong-jing-xiang/"/>
      <url>/2019/11/08/k8s-yu-harbor-lian-he-shi-yong-k8s-la-qu-harbor-zhong-jing-xiang/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>概要</strong>：要想<code>k8s</code>从<code>harbor</code>中拉取镜像，需要有<code>harbor</code>的用户、密码、服务器信息，然后在<code>k8s</code>指定<code>namespace</code>中创建<code>docker-registry</code>类型。</p></blockquote><blockquote><p><strong>前提</strong>：已经搭建<code>K8s</code>集群、<code>harbor</code>服务，且已经在机器上配置可以从<code>harbor</code>中拉取上传镜像。</p></blockquote><h3 id="创建docker-registry"><a href="#创建docker-registry" class="headerlink" title="创建docker-registry"></a>创建<code>docker-registry</code></h3><p>创建<code>docker-registry</code>，有两种方式，命令行和<code>YAML</code>.</p><h4 id="第一种方式：命令行"><a href="#第一种方式：命令行" class="headerlink" title="第一种方式：命令行"></a>第一种方式：命令行</h4><pre class="line-numbers language-bash"><code class="language-bash">kubectl create secret docker-registry test-deri-registry-secret --namespace<span class="token operator">=</span>test-namespace \ --docker-server<span class="token operator">=</span>hub.test.org.cn --docker-username<span class="token operator">=</span>test2019 \ --docker-password<span class="token operator">=</span>tests12019 --docker-email<span class="token operator">=</span>admin@harbor.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="第二种方式：YAML"><a href="#第二种方式：YAML" class="headerlink" title="第二种方式：YAML"></a>第二种方式：YAML</h4><p>需要有一台已经成功登录过<code>harbor</code>服务器的机器，使用命令<code>cat ~/.docker/config.json</code>，确认是否有<code>harbor</code>服务器的认证信息，例如:</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"auths"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"hub.test.org.cn:443"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"auth"</span><span class="token operator">:</span> <span class="token string">"YWRtaW46RGVxasdXXnsada"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"HttpHeaders"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"User-Agent"</span><span class="token operator">:</span> <span class="token string">"Docker-Client/19.03.4 (linux)"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来k8s也可以直接使用该认证信息，使用命令<code>cat ~/.docker/config.json |base64 -w 0</code>将该认证信息<code>BASE64</code>编码<font color="red"><strong>【以下示例结果都是瞎写的，请使用自己返回的结果】</strong></font>。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat .docker/config.json |base64 -w 0</span>ewoJImF1dGhzIjogewoJCSJodWIuZGVyaS5vcmcuY246NDQzIjogewoJCQkiYXV0aCI6ICJZV1J0YVc0NlJHVnlhU015TURFNSIKCHIUASDGUGDUGAUDUIAGDJIIGIUDZWFkZXJzIjogewoJCSJVc2VyLUFnZW50IjogIkRvY2tlci1DbGllbnQvMTkSDISDhi7asd56523gHGSGH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编写<code>test-registry-secret.yaml</code></p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Secret<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>registry<span class="token punctuation">-</span>secret  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>deri<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">.dockerconfigjson</span><span class="token punctuation">:</span> wraJImF1dGhzIjogeraJCSIxOTIuMTY4LjEzMC4yMyI6IHsKCQkJImF1dGgiOiAiYW5OaVpHVjJaV3h2Y0dWeU9rcHpZakV5TXpRMSIKCQl9Cgl9LAoJIkh0dHBIZWFkZXJzIjogewoJCSJVc2VyLUFnZW50IjogIkRvY2tlci1DbGllbnQvMTguMDkuMiAobGludXgpIgoJfQp9<span class="token key atrule">type</span><span class="token punctuation">:</span> kubernetes.io/dockerconfigjson<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用命令<code>kubectl create -f test-registry-secret.yaml</code>或者在<code>dashboard</code>中用上述<code>YAML</code>即可创建<code>docker-registry</code>。</p><p>使用命令查看结果</p><pre class="line-numbers language-bash"><code class="language-bash">kubectl get secret -n test-namespace<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">kubectl describe secret test-registry-secret -n test-namespace<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用刚刚创建的docker-registry"><a href="#使用刚刚创建的docker-registry" class="headerlink" title="使用刚刚创建的docker-registry"></a>使用刚刚创建的<code>docker-registry</code></h3><p>如何使用刚刚创建的<code>docker-registry</code>呢？两种方式:</p><ul><li>一种是每次在创建<code>pod</code>或者<code>deployment</code>时指定<code>imagePullSecrets</code>，</li><li>一种是在该<code>namespace</code>的<code>serviceaccount</code>【默认<code>default</code>，如果是别的<code>serviceaccount</code>，需要在创建<code>pod</code>时指定<code>spec.serviceAccount</code>】中指定<code>imagePullSecrets</code>，这样用该<code>serviceaccount</code>创建的<code>pod</code>会自动加上。</li></ul><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">imagePullSecrets</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>registry<span class="token punctuation">-</span>secret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><p>每次创建<code>pod</code>时指定<code>secret</code>，例如</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>baresystem  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>namespace<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>baresystem      <span class="token key atrule">image</span><span class="token punctuation">:</span> hub.test.org.cn/dev<span class="token punctuation">-</span>project/centos6<span class="token punctuation">-</span>bare<span class="token punctuation">-</span>system<span class="token punctuation">:</span>v0      <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080</span>        <span class="token key atrule">hostPort</span><span class="token punctuation">:</span> <span class="token number">30001</span>  <span class="token key atrule">imagePullSecrets</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>registry<span class="token punctuation">-</span>secret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h4><p>以创建<code>namespace</code>时自动创建的<code>serviceaccount default</code>为例，首先查看<code>default</code>的详细情况:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl describe sa test-deri -n test-namespace</span>Name:                test-deriNamespace:           test-namespaceLabels:              <span class="token operator">&lt;</span>none<span class="token operator">></span>Annotations:         <span class="token operator">&lt;</span>none<span class="token operator">></span>Image pull secrets:  <span class="token operator">&lt;</span>none<span class="token operator">></span>Mountable secrets:   test-deri-token-rmxbnTokens:              test-deri-token-rmxbnEvents:              <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到当前的<code>Image pull secrets:  &lt;none&gt;</code>，需要为它指定成刚刚我们创建的<code>secret</code>。使用命令:</p><pre class="line-numbers language-bash"><code class="language-bash">kubectl patch serviceaccount default -p <span class="token string">'{"imagePullSecrets": [{"name": "test-registry-secret"}]}'</span> -n test-namespace<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者使用命令:</p><pre class="line-numbers language-bash"><code class="language-bash">kubectl edit sa default -n test-namespace<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在打开的<code>YAML</code>文件中添加两行，保存退出。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">imagePullSecrets</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>registry<span class="token punctuation">-</span>secret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后再次查看<code>default</code>的详细情况，可以看到<code>Image pull secrets:  test-registry-secret</code>.</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl describe sa default -n test-namespace</span>Name:                defaultNamespace:           test-namespaceLabels:              <span class="token operator">&lt;</span>none<span class="token operator">></span>Annotations:         <span class="token operator">&lt;</span>none<span class="token operator">></span>Image pull secrets:  test-registry-secretMountable secrets:   default-token-5fcn5Tokens:              default-token-5fcn5Events:              <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来在<code>test-namespace</code>命名空间下用<code>default</code>这个<code>serviceaccount</code>创建的任何<code>pods</code>容器，都会自动在<code>pod</code>定义中附加上下面这样的密钥认证信息了。</p><p>最后测试一下吧。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
          <category> harbor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> harbor </tag>
            
            <tag> docker-registry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s资源限制【针对namespace、pod、Container】</title>
      <link href="/2019/11/07/k8s-zi-yuan-xian-zhi-zhen-dui-namespace-pod-container/"/>
      <url>/2019/11/07/k8s-zi-yuan-xian-zhi-zhen-dui-namespace-pod-container/</url>
      
        <content type="html"><![CDATA[<h3 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h3><p>K8s中对资源的限制分以下情况：</p><ul><li>对<code>namespace</code>中容器、<code>pod</code>等使用<font color="green"><strong>总和</strong></font>限制<pre><code>ResourceQuota</code></pre></li><li>对<code>namespace</code>中容器、<code>pod</code>等使用<font color="yellow"><strong>单独</strong></font>限制：<pre><code>LimitRange</code></pre></li></ul><h3 id="创建一个namespace用于测试"><a href="#创建一个namespace用于测试" class="headerlink" title="创建一个namespace用于测试"></a>创建一个<code>namespace</code>用于测试</h3><pre><code>kubectl create namespace quota-mem-cpu-example</code></pre><h3 id="创建一个ResourceQuota"><a href="#创建一个ResourceQuota" class="headerlink" title="创建一个ResourceQuota"></a>创建一个<code>ResourceQuota</code></h3><p>创建一个<code>ResourceQuota</code>对<code>namespace</code>中资源使用总和做限制，创建<code>quota-mem-cpu.yaml</code></p><blockquote><h4 id="资源配额的类型"><a href="#资源配额的类型" class="headerlink" title="资源配额的类型"></a>资源配额的类型</h4><ol><li>计算资源，包括<code>cpu</code>和<code>memory</code><blockquote><ul><li><code>cpu</code>, <code>limits.cpu</code>, <code>requests.cpu</code></li><li><code>memory</code>, <code>limits.memory</code>, <code>requests.memory</code></li></ul></blockquote></li><li>存储资源，包括存储资源的总量以及指定<code>storage class</code>的总量<blockquote><ul><li><code>requests.storage</code>：存储资源总量，如<code>500Gi</code></li><li><code>persistentvolumeclaims</code>：<code>pvc</code>的个数</li><li><code>storageclass.storage.k8s.io/requests.storage</code></li><li><code>storageclass.storage.k8s.io/persistentvolumeclaims</code></li></ul></blockquote></li><li>对象数，即可创建的对象的个数<blockquote><ul><li><code>pods</code>, <code>replicationcontrollers</code>, <code>configmaps</code>, <code>secrets</code></li><li><code>resourcequotas</code>, <code>persistentvolumeclaims</code></li><li><code>services</code>, <code>services.loadbalancers</code>, <code>services.nodeports</code></li></ul></blockquote></li></ol></blockquote><h4 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h4><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ResourceQuota<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> object<span class="token punctuation">-</span>counts<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">hard</span><span class="token punctuation">:</span>    <span class="token key atrule">pods</span><span class="token punctuation">:</span> <span class="token string">"4"</span>    <span class="token key atrule">configmaps</span><span class="token punctuation">:</span> <span class="token string">"10"</span>    <span class="token key atrule">persistentvolumeclaims</span><span class="token punctuation">:</span> <span class="token string">"4"</span>    <span class="token key atrule">replicationcontrollers</span><span class="token punctuation">:</span> <span class="token string">"20"</span>    <span class="token key atrule">secrets</span><span class="token punctuation">:</span> <span class="token string">"10"</span>    <span class="token key atrule">services</span><span class="token punctuation">:</span> <span class="token string">"10"</span>    <span class="token key atrule">services.loadbalancers</span><span class="token punctuation">:</span> <span class="token string">"2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h4><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ResourceQuota<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mem<span class="token punctuation">-</span>cpu<span class="token punctuation">-</span>demo<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">hard</span><span class="token punctuation">:</span>    <span class="token key atrule">requests.cpu</span><span class="token punctuation">:</span> <span class="token string">"1"</span>    <span class="token key atrule">requests.memory</span><span class="token punctuation">:</span> 1Gi    <span class="token key atrule">limits.cpu</span><span class="token punctuation">:</span> <span class="token string">"2"</span>    <span class="token key atrule">limits.memory</span><span class="token punctuation">:</span> 2Gi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">kubectl create -f quota-mem-cpu.yaml --namespace<span class="token operator">=</span>quota-mem-cpu-example<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看-ResourceQuota-详情："><a href="#查看-ResourceQuota-详情：" class="headerlink" title="查看 ResourceQuota 详情："></a>查看 <code>ResourceQuota</code> 详情：</h4><pre class="line-numbers language-bash"><code class="language-bash">kubectl get resourcequota mem-cpu-demo --namespace<span class="token operator">=</span>quota-mem-cpu-example --output<span class="token operator">=</span>yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>ResourceQuota</code> 在 <code>quota-mem-cpu-example</code> 命名空间中设置了如下要求：</p><ul><li>每个容器必须有内存请求和限制，以及 <code>CPU</code> 请求和限制。</li><li>所有容器的内存请求总和不能超过<code>1 GiB</code>。</li><li>所有容器的内存限制总和不能超过<code>2 GiB</code>。</li><li>所有容器的 <code>CPU</code> 请求总和不能超过<code>1 cpu</code>。</li><li>所有容器的 <code>CPU</code> 限制总和不能超过<code>2 cpu</code>。</li></ul></blockquote><h3 id="创建一个LimitRange"><a href="#创建一个LimitRange" class="headerlink" title="创建一个LimitRange"></a>创建一个<code>LimitRange</code></h3><p>创建一个<code>LimitRange</code>，对<code>namespace</code>中<code>pod</code>、容器设置单独的默认限制  </p><p>创建<code>limits.yaml</code></p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> LimitRange<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mem<span class="token punctuation">-</span>limit<span class="token punctuation">-</span>range<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">limits</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">default</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># default limit</span>      <span class="token key atrule">memory</span><span class="token punctuation">:</span> 512Mi      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token key atrule">defaultRequest</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># default request</span>      <span class="token key atrule">memory</span><span class="token punctuation">:</span> 256Mi      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token number">0.5</span>    <span class="token key atrule">max</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># max limit</span>      <span class="token key atrule">memory</span><span class="token punctuation">:</span> 800Mi      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token number">3</span>    <span class="token key atrule">min</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># min request</span>      <span class="token key atrule">memory</span><span class="token punctuation">:</span> 100Mi      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token number">0.3</span>    <span class="token key atrule">maxLimitRequestRatio</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># max value for limit / request</span>      <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token number">2</span>      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> Container <span class="token comment" spellcheck="true"># limit type, support: Container / Pod / PersistentVolumeClaim</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">kubectl create -f limits.yaml --namespace<span class="token operator">=</span>limit-example<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看一下在该  <code>Namespace</code> 中被强加的限制 </p><pre class="line-numbers language-bash"><code class="language-bash">kubectl describe limits mylimits --namespace<span class="token operator">=</span>limit-example<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><h4 id="CPU和内存的单位"><a href="#CPU和内存的单位" class="headerlink" title="CPU和内存的单位"></a><code>CPU</code>和内存的单位</h4><ul><li><code>CPU</code>的测量单位是<code>cpus</code>，允许分数值。你可以使用前缀<code>m</code>来表示<code>mili</code>（千分之一）。例如<code>100mcpu</code>就是<code>100 milicpu</code>，等价于<code>0.1CPU</code>。</li><li>内存的测量单位是字节。你可以使用纯整数来表示内存，也可以使用一些前缀：<code>E</code>, <code>P</code>, <code>T</code>, <code>G</code>, <code>M</code>, <code>K</code>, <code>Ei</code>, <code>Pi</code>, <code>Ti</code>, <code>Gi</code>, <code>Mi</code>, <code>Ki</code>.</li></ul></blockquote><h3 id="创建pod时，指定资源限制"><a href="#创建pod时，指定资源限制" class="headerlink" title="创建pod时，指定资源限制"></a>创建<code>pod</code>时，指定资源限制</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> quota<span class="token punctuation">-</span>mem<span class="token punctuation">-</span>cpu<span class="token punctuation">-</span>demo<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> quota<span class="token punctuation">-</span>mem<span class="token punctuation">-</span>cpu<span class="token punctuation">-</span>demo<span class="token punctuation">-</span>ctr    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token key atrule">limits</span><span class="token punctuation">:</span>        <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">"800Mi"</span>        <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">"800m"</span>       <span class="token key atrule">requests</span><span class="token punctuation">:</span>        <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">"600Mi"</span>        <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">"400m"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> pod </tag>
            
            <tag> 资源限制 </tag>
            
            <tag> namespace </tag>
            
            <tag> Container </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s权限使用【ServiceAccount、Role、RoleBinding使用】</title>
      <link href="/2019/11/07/k8s-quan-xian-shi-yong-serviceaccount-role-rolebinding-shi-yong/"/>
      <url>/2019/11/07/k8s-quan-xian-shi-yong-serviceaccount-role-rolebinding-shi-yong/</url>
      
        <content type="html"><![CDATA[<blockquote><p><font color="red"><strong>需求</strong></font>：需要为每个项目组在K8s集群中创建不同的<code>namespace</code>，然后为这个<code>namespace</code>创建单独的<code>ServiceAccount</code>，这个<code>ServiceAccount</code>需要拥有这个<code>namespace</code>的完全控制权。以下均通过<code>YAML</code>文件的方式创建。</p></blockquote><h3 id="创建namespace"><a href="#创建namespace" class="headerlink" title="创建namespace"></a>创建<code>namespace</code></h3><p>打个标签，代表是测试用的</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Namespace<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>deri  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建ServiceAccount"><a href="#创建ServiceAccount" class="headerlink" title="创建ServiceAccount"></a>创建<code>ServiceAccount</code></h3><p>注意指定<code>namespace</code></p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>deri  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>deri<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建role"><a href="#创建role" class="headerlink" title="创建role"></a>创建<code>role</code></h3><p>创建<code>role</code>，两种方式:</p><ul><li>第一种，需要依次指定<code>apiGroups</code>、<code>resources</code>和<code>verbs</code>，便于权限的细粒度控制，</li><li>第二种通过通用符 <code>*</code> 设置所有权限，非常方便。</li></ul><h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Role<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1beta1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>deri  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>reader<span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># The API group "" indicates the core API Group.</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> configmaps    <span class="token punctuation">-</span> secrets    <span class="token punctuation">-</span> nodes    <span class="token punctuation">-</span> nodes/metrics    <span class="token punctuation">-</span> nodes/stats    <span class="token punctuation">-</span> nodes/log    <span class="token punctuation">-</span> nodes/spec    <span class="token punctuation">-</span> nodes/proxy    <span class="token punctuation">-</span> pods    <span class="token punctuation">-</span> services    <span class="token punctuation">-</span> resourcequotas    <span class="token punctuation">-</span> replicationcontrollers    <span class="token punctuation">-</span> limitranges    <span class="token punctuation">-</span> persistentvolumeclaims    <span class="token punctuation">-</span> persistentvolumes    <span class="token punctuation">-</span> namespaces    <span class="token punctuation">-</span> endpoints    <span class="token punctuation">-</span> proxy    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> list    <span class="token punctuation">-</span> watch    <span class="token punctuation">-</span> get  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> extensions    <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> daemonsets    <span class="token punctuation">-</span> deployments    <span class="token punctuation">-</span> replicasets    <span class="token punctuation">-</span> ingresses    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> list    <span class="token punctuation">-</span> watch  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> apps    <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> statefulsets    <span class="token punctuation">-</span> daemonsets    <span class="token punctuation">-</span> deployments    <span class="token punctuation">-</span> replicasets    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> list    <span class="token punctuation">-</span> watch  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> batch    <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> cronjobs    <span class="token punctuation">-</span> jobs    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> list    <span class="token punctuation">-</span> watch  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> autoscaling    <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> horizontalpodautoscalers    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> list    <span class="token punctuation">-</span> watch  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> authentication.k8s.io    <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> tokenreviews    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> create  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> authorization.k8s.io    <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> subjectaccessreviews    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> create    <span class="token key atrule">nonResourceURLs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h4><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Role<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1beta1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>deri  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>reader<span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">'*'</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">'*'</span>    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">'*'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建RoleBinding"><a href="#创建RoleBinding" class="headerlink" title="创建RoleBinding"></a>创建<code>RoleBinding</code></h3><p>将创建的<code>role</code>和<code>serviceaccount</code>绑定</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># This role binding allows "test-deri" to read pods in the namespace "test-deri"</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> RoleBinding<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1beta1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> read<span class="token punctuation">-</span>pods  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>deri<span class="token key atrule">subjects</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount <span class="token comment" spellcheck="true"># May be "User", "Group" or "ServiceAccount"</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>deri<span class="token key atrule">roleRef</span><span class="token punctuation">:</span>  <span class="token key atrule">kind</span><span class="token punctuation">:</span> Role  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>reader  <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看token"><a href="#查看token" class="headerlink" title="查看token"></a>查看<code>token</code></h3><p>查看创建<code>ServiceAccount</code>时自动创建的<code>Secret Token</code>，查看<code>ServiceAccount</code>名称开头的<code>token</code></p><pre class="line-numbers language-bash"><code class="language-bash">kubectl get secret -n test-deri<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">kubectl describe secret test-deri-token-xxxxx -n test-deri<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用该<code>token</code>登录<code>dashboard</code>，可以查看、使用刚刚创建的<code>namespace</code>,但是没有权限访问别的<code>namespace</code>,这样就做到了权限控制。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> 权限 </tag>
            
            <tag> ServiceAccount </tag>
            
            <tag> Role </tag>
            
            <tag> RoleBinding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>keepalived+haproxy实现双机热备</title>
      <link href="/2019/10/29/keepalived-haproxy-shi-xian-shuang-ji-re-bei/"/>
      <url>/2019/10/29/keepalived-haproxy-shi-xian-shuang-ji-re-bei/</url>
      
        <content type="html"><![CDATA[<h3 id="安装haproxy"><a href="#安装haproxy" class="headerlink" title="安装haproxy"></a>安装<code>haproxy</code></h3><p>参考<a href="">Haproxy安装使用</a></p><h3 id="安装keepalived"><a href="#安装keepalived" class="headerlink" title="安装keepalived"></a>安装<code>keepalived</code></h3><pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> keepalived -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改keepalived配置文件"><a href="#修改keepalived配置文件" class="headerlink" title="修改keepalived配置文件"></a>修改<code>keepalived</code>配置文件</h3><p>默认配置文件目录：<code>/etc/keepalived/keepalived.conf</code></p><pre><code>global_defs {   router_id consul1    #虚拟路由名称}vrrp_script chk_haproxy {    script "killall -0 haproxy"     #使用killall -0检查haproxy实例是否存在，性能高于ps命令    interval 2    #脚本运行周期    timeout 2    #每次检查的加权权重值    fall 3}vrrp_instance haproxy {    state MASTER     #本机实例状态，MASTER/BACKUP，备机配置文件中请写BACKUP    interface ens33    #本机网卡名称，使用ifconfig命令查看    virtual_router_id 51    #虚拟路由编号，主备机保持一致    priority 100    #本机初始权重，备机请填写小于主机的值（例如100）    advert_int 1        #争抢虚地址的周期，秒    authentication {        auth_type PASS        auth_pass 1111    }    virtual_ipaddress {        192.168.41.150    #虚地址IP，主备机保持一致    }    track_script {        chk_haproxy        #对应的健康检查配置    }}</code></pre><h3 id="启动keepalived服务"><a href="#启动keepalived服务" class="headerlink" title="启动keepalived服务"></a>启动<code>keepalived</code>服务</h3><p>主备机配置完成后，均启动<code>keepalived</code>服务</p><pre><code>systemctl  start keepalived.service</code></pre><h3 id="检查主备机网卡上是否有VIP"><a href="#检查主备机网卡上是否有VIP" class="headerlink" title="检查主备机网卡上是否有VIP"></a>检查主备机网卡上是否有<code>VIP</code></h3><p>执行命令：<code>ip addr sh ens33</code></p><pre><code>2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000    link/ether 00:0c:29:e8:3f:ba brd ff:ff:ff:ff:ff:ff    inet 192.168.41.129/24 brd 192.168.41.255 scope global noprefixroute ens33       valid_lft forever preferred_lft forever    inet 192.168.41.150/32 scope global ens33       valid_lft forever preferred_lft forever    inet6 fe80::999f:e60:1951:9d4d/64 scope link tentative noprefixroute dadfailed        valid_lft forever preferred_lft forever    inet6 fe80::d5e3:a2fa:a42:31d3/64 scope link noprefixroute        valid_lft forever preferred_lft forever</code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul><li><p>停止<code>haproxy</code>服务，查看<code>VIP</code>是否转移</p><pre><code>systemctl  stop haproxy.service</code></pre></li><li><p>停止<code>keepalived</code>服务，查看<code>VIP</code>是否转移</p><pre><code>systemctl  stop keepalived.service</code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> keepalived </category>
          
          <category> haproxy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> haproxy </tag>
            
            <tag> keepalived </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Haproxy安装使用</title>
      <link href="/2019/10/29/haproxy-an-zhuang-shi-yong/"/>
      <url>/2019/10/29/haproxy-an-zhuang-shi-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h3><pre class="line-numbers language-bash"><code class="language-bash">yum update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> haproxy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改haproxy配置文件"><a href="#修改haproxy配置文件" class="headerlink" title="修改haproxy配置文件"></a>修改haproxy配置文件</h3><p>默认目录：<code>/etc/haproxy/haproxy.cfg</code>，下面是一些参考配置</p><pre><code>#---------------------------------------------------------------------# Global settings    #---------------------------------------------------------------------global    #全局配置文件    log         127.0.0.1 local2        #日志配置，所有的日志都记录本地，通过local2输出    maxconn         20000    ulimit-n    16384    #chroot      /var/lib/haproxy        #改变haproxy的工作目录    #pidfile     /var/run/haproxy.pid    #指定pid文件的路径    maxconn     4000                    #最大连接数的设定    #user        haproxy                 #指定运行服务的用户    #group       haproxy                 #指定运行服务的用户组    daemon#---------------------------------------------------------------------# common defaults that all the 'listen' and 'backend' sections will# use if not designated in their block#---------------------------------------------------------------------defaults    mode                    http                  #默认使用协议,可以为{http|tcp|health} http:是七层协议 tcp:是四层 health：只返回OK    log                     global                #全局日志记录    option                  httplog               #详细记录http日志    option                  dontlognull           #不记录空日志    option http-server-close                      #启用http-server-close    option forwardfor       except 127.0.0.0/8    #来自这些信息的都不forwardfor    option                  redispatch            #重新分发，ServerID对应的服务器宕机后，强制定向到其他运行正常的服务器    retries                 3                      #3次连接失败则认为服务不可用    timeout http-request    10s                    #默认http请求超时时间    timeout queue           1m                     #默认队列超时时间    timeout connect         10s                    #默认连接超时时间    timeout client          1m                     #默认客户端超时时间    timeout server          1m                     #默认服务器超时时间    timeout http-keep-alive 10s                    #默认持久连接超时时间    timeout check           10s                    #默认检查时间间隔    maxconn                 3000                   #最大连接数######## 监控界面配置 #################listen admin_status        # 监控界面访问信息        bind 0.0.0.0:8888        mode http        #自动刷新时间        stats refresh 30s        # URI相对地址        stats uri /        # 统计报告格式        # stats realm Global\ statistics        stats realm welcome login\ Haproxy        # 登录账户信息        stats auth admin:123456        #用来隐藏统计页面上HAProxy 的版本信息        stats hide-version        #通过设置此选项，可以在监控页面上手工启用或禁用后端真实服务器        stats admin if TRUE        ########frontend配置###################### mysql负载均衡配置 ###############listen mysql        bind 0.0.0.0:3306        mode tcp        # 负载均衡算法        # static-rr 权重, leastconn 最少连接, source 请求IP, 轮询 roundrobin        balance roundrobin        # 日志格式        # option tcplog        # 在 mysql 创建一个没有权限的haproxy用户，密码为空。 haproxy用户        # create user 'haproxy'@'%' identified by ''; FLUSH PRIVILEGES;        # option mysql-check user haproxy         # 这里是容器中的IP地址，由于配置的是轮询roundrobin，weight 权重其实没有生效        server mysql_1 192.168.41.129:3306 check weight 1 maxconn 2000        server mysql_2 192.168.41.130:3306 check weight 1 maxconn 2000        server mysql_3 192.168.41.131:3306 check weight 1 maxconn 2000        # 使用keepalive检测死链        # option tcpka#################################################test1配置################## listen test1#         bind 0.0.0.0:8008#         mode tcp#         balance roundrobin#         server s1 127.0.0.1:8010 weight 1 maxconn 10000 check inter 10s#         server s2 127.0.0.1:8011 weight 1 maxconn 10000 check inter 10s#         server s3 127.0.0.1:8012 weight 1 maxconn 10000 check inter 10s########test2配置################## listen test2#         bind 0.0.0.0:8007#         mode tcp#         balance roundrobin#         server s1 192.168.1.88:8010 weight 1 maxconn 10000 check inter 10s</code></pre><h3 id="修改ulimit配置"><a href="#修改ulimit配置" class="headerlink" title="修改ulimit配置"></a>修改ulimit配置</h3><p><code>haproxy</code>要求<code>ulimit</code><font color="red">大于（<code>maxconn</code>*2 + 15 ）</font></p><pre><code>#临时修改ulimit -n 65536#永久修改，需要修改/etc/security/limits.conf配置文件，文末增加以下内容，然后重新登录就可以生效* soft nofile 65536* hard nofile 65536* soft nproc 65565* hard nproc 65565</code></pre><h3 id="启动服务并配置自启动"><a href="#启动服务并配置自启动" class="headerlink" title="启动服务并配置自启动"></a>启动服务并配置自启动</h3><p>启动后访问<code>8888</code>端口，使用<code>admin/123456</code>登录就可以看到<code>UI</code>界面了。</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl start haproxysystemctl <span class="token function">enable</span> haproxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> haproxy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> haproxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot通过注解实现Restful接口权限控制</title>
      <link href="/2019/10/29/spring-boot-tong-guo-zhu-jie-shi-xian-restful-jie-kou-quan-xian-kong-zhi/"/>
      <url>/2019/10/29/spring-boot-tong-guo-zhu-jie-shi-xian-restful-jie-kou-quan-xian-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="创建一个注解AuthToken"><a href="#创建一个注解AuthToken" class="headerlink" title="创建一个注解AuthToken"></a>创建一个注解<code>AuthToken</code></h3><p>所有使用这个注解的方法，均要通过权限验证才能访问。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">AuthToken</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 是否只能管理员权限才能访问,默认所有用户都可以访问     */</span>    <span class="token keyword">boolean</span> <span class="token function">admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建一个拦截器AuthInterceptor"><a href="#创建一个拦截器AuthInterceptor" class="headerlink" title="创建一个拦截器AuthInterceptor"></a>创建一个拦截器<code>AuthInterceptor</code></h3><p>所有请求都通过拦截器</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthInterceptor</span> <span class="token keyword">extends</span> <span class="token class-name">HandlerInterceptorAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">HandlerMethod</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        HandlerMethod handlerMethod <span class="token operator">=</span> <span class="token punctuation">(</span>HandlerMethod<span class="token punctuation">)</span> handler<span class="token punctuation">;</span>        Method method <span class="token operator">=</span> handlerMethod<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AuthToken authToken <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>AuthToken<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//需要验证的Method</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>authToken <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> isAdmin <span class="token operator">=</span> authToken<span class="token punctuation">.</span><span class="token function">admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//todo</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//无需验证</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注册拦截器"><a href="#注册拦截器" class="headerlink" title="注册拦截器"></a>注册拦截器</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthConfigurer</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token function">AuthInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> AuthInterceptor <span class="token function">AuthInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AuthInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在controller方法上添加注解"><a href="#在controller方法上添加注解" class="headerlink" title="在controller方法上添加注解"></a>在<code>controller</code>方法上添加注解</h3><pre class="line-numbers language-java"><code class="language-java">#需要管理员权限才能访问的<span class="token annotation punctuation">@AuthToken</span><span class="token punctuation">(</span>admin <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>#普通用户和管理员都能访问的<span class="token annotation punctuation">@AuthToken</span>#不加注解是所有人都可以访问的，不安全<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot </tag>
            
            <tag> 注解 </tag>
            
            <tag> 接口权限 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>私有镜像仓库Harbor-v1.5.0搭建与使用</title>
      <link href="/2019/10/25/si-you-jing-xiang-cang-ku-harbor-v1-5-0-da-jian-yu-shi-yong/"/>
      <url>/2019/10/25/si-you-jing-xiang-cang-ku-harbor-v1-5-0-da-jian-yu-shi-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ol><li>安装<code>docker-ce</code>（过程省略）</li><li>安装<code>docker-compose</code>（过程省略）</li><li>安装<code>harbor</code></li></ol><h3 id="下载Harbor离线安装包"><a href="#下载Harbor离线安装包" class="headerlink" title="下载Harbor离线安装包"></a>下载Harbor离线安装包</h3><ol><li>下载地址：<code>http://harbor.orientsoft.cn/</code>，找个最新的，本文使用<code>v1.5.0</code>版本</li><li>使用 <code>tar xvf harbor-offline-installer-v1.5.0.tgz</code></li><li>进入到解压后的目录，<code>harbor/</code></li></ol><h3 id="配置harbor-cfg【关键配置】"><a href="#配置harbor-cfg【关键配置】" class="headerlink" title="配置harbor.cfg【关键配置】"></a>配置<code>harbor.cfg</code><font color="red">【关键配置】</font></h3><pre><code>#hostname设置访问地址，可以使用ip、域名，不可以设置为127.0.0.1或localhosthostname = harbor.deri.com# 访问协议，默认是http，也可以设置https，如果设置https，则nginx ssl需要设置onui_url_protocol = http#配置admin用户的密码，默认Harbor12345harbor_admin_password = Harbor12345#是否只允许admin用户创建项目，everyone是所有人都可以project_creation_restriction = adminonly# 是否开启自注册self_registration = on# Token有效时间，默认30分钟token_expiration = 30</code></pre><h3 id="配置docker-compose-yml"><a href="#配置docker-compose-yml" class="headerlink" title="配置docker-compose.yml"></a>配置<code>docker-compose.yml</code></h3><p>如果需要修改访问端口，默认<code>80</code>，<code>443</code>，也可以不修改.</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">##此处粘贴部分配置  </span>  <span class="token key atrule">proxy</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> vmware/nginx<span class="token punctuation">-</span>photon<span class="token punctuation">:</span>v1.5.0    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./common/config/nginx<span class="token punctuation">:</span>/etc/nginx<span class="token punctuation">:</span>z    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> harbor    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token datetime number">80:80</span>      <span class="token punctuation">-</span> 443<span class="token punctuation">:</span><span class="token number">443</span>      <span class="token punctuation">-</span> 4443<span class="token punctuation">:</span><span class="token number">4443</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> mysql      <span class="token punctuation">-</span> registry      <span class="token punctuation">-</span> ui      <span class="token punctuation">-</span> log    <span class="token key atrule">logging</span><span class="token punctuation">:</span>      <span class="token key atrule">driver</span><span class="token punctuation">:</span> <span class="token string">"syslog"</span>      <span class="token key atrule">options</span><span class="token punctuation">:</span>          <span class="token key atrule">syslog-address</span><span class="token punctuation">:</span> <span class="token string">"tcp://127.0.0.1:1514"</span>        <span class="token key atrule">tag</span><span class="token punctuation">:</span> <span class="token string">"proxy"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动harbor"><a href="#启动harbor" class="headerlink" title="启动harbor"></a>启动<code>harbor</code></h3><p>到<code>harbor/</code>目录下，执行<code>./install.sh</code>，<code>harbor</code>会根据当前目录下<code>docker-compose.yml</code>配置，下载相关镜像，并启动。</p><h3 id="配置本地hosts文件"><a href="#配置本地hosts文件" class="headerlink" title="配置本地hosts文件"></a>配置本地<code>hosts</code>文件</h3><p>配置<code>hosts</code>文件，增加部署机器的 <code>IP</code> 和 域名【域名是<code>harbor.cfg</code>中的<code>hostname</code>】</p><pre><code>Windows: C:\Windows\System32\drivers\etc\hosts Linux: /etc/hosts</code></pre><h3 id="访问Harbor"><a href="#访问Harbor" class="headerlink" title="访问Harbor"></a>访问<code>Harbor</code></h3><p>浏览器输入<code>hostname</code>，用户名密码：<code>admin/Harbor12345</code></p><p><img src="/images/harbor1.jpg" alt="Harbor首页"></p><h3 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h3><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><p><em>注意选择访问级别</em><br><img src="/images/harbor2.jpg" alt="Harbor创建项目"></p><h4 id="使用docker-login登录到私有仓库"><a href="#使用docker-login登录到私有仓库" class="headerlink" title="使用docker login登录到私有仓库"></a>使用<code>docker login</code>登录到私有仓库</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@node4 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker login harbor.deri.com</span>Username: adminPassword: WARNING<span class="token operator">!</span> Your password will be stored unencrypted <span class="token keyword">in</span> /root/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/<span class="token comment" spellcheck="true">#credentials-store</span>Login Succeeded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><font color="red"><strong>这里有个问题</strong></font></p><p>执行上面的一步肯定会报错：<code>Error response from daemon: Get https://harbor.deri.com/v2/users/: dial tcp 192.168.41.139:443: getsockopt: connection refused</code>，原因是<code>docker</code>认为这个仓库不可信，需要在<code>/etc/docker/daemon.json</code>（<font color="red">不存在就新建</font>）增加<code>insecure-registries</code>配置，注意是标准的json格式！</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"insecure-registries"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"harbor.deri.com"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后重启docker服务</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重启harbor服务</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#到harbor/目录下执行</span>docker-compose down -vdocker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h4 id="本地随便找个镜像"><a href="#本地随便找个镜像" class="headerlink" title="本地随便找个镜像"></a>本地随便找个镜像</h4><p>修改其<code>tag</code>，如</p><pre class="line-numbers language-bash"><code class="language-bash">docker tag hub.c.163.com/library/mysql:5.7 harbor.deri.com/deri/mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color="red"><strong>注意<code>tag</code>格式：<code>域名</code>/<code>项目名</code>/<code>镜像名</code>:<code>版本</code></strong></font></p><h4 id="上传镜像-1"><a href="#上传镜像-1" class="headerlink" title="上传镜像"></a>上传镜像</h4><pre class="line-numbers language-bash"><code class="language-bash">docker push harbor.deri.com/deri/mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="登录UI查看"><a href="#登录UI查看" class="headerlink" title="登录UI查看"></a>登录<code>UI</code>查看</h4><p><img src="/images/harbor3.jpg" alt="harbor镜像仓库"></p><h4 id="从私有镜像仓库拉取镜像"><a href="#从私有镜像仓库拉取镜像" class="headerlink" title="从私有镜像仓库拉取镜像"></a>从私有镜像仓库拉取镜像</h4><pre class="line-numbers language-bash"><code class="language-bash">docker pull harbor.deri.com/deri/mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h4><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">logout</span> harbor.deri.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用结束！接下来创建项目、用户了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> harbor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> harbor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubernetes集群发布外部服务【mysql、redis并测试】</title>
      <link href="/2019/10/21/kubernetes-ji-qun-fa-bu-wai-bu-fu-wu-mysql-redis-bing-ce-shi/"/>
      <url>/2019/10/21/kubernetes-ji-qun-fa-bu-wai-bu-fu-wu-mysql-redis-bing-ce-shi/</url>
      
        <content type="html"><![CDATA[<p>有时候我们需要将<code>k8s</code>集群外的服务引入到集群内部来，便于集群内部服务调用，我可以使用<code>Endpoints</code>.</p><h3 id="引入外部myql"><a href="#引入外部myql" class="headerlink" title="引入外部myql"></a>引入外部<code>myql</code></h3><h4 id="编写k8s-mysql-endpoints-yaml"><a href="#编写k8s-mysql-endpoints-yaml" class="headerlink" title="编写k8s-mysql-endpoints.yaml"></a>编写<code>k8s-mysql-endpoints.yaml</code></h4><p>为外部<code>Mysql</code>创建<code>Endpoints</code></p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Endpoints<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">subsets</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">addresses</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">ip</span><span class="token punctuation">:</span> 192.168.1.11    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">20030</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>可以使用命令<code>kubectl get endpoints</code>查看是否创建完成</li><li><code>kubectl describe  endpoints mysql</code> 查看具体描述</li></ol><h4 id="编写k8s-mysql-service-yaml"><a href="#编写k8s-mysql-service-yaml" class="headerlink" title="编写k8s-mysql-service.yaml"></a>编写<code>k8s-mysql-service.yaml</code></h4><p>编写<code>k8s-mysql-service.yaml</code>，为<code>endpoints</code>发布成内部<code>pod</code>可以调用的服务</p><blockquote><p>注意<code>metadata.name</code>与<code>k8s-mysql-endpoints.yaml</code>中<code>metadata.name</code>保持一致，此处均为<code>mysql</code>.</p></blockquote><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">20030</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>可以使用命令 <code>kubectl get svc</code> 查看是否服务创建完成</li><li><code>kubectl describe  svc mysql</code> 查看具体服务描述</li></ol><h4 id="测试endpoints是否生效"><a href="#测试endpoints是否生效" class="headerlink" title="测试endpoints是否生效"></a>测试endpoints是否生效</h4><p>为了方便测试<code>endpoints</code>是否生效，我们修改上述的<code>k8s-mysql-service.yaml</code>配置 </p><blockquote><ol><li>我们将<code>type</code>类型改为<code>NodePort</code>，这样可以设定宿主机上的映射端口号<code>nodePort：30030</code>，这样直接通过宿主机<code>IP:30030</code>就可以调用到<code>mysql</code>服务。</li><li>注意删除了创建好的<code>service</code>，对应的<code>endpoints</code>也会删除掉，需要重新创建！测试的时候注意！</li></ol></blockquote><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">20030</span>    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">20030</span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP    <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">30030</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用Navicat测试"><a href="#使用Navicat测试" class="headerlink" title="使用Navicat测试"></a>使用<code>Navicat</code>测试</h4><p>使用<code>Navicat</code>测试，输入宿主机<code>IP</code>和端口<code>30030</code>（用户名密码还是外部数据库原本的用户名密码），测试连接！成功！证明了通过<code>Endpoints</code>机制可以将外部服务发布成<code>k8s</code>内部的服务！</p><blockquote><p><strong>发布外部的<code>redis</code>服务也是同理，只需要修改<code>name</code>、<code>port</code>、<code>ip</code>等参数即可！</strong></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> endpoints </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux虚拟机设置固定IP并且可以访问外网配置</title>
      <link href="/2019/09/04/linux-xu-ni-ji-she-zhi-gu-ding-ip-bing-qie-ke-yi-fang-wen-wai-wang-pei-zhi/"/>
      <url>/2019/09/04/linux-xu-ni-ji-she-zhi-gu-ding-ip-bing-qie-ke-yi-fang-wen-wai-wang-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="设置网络模式"><a href="#设置网络模式" class="headerlink" title="设置网络模式"></a>设置网络模式</h3><p><img src="/images/nat.jpg" alt="NAT模式"></p><h3 id="设置固定ip"><a href="#设置固定ip" class="headerlink" title="设置固定ip"></a>设置固定ip</h3><pre><code>#编辑以下文件vi /etc/sysconfig/network-scripts/ifcfg-ens33#修改以下内容,注意属性BOOTPROTO,ONBOOT,IPADDR,NETMASK,GATEWAYTYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=staticDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noIPV6_ADDR_GEN_MODE=stable-privacyNAME=ens33UUID=e27ede3e-740b-4241-adf1-e979fd2788e9DEVICE=ens33ONBOOT=yesIPADDR=192.168.41.128NETMASK=255.255.255.0GATEWAY=192.168.41.2#重启网络service network restart</code></pre><h3 id="设置nameserver"><a href="#设置nameserver" class="headerlink" title="设置nameserver"></a>设置nameserver</h3><pre><code>#编辑/etc/resolv.conf,随便增加一些国内DNS服务器IP，例如：nameserver 114.114.114.114nameserver 119.29.29.29nameserver 114.114.114.114nameserver 223.5.5.5nameserver 8.8.8.8#重启网络服务，注意和上一步重启网络要分开执行，不然本文件内容会因为上一步重启而清空service network restart</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud config 配置文件手动刷新遇到的坑，解决没有/refresh路径问题</title>
      <link href="/2019/07/26/springcloud-config-pei-zhi-wen-jian-shou-dong-shua-xin-yu-dao-de-keng/"/>
      <url>/2019/07/26/springcloud-config-pei-zhi-wen-jian-shou-dong-shua-xin-yu-dao-de-keng/</url>
      
        <content type="html"><![CDATA[<p>在<code>SpringCloud 2.0.0</code>版本以前，只要加入下面依赖:</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><p>并且在类上,变量上打上<code>@RefreshScope</code>的注解,在启动的时候,都会看到</p><pre><code>RequestMappingHandlerMapping : Mapped "{/refresh,methods=[post]}" </code></pre><p>也就是<code>SpringCloud</code>暴露了一个接口 <code>/refresh</code> 来给我们去刷新配置,但是<code>SpringCloud 2.0.0</code>以后,有了改变.<br>我们需要在<code>bootstrap.yml</code>里面加上需要暴露出来的地址  </p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> refresh<span class="token punctuation">,</span>health<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在的地址也不是<code>/refresh</code>了,而是<code>/actuator/refresh</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> spring cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring cloud </tag>
            
            <tag> spring cloud config </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
